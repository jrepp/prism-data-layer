"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[68772],{28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>a});var o=t(96540);const i={},r=o.createContext(i);function s(e){const n=o.useContext(r);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),o.createElement(r.Provider,{value:n},e.children)}},46520:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"memo-009","title":"Topaz Local Authorizer Configuration for Development and Integration Testing","description":"Purpose","source":"@site/../docs-cms/memos/memo-009-topaz-local-authorizer-configuration.md","sourceDirName":".","slug":"/memo-009","permalink":"/prism-data-layer/memos/memo-009","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/memo-009-topaz-local-authorizer-configuration.md","tags":[{"inline":true,"label":"topaz","permalink":"/prism-data-layer/memos/tags/topaz"},{"inline":true,"label":"authorization","permalink":"/prism-data-layer/memos/tags/authorization"},{"inline":true,"label":"development","permalink":"/prism-data-layer/memos/tags/development"},{"inline":true,"label":"testing","permalink":"/prism-data-layer/memos/tags/testing"},{"inline":true,"label":"local-infrastructure","permalink":"/prism-data-layer/memos/tags/local-infrastructure"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-09T00:00:00.000Z","doc_uuid":"da815ecf-06ce-440f-9cfc-435f20747dca","id":"memo-009","project_id":"prism-data-layer","status":"Active","tags":["topaz","authorization","development","testing","local-infrastructure"],"title":"Topaz Local Authorizer Configuration for Development and Integration Testing","updated":"2025-10-11T00:00:00.000Z"},"sidebar":"memosSidebar","previous":{"title":"Vault Token Exchange Flow for Plugin Authentication \u2022 MEMO-008","permalink":"/prism-data-layer/memos/memo-008"},"next":{"title":"POC 1 Edge Case Analysis and Foundation Hardening \u2022 MEMO-010","permalink":"/prism-data-layer/memos/memo-010"}}');var i=t(74848),r=t(28453);const s={author:"Platform Team",created:new Date("2025-10-09T00:00:00.000Z"),doc_uuid:"da815ecf-06ce-440f-9cfc-435f20747dca",id:"memo-009",project_id:"prism-data-layer",status:"Active",tags:["topaz","authorization","development","testing","local-infrastructure"],title:"Topaz Local Authorizer Configuration for Development and Integration Testing",updated:new Date("2025-10-11T00:00:00.000Z")},a="MEMO-009: Topaz Local Authorizer Configuration",l={},c=[{value:"Purpose",id:"purpose",level:2},{value:"Overview",id:"overview",level:2},{value:"Local Infrastructure Layer",id:"local-infrastructure-layer",level:2},{value:"Scenario 1: Development Iteration",id:"scenario-1-development-iteration",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Docker Compose Configuration",id:"docker-compose-configuration",level:3},{value:"Configuration File",id:"configuration-file",level:3},{value:"Seed Data Setup",id:"seed-data-setup",level:3},{value:"Policy Files",id:"policy-files",level:3},{value:"Developer Workflow",id:"developer-workflow",level:3},{value:"Scenario 2: Integration Testing",id:"scenario-2-integration-testing",level:2},{value:"Requirements",id:"requirements-1",level:3},{value:"Test Container Setup",id:"test-container-setup",level:3},{value:"CI/CD Configuration (GitHub Actions)",id:"cicd-configuration-github-actions",level:3},{value:"Test Configuration",id:"test-configuration",level:3},{value:"Performance Characteristics",id:"performance-characteristics",level:2},{value:"Local Development",id:"local-development",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Issue 1: Topaz Container Won&#39;t Start",id:"issue-1-topaz-container-wont-start",level:3},{value:"Issue 2: Bootstrap Script Fails",id:"issue-2-bootstrap-script-fails",level:3},{value:"Issue 3: Authorization Always Denied",id:"issue-3-authorization-always-denied",level:3},{value:"Issue 4: Policy Changes Not Applied",id:"issue-4-policy-changes-not-applied",level:3},{value:"Integration with Pattern SDK",id:"integration-with-pattern-sdk",level:2},{value:"Comparison: Development vs Integration Testing vs Production",id:"comparison-development-vs-integration-testing-vs-production",level:2},{value:"Related Documents",id:"related-documents",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"memo-009-topaz-local-authorizer-configuration",children:"MEMO-009: Topaz Local Authorizer Configuration"})}),"\n",(0,i.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,i.jsx)(n.p,{children:"This memo documents how to configure Topaz as a local authorizer for two critical scenarios:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Development Iteration"}),": Fast, lightweight authorization during local development"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration Testing"}),": Realistic authorization testing in CI/CD pipelines"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Topaz is part of Prism's ",(0,i.jsx)(n.strong,{children:"local infrastructure layer"})," - reusable components that provide production-like services without external dependencies. This follows our ",(0,i.jsx)(n.a,{href:"/adr/adr-004",children:"local-first testing philosophy"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Topaz by Aserto"})," provides local authorization enforcement with:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Embedded directory service (users, groups, resources)"}),"\n",(0,i.jsx)(n.li,{children:"Policy engine (OPA/Rego)"}),"\n",(0,i.jsx)(n.li,{children:"gRPC and REST APIs"}),"\n",(0,i.jsx)(n.li,{children:"In-memory caching for <1ms decisions"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Insight"}),": Topaz runs as a ",(0,i.jsx)(n.strong,{children:"local sidecar"})," - no cloud dependencies, no network latency, fully reproducible."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Local Development Stack                     \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510          \u2502\n\u2502  \u2502 Prism      \u2502\u2500\u2500\u25b6\u2502 Topaz      \u2502   \u2502 Dex        \u2502          \u2502\n\u2502  \u2502 Proxy      \u2502   \u2502 (authz)    \u2502   \u2502 (authn)    \u2502          \u2502\n\u2502  \u2502 :50051     \u2502   \u2502 :8282      \u2502   \u2502 :5556      \u2502          \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518          \u2502\n\u2502         \u2502                \u2502                  \u2502               \u2502\n\u2502         \u2502                \u2502                  \u2502               \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518               \u2502\n\u2502                 All on localhost                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"local-infrastructure-layer",children:"Local Infrastructure Layer"}),"\n",(0,i.jsxs)(n.p,{children:["Topaz is one component of the ",(0,i.jsx)(n.strong,{children:"local infrastructure layer"}),":"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Purpose"}),(0,i.jsx)(n.th,{children:"Port"}),(0,i.jsx)(n.th,{children:"Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Topaz"})}),(0,i.jsx)(n.td,{children:"Authorization (policy engine)"}),(0,i.jsx)(n.td,{children:"8282"}),(0,i.jsx)(n.td,{children:"This memo"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Dex"})}),(0,i.jsx)(n.td,{children:"Authentication (OIDC provider)"}),(0,i.jsx)(n.td,{children:"5556"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/adr/adr-046",children:"ADR-046"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Vault"})}),(0,i.jsx)(n.td,{children:"Secret management"}),(0,i.jsx)(n.td,{children:"8200"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/rfc/rfc-016",children:"RFC-016"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Signoz"})}),(0,i.jsx)(n.td,{children:"Observability"}),(0,i.jsx)(n.td,{children:"3301"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.a,{href:"/adr/adr-048",children:"ADR-048"})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Design principle"}),": Each component can run ",(0,i.jsx)(n.strong,{children:"independently"})," or as part of a composed stack."]}),"\n",(0,i.jsx)(n.h2,{id:"scenario-1-development-iteration",children:"Scenario 1: Development Iteration"}),"\n",(0,i.jsx)(n.h3,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"For local development, we need"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fast startup (<1 second)"}),"\n",(0,i.jsx)(n.li,{children:"No external dependencies"}),"\n",(0,i.jsx)(n.li,{children:"Simple user/group setup"}),"\n",(0,i.jsx)(n.li,{children:"Policy hot-reload (no restart)"}),"\n",(0,i.jsx)(n.li,{children:"Clear error messages"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"docker-compose-configuration",children:"Docker Compose Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.local.yml\nversion: \'3.8\'\n\nservices:\n  topaz:\n    image: ghcr.io/aserto-dev/topaz:0.30.14\n    container_name: prism-topaz-local\n    ports:\n      - "8282:8282"  # gRPC API (authorization)\n      - "8383:8383"  # REST API (directory management)\n      - "8484:8484"  # Console UI (http://localhost:8484)\n    volumes:\n      - ./topaz/config.local.yaml:/config/topaz-config.yaml:ro\n      - ./topaz/policies:/policies:ro\n      - ./topaz/data:/data\n    environment:\n      - TOPAZ_DB_PATH=/data/topaz.db\n      - TOPAZ_POLICY_ROOT=/policies\n      - TOPAZ_LOG_LEVEL=info\n    command: run -c /config/topaz-config.yaml\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost:8383/health"]\n      interval: 5s\n      timeout: 3s\n      retries: 3\n\n  # Optional: Proxy that uses Topaz\n  prism-proxy:\n    build: ./proxy\n    container_name: prism-proxy-local\n    depends_on:\n      topaz:\n        condition: service_healthy\n    environment:\n      - TOPAZ_ENDPOINT=topaz:8282\n      - TOPAZ_ENABLED=true\n      - TOPAZ_FAIL_OPEN=true  # Allow requests if Topaz unavailable (dev mode)\n    ports:\n      - "50051:50051"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"configuration-file",children:"Configuration File"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"topaz/config.local.yaml"})}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Topaz configuration for local development\nversion: 2\n\n# Logging\nlogger:\n  prod: false\n  log_level: info\n\n# API configuration\napi:\n  grpc:\n    listen_address: "0.0.0.0:8282"\n    connection_timeout: 5s\n  rest:\n    listen_address: "0.0.0.0:8383"\n  gateway:\n    listen_address: "0.0.0.0:8484"\n    http: true\n    read_timeout: 5s\n    write_timeout: 5s\n\n# Directory configuration (embedded)\ndirectory:\n  db:\n    type: sqlite\n    path: /data/topaz.db\n  seed_metadata: true\n\n# Policy engine configuration\npolicy:\n  engine: opa\n  policy_root: /policies\n\n# Edge configuration (sync with remote - disabled for local)\nedge:\n  enabled: false  # No cloud sync in local dev\n\n# Decision logging (for debugging)\ndecision_logger:\n  type: self\n  config:\n    store_directory: /data/decisions\n\n# Authorization configuration\nauthorizer:\n  grpc:\n    connection_timeout: 5s\n  needs:\n    - kind: policy\n    - kind: directory\n'})}),"\n",(0,i.jsx)(n.h3,{id:"seed-data-setup",children:"Seed Data Setup"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Topaz Directory Initialization"})," - ",(0,i.jsx)(n.code,{children:"topaz/seed/bootstrap.sh"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'#!/usr/bin/env bash\n# Bootstrap Topaz directory with development users and permissions\n\nset -euo pipefail\n\nTOPAZ_REST="http://localhost:8383"\n\necho "\ud83d\udd10 Bootstrapping Topaz directory..."\n\n# Wait for Topaz to be ready\nuntil curl -s "$TOPAZ_REST/health" > /dev/null; do\n    echo "Waiting for Topaz..."\n    sleep 1\ndone\n\necho "\u2705 Topaz is ready"\n\n# Create users\necho "\ud83d\udc64 Creating users..."\ncurl -X POST "$TOPAZ_REST/api/v2/directory/objects" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n        "object": {\n            "type": "user",\n            "id": "dev@local.prism",\n            "display_name": "Local Developer",\n            "properties": {\n                "email": "dev@local.prism",\n                "roles": ["developer"]\n            }\n        }\n    }\'\n\ncurl -X POST "$TOPAZ_REST/api/v2/directory/objects" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n        "object": {\n            "type": "user",\n            "id": "admin@local.prism",\n            "display_name": "Local Admin",\n            "properties": {\n                "email": "admin@local.prism",\n                "roles": ["admin"]\n            }\n        }\n    }\'\n\n# Create groups\necho "\ud83d\udc65 Creating groups..."\ncurl -X POST "$TOPAZ_REST/api/v2/directory/objects" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n        "object": {\n            "type": "group",\n            "id": "developers",\n            "display_name": "Developers"\n        }\n    }\'\n\ncurl -X POST "$TOPAZ_REST/api/v2/directory/objects" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n        "object": {\n            "type": "group",\n            "id": "admins",\n            "display_name": "Administrators"\n        }\n    }\'\n\n# Add users to groups\necho "\ud83d\udd17 Creating group memberships..."\ncurl -X POST "$TOPAZ_REST/api/v2/directory/relations" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n        "relation": {\n            "object_type": "group",\n            "object_id": "developers",\n            "relation": "member",\n            "subject_type": "user",\n            "subject_id": "dev@local.prism"\n        }\n    }\'\n\ncurl -X POST "$TOPAZ_REST/api/v2/directory/relations" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n        "relation": {\n            "object_type": "group",\n            "object_id": "admins",\n            "relation": "member",\n            "subject_type": "user",\n            "subject_id": "admin@local.prism"\n        }\n    }\'\n\n# Create namespaces\necho "\ud83d\udce6 Creating namespaces..."\ncurl -X POST "$TOPAZ_REST/api/v2/directory/objects" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n        "object": {\n            "type": "namespace",\n            "id": "dev-playground",\n            "display_name": "Developer Playground",\n            "properties": {\n                "description": "Sandbox for local development"\n            }\n        }\n    }\'\n\ncurl -X POST "$TOPAZ_REST/api/v2/directory/objects" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n        "object": {\n            "type": "namespace",\n            "id": "test-namespace",\n            "display_name": "Test Namespace",\n            "properties": {\n                "description": "For integration tests"\n            }\n        }\n    }\'\n\n# Grant permissions\necho "\ud83d\udd11 Granting permissions..."\n# Developers \u2192 dev-playground\ncurl -X POST "$TOPAZ_REST/api/v2/directory/relations" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n        "relation": {\n            "object_type": "namespace",\n            "object_id": "dev-playground",\n            "relation": "developer",\n            "subject_type": "group",\n            "subject_id": "developers"\n        }\n    }\'\n\n# Admins \u2192 all namespaces\ncurl -X POST "$TOPAZ_REST/api/v2/directory/relations" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n        "relation": {\n            "object_type": "namespace",\n            "object_id": "dev-playground",\n            "relation": "admin",\n            "subject_type": "group",\n            "subject_id": "admins"\n        }\n    }\'\n\ncurl -X POST "$TOPAZ_REST/api/v2/directory/relations" \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n        "relation": {\n            "object_type": "namespace",\n            "object_id": "test-namespace",\n            "relation": "admin",\n            "subject_type": "group",\n            "subject_id": "admins"\n        }\n    }\'\n\necho "\u2705 Topaz directory bootstrapped successfully!"\necho ""\necho "Test users created:"\necho "  - dev@local.prism (developer role)"\necho "  - admin@local.prism (admin role)"\necho ""\necho "Test namespaces created:"\necho "  - dev-playground (developers can access)"\necho "  - test-namespace (admins can access)"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"policy-files",children:"Policy Files"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"topaz/policies/prism.rego"})})," - Main authorization policy:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rego",children:'package prism.authz\n\nimport future.keywords.contains\nimport future.keywords.if\nimport future.keywords.in\n\n# Default deny\ndefault allow = false\n\n# Allow if user has permission via direct relationship\nallow if {\n    input.permission in ["read", "write", "admin"]\n    has_permission(input.user, input.permission, input.resource)\n}\n\n# Check if user has permission on resource\nhas_permission(user, permission, resource) if {\n    # Parse resource (format: "namespace:dev-playground")\n    [resource_type, resource_id] := split(resource, ":")\n\n    # Query directory for user\'s permissions\n    user_permissions := directory_check(user, resource_type, resource_id)\n\n    # Check if permission is granted\n    permission in user_permissions\n}\n\n# Helper: Query Topaz directory for user permissions\ndirectory_check(user, resource_type, resource_id) = permissions if {\n    # Get user\'s groups\n    user_groups := data.directory.user_groups[user]\n\n    # Collect all permissions from groups\n    permissions := {p |\n        some group in user_groups\n        relation := data.directory.relations[group][resource_type][resource_id]\n        p := permission_from_relation(relation)\n    }\n}\n\n# Map relationship to permission\npermission_from_relation("viewer") = "read"\npermission_from_relation("developer") = "read"\npermission_from_relation("developer") = "write"\npermission_from_relation("admin") = "read"\npermission_from_relation("admin") = "write"\npermission_from_relation("admin") = "admin"\n\n# Development mode: Allow all if explicitly enabled\nallow if {\n    input.mode == "development"\n    input.allow_all == true\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"topaz/policies/namespace_isolation.rego"})})," - Multi-tenancy enforcement:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rego",children:'package prism.authz.namespace\n\nimport future.keywords.if\n\n# Namespace isolation: Users can only access namespaces they have explicit access to\nviolation[msg] if {\n    input.resource_type == "namespace"\n    not has_namespace_access(input.user, input.resource_id)\n    msg := sprintf("User %v does not have access to namespace %v", [input.user, input.resource_id])\n}\n\n# Check if user has access to namespace (via group membership)\nhas_namespace_access(user, namespace_id) if {\n    user_groups := data.directory.user_groups[user]\n    some group in user_groups\n    group_namespaces := data.directory.group_namespaces[group]\n    namespace_id in group_namespaces\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"developer-workflow",children:"Developer Workflow"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Starting Topaz locally"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Start Topaz\ndocker compose -f docker-compose.local.yml up -d topaz\n\n# Wait for startup\ndocker compose -f docker-compose.local.yml logs -f topaz\n\n# Bootstrap directory\nbash topaz/seed/bootstrap.sh\n\n# Verify setup\ncurl http://localhost:8383/api/v2/directory/objects?object_type=user | jq .\n\n# Open console UI\nopen http://localhost:8484\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Testing authorization from command line"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check if dev@local.prism can read dev-playground\ncurl -X POST http://localhost:8282/api/v2/authz/is \\\n    -H "Content-Type: application/json" \\\n    -d \'{\n        "identity_context": {\n            "type": "IDENTITY_TYPE_SUB",\n            "identity": "dev@local.prism"\n        },\n        "resource_context": {\n            "object_type": "namespace",\n            "object_id": "dev-playground"\n        },\n        "policy_context": {\n            "path": "prism.authz",\n            "decisions": ["allowed"]\n        }\n    }\' | jq .\n\n# Expected output:\n# {\n#   "decisions": {\n#     "allowed": true\n#   }\n# }\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Policy hot-reload"})," (no restart required):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Edit policy file\nvi topaz/policies/prism.rego\n\n# Policies are automatically reloaded by Topaz\n# No restart needed!\n\n# Verify policy change\ncurl http://localhost:8383/api/v2/policies | jq .\n"})}),"\n",(0,i.jsx)(n.h2,{id:"scenario-2-integration-testing",children:"Scenario 2: Integration Testing"}),"\n",(0,i.jsx)(n.h3,{id:"requirements-1",children:"Requirements"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"For integration tests, we need"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reproducible setup (same users/permissions every test run)"}),"\n",(0,i.jsx)(n.li,{children:"Fast teardown/reset (clean state between tests)"}),"\n",(0,i.jsx)(n.li,{children:"Parallel test execution (isolated Topaz instances)"}),"\n",(0,i.jsx)(n.li,{children:"CI/CD integration (GitHub Actions)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"test-container-setup",children:"Test Container Setup"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Using testcontainers for Go tests"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// tests/integration/topaz_test.go\npackage integration_test\n\nimport (\n    "context"\n    "testing"\n    "time"\n\n    "github.com/stretchr/testify/assert"\n    "github.com/testcontainers/testcontainers-go"\n    "github.com/testcontainers/testcontainers-go/wait"\n)\n\nfunc TestAuthorizationWithTopaz(t *testing.T) {\n    ctx := context.Background()\n\n    // Start Topaz container\n    topazContainer, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest{\n        ContainerRequest: testcontainers.ContainerRequest{\n            Image:        "ghcr.io/aserto-dev/topaz:0.30.14",\n            ExposedPorts: []string{"8282/tcp", "8383/tcp"},\n            WaitingFor: wait.ForHTTP("/health").\n                WithPort("8383/tcp").\n                WithStartupTimeout(30 * time.Second),\n            Env: map[string]string{\n                "TOPAZ_DB_PATH":     "/tmp/topaz.db",\n                "TOPAZ_POLICY_ROOT": "/policies",\n            },\n            Files: []testcontainers.ContainerFile{\n                {\n                    HostFilePath:      "../../topaz/config.test.yaml",\n                    ContainerFilePath: "/config/topaz-config.yaml",\n                    FileMode:          0644,\n                },\n                {\n                    HostFilePath:      "../../topaz/policies",\n                    ContainerFilePath: "/policies",\n                    FileMode:          0755,\n                },\n            },\n            Cmd: []string{"run", "-c", "/config/topaz-config.yaml"},\n        },\n        Started: true,\n    })\n    assert.NoError(t, err)\n    defer topazContainer.Terminate(ctx)\n\n    // Get Topaz endpoint\n    host, _ := topazContainer.Host(ctx)\n    port, _ := topazContainer.MappedPort(ctx, "8282")\n    topazEndpoint := fmt.Sprintf("%s:%s", host, port.Port())\n\n    // Bootstrap test data\n    restPort, _ := topazContainer.MappedPort(ctx, "8383")\n    bootstrapTopaz(t, host, restPort.Port())\n\n    // Run authorization tests\n    t.Run("DeveloperCanReadNamespace", func(t *testing.T) {\n        allowed := checkAuthorization(t, topazEndpoint, AuthzRequest{\n            User:       "dev@local.prism",\n            Permission: "read",\n            Resource:   "namespace:dev-playground",\n        })\n        assert.True(t, allowed, "Developer should be able to read dev-playground")\n    })\n\n    t.Run("DeveloperCannotAdminNamespace", func(t *testing.T) {\n        allowed := checkAuthorization(t, topazEndpoint, AuthzRequest{\n            User:       "dev@local.prism",\n            Permission: "admin",\n            Resource:   "namespace:dev-playground",\n        })\n        assert.False(t, allowed, "Developer should NOT be able to admin dev-playground")\n    })\n\n    t.Run("AdminCanAccessAllNamespaces", func(t *testing.T) {\n        allowed := checkAuthorization(t, topazEndpoint, AuthzRequest{\n            User:       "admin@local.prism",\n            Permission: "admin",\n            Resource:   "namespace:test-namespace",\n        })\n        assert.True(t, allowed, "Admin should have access to all namespaces")\n    })\n}\n\nfunc bootstrapTopaz(t *testing.T, host, port string) {\n    // Execute bootstrap script against container\n    restURL := fmt.Sprintf("http://%s:%s", host, port)\n\n    // Create test users\n    createUser(t, restURL, "dev@local.prism", "Local Developer")\n    createUser(t, restURL, "admin@local.prism", "Local Admin")\n\n    // Create groups\n    createGroup(t, restURL, "developers")\n    createGroup(t, restURL, "admins")\n\n    // Create relationships\n    addUserToGroup(t, restURL, "dev@local.prism", "developers")\n    addUserToGroup(t, restURL, "admin@local.prism", "admins")\n\n    // Create namespaces and permissions\n    createNamespace(t, restURL, "dev-playground")\n    grantPermission(t, restURL, "developers", "developer", "dev-playground")\n    grantPermission(t, restURL, "admins", "admin", "dev-playground")\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"cicd-configuration-github-actions",children:"CI/CD Configuration (GitHub Actions)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:".github/workflows/integration-tests.yml"})}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"name: Integration Tests with Topaz\n\non:\n  pull_request:\n    branches: [main]\n  push:\n    branches: [main]\n\njobs:\n  integration-test:\n    runs-on: ubuntu-latest\n\n    services:\n      # Topaz service container\n      topaz:\n        image: ghcr.io/aserto-dev/topaz:0.30.14\n        ports:\n          - 8282:8282\n          - 8383:8383\n        options: >-\n          --health-cmd \"curl -f http://localhost:8383/health\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        volumes:\n          - ${{ github.workspace }}/topaz/config.test.yaml:/config/topaz-config.yaml:ro\n          - ${{ github.workspace }}/topaz/policies:/policies:ro\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v4\n\n      - name: Set up Go\n        uses: actions/setup-go@v4\n        with:\n          go-version: '1.21'\n\n      - name: Bootstrap Topaz directory\n        run: |\n          bash topaz/seed/bootstrap.sh\n        env:\n          TOPAZ_REST: http://localhost:8383\n\n      - name: Run integration tests\n        run: |\n          go test -v ./tests/integration/... -tags=integration\n        env:\n          TOPAZ_ENDPOINT: localhost:8282\n\n      - name: Dump Topaz logs on failure\n        if: failure()\n        run: |\n          docker logs ${{ job.services.topaz.id }}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"test-configuration",children:"Test Configuration"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"topaz/config.test.yaml"})})," (optimized for testing):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'version: 2\n\nlogger:\n  prod: true\n  log_level: warn  # Less verbose for tests\n\napi:\n  grpc:\n    listen_address: "0.0.0.0:8282"\n    connection_timeout: 2s\n  rest:\n    listen_address: "0.0.0.0:8383"\n\ndirectory:\n  db:\n    type: sqlite\n    path: ":memory:"  # In-memory database for fast tests\n  seed_metadata: false\n\npolicy:\n  engine: opa\n  policy_root: /policies\n\nedge:\n  enabled: false  # No remote sync in tests\n\nauthorizer:\n  grpc:\n    connection_timeout: 2s\n  needs:\n    - kind: policy\n    - kind: directory\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-characteristics",children:"Performance Characteristics"}),"\n",(0,i.jsx)(n.h3,{id:"local-development",children:"Local Development"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Startup Time"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Topaz container: ~2 seconds"}),"\n",(0,i.jsx)(n.li,{children:"Policy load: ~100ms"}),"\n",(0,i.jsx)(n.li,{children:"Directory bootstrap: ~500ms"}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.strong,{children:"Total: <3 seconds"})}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Authorization Latency"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"First check (cold): ~5ms"}),"\n",(0,i.jsx)(n.li,{children:"Subsequent checks (cached): <1ms"}),"\n",(0,i.jsx)(n.li,{children:"P99: <2ms"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Resource Usage"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Memory: ~50 MB (idle), ~100 MB (active)"}),"\n",(0,i.jsx)(n.li,{children:"CPU: <1% (idle), ~5% (under load)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Suite Performance"})," (50 authorization tests):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Sequential execution: ~2 seconds"}),"\n",(0,i.jsx)(n.li,{children:"Parallel execution: ~500ms"}),"\n",(0,i.jsx)(n.li,{children:"Per-test overhead: <10ms"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Container Lifecycle"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Startup: ~2 seconds"}),"\n",(0,i.jsx)(n.li,{children:"Teardown: <1 second"}),"\n",(0,i.jsx)(n.li,{children:"Total test time: <5 seconds (including container lifecycle)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(n.h3,{id:"issue-1-topaz-container-wont-start",children:"Issue 1: Topaz Container Won't Start"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptom"}),": ",(0,i.jsx)(n.code,{children:"docker compose up"})," fails with connection refused"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Diagnosis"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check Topaz logs\ndocker compose logs topaz\n\n# Common errors:\n# - Port 8282 already in use\n# - Config file not found\n# - Policy files have syntax errors\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check port availability\nlsof -i :8282\n\n# Validate config file\ndocker run --rm -v $(pwd)/topaz:/config ghcr.io/aserto-dev/topaz:0.30.14 \\\n    validate -c /config/config.local.yaml\n\n# Validate policies\ndocker run --rm -v $(pwd)/topaz/policies:/policies \\\n    openpolicyagent/opa:latest test /policies\n"})}),"\n",(0,i.jsx)(n.h3,{id:"issue-2-bootstrap-script-fails",children:"Issue 2: Bootstrap Script Fails"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptom"}),": ",(0,i.jsx)(n.code,{children:"bootstrap.sh"}),' exits with "Topaz not ready"']}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Diagnosis"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check if Topaz is listening\ncurl -v http://localhost:8383/health\n\n# Check Topaz startup logs\ndocker compose logs topaz | grep -i error\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Increase wait time in bootstrap script\nuntil curl -s "$TOPAZ_REST/health" > /dev/null; do\n    echo "Waiting for Topaz..."\n    sleep 2  # Increase from 1 to 2 seconds\ndone\n\n# Or check specific endpoint\ncurl -f http://localhost:8383/api/v2/directory/objects || exit 1\n'})}),"\n",(0,i.jsx)(n.h3,{id:"issue-3-authorization-always-denied",children:"Issue 3: Authorization Always Denied"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptom"}),": All authorization checks return ",(0,i.jsx)(n.code,{children:"allowed: false"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Diagnosis"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Check directory state\ncurl http://localhost:8383/api/v2/directory/objects | jq .\n\n# Check relations\ncurl http://localhost:8383/api/v2/directory/relations | jq .\n\n# Check policy evaluation\ncurl -X POST http://localhost:8282/api/v2/authz/is \\\n    -H \"Content-Type: application/json\" \\\n    -d '{...}' | jq .\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Re-run bootstrap\nbash topaz/seed/bootstrap.sh\n\n# Verify user exists\ncurl http://localhost:8383/api/v2/directory/objects?object_type=user | \\\n    jq '.results[] | select(.id==\"dev@local.prism\")'\n\n# Verify relationships\ncurl http://localhost:8383/api/v2/directory/relations | \\\n    jq '.results[] | select(.subject_id==\"dev@local.prism\")'\n\n# Check policy syntax\ndocker run --rm -v $(pwd)/topaz/policies:/policies \\\n    openpolicyagent/opa:latest test /policies -v\n"})}),"\n",(0,i.jsx)(n.h3,{id:"issue-4-policy-changes-not-applied",children:"Issue 4: Policy Changes Not Applied"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Symptom"}),": Modified policies don't take effect"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Topaz should auto-reload, but force reload:\ndocker compose restart topaz\n\n# Or use policy API to reload\ncurl -X POST http://localhost:8383/api/v2/policies/reload\n\n# Verify policy version\ncurl http://localhost:8383/api/v2/policies | jq '.policies[].version'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"integration-with-pattern-sdk",children:"Integration with Pattern SDK"}),"\n",(0,i.jsx)(n.p,{children:"Patterns (formerly plugins) integrate with local Topaz using the authorization layer from RFC-019:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pattern configuration"})," (",(0,i.jsx)(n.code,{children:"patterns/redis/config.local.yaml"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'authz:\n  token:\n    enabled: false  # Token validation disabled for local dev\n\n  topaz:\n    enabled: true\n    endpoint: "localhost:8282"\n    timeout: 2s\n    cache_ttl: 5s\n    tls:\n      enabled: false\n\n  audit:\n    enabled: true\n    destination: "stdout"\n\n  enforce: false  # Log violations but don\'t block in dev mode\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pattern usage"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// patterns/redis/main.go\nimport "github.com/prism/pattern-sdk/authz"\n\nfunc main() {\n    // Initialize authorizer with local Topaz\n    authzConfig := authz.Config{\n        Topaz: authz.TopazConfig{\n            Enabled:  true,\n            Endpoint: "localhost:8282",\n        },\n        Enforce: false,  // Dev mode: log but don\'t block\n    }\n\n    authorizer, _ := authz.NewAuthorizer(authzConfig)\n\n    // Use in pattern\n    pattern := &RedisPattern{\n        authz: authorizer,\n    }\n\n    // Authorization automatically enforced via gRPC interceptor\n    server := grpc.NewServer(\n        grpc.UnaryInterceptor(authz.UnaryServerInterceptor(authorizer)),\n    )\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"comparison-development-vs-integration-testing-vs-production",children:"Comparison: Development vs Integration Testing vs Production"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Aspect"}),(0,i.jsx)(n.th,{children:"Development"}),(0,i.jsx)(n.th,{children:"Integration Testing"}),(0,i.jsx)(n.th,{children:"Production"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Startup"})}),(0,i.jsx)(n.td,{children:"Docker Compose"}),(0,i.jsx)(n.td,{children:"testcontainers"}),(0,i.jsx)(n.td,{children:"Kubernetes sidecar"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Database"})}),(0,i.jsx)(n.td,{children:"SQLite file"}),(0,i.jsx)(n.td,{children:"SQLite in-memory"}),(0,i.jsx)(n.td,{children:"PostgreSQL"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Policy sync"})}),(0,i.jsx)(n.td,{children:"Disabled (local files)"}),(0,i.jsx)(n.td,{children:"Disabled (local files)"}),(0,i.jsx)(n.td,{children:"Enabled (Git + Aserto)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Enforcement"})}),(0,i.jsx)(n.td,{children:"Warn only (enforce: false)"}),(0,i.jsx)(n.td,{children:"Strict (enforce: true)"}),(0,i.jsx)(n.td,{children:"Strict (enforce: true)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Fail mode"})}),(0,i.jsx)(n.td,{children:"Fail-open (allow if down)"}),(0,i.jsx)(n.td,{children:"Fail-closed (deny if down)"}),(0,i.jsx)(n.td,{children:"Fail-closed (deny if down)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Audit logs"})}),(0,i.jsx)(n.td,{children:"Stdout"}),(0,i.jsx)(n.td,{children:"Stdout"}),(0,i.jsx)(n.td,{children:"Centralized (gRPC)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Users"})}),(0,i.jsx)(n.td,{children:"Static seed data"}),(0,i.jsx)(n.td,{children:"Static test data"}),(0,i.jsx)(n.td,{children:"Dynamic (synced from OIDC)"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/adr/adr-050",children:"ADR-050: Topaz for Policy Authorization"})," - Why Topaz was selected"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-019",children:"RFC-019: Pattern SDK Authorization Layer"})," - Pattern SDK integration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-016",children:"RFC-016: Local Development Infrastructure"})," - Complete local stack"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/adr/adr-046",children:"ADR-046: Dex IDP for Local Testing"})," - OIDC authentication"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/memos/memo-008",children:"MEMO-008: Vault Token Exchange Flow"})," - Credential management"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'2025-10-11: Updated terminology from "Plugin SDK" to "Pattern SDK" for consistency with RFC-022'}),"\n",(0,i.jsx)(n.li,{children:"2025-10-09: Initial memo documenting Topaz as local authorizer for development and integration testing"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);