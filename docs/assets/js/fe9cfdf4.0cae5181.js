"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[33100],{23115:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"adr-045","title":"prismctl Stack Management Subcommand","description":"Context","source":"@site/../docs-cms/adr/adr-045-prismctl-stack-management.md","sourceDirName":".","slug":"/adr-045","permalink":"/prism-data-layer/adr/adr-045","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-045-prismctl-stack-management.md","tags":[{"inline":true,"label":"go","permalink":"/prism-data-layer/adr/tags/go"},{"inline":true,"label":"cli","permalink":"/prism-data-layer/adr/tags/cli"},{"inline":true,"label":"tooling","permalink":"/prism-data-layer/adr/tags/tooling"},{"inline":true,"label":"dx","permalink":"/prism-data-layer/adr/tags/dx"},{"inline":true,"label":"infrastructure","permalink":"/prism-data-layer/adr/tags/infrastructure"},{"inline":true,"label":"hashicorp","permalink":"/prism-data-layer/adr/tags/hashicorp"}],"version":"current","frontMatter":{"date":"2025-10-09T00:00:00.000Z","deciders":"Core Team","doc_uuid":"82d9d857-fa36-4765-8632-519ed07dcc59","id":"adr-045","project_id":"prism-data-layer","status":"Accepted","tags":["go","cli","tooling","dx","infrastructure","hashicorp"],"title":"prismctl Stack Management Subcommand"},"sidebar":"adrSidebar","previous":{"title":"TinkerPop/Gremlin Generic Plugin \u2022 ADR-044","permalink":"/prism-data-layer/adr/adr-044"},"next":{"title":"Dex IDP for Local Identity Testing \u2022 ADR-046","permalink":"/prism-data-layer/adr/adr-046"}}');var t=s(74848),i=s(28453);const a={date:new Date("2025-10-09T00:00:00.000Z"),deciders:"Core Team",doc_uuid:"82d9d857-fa36-4765-8632-519ed07dcc59",id:"adr-045",project_id:"prism-data-layer",status:"Accepted",tags:["go","cli","tooling","dx","infrastructure","hashicorp"],title:"prismctl Stack Management Subcommand"},c=void 0,l={},o=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why Stack Management in prismctl?",id:"why-stack-management-in-prismctl",level:3},{value:"1. Single Binary for All Operations",id:"1-single-binary-for-all-operations",level:4},{value:"2. Natural Command Hierarchy",id:"2-natural-command-hierarchy",level:4},{value:"Stack Management Commands",id:"stack-management-commands",level:2},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:2},{value:"1. Separate <code>hashistack</code> Binary",id:"1-separate-hashistack-binary",level:3},{value:"2. Python Bootstrap Script Only",id:"2-python-bootstrap-script-only",level:3},{value:"3. Shell Scripts",id:"3-shell-scripts",level:3},{value:"Implementation Plan",id:"implementation-plan",level:2},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h2,{id:"context",children:"Context"}),"\n",(0,t.jsx)(e.p,{children:"Prism requires a local development stack with multiple components (Consul, Vault, Kafka, PostgreSQL, etc.). Operators need a simple way to:"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Bootstrap"})," a complete local environment"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Start/stop"})," infrastructure components"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Switch"})," between different infrastructure providers (Hashicorp, AWS, local Docker)"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Manage"})," configuration and credentials for stack components"]}),"\n"]}),"\n",(0,t.jsxs)(e.p,{children:["Previously, we considered creating a separate ",(0,t.jsx)(e.code,{children:"hashistack"})," tool, but this would add another binary to manage and maintain."]}),"\n",(0,t.jsx)(e.h2,{id:"decision",children:"Decision"}),"\n",(0,t.jsxs)(e.p,{children:["Add a ",(0,t.jsxs)(e.strong,{children:[(0,t.jsx)(e.code,{children:"stack"})," subcommand"]})," to ",(0,t.jsx)(e.code,{children:"prismctl"})," that manages infrastructure provisioning and lifecycle."]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Installation"})," (single command):"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Install prismctl with stack management\ngo install github.com/jrepp/prism-data-layer/tools/cmd/prismctl@latest\n\n# Bootstrap local stack (one-time)\nprismctl stack init\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Usage"}),":"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Initialize stack configuration\nprismctl stack init\n\n# Start the default stack (Hashicorp)\nprismctl stack start\n\n# Stop the stack\nprismctl stack stop\n\n# Check stack health\nprismctl stack status\n\n# Switch to different stack provider\nprismctl stack use docker-compose\nprismctl stack use aws\n\n# List available stack providers\nprismctl stack providers\n"})}),"\n",(0,t.jsx)(e.h2,{id:"rationale",children:"Rationale"}),"\n",(0,t.jsx)(e.h3,{id:"why-stack-management-in-prismctl",children:"Why Stack Management in prismctl?"}),"\n",(0,t.jsx)(e.h4,{id:"1-single-binary-for-all-operations",children:"1. Single Binary for All Operations"}),"\n",(0,t.jsx)(e.p,{children:"Users install one tool that does everything:"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# One install command\ngo install github.com/jrepp/prism-data-layer/tools/cmd/prismctl@latest\n\n# All operations available\nprismctl namespace list         # Admin operations\nprismctl plugin start postgres  # Plugin management\nprismctl stack start            # Infrastructure management\n"})}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Benefits"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"\u2705 No need to manage multiple binaries"}),"\n",(0,t.jsx)(e.li,{children:"\u2705 Consistent CLI patterns across all operations"}),"\n",(0,t.jsx)(e.li,{children:"\u2705 Simplified installation instructions"}),"\n",(0,t.jsx)(e.li,{children:"\u2705 Single version to track and update"}),"\n"]}),"\n",(0,t.jsx)(e.h4,{id:"2-natural-command-hierarchy",children:"2. Natural Command Hierarchy"}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"stack"})," subcommand fits naturally into prismctl's structure:"]}),"\n",(0,t.jsx)(e.p,{children:"prismctl\n\u251c\u2500\u2500 namespace      # Manage Prism namespaces\n\u251c\u2500\u2500 plugin         # Manage backend plugins\n\u251c\u2500\u2500 session        # Manage sessions\n\u251c\u2500\u2500 health         # Check Prism health\n\u2514\u2500\u2500 stack          # Manage infrastructure stack\n\u251c\u2500\u2500 init       # Initialize stack config\n\u251c\u2500\u2500 start      # Start infrastructure\n\u251c\u2500\u2500 stop       # Stop infrastructure\n\u251c\u2500\u2500 status     # Check stack health\n\u251c\u2500\u2500 use        # Switch stack provider\n\u2514\u2500\u2500 providers  # List available providers"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n#### 3. Shared Configuration\n\nStack management shares configuration with other prismctl commands:\n\n"})}),"\n",(0,t.jsx)(e.h1,{id:"prismconfigyaml",children:"~/.prism/config.yaml"}),"\n",(0,t.jsx)(e.p,{children:"admin:\nendpoint: localhost:8981"}),"\n",(0,t.jsx)(e.p,{children:"stack:\nprovider: hashicorp\nconsul:\naddress: localhost:8500\nvault:\naddress: localhost:8200\npostgres:\nhost: localhost\nport: 5432\nkafka:\nbrokers: [localhost:9092]"}),"\n",(0,t.jsx)(e.p,{children:"plugins:\npostgres:\nimage: prism/postgres-plugin:latest\nport: 9090"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n**Benefits**:\n- \u2705 Single source of truth for configuration\n- \u2705 Stack and admin operations see same endpoints\n- \u2705 Easy to switch environments (dev, staging, prod)\n\n### Pluggable Stack Providers\n\nThe `stack` subcommand supports multiple infrastructure providers:\n\n#### 1. Hashicorp (Default)\n\nUses Consul, Vault, and Nomad for service discovery, secrets, and orchestration:\n\n"})}),"\n",(0,t.jsx)(e.h1,{id:"use-hashicorp-stack-default",children:"Use Hashicorp stack (default)"}),"\n",(0,t.jsx)(e.p,{children:"prismctl stack init --provider hashicorp"}),"\n",(0,t.jsx)(e.h1,{id:"starts",children:"Starts:"}),"\n",(0,t.jsx)(e.h1,{id:"--consul-service-discovery",children:"- Consul (service discovery)"}),"\n",(0,t.jsx)(e.h1,{id:"--vault-secrets-management",children:"- Vault (secrets management)"}),"\n",(0,t.jsx)(e.h1,{id:"--postgresql-via-docker",children:"- PostgreSQL (via Docker)"}),"\n",(0,t.jsx)(e.h1,{id:"--kafka-via-docker",children:"- Kafka (via Docker)"}),"\n",(0,t.jsx)(e.h1,{id:"--nats-via-docker",children:"- NATS (via Docker)"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n**Configuration** (`~/.prism/stacks/hashicorp.yaml`):\n"})}),"\n",(0,t.jsx)(e.p,{children:"provider: hashicorp"}),"\n",(0,t.jsx)(e.p,{children:"services:\nconsul:\nenabled: true\nmode: dev\ndata_dir: ~/.prism/data/consul"}),"\n",(0,t.jsx)(e.p,{children:"vault:\nenabled: true\nmode: dev\ndata_dir: ~/.prism/data/vault\nkv_version: 2"}),"\n",(0,t.jsx)(e.p,{children:"postgres:\nenabled: true\nimage: postgres:16-alpine\nport: 5432\ndatabases: [prism]"}),"\n",(0,t.jsx)(e.p,{children:"kafka:\nenabled: true\nimage: confluentinc/cp-kafka:latest\nport: 9092"}),"\n",(0,t.jsx)(e.p,{children:"nats:\nenabled: true\nimage: nats:latest\nports: [4222, 8222]"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n**Stack operations**:\n"})}),"\n",(0,t.jsx)(e.p,{children:"type HashicorpStack struct {\nconfig *HashicorpConfig\n}"}),"\n",(0,t.jsx)(e.p,{children:"func (s *HashicorpStack) Start(ctx context.Context) error {\n// 1. Start Consul\nif err := s.startConsul(ctx); err != nil {\nreturn err\n}"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"// 2. Start Vault\nif err := s.startVault(ctx); err != nil {\n    return err\n}\n\n// 3. Start databases via Docker\nif err := s.startDatabases(ctx); err != nil {\n    return err\n}\n\nreturn nil\n"})}),"\n",(0,t.jsx)(e.p,{children:"}"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n#### 2. Docker Compose\n\nSimple Docker-based local development:\n\n"})}),"\n",(0,t.jsx)(e.h1,{id:"use-docker-compose-stack",children:"Use Docker Compose stack"}),"\n",(0,t.jsx)(e.p,{children:"prismctl stack init --provider docker-compose"}),"\n",(0,t.jsx)(e.h1,{id:"uses-docker-composeyml-for-all-services",children:"Uses docker-compose.yml for all services"}),"\n",(0,t.jsx)(e.p,{children:"prismctl stack start"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n**Configuration** (`~/.prism/stacks/docker-compose.yaml`):\n"})}),"\n",(0,t.jsx)(e.p,{children:"provider: docker-compose"}),"\n",(0,t.jsx)(e.p,{children:"compose_file: ~/.prism/docker-compose.yml"}),"\n",(0,t.jsx)(e.p,{children:"services:\npostgres: {}\nkafka: {}\nnats: {}\nredis: {}"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n**Stack operations**:\n"})}),"\n",(0,t.jsx)(e.p,{children:"type DockerComposeStack struct {\ncomposeFile string\n}"}),"\n",(0,t.jsx)(e.p,{children:'func (s *DockerComposeStack) Start(ctx context.Context) error {\ncmd := exec.CommandContext(ctx, "docker-compose",\n"-f", s.composeFile,\n"up", "-d",\n)\nreturn cmd.Run()\n}'}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n#### 3. AWS\n\nCloud-native using AWS services:\n\n"})}),"\n",(0,t.jsx)(e.h1,{id:"use-aws-stack",children:"Use AWS stack"}),"\n",(0,t.jsx)(e.p,{children:"prismctl stack init --provider aws"}),"\n",(0,t.jsx)(e.h1,{id:"creates",children:"Creates:"}),"\n",(0,t.jsx)(e.h1,{id:"--rds-postgresql-instance",children:"- RDS PostgreSQL instance"}),"\n",(0,t.jsx)(e.h1,{id:"--msk-kafka-cluster",children:"- MSK (Kafka) cluster"}),"\n",(0,t.jsx)(e.h1,{id:"--secrets-manager-for-credentials",children:"- Secrets Manager for credentials"}),"\n",(0,t.jsx)(e.h1,{id:"--vpc-subnets-security-groups",children:"- VPC, subnets, security groups"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n**Configuration** (`~/.prism/stacks/aws.yaml`):\n"})}),"\n",(0,t.jsx)(e.p,{children:"provider: aws"}),"\n",(0,t.jsx)(e.p,{children:"region: us-west-2"}),"\n",(0,t.jsx)(e.p,{children:"services:\nrds:\nenabled: true\nengine: postgres\ninstance_class: db.t3.micro\nallocated_storage: 20"}),"\n",(0,t.jsx)(e.p,{children:"msk:\nenabled: true\nkafka_version: 3.5.1\nbroker_count: 3\ninstance_type: kafka.t3.small"}),"\n",(0,t.jsx)(e.p,{children:"secrets_manager:\nenabled: true\nsecrets: [postgres-admin, kafka-creds]"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n#### 4. Kubernetes\n\nDeploy to Kubernetes cluster:\n\n"})}),"\n",(0,t.jsx)(e.h1,{id:"use-kubernetes-stack",children:"Use Kubernetes stack"}),"\n",(0,t.jsx)(e.p,{children:"prismctl stack init --provider kubernetes"}),"\n",(0,t.jsx)(e.h1,{id:"applies-helm-charts-or-manifests",children:"Applies Helm charts or manifests"}),"\n",(0,t.jsx)(e.p,{children:"prismctl stack start"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n### Stack Provider Interface\n\nAll providers implement a common interface:\n\n"})}),"\n",(0,t.jsx)(e.p,{children:"type StackProvider interface {\n// Initialize creates configuration files\nInit(ctx context.Context, opts *InitOptions) error"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"// Start provisions and starts infrastructure\nStart(ctx context.Context) error\n\n// Stop tears down infrastructure\nStop(ctx context.Context) error\n\n// Status returns health of all components\nStatus(ctx context.Context) (*StackStatus, error)\n\n// GetEndpoints returns service endpoints\nGetEndpoints(ctx context.Context) (*Endpoints, error)\n"})}),"\n",(0,t.jsx)(e.p,{children:"}"}),"\n",(0,t.jsx)(e.p,{children:"type StackStatus struct {\nHealthy  bool\nServices []ServiceStatus\n}"}),"\n",(0,t.jsx)(e.p,{children:"type ServiceStatus struct {\nName    string\nHealthy bool\nMessage string\n}"}),"\n",(0,t.jsx)(e.p,{children:"type Endpoints struct {\nConsul   string\nVault    string\nPostgres string\nKafka    []string\nNATS     string\n}"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n### Implementation Example\n\n**Stack initialization**:\n"})}),"\n",(0,t.jsx)(e.p,{children:'// cmd/prismctl/stack.go\nvar stackInitCmd = &cobra.Command{\nUse:   "init",\nShort: "Initialize stack configuration",\nRunE:  runStackInit,\n}'}),"\n",(0,t.jsx)(e.p,{children:'func runStackInit(cmd *cobra.Command, args []string) error {\nprovider := viper.GetString("stack.provider")'}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"// Create provider\nstack, err := createStackProvider(provider)\nif err != nil {\n    return err\n}\n\n// Initialize configuration\nreturn stack.Init(cmd.Context(), &InitOptions{\n    ConfigDir: getConfigDir(),\n})\n"})}),"\n",(0,t.jsx)(e.p,{children:"}"}),"\n",(0,t.jsx)(e.p,{children:'func createStackProvider(name string) (StackProvider, error) {\nswitch name {\ncase "hashicorp":\nreturn &HashicorpStack{}, nil\ncase "docker-compose":\nreturn &DockerComposeStack{}, nil\ncase "aws":\nreturn &AWSStack{}, nil\ncase "kubernetes":\nreturn &KubernetesStack{}, nil\ndefault:\nreturn nil, fmt.Errorf("unknown provider: %s", name)\n}\n}'}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n**Stack start**:\n"})}),"\n",(0,t.jsx)(e.p,{children:'var stackStartCmd = &cobra.Command{\nUse:   "start",\nShort: "Start infrastructure stack",\nRunE:  runStackStart,\n}'}),"\n",(0,t.jsx)(e.p,{children:'func runStackStart(cmd *cobra.Command, args []string) error {\nprovider := viper.GetString("stack.provider")\nstack, err := createStackProvider(provider)\nif err != nil {\nreturn err\n}'}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:'fmt.Printf("Starting %s stack...\\n", provider)\n\nif err := stack.Start(cmd.Context()); err != nil {\n    return err\n}\n\n// Display endpoints\nendpoints, err := stack.GetEndpoints(cmd.Context())\nif err != nil {\n    return err\n}\n\nfmt.Println("\\nStack started successfully!")\nfmt.Printf("Consul:    %s\\n", endpoints.Consul)\nfmt.Printf("Vault:     %s\\n", endpoints.Vault)\nfmt.Printf("Postgres:  %s\\n", endpoints.Postgres)\nfmt.Printf("Kafka:     %v\\n", endpoints.Kafka)\n\nreturn nil\n'})}),"\n",(0,t.jsx)(e.p,{children:"}"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n## Bootstrap Workflow\n\n### Installation and Setup\n\n"})}),"\n",(0,t.jsx)(e.h1,{id:"1-install-prismctl",children:"1. Install prismctl"}),"\n",(0,t.jsx)(e.p,{children:"go install github.com/jrepp/prism-data-layer/tools/cmd/prismctl@latest"}),"\n",(0,t.jsx)(e.h1,{id:"2-initialize-stack-creates-prism-directory-and-config",children:"2. Initialize stack (creates ~/.prism directory and config)"}),"\n",(0,t.jsx)(e.p,{children:"prismctl stack init"}),"\n",(0,t.jsx)(e.h1,{id:"output",children:"Output:"}),"\n",(0,t.jsx)(e.h1,{id:"-created-prism-directory",children:"\u2713 Created ~/.prism directory"}),"\n",(0,t.jsx)(e.h1,{id:"-generated-config-prismconfigyaml",children:"\u2713 Generated config: ~/.prism/config.yaml"}),"\n",(0,t.jsx)(e.h1,{id:"-generated-stack-config-prismstackshashicorpyaml",children:"\u2713 Generated stack config: ~/.prism/stacks/hashicorp.yaml"}),"\n",(0,t.jsx)(e.h1,{id:"-generated-plugin-manifests-prismpluginsyaml",children:"\u2713 Generated plugin manifests: ~/.prism/plugins/*.yaml"}),"\n",(0,t.jsx)(e.h1,{id:"3-start-the-stack",children:"3. Start the stack"}),"\n",(0,t.jsx)(e.p,{children:"prismctl stack start"}),"\n",(0,t.jsx)(e.h1,{id:"output-1",children:"Output:"}),"\n",(0,t.jsx)(e.h1,{id:"starting-hashicorp-stack",children:"Starting Hashicorp stack..."}),"\n",(0,t.jsx)(e.h1,{id:"-starting-consul-dev-mode",children:"\u2713 Starting Consul (dev mode)"}),"\n",(0,t.jsx)(e.h1,{id:"-starting-vault-dev-mode",children:"\u2713 Starting Vault (dev mode)"}),"\n",(0,t.jsx)(e.h1,{id:"-starting-postgresql-docker",children:"\u2713 Starting PostgreSQL (Docker)"}),"\n",(0,t.jsx)(e.h1,{id:"-starting-kafka-docker",children:"\u2713 Starting Kafka (Docker)"}),"\n",(0,t.jsx)(e.h1,{id:"-starting-nats-docker",children:"\u2713 Starting NATS (Docker)"}),"\n",(0,t.jsx)(e.h1,{id:""}),"\n",(0,t.jsx)(e.h1,{id:"stack-started-successfully",children:"Stack started successfully!"}),"\n",(0,t.jsxs)(e.h1,{id:"consul----httplocalhost8500",children:["Consul:    ",(0,t.jsx)(e.a,{href:"http://localhost:8500",children:"http://localhost:8500"})]}),"\n",(0,t.jsxs)(e.h1,{id:"vault-----httplocalhost8200",children:["Vault:     ",(0,t.jsx)(e.a,{href:"http://localhost:8200",children:"http://localhost:8200"})]}),"\n",(0,t.jsx)(e.h1,{id:"postgres--localhost5432",children:"Postgres:  localhost:5432"}),"\n",(0,t.jsx)(e.h1,{id:"kafka-----localhost9092",children:"Kafka:     [localhost:9092]"}),"\n",(0,t.jsx)(e.h1,{id:"4-use-prismctl-for-admin-operations",children:"4. Use prismctl for admin operations"}),"\n",(0,t.jsx)(e.p,{children:"prismctl health\nprismctl namespace create my-app"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n### One-Command Bootstrap\n\nCombine init + start:\n\n"})}),"\n",(0,t.jsx)(e.h1,{id:"bootstrap-everything-in-one-command",children:"Bootstrap everything in one command"}),"\n",(0,t.jsx)(e.p,{children:"prismctl stack bootstrap"}),"\n",(0,t.jsx)(e.h1,{id:"equivalent-to",children:"Equivalent to:"}),"\n",(0,t.jsx)(e.h1,{id:"prismctl-stack-init",children:"prismctl stack init"}),"\n",(0,t.jsx)(e.h1,{id:"prismctl-stack-start",children:"prismctl stack start"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-text",children:"\n## Configuration Files\n\nAfter `prismctl stack init`, the structure is:\n\n~/.prism/\n\u251c\u2500\u2500 config.yaml                    # Main prismctl config\n\u251c\u2500\u2500 stacks/\n\u2502   \u251c\u2500\u2500 hashicorp.yaml             # Hashicorp stack config\n\u2502   \u251c\u2500\u2500 docker-compose.yaml        # Docker Compose config\n\u2502   \u251c\u2500\u2500 aws.yaml                   # AWS stack config\n\u2502   \u2514\u2500\u2500 kubernetes.yaml            # Kubernetes stack config\n\u251c\u2500\u2500 plugins/\n\u2502   \u251c\u2500\u2500 postgres.yaml              # PostgreSQL plugin manifest\n\u2502   \u251c\u2500\u2500 kafka.yaml                 # Kafka plugin manifest\n\u2502   \u2514\u2500\u2500 redis.yaml                 # Redis plugin manifest\n\u2514\u2500\u2500 data/                          # Stack data directories\n    \u251c\u2500\u2500 consul/\n    \u251c\u2500\u2500 vault/\n    \u2514\u2500\u2500 postgres/\n"})}),"\n",(0,t.jsx)(e.h2,{id:"stack-management-commands",children:"Stack Management Commands"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"# Initialize configuration\nprismctl stack init [--provider <name>]\n\n# Bootstrap (init + start)\nprismctl stack bootstrap\n\n# Start infrastructure\nprismctl stack start\n\n# Stop infrastructure\nprismctl stack stop\n\n# Check status\nprismctl stack status\n\n# Get endpoints\nprismctl stack endpoints\n\n# Switch provider\nprismctl stack use <provider>\n\n# List providers\nprismctl stack providers\n\n# Clean up (removes data)\nprismctl stack clean [--all]\n"})}),"\n",(0,t.jsx)(e.h2,{id:"consequences",children:"Consequences"}),"\n",(0,t.jsx)(e.h3,{id:"positive",children:"Positive"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Single binary"}),": ",(0,t.jsx)(e.code,{children:"go install"})," gets everything needed"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Consistent UX"}),": Stack management uses same patterns as other prismctl commands"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Pluggable"}),": Easy to add new stack providers"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Shared config"}),": Stack and admin operations use same configuration"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Fast bootstrap"}),": One command to get complete dev environment"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Flexible"}),": Supports local dev (Docker), cloud (AWS), and enterprise (Hashicorp)"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"negative",children:"Negative"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Binary size"}),": Stack management adds ~2-3MB to prismctl binary\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:"Acceptable"}),": Still single binary <20MB total"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Complexity"}),": More code in one repository\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:"Mitigated"}),": Stack providers are pluggable modules"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Provider dependencies"}),": Each provider may require external tools (docker, aws-cli, kubectl)\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:"Documented"}),": Clear requirements per provider"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"neutral",children:"Neutral"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Installation method"}),": ",(0,t.jsx)(e.code,{children:"go install"})," vs separate download\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.em,{children:"Decision"}),": ",(0,t.jsx)(e.code,{children:"go install"})," is simpler and handles updates"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,t.jsxs)(e.h3,{id:"1-separate-hashistack-binary",children:["1. Separate ",(0,t.jsx)(e.code,{children:"hashistack"})," Binary"]}),"\n",(0,t.jsxs)(e.p,{children:["Create a dedicated ",(0,t.jsx)(e.code,{children:"hashistack"})," tool for Hashicorp infrastructure."]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Rejected because"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Requires users to install two binaries"}),"\n",(0,t.jsx)(e.li,{children:"Separate versioning and release process"}),"\n",(0,t.jsx)(e.li,{children:"Configuration split between tools"}),"\n",(0,t.jsx)(e.li,{children:"Duplicates infrastructure management code"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"2-python-bootstrap-script-only",children:"2. Python Bootstrap Script Only"}),"\n",(0,t.jsxs)(e.p,{children:["Keep ",(0,t.jsx)(e.code,{children:"tooling/bootstrap.py"})," as the only bootstrap method."]}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Rejected because"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Python dependency for dev environment setup"}),"\n",(0,t.jsx)(e.li,{children:"Slower startup (230ms vs 12ms)"}),"\n",(0,t.jsx)(e.li,{children:"Can't be distributed as single binary"}),"\n",(0,t.jsx)(e.li,{children:"Doesn't integrate with prismctl admin operations"}),"\n"]}),"\n",(0,t.jsx)(e.h3,{id:"3-shell-scripts",children:"3. Shell Scripts"}),"\n",(0,t.jsx)(e.p,{children:"Provide shell scripts for stack management."}),"\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Rejected because"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Platform-specific (bash vs powershell)"}),"\n",(0,t.jsx)(e.li,{children:"Harder to maintain"}),"\n",(0,t.jsx)(e.li,{children:"No type safety"}),"\n",(0,t.jsx)(e.li,{children:"Poor error handling"}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"implementation-plan",children:"Implementation Plan"}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Add stack package"}),": ",(0,t.jsx)(e.code,{children:"tools/internal/stack/"})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Define ",(0,t.jsx)(e.code,{children:"StackProvider"})," interface"]}),"\n",(0,t.jsx)(e.li,{children:"Implement Hashicorp provider"}),"\n",(0,t.jsx)(e.li,{children:"Implement Docker Compose provider"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Add stack commands"}),": ",(0,t.jsx)(e.code,{children:"tools/cmd/prismctl/stack.go"})]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"init"}),", ",(0,t.jsx)(e.code,{children:"start"}),", ",(0,t.jsx)(e.code,{children:"stop"}),", ",(0,t.jsx)(e.code,{children:"status"}),", ",(0,t.jsx)(e.code,{children:"use"}),", ",(0,t.jsx)(e.code,{children:"providers"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Update bootstrap"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"prismctl stack init"})," replaces ",(0,t.jsx)(e.code,{children:"uv run tooling/bootstrap.py"})]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Documentation"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Update README with ",(0,t.jsx)(e.code,{children:"go install"})," instructions"]}),"\n",(0,t.jsx)(e.li,{children:"Document each stack provider"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsxs)(e.p,{children:[(0,t.jsx)(e.strong,{children:"Testing"}),":"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Integration tests for each provider"}),"\n",(0,t.jsx)(e.li,{children:"CI pipeline for stack bootstrapping"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"ADR-040: Go Binary for Admin CLI"}),"\n",(0,t.jsx)(e.li,{children:"ADR-012: Go for Tooling"}),"\n",(0,t.jsx)(e.li,{children:"ADR-016: Go CLI and Configuration Management"}),"\n",(0,t.jsx)(e.li,{children:"ADR-025: Container Plugin Model"}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://www.consul.io/docs",children:"Consul Documentation"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://www.vaultproject.io/docs",children:"Vault Documentation"})}),"\n",(0,t.jsx)(e.li,{children:(0,t.jsx)(e.a,{href:"https://docs.docker.com/compose/",children:"Docker Compose"})}),"\n"]}),"\n",(0,t.jsx)(e.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"2025-10-09: Initial acceptance with prismctl stack subcommand approach"}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(d,{...n})}):d(n)}},28453:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>c});var r=s(96540);const t={},i=r.createContext(t);function a(n){const e=r.useContext(i);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:a(n.components),r.createElement(i.Provider,{value:e},n.children)}}}]);