"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[54517],{28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(96540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}},78592:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"memo-030","title":"Pattern-Based Acceptance Testing Framework","description":"Overview","source":"@site/../docs-cms/memos/MEMO-030-pattern-based-acceptance-testing.md","sourceDirName":".","slug":"/memo-030","permalink":"/prism-data-layer/memos/memo-030","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/MEMO-030-pattern-based-acceptance-testing.md","tags":[{"inline":true,"label":"testing","permalink":"/prism-data-layer/memos/tags/testing"},{"inline":true,"label":"acceptance-tests","permalink":"/prism-data-layer/memos/tags/acceptance-tests"},{"inline":true,"label":"patterns","permalink":"/prism-data-layer/memos/tags/patterns"},{"inline":true,"label":"interfaces","permalink":"/prism-data-layer/memos/tags/interfaces"},{"inline":true,"label":"framework","permalink":"/prism-data-layer/memos/tags/framework"}],"version":"current","frontMatter":{"author":"System","created":"2025-10-14T00:00:00.000Z","doc_uuid":"8a9f2b3c-5d6e-4f8a-9b0c-1d2e3f4a5b6c","id":"memo-030","project_id":"prism-data-layer","tags":["testing","acceptance-tests","patterns","interfaces","framework"],"title":"Pattern-Based Acceptance Testing Framework","updated":"2025-10-14T00:00:00.000Z"},"sidebar":"memosSidebar","previous":{"title":"Multi-Tenancy Models and Isolation Strategies \u2022 MEMO-023","permalink":"/prism-data-layer/memos/memo-023"}}');var r=t(74848),a=t(28453);const i={author:"System",created:new Date("2025-10-14T00:00:00.000Z"),doc_uuid:"8a9f2b3c-5d6e-4f8a-9b0c-1d2e3f4a5b6c",id:"memo-030",project_id:"prism-data-layer",tags:["testing","acceptance-tests","patterns","interfaces","framework"],title:"Pattern-Based Acceptance Testing Framework",updated:new Date("2025-10-14T00:00:00.000Z")},c="Pattern-Based Acceptance Testing Framework",l={},d=[{value:"Overview",id:"overview",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Problems with Backend-Specific Tests",id:"problems-with-backend-specific-tests",level:3},{value:"Pattern-Based Solution",id:"pattern-based-solution",level:3},{value:"Architecture",id:"architecture",level:2},{value:"1. Backend Registration",id:"1-backend-registration",level:3},{value:"2. Pattern Test Definition",id:"2-pattern-test-definition",level:3},{value:"3. Framework Test Runner",id:"3-framework-test-runner",level:3},{value:"Test Execution Flow",id:"test-execution-flow",level:2},{value:"Single Test Run",id:"single-test-run",level:3},{value:"Output Example",id:"output-example",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:2},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:3},{value:"Makefile Targets",id:"makefile-targets",level:3},{value:"Adding New Patterns",id:"adding-new-patterns",level:2},{value:"1. Create Pattern Test File",id:"1-create-pattern-test-file",level:3},{value:"2. Register Pattern Constant",id:"2-register-pattern-constant",level:3},{value:"3. Backends Auto-Discover",id:"3-backends-auto-discover",level:3},{value:"Adding New Backends",id:"adding-new-backends",level:2},{value:"1. Implement Backend Setup",id:"1-implement-backend-setup",level:3},{value:"2. Import in Tests",id:"2-import-in-tests",level:3},{value:"Benefits",id:"benefits",level:2},{value:"1. Zero Test Duplication",id:"1-zero-test-duplication",level:3},{value:"2. Pattern-Focused Testing",id:"2-pattern-focused-testing",level:3},{value:"3. Easy Backend Addition",id:"3-easy-backend-addition",level:3},{value:"4. Capability-Based Test Skipping",id:"4-capability-based-test-skipping",level:3},{value:"5. Parallel Execution",id:"5-parallel-execution",level:3},{value:"6. Clear Test Organization",id:"6-clear-test-organization",level:3},{value:"Running Tests",id:"running-tests",level:2},{value:"All Pattern Tests",id:"all-pattern-tests",level:3},{value:"Specific Pattern",id:"specific-pattern",level:3},{value:"Specific Backend + Pattern",id:"specific-backend--pattern",level:3},{value:"Specific Test + Backend",id:"specific-test--backend",level:3},{value:"Migration from Backend-Specific Tests",id:"migration-from-backend-specific-tests",level:2},{value:"Old Approach (MEMO-015)",id:"old-approach-memo-015",level:3},{value:"New Approach (Current)",id:"new-approach-current",level:3},{value:"Migration Steps",id:"migration-steps",level:3},{value:"Comparison",id:"comparison",level:2},{value:"Future Enhancements",id:"future-enhancements",level:2},{value:"1. Interface-Based Registration",id:"1-interface-based-registration",level:3},{value:"2. Multi-Backend Patterns",id:"2-multi-backend-patterns",level:3},{value:"3. Property-Based Testing",id:"3-property-based-testing",level:3},{value:"4. Performance Benchmarking",id:"4-performance-benchmarking",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"References",id:"references",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"pattern-based-acceptance-testing-framework",children:"Pattern-Based Acceptance Testing Framework"})}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["We've transitioned from backend-specific acceptance tests to a ",(0,r.jsx)(n.strong,{children:"pattern-based acceptance testing framework"}),". This new approach tests data access patterns (KeyValue, Consumer, etc.) against multiple backend combinations automatically using interface discovery and registration."]}),"\n",(0,r.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,r.jsx)(n.h3,{id:"problems-with-backend-specific-tests",children:"Problems with Backend-Specific Tests"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Before"})," (MEMO-015 approach):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"tests/acceptance/\n\u251c\u2500\u2500 interfaces/\n\u2502   \u2514\u2500\u2500 table_driven_test.go     # 400 lines\n\u251c\u2500\u2500 redis/\n\u2502   \u2514\u2500\u2500 redis_integration_test.go # 200 lines\n\u251c\u2500\u2500 nats/\n\u2502   \u2514\u2500\u2500 nats_integration_test.go  # 300 lines\n\u2514\u2500\u2500 postgres/\n    \u2514\u2500\u2500 postgres_integration_test.go # 415 lines\n"})}),"\n",(0,r.jsx)(n.p,{children:"Issues:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Test duplication"})," - Same KeyValue tests repeated for each backend"]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Hard to maintain"})," - Update test logic in multiple files"]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Backend-focused"})," - Tests backends, not patterns"]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Manual updates"})," - Add new backend = write entire test file"]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Tight coupling"})," - Tests know about specific backends"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"pattern-based-solution",children:"Pattern-Based Solution"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"After"})," (current approach):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"tests/acceptance/\n\u251c\u2500\u2500 framework/\n\u2502   \u251c\u2500\u2500 backend_registry.go      # Backend registration\n\u2502   \u251c\u2500\u2500 pattern_runner.go        # Test execution\n\u2502   \u2514\u2500\u2500 types.go                 # Shared types\n\u251c\u2500\u2500 backends/\n\u2502   \u251c\u2500\u2500 memstore.go              # MemStore registration\n\u2502   \u251c\u2500\u2500 redis.go                 # Redis registration\n\u2502   \u2514\u2500\u2500 nats.go                  # NATS registration\n\u2514\u2500\u2500 patterns/\n    \u251c\u2500\u2500 keyvalue/\n    \u2502   \u251c\u2500\u2500 basic_test.go        # KeyValue Basic tests\n    \u2502   \u251c\u2500\u2500 ttl_test.go          # KeyValue TTL tests\n    \u2502   \u2514\u2500\u2500 concurrent_test.go   # Concurrency tests\n    \u2514\u2500\u2500 consumer/\n        \u251c\u2500\u2500 consumer_test.go     # Consumer tests\n        \u2514\u2500\u2500 process_test.go      # Message processing tests\n"})}),"\n",(0,r.jsx)(n.p,{children:"Benefits:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Zero duplication"})," - Tests written once, run on all backends"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Pattern-focused"})," - Test pattern behavior, not backends"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Auto-discovery"})," - Backends register themselves at init()"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Easy maintenance"})," - Update test logic in one place"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Loose coupling"})," - Tests don't know about backends"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"1-backend-registration",children:"1. Backend Registration"}),"\n",(0,r.jsx)(n.p,{children:"Backends register themselves with the framework at package init time:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"tests/acceptance/backends/memstore.go"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func init() {\n    framework.MustRegisterBackend(framework.Backend{\n        Name:      "MemStore",\n        SetupFunc: setupMemStore,\n\n        SupportedPatterns: []framework.Pattern{\n            framework.PatternKeyValueBasic,\n            framework.PatternKeyValueTTL,\n        },\n\n        Capabilities: framework.Capabilities{\n            SupportsTTL:    true,\n            SupportsScan:   false,\n            SupportsAtomic: false,\n            MaxValueSize:   0,    // Unlimited\n            MaxKeySize:     0,    // Unlimited\n        },\n    })\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"tests/acceptance/backends/redis.go"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func init() {\n    framework.MustRegisterBackend(framework.Backend{\n        Name:      "Redis",\n        SetupFunc: setupRedis,\n\n        SupportedPatterns: []framework.Pattern{\n            framework.PatternKeyValueBasic,\n            framework.PatternKeyValueTTL,\n            framework.PatternPubSubBasic,\n        },\n\n        Capabilities: framework.Capabilities{\n            SupportsTTL:       true,\n            SupportsScan:      true,\n            SupportsStreaming: true,\n            MaxValueSize:      512 * 1024 * 1024,  // 512MB\n            MaxKeySize:        512 * 1024 * 1024,  // 512MB\n        },\n    })\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-pattern-test-definition",children:"2. Pattern Test Definition"}),"\n",(0,r.jsx)(n.p,{children:"Pattern tests are written once and run against all compatible backends:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"tests/acceptance/patterns/keyvalue/basic_test.go"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func TestKeyValueBasicPattern(t *testing.T) {\n    tests := []framework.PatternTest{\n        {\n            Name: "SetAndGet",\n            Func: testSetAndGet,\n        },\n        {\n            Name: "GetNonExistent",\n            Func: testGetNonExistent,\n        },\n        {\n            Name: "Delete",\n            Func: testDeleteExisting,\n        },\n        // ... more tests\n    }\n\n    // This single line runs all tests against all backends\n    // that support PatternKeyValueBasic\n    framework.RunPatternTests(t, framework.PatternKeyValueBasic, tests)\n}\n\n// Test function - backend-agnostic\nfunc testSetAndGet(t *testing.T, driver interface{}, caps framework.Capabilities) {\n    kv := driver.(plugin.KeyValueBasicInterface)\n\n    key := fmt.Sprintf("%s:test-key", t.Name())\n    err := kv.Set(key, []byte("test-value"), 0)\n    require.NoError(t, err)\n\n    value, found, err := kv.Get(key)\n    require.NoError(t, err)\n    assert.True(t, found)\n    assert.Equal(t, []byte("test-value"), value)\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-framework-test-runner",children:"3. Framework Test Runner"}),"\n",(0,r.jsx)(n.p,{children:"The framework discovers backends and runs tests automatically:"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"tests/acceptance/framework/pattern_runner.go"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func RunPatternTests(t *testing.T, pattern Pattern, tests []PatternTest) {\n    // Find all backends that support this pattern\n    backends := GetBackendsForPattern(pattern)\n\n    if len(backends) == 0 {\n        t.Skipf("No backends registered for pattern %s", pattern)\n        return\n    }\n\n    // Run tests against each backend\n    for _, backend := range backends {\n        t.Run(backend.Name, func(t *testing.T) {\n            t.Parallel()\n\n            ctx := context.Background()\n\n            // Setup backend (may start testcontainer)\n            driver, cleanup := backend.SetupFunc(t, ctx)\n            defer cleanup()\n\n            // Run all tests against this backend\n            for _, test := range tests {\n                t.Run(test.Name, func(t *testing.T) {\n                    // Check capability requirements\n                    if test.RequiresCapability != "" {\n                        if !backend.Capabilities.HasCapability(test.RequiresCapability) {\n                            t.Skipf("Backend %s lacks capability: %s",\n                                   backend.Name, test.RequiresCapability)\n                            return\n                        }\n                    }\n\n                    // Run test\n                    test.Func(t, driver, backend.Capabilities)\n                })\n            }\n        })\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"test-execution-flow",children:"Test Execution Flow"}),"\n",(0,r.jsx)(n.h3,{id:"single-test-run",children:"Single Test Run"}),"\n",(0,r.jsx)(n.mermaid,{value:"graph TD\n    A[TestKeyValueBasicPattern] --\x3e B[framework.RunPatternTests]\n    B --\x3e C[GetBackendsForPattern<br/>PatternKeyValueBasic]\n    C --\x3e D[Found: MemStore, Redis]\n    D --\x3e E[t.Run MemStore]\n    D --\x3e F[t.Run Redis]\n    E --\x3e G[setupMemStore]\n    F --\x3e H[setupRedis<br/>start testcontainer]\n    G --\x3e I[Run 10 tests<br/>against MemStore]\n    H --\x3e J[Run 10 tests<br/>against Redis]\n    I --\x3e K[cleanup MemStore]\n    J --\x3e L[cleanup Redis<br/>stop testcontainer]"}),"\n",(0,r.jsx)(n.h3,{id:"output-example",children:"Output Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"=== RUN   TestKeyValueBasicPattern\n=== RUN   TestKeyValueBasicPattern/MemStore\n=== PAUSE TestKeyValueBasicPattern/MemStore\n=== RUN   TestKeyValueBasicPattern/Redis\n=== PAUSE TestKeyValueBasicPattern/Redis\n=== CONT  TestKeyValueBasicPattern/MemStore\n=== CONT  TestKeyValueBasicPattern/Redis\n\ud83d\udc33 Creating container for image redis:7-alpine\n    MemStore/SetAndGet: PASS (0.00s)\n    MemStore/GetNonExistent: PASS (0.00s)\n    MemStore/Delete: PASS (0.00s)\n    ...\n    Redis/SetAndGet: PASS (0.03s)\n    Redis/GetNonExistent: PASS (0.01s)\n    Redis/Delete: PASS (0.02s)\n    ...\n--- PASS: TestKeyValueBasicPattern (2.15s)\n    --- PASS: TestKeyValueBasicPattern/MemStore (0.01s)\n    --- PASS: TestKeyValueBasicPattern/Redis (2.14s)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,r.jsx)(n.h3,{id:"github-actions-workflow",children:"GitHub Actions Workflow"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:".github/workflows/pattern-acceptance-tests.yml"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"name: Pattern Acceptance Tests\n\non:\n  push:\n    branches: [main]\n    paths:\n      - 'patterns/**'\n      - 'pkg/drivers/**'\n      - 'tests/acceptance/patterns/**'\n\njobs:\n  test-keyvalue-pattern:\n    name: KeyValue Pattern\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run KeyValue pattern tests\n        run: |\n          cd tests/acceptance/patterns/keyvalue\n          go test -v -timeout 15m ./...\n        env:\n          PRISM_TEST_QUIET: \"1\"\n\n  test-consumer-pattern:\n    name: Consumer Pattern\n    runs-on: ubuntu-latest\n    steps:\n      - name: Run Consumer pattern tests\n        run: |\n          cd tests/acceptance/patterns/consumer\n          go test -v -timeout 15m ./...\n"})}),"\n",(0,r.jsx)(n.h3,{id:"makefile-targets",children:"Makefile Targets"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"test-acceptance-patterns: ## Run pattern acceptance tests\n\tcd tests/acceptance/patterns/keyvalue && go test -v -timeout 15m ./...\n\tcd tests/acceptance/patterns/consumer && go test -v -timeout 15m ./...\n\ntest-acceptance-keyvalue: ## Run KeyValue pattern tests only\n\tcd tests/acceptance/patterns/keyvalue && go test -v ./...\n\ntest-acceptance-consumer: ## Run Consumer pattern tests only\n\tcd tests/acceptance/patterns/consumer && go test -v ./...\n"})}),"\n",(0,r.jsx)(n.h2,{id:"adding-new-patterns",children:"Adding New Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"1-create-pattern-test-file",children:"1. Create Pattern Test File"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"tests/acceptance/patterns/timeseries/basic_test.go"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package timeseries_test\n\nimport (\n    "testing"\n    "github.com/jrepp/prism-data-layer/tests/acceptance/framework"\n    _ "github.com/jrepp/prism-data-layer/tests/acceptance/backends"\n)\n\nfunc TestTimeSeriesBasicPattern(t *testing.T) {\n    tests := []framework.PatternTest{\n        {\n            Name: "WritePoints",\n            Func: testWritePoints,\n        },\n        {\n            Name: "QueryRange",\n            Func: testQueryRange,\n        },\n    }\n\n    framework.RunPatternTests(t, framework.PatternTimeSeriesBasic, tests)\n}\n\nfunc testWritePoints(t *testing.T, driver interface{}, caps framework.Capabilities) {\n    ts := driver.(plugin.TimeSeriesBasicInterface)\n    // ... test logic\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-register-pattern-constant",children:"2. Register Pattern Constant"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"tests/acceptance/framework/types.go"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type Pattern string\n\nconst (\n    PatternKeyValueBasic    Pattern = "KeyValueBasic"\n    PatternKeyValueTTL      Pattern = "KeyValueTTL"\n    PatternPubSubBasic      Pattern = "PubSubBasic"\n    PatternConsumer         Pattern = "Consumer"\n    PatternTimeSeriesBasic  Pattern = "TimeSeriesBasic"  // Add new pattern\n)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-backends-auto-discover",children:"3. Backends Auto-Discover"}),"\n",(0,r.jsxs)(n.p,{children:["Backends that implement ",(0,r.jsx)(n.code,{children:"TimeSeriesBasicInterface"})," can register support:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func init() {\n    framework.MustRegisterBackend(framework.Backend{\n        Name: "InfluxDB",\n        SetupFunc: setupInfluxDB,\n        SupportedPatterns: []framework.Pattern{\n            framework.PatternTimeSeriesBasic,  // Declare support\n        },\n    })\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Result"}),": All TimeSeries tests automatically run against InfluxDB!"]}),"\n",(0,r.jsx)(n.h2,{id:"adding-new-backends",children:"Adding New Backends"}),"\n",(0,r.jsx)(n.h3,{id:"1-implement-backend-setup",children:"1. Implement Backend Setup"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"tests/acceptance/backends/influxdb.go"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package backends\n\nimport (\n    "context"\n    "testing"\n    "github.com/jrepp/prism-data-layer/tests/acceptance/framework"\n    "github.com/jrepp/prism-data-layer/pkg/drivers/influxdb"\n)\n\nfunc init() {\n    framework.MustRegisterBackend(framework.Backend{\n        Name:      "InfluxDB",\n        SetupFunc: setupInfluxDB,\n\n        SupportedPatterns: []framework.Pattern{\n            framework.PatternTimeSeriesBasic,\n        },\n\n        Capabilities: framework.Capabilities{\n            SupportsTTL:       true,\n            SupportsStreaming: true,\n            MaxValueSize:      10 * 1024 * 1024,  // 10MB\n        },\n    })\n}\n\nfunc setupInfluxDB(t *testing.T, ctx context.Context) (interface{}, func()) {\n    t.Helper()\n\n    // Start InfluxDB container\n    container, err := testcontainers.GenericContainer(ctx,\n        testcontainers.GenericContainerRequest{\n            ContainerRequest: testcontainers.ContainerRequest{\n                Image: "influxdb:2.7-alpine",\n                ExposedPorts: []string{"8086/tcp"},\n                WaitingFor: wait.ForLog("Ready for queries"),\n            },\n            Started: true,\n        })\n    require.NoError(t, err)\n\n    // Get connection endpoint\n    endpoint, err := container.Endpoint(ctx, "")\n    require.NoError(t, err)\n\n    // Create driver\n    driver, err := influxdb.NewInfluxDBDriver(ctx, map[string]interface{}{\n        "url": fmt.Sprintf("http://%s", endpoint),\n        "token": "test-token",\n        "org": "test-org",\n        "bucket": "test-bucket",\n    })\n    require.NoError(t, err)\n\n    // Start driver\n    err = driver.Start(ctx)\n    require.NoError(t, err)\n\n    cleanup := func() {\n        driver.Stop(ctx)\n        container.Terminate(ctx)\n    }\n\n    return driver, cleanup\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-import-in-tests",children:"2. Import in Tests"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"File"}),": ",(0,r.jsx)(n.code,{children:"tests/acceptance/patterns/timeseries/basic_test.go"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import (\n    _ "github.com/jrepp/prism-data-layer/tests/acceptance/backends"\n)\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Result"}),": All TimeSeriesBasicPattern tests automatically run against InfluxDB!"]}),"\n",(0,r.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,r.jsx)(n.h3,{id:"1-zero-test-duplication",children:"1. Zero Test Duplication"}),"\n",(0,r.jsx)(n.p,{children:"Write test logic once:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"func testSetAndGet(t *testing.T, driver interface{}, caps framework.Capabilities) {\n    // Single implementation\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Runs automatically against:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"MemStore"}),"\n",(0,r.jsx)(n.li,{children:"Redis"}),"\n",(0,r.jsx)(n.li,{children:"PostgreSQL (if added)"}),"\n",(0,r.jsx)(n.li,{children:"DynamoDB (if added)"}),"\n",(0,r.jsx)(n.li,{children:"Any future backend"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-pattern-focused-testing",children:"2. Pattern-Focused Testing"}),"\n",(0,r.jsxs)(n.p,{children:["Tests validate ",(0,r.jsx)(n.strong,{children:"pattern behavior"}),", not backend implementation:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Does KeyValue pattern work correctly?"}),"\n",(0,r.jsx)(n.li,{children:"Does Consumer pattern process messages?"}),"\n",(0,r.jsx)(n.li,{children:"Does PubSub pattern deliver to subscribers?"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Backends are ",(0,r.jsx)(n.strong,{children:"interchangeable"})," - tests don't care which backend implements the pattern."]}),"\n",(0,r.jsx)(n.h3,{id:"3-easy-backend-addition",children:"3. Easy Backend Addition"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Before"}),": Write 400-line test file for each backend"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"After"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Implement ",(0,r.jsx)(n.code,{children:"SetupFunc"})," (~30 lines)"]}),"\n",(0,r.jsx)(n.li,{children:"Register backend (~20 lines)"}),"\n",(0,r.jsx)(n.li,{children:"Done - all pattern tests run automatically"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-capability-based-test-skipping",children:"4. Capability-Based Test Skipping"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'{\n    Name: "TTLExpiration",\n    Func: testTTLExpiration,\n    RequiresCapability: "SupportsTTL",\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"MemStore (supports TTL): runs test"}),"\n",(0,r.jsx)(n.li,{children:"PostgreSQL (no TTL): skips test automatically"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"No manual skip logic in test code."}),"\n",(0,r.jsx)(n.h3,{id:"5-parallel-execution",children:"5. Parallel Execution"}),"\n",(0,r.jsx)(n.p,{children:"Tests run in parallel by backend:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"t.Run(backend.Name, func(t *testing.T) {\n    t.Parallel()  // Backends test concurrently\n    // ...\n})\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"MemStore and Redis test simultaneously"}),"\n",(0,r.jsx)(n.li,{children:"Reduces total test time"}),"\n",(0,r.jsx)(n.li,{children:"Each backend has isolated testcontainer"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"6-clear-test-organization",children:"6. Clear Test Organization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"patterns/\n\u251c\u2500\u2500 keyvalue/         # All KeyValue tests\n\u2502   \u251c\u2500\u2500 basic_test.go\n\u2502   \u251c\u2500\u2500 ttl_test.go\n\u2502   \u2514\u2500\u2500 concurrent_test.go\n\u2514\u2500\u2500 consumer/         # All Consumer tests\n    \u251c\u2500\u2500 consumer_test.go\n    \u2514\u2500\u2500 process_test.go\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Tests organized by ",(0,r.jsx)(n.strong,{children:"what they test"})," (pattern), not ",(0,r.jsx)(n.strong,{children:"how they test"})," (backend)."]}),"\n",(0,r.jsx)(n.h2,{id:"running-tests",children:"Running Tests"}),"\n",(0,r.jsx)(n.h3,{id:"all-pattern-tests",children:"All Pattern Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run all pattern acceptance tests\nmake test-acceptance-patterns\n\n# Or directly\ncd tests/acceptance/patterns/keyvalue && go test -v ./...\ncd tests/acceptance/patterns/consumer && go test -v ./...\n"})}),"\n",(0,r.jsx)(n.h3,{id:"specific-pattern",children:"Specific Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# KeyValue pattern only\nmake test-acceptance-keyvalue\n\n# Consumer pattern only\nmake test-acceptance-consumer\n"})}),"\n",(0,r.jsx)(n.h3,{id:"specific-backend--pattern",children:"Specific Backend + Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# KeyValue tests on Redis only\ncd tests/acceptance/patterns/keyvalue\ngo test -v -run TestKeyValueBasicPattern/Redis\n\n# Consumer tests on NATS only\ncd tests/acceptance/patterns/consumer\ngo test -v -run TestConsumerPattern/NATS\n"})}),"\n",(0,r.jsx)(n.h3,{id:"specific-test--backend",children:"Specific Test + Backend"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# SetAndGet test on MemStore\ncd tests/acceptance/patterns/keyvalue\ngo test -v -run TestKeyValueBasicPattern/MemStore/SetAndGet\n"})}),"\n",(0,r.jsx)(n.h2,{id:"migration-from-backend-specific-tests",children:"Migration from Backend-Specific Tests"}),"\n",(0,r.jsx)(n.h3,{id:"old-approach-memo-015",children:"Old Approach (MEMO-015)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"tests/acceptance/redis/redis_integration_test.go\ntests/acceptance/nats/nats_integration_test.go\ntests/acceptance/postgres/postgres_integration_test.go\n"})}),"\n",(0,r.jsx)(n.p,{children:"Each file: 200-415 lines of duplicated test logic"}),"\n",(0,r.jsx)(n.h3,{id:"new-approach-current",children:"New Approach (Current)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"tests/acceptance/patterns/keyvalue/basic_test.go       # 232 lines\ntests/acceptance/patterns/keyvalue/ttl_test.go         # 150 lines\ntests/acceptance/patterns/consumer/consumer_test.go    # 200 lines\n"})}),"\n",(0,r.jsx)(n.p,{children:"Tests written once, run against all backends"}),"\n",(0,r.jsx)(n.h3,{id:"migration-steps",children:"Migration Steps"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Create pattern test files"})," - Done"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Implement backend registry"})," - Done"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Register backends (MemStore, Redis, NATS)"})," - Done"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Update CI/CD workflows"})," - Done"]}),"\n",(0,r.jsxs)(n.li,{children:["\u23f3 ",(0,r.jsx)(n.strong,{children:"Deprecate old backend-specific tests"})," - In Progress"]}),"\n",(0,r.jsxs)(n.li,{children:["\u23f3 ",(0,r.jsx)(n.strong,{children:"Remove old acceptance test workflows"})," - Pending"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"comparison",children:"Comparison"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Aspect"}),(0,r.jsx)(n.th,{children:"Backend-Specific (Old)"}),(0,r.jsx)(n.th,{children:"Pattern-Based (New)"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Test Files"}),(0,r.jsx)(n.td,{children:"3-4 per backend"}),(0,r.jsx)(n.td,{children:"1 per pattern"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Lines of Code"}),(0,r.jsx)(n.td,{children:"200-415 per backend"}),(0,r.jsx)(n.td,{children:"150-250 per pattern"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Duplication"}),(0,r.jsx)(n.td,{children:"High (same tests repeated)"}),(0,r.jsx)(n.td,{children:"Zero (tests written once)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Maintenance"}),(0,r.jsx)(n.td,{children:"Update each backend file"}),(0,r.jsx)(n.td,{children:"Update pattern file once"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"New Backend"}),(0,r.jsx)(n.td,{children:"Write entire test file (200+ lines)"}),(0,r.jsx)(n.td,{children:"Register backend (50 lines)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Test Focus"}),(0,r.jsx)(n.td,{children:"Backend implementation"}),(0,r.jsx)(n.td,{children:"Pattern behavior"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Backend Discovery"}),(0,r.jsx)(n.td,{children:"Manual (hardcoded)"}),(0,r.jsx)(n.td,{children:"Automatic (registration)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Parallel Execution"}),(0,r.jsx)(n.td,{children:"Manual coordination"}),(0,r.jsx)(n.td,{children:"Automatic (framework)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Capability Skipping"}),(0,r.jsx)(n.td,{children:"Manual skip logic in tests"}),(0,r.jsx)(n.td,{children:"Declarative (RequiresCapability)"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,r.jsx)(n.h3,{id:"1-interface-based-registration",children:"1. Interface-Based Registration"}),"\n",(0,r.jsx)(n.p,{children:"Move to interface-based backend registration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'framework.MustRegisterBackend(framework.Backend{\n    Name: "Redis",\n    SetupFunc: setupRedis,\n\n    // Instead of patterns, declare interfaces\n    Interfaces: []string{\n        "KeyValueBasicInterface",\n        "KeyValueTTLInterface",\n        "PubSubBasicInterface",\n    },\n})\n'})}),"\n",(0,r.jsx)(n.p,{children:"Framework automatically maps interfaces \u2192 patterns."}),"\n",(0,r.jsx)(n.h3,{id:"2-multi-backend-patterns",children:"2. Multi-Backend Patterns"}),"\n",(0,r.jsx)(n.p,{children:"Test patterns that use multiple backends:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func TestConsumerPatternMultiBackend(t *testing.T) {\n    tests := []framework.MultiBackendPatternTest{\n        {\n            Name: "NATS_Redis_Consumer",\n            MessageSource: "NATS",\n            StateStore: "Redis",\n            Func: testConsumerNATSRedis,\n        },\n    }\n\n    framework.RunMultiBackendPatternTests(t, tests)\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-property-based-testing",children:"3. Property-Based Testing"}),"\n",(0,r.jsx)(n.p,{children:"Add randomized property-based testing (like MEMO-015):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'{\n    Name: "PropertyBased_SetGet",\n    Func: testPropertyBasedSetGet,\n    Iterations: 100,  // Run 100 times with random data\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-performance-benchmarking",children:"4. Performance Benchmarking"}),"\n",(0,r.jsx)(n.p,{children:"Benchmark pattern operations across backends:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func BenchmarkKeyValueSet(b *testing.B) {\n    framework.BenchmarkPatternOperation(b,\n        framework.PatternKeyValueBasic,\n        func(driver interface{}) {\n            kv := driver.(plugin.KeyValueBasicInterface)\n            kv.Set("key", []byte("value"), 0)\n        })\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Output: ops/sec comparison across all backends"}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Pattern-based acceptance testing provides:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Zero duplication"})," - Write tests once, run everywhere"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Pattern-focused"})," - Test pattern behavior, not backends"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Auto-discovery"})," - Backends register and run automatically"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Easy maintenance"})," - Update tests in one place"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Simple backend addition"})," - 50 lines to add full test coverage"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Capability-aware"})," - Tests skip when requirements not met"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Parallel execution"})," - Faster test runs"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Clear organization"})," - Tests grouped by pattern"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This approach scales to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"10+ patterns (KeyValue, PubSub, Queue, TimeSeries, Graph, etc.)"}),"\n",(0,r.jsx)(n.li,{children:"20+ backends (Redis, Kafka, NATS, PostgreSQL, DynamoDB, S3, etc.)"}),"\n",(0,r.jsx)(n.li,{children:"100+ test cases per pattern"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"...without duplicating a single line of test code."}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/memos/memo-015",children:"MEMO-015: Cross-Backend Acceptance Test Framework"})," - Previous backend-specific approach"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/adr/adr-015",children:"ADR-015: Go Testing Strategy"})," - Overall Go testing philosophy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/rfc/rfc-015",children:"RFC-015: Plugin Acceptance Test Framework"})," - Original plugin testing RFC"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);