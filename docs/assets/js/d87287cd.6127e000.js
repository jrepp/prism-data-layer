"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[86126],{28453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>o});var s=r(96540);const a={},t=s.createContext(a);function i(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),s.createElement(t.Provider,{value:n},e.children)}},88397:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"adr-037","title":"Kubernetes Operator with Custom Resource Definitions","description":"Context","source":"@site/../docs-cms/adr/adr-037-kubernetes-operator.md","sourceDirName":".","slug":"/adr-037","permalink":"/prism-data-layer/adr/adr-037","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-037-kubernetes-operator.md","tags":[{"inline":true,"label":"operations","permalink":"/prism-data-layer/adr/tags/operations"},{"inline":true,"label":"deployment","permalink":"/prism-data-layer/adr/tags/deployment"},{"inline":true,"label":"kubernetes","permalink":"/prism-data-layer/adr/tags/kubernetes"},{"inline":true,"label":"automation","permalink":"/prism-data-layer/adr/tags/automation"},{"inline":true,"label":"dx","permalink":"/prism-data-layer/adr/tags/dx"}],"version":"current","frontMatter":{"date":"2025-10-08T00:00:00.000Z","deciders":"System","doc_uuid":"a59c9c6c-a815-4a64-90a2-de2ce7e9362d","id":"adr-037","project_id":"prism-data-layer","status":"Proposed","tags":["operations","deployment","kubernetes","automation","dx"],"title":"Kubernetes Operator with Custom Resource Definitions"},"sidebar":"adrSidebar","previous":{"title":"Local SQLite Storage for Namespace Configuration \u2022 ADR-036","permalink":"/prism-data-layer/adr/adr-036"},"next":{"title":"Backend Connector Buffer Architecture \u2022 ADR-038","permalink":"/prism-data-layer/adr/adr-038"}}');var a=r(74848),t=r(28453);const i={date:new Date("2025-10-08T00:00:00.000Z"),deciders:"System",doc_uuid:"a59c9c6c-a815-4a64-90a2-de2ce7e9362d",id:"adr-037",project_id:"prism-data-layer",status:"Proposed",tags:["operations","deployment","kubernetes","automation","dx"],title:"Kubernetes Operator with Custom Resource Definitions"},o=void 0,l={},c=[{value:"Context",id:"context",level:2},{value:"Manual Management Pain Points",id:"manual-management-pain-points",level:3},{value:"Kubernetes Operator Pattern",id:"kubernetes-operator-pattern",level:3},{value:"Decision",id:"decision",level:2},{value:"Custom Resources",id:"custom-resources",level:3},{value:"Operator Architecture",id:"operator-architecture",level:3},{value:"Example Controller Logic",id:"example-controller-logic",level:3},{value:"Deployment",id:"deployment",level:3},{value:"Integration with ADR-036 (SQLite Storage)",id:"integration-with-adr-036-sqlite-storage",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,a.jsx)(n.p,{children:"Managing Prism deployments at scale requires automation for:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Namespace Lifecycle"}),": Creating, updating, deleting namespaces across multiple Prism instances"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Shard Management"}),": Deploying product/feature-based shards (ADR-034)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Plugin Installation"}),": Distributing plugins across instances"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Configuration Sync"}),": Keeping namespace configs consistent across replicas"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Resource Management"}),": CPU/memory limits, autoscaling, health checks"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"manual-management-pain-points",children:"Manual Management Pain Points"}),"\n",(0,a.jsx)(n.p,{children:"Without automation:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"YAML Hell"}),": Manually maintaining hundreds of namespace config files"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Deployment Complexity"}),": kubectl apply across multiple files, error-prone"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Inconsistency"}),": Config drift between Prism instances"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"No GitOps"}),": Can't declaratively manage Prism infrastructure as code"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Slow Iteration"}),": Namespace changes require manual updates to multiple instances"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"kubernetes-operator-pattern",children:"Kubernetes Operator Pattern"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Operators"})," extend Kubernetes with custom logic to manage applications:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"CRDs"})," (Custom Resource Definitions): Define custom resources (e.g., ",(0,a.jsx)(n.code,{children:"PrismNamespace"}),")"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Controller"}),": Watches CRDs, reconciles desired state \u2192 actual state"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Declarative"}),": Describe what you want, operator figures out how"]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Examples"}),": PostgreSQL Operator, Kafka Operator, Istio Operator"]}),"\n",(0,a.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Build a Prism Kubernetes Operator"})," that manages Prism deployments via Custom Resource Definitions (CRDs)."]}),"\n",(0,a.jsx)(n.h3,{id:"custom-resources",children:"Custom Resources"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# CRD 1: PrismNamespace\napiVersion: prism.io/v1alpha1\nkind: PrismNamespace\nmetadata:\n  name: user-profiles\nspec:\n  backend: postgres\n  pattern: keyvalue\n  consistency: strong\n  backendConfig:\n    connection_string: postgres://db:5432/profiles\n    pool_size: 20\n  caching:\n    enabled: true\n    ttl: 300s\n  rateLimit:\n    rps: 10000\n  shard:  # Optional: assign to specific shard\n    product: playback\n    slaTier: p99_10ms\n\nstatus:\n  state: Active\n  prismInstances:\n    - prism-playback-0\n    - prism-playback-1\n  health: Healthy\n  metrics:\n    rps: 1234\n    p99Latency: 8ms\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# CRD 2: PrismShard (from ADR-034)\napiVersion: prism.io/v1alpha1\nkind: PrismShard\nmetadata:\n  name: playback-live\nspec:\n  product: playback\n  feature: live\n  slaTier: p99_10ms\n  replicas: 5\n  backends:\n    - postgres\n    - redis\n  resources:\n    requests:\n      cpu: "4"\n      memory: "8Gi"\n    limits:\n      cpu: "8"\n      memory: "16Gi"\n  plugins:\n    - name: postgres\n      version: "1.2.0"\n      deployment: sidecar\n    - name: redis\n      version: "2.1.3"\n      deployment: in-process\n  autoscaling:\n    enabled: true\n    minReplicas: 3\n    maxReplicas: 20\n    targetRPS: 5000\n\nstatus:\n  readyReplicas: 5\n  namespaces: 12\n  aggregateMetrics:\n    totalRPS: 24567\n    avgP99Latency: 9ms\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:'# CRD 3: PrismPlugin\napiVersion: prism.io/v1alpha1\nkind: PrismPlugin\nmetadata:\n  name: mongodb\nspec:\n  version: "1.0.0"\n  source:\n    registry: ghcr.io/prism/plugins\n    image: mongodb-plugin:1.0.0\n  deployment:\n    type: sidecar  # or in-process, remote\n    resources:\n      requests:\n        cpu: "500m"\n        memory: "1Gi"\n      limits:\n        cpu: "2"\n        memory: "4Gi"\n  healthCheck:\n    grpc:\n      port: 50100\n      service: prism.plugin.BackendPlugin\n    interval: 30s\n    timeout: 5s\n\nstatus:\n  installed: true\n  shards:\n    - playback-live\n    - analytics-batch\n  namespacesUsing: 15\n'})}),"\n",(0,a.jsx)(n.h3,{id:"operator-architecture",children:"Operator Architecture"}),"\n",(0,a.jsx)(n.p,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Kubernetes Cluster                       \u2502\n\u2502                                                           \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502             Prism Operator (Controller)             \u2502 \u2502\n\u2502  \u2502                                                     \u2502 \u2502\n\u2502  \u2502  Watches:                                           \u2502 \u2502\n\u2502  \u2502  - PrismNamespace CRDs                              \u2502 \u2502\n\u2502  \u2502  - PrismShard CRDs                                  \u2502 \u2502\n\u2502  \u2502  - PrismPlugin CRDs                                 \u2502 \u2502\n\u2502  \u2502                                                     \u2502 \u2502\n\u2502  \u2502  Reconciles:                                        \u2502 \u2502\n\u2502  \u2502  1. Creates/updates Prism Deployments              \u2502 \u2502\n\u2502  \u2502  2. Provisions PVCs for SQLite config (ADR-036)    \u2502 \u2502\n\u2502  \u2502  3. Deploys plugin sidecars                        \u2502 \u2502\n\u2502  \u2502  4. Updates Services, Ingress                      \u2502 \u2502\n\u2502  \u2502  5. Syncs namespace config to Prism instances       \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502           \u2502                              \u2502               \u2502\n\u2502           \u25bc                              \u25bc               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502  \u2502  PrismShard:     \u2502        \u2502  PrismShard:     \u2502       \u2502\n\u2502  \u2502  playback-live   \u2502        \u2502  analytics-batch \u2502       \u2502\n\u2502  \u2502                  \u2502        \u2502                  \u2502       \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502        \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502       \u2502\n\u2502  \u2502  \u2502 Prism Pod  \u2502  \u2502        \u2502  \u2502 Prism Pod  \u2502  \u2502       \u2502\n\u2502  \u2502  \u2502 replicas:5 \u2502  \u2502        \u2502  \u2502 replicas:3 \u2502  \u2502       \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502        \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502       \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502        \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502       \u2502\n\u2502  \u2502  \u2502  Plugins   \u2502  \u2502        \u2502  \u2502  Plugins   \u2502  \u2502       \u2502\n\u2502  \u2502  \u2502 (sidecars) \u2502  \u2502        \u2502  \u2502 (sidecars) \u2502  \u2502       \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502        \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502       \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n### Reconciliation Logic\n\n**When a PrismNamespace is created**:\n1. Operator determines which shard should host it (based on shard selector)\n2. Updates Prism instance's SQLite config database (ADR-036) via Admin API\n3. Verifies namespace is active and healthy\n4. Updates `PrismNamespace.status` with assigned shard and metrics\n\n**When a PrismShard is created**:\n1. Creates Deployment with specified replicas\n2. Creates PersistentVolumeClaim for each replica (SQLite storage)\n3. Creates Service (ClusterIP for internal, LoadBalancer if exposed)\n4. Deploys plugin sidecars as specified\n5. Initializes SQLite databases on each replica\n6. Waits for all replicas to be ready\n\n**When a PrismPlugin is updated**:\n1. Pulls new plugin image\n2. For each shard using the plugin:\n   - Performs rolling update of plugin sidecars\n   - Verifies health after each update\n   - Rolls back on failure\n\n## Rationale\n\n### Why Custom Operator vs Raw Kubernetes?\n\n**Without Operator** (raw Kubernetes manifests):\n"})}),"\n",(0,a.jsx)(n.h1,{id:"must-manually-define",children:"Must manually define:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Deployment for each shard"}),"\n",(0,a.jsx)(n.li,{children:"StatefulSet for SQLite persistence"}),"\n",(0,a.jsx)(n.li,{children:"Services for each shard"}),"\n",(0,a.jsx)(n.li,{children:"ConfigMaps for namespace configs (must sync manually!)"}),"\n",(0,a.jsx)(n.li,{children:"Plugin sidecar injection (manual, error-prone)"}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n**With Operator**:\n"})}),"\n",(0,a.jsx)(n.h1,{id:"just-define",children:"Just define:"}),"\n",(0,a.jsx)(n.p,{children:"apiVersion: prism.io/v1alpha1\nkind: PrismNamespace\nmetadata:\nname: my-namespace\nspec:\nbackend: postgres\npattern: keyvalue"}),"\n",(0,a.jsx)(n.h1,{id:"operator-handles-the-rest",children:"Operator handles the rest!"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-text",children:"\n### Compared to Alternatives\n\n**vs Helm Charts**:\n- \u2705 Operator is dynamic (watches for changes, reconciles)\n- \u2705 Operator can query Prism API for current state\n- \u274c Helm is static (install/upgrade only)\n- **Use both**: Operator installed via Helm, then manages CRDs\n\n**vs Manual kubectl**:\n- \u2705 Operator enforces best practices\n- \u2705 Operator handles complex workflows (rolling updates, health checks)\n- \u274c kubectl requires manual orchestration\n- **Operator wins** for production deployments\n\n**vs External Tool (Ansible, Terraform)**:\n- \u2705 Operator is Kubernetes-native (no external dependencies)\n- \u2705 Operator continuously reconciles (self-healing)\n- \u274c External tools are one-shot (no continuous reconciliation)\n- **Operator preferred** for Kubernetes environments\n\n## Alternatives Considered\n\n### 1. Helm Charts Only\n\n- **Pros**: Simpler, no custom code\n- **Cons**: No dynamic reconciliation, can't query Prism state\n- **Rejected because**: Doesn't scale operationally (manual config sync)\n\n### 2. GitOps (ArgoCD/Flux) Without Operator\n\n- **Pros**: Declarative, Git as source of truth\n- **Cons**: Still need to manage low-level Kubernetes resources manually\n- **Partially accepted**: Use GitOps + Operator (ArgoCD applies CRDs, operator reconciles)\n\n### 3. Serverless Functions (AWS Lambda, CloudRun)\n\n- **Pros**: No Kubernetes needed\n- **Cons**: Stateful config management harder, no standard API\n- **Rejected because**: Prism is Kubernetes-native, operator pattern is standard\n\n## Consequences\n\n### Positive\n\n- **Declarative Management**: `kubectl apply namespace.yaml` creates namespace across all shards\n- **GitOps Ready**: CRDs in Git \u2192 ArgoCD applies \u2192 Operator reconciles\n- **Self-Healing**: Operator detects drift and corrects it\n- **Reduced Ops Burden**: No manual config sync, deployment orchestration\n- **Type Safety**: CRDs are schema-validated by Kubernetes API server\n- **Extensibility**: Easy to add new CRDs (e.g., `PrismMigration` for shadow traffic automation)\n\n### Negative\n\n- **Operator Complexity**: Must maintain operator code (Rust + kube-rs or Go + controller-runtime)\n- **Kubernetes Dependency**: Prism is now tightly coupled to Kubernetes (but can still run standalone)\n- **Learning Curve**: Operators require understanding of reconciliation loops, watches, caching\n\n### Neutral\n\n- **CRD Versioning**: Must handle API versioning (v1alpha1 \u2192 v1beta1 \u2192 v1) over time\n- **RBAC**: Operator needs permissions to create/update Deployments, Services, etc.\n- **Observability**: Operator needs its own metrics, logging, tracing\n\n## Implementation Notes\n\n### Technology Stack\n\n**Language**: Rust (kube-rs) or Go (controller-runtime/operator-sdk)\n- **Rust**: Better type safety, performance\n- **Go**: More mature operator ecosystem, examples\n\n**Recommendation**: **Go with operator-sdk** (faster development, better docs)\n\n### Project Structure\n\nprism-operator/\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 Makefile\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 main.go                     # Operator entry point\n\u251c\u2500\u2500 api/\n\u2502   \u2514\u2500\u2500 v1alpha1/\n\u2502       \u251c\u2500\u2500 prismnamespace_types.go\n\u2502       \u251c\u2500\u2500 prismshard_types.go\n\u2502       \u2514\u2500\u2500 prismplugin_types.go\n\u251c\u2500\u2500 controllers/\n\u2502   \u251c\u2500\u2500 prismnamespace_controller.go\n\u2502   \u251c\u2500\u2500 prismshard_controller.go\n\u2502   \u2514\u2500\u2500 prismplugin_controller.go\n\u251c\u2500\u2500 config/\n\u2502   \u251c\u2500\u2500 crd/                    # Generated CRD YAML\n\u2502   \u251c\u2500\u2500 rbac/                   # RBAC manifests\n\u2502   \u251c\u2500\u2500 manager/                # Operator deployment\n\u2502   \u2514\u2500\u2500 samples/                # Example CRDs\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 e2e/\n"})}),"\n",(0,a.jsx)(n.h3,{id:"example-controller-logic",children:"Example Controller Logic"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:'// PrismNamespaceReconciler reconciles a PrismNamespace object\nfunc (r *PrismNamespaceReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {\n    log := r.Log.WithValues("prismnamespace", req.NamespacedName)\n\n    // 1. Fetch PrismNamespace\n    var ns prismv1alpha1.PrismNamespace\n    if err := r.Get(ctx, req.NamespacedName, &ns); err != nil {\n        return ctrl.Result{}, client.IgnoreNotFound(err)\n    }\n\n    // 2. Find appropriate shard for this namespace\n    shard, err := r.findShardForNamespace(&ns)\n    if err != nil {\n        return ctrl.Result{}, err\n    }\n\n    // 3. Get Prism instance admin client\n    prismClient, err := r.getPrismClient(shard)\n    if err != nil {\n        return ctrl.Result{}, err\n    }\n\n    // 4. Create/update namespace in Prism\n    _, err = prismClient.CreateNamespace(ctx, &admin.CreateNamespaceRequest{\n        Name:    ns.Spec.Name,\n        Backend: ns.Spec.Backend,\n        Pattern: ns.Spec.Pattern,\n        // ... other config\n    })\n    if err != nil {\n        return ctrl.Result{}, err\n    }\n\n    // 5. Update status\n    ns.Status.State = "Active"\n    ns.Status.PrismInstances = shard.Status.ReadyReplicas\n    if err := r.Status().Update(ctx, &ns); err != nil {\n        return ctrl.Result{}, err\n    }\n\n    log.Info("Reconciled PrismNamespace successfully")\n    return ctrl.Result{}, nil\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"deployment",children:"Deployment"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Install CRDs\nkubectl apply -f config/crd/\n\n# Deploy operator\nkubectl apply -f config/manager/\n\n# Create PrismShard\nkubectl apply -f config/samples/shard.yaml\n\n# Create PrismNamespace\nkubectl apply -f config/samples/namespace.yaml\n\n# Check status\nkubectl get prismnamespaces\nkubectl get prismshards\nkubectl describe prismnamespace user-profiles\n"})}),"\n",(0,a.jsx)(n.h3,{id:"integration-with-adr-036-sqlite-storage",children:"Integration with ADR-036 (SQLite Storage)"}),"\n",(0,a.jsx)(n.p,{children:"Operator provisions PersistentVolumeClaims for SQLite databases:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"apiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: prism-playback-0-config\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n  storageClassName: ssd\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Each Prism pod mounts PVC at ",(0,a.jsx)(n.code,{children:"/var/lib/prism/config.db"}),"."]}),"\n",(0,a.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/extend-kubernetes/operator/",children:"Kubernetes Operator Pattern"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://sdk.operatorframework.io/",children:"operator-sdk Documentation"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/kube-rs/kube-rs",children:"kube-rs"})}),"\n",(0,a.jsx)(n.li,{children:"ADR-034: Product/Feature Sharding (shard deployment)"}),"\n",(0,a.jsx)(n.li,{children:"ADR-036: SQLite Config Storage (what operator provisions)"}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://github.com/zalando/postgres-operator",children:"PostgreSQL Operator"})," (reference implementation)"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"2025-10-08: Initial draft proposing Kubernetes Operator with CRDs"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);