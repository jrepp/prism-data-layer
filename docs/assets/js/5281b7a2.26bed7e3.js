"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[2443],{10936:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"architecture","title":"Architecture","description":"Architecture overview with system diagrams, component responsibilities, and backend interface mapping","source":"@site/docs/architecture.md","sourceDirName":".","slug":"/architecture","permalink":"/prism-data-layer/docs/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docusaurus/docs/architecture.md","tags":[{"inline":true,"label":"architecture","permalink":"/prism-data-layer/docs/tags/architecture"},{"inline":true,"label":"technical-overview","permalink":"/prism-data-layer/docs/tags/technical-overview"},{"inline":true,"label":"system-design","permalink":"/prism-data-layer/docs/tags/system-design"},{"inline":true,"label":"backend-interfaces","permalink":"/prism-data-layer/docs/tags/backend-interfaces"},{"inline":true,"label":"patterns","permalink":"/prism-data-layer/docs/tags/patterns"}],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Architecture","sidebar_position":3,"description":"Architecture overview with system diagrams, component responsibilities, and backend interface mapping","tags":["architecture","technical-overview","system-design","backend-interfaces","patterns"]},"sidebar":"tutorialSidebar","previous":{"title":"Foundations","permalink":"/prism-data-layer/docs/key-documents"}}');var i=r(74848),t=r(28453);const a={title:"Architecture",sidebar_position:3,description:"Architecture overview with system diagrams, component responsibilities, and backend interface mapping",tags:["architecture","technical-overview","system-design","backend-interfaces","patterns"]},c="Architecture",l={},d=[{value:"What is Prism?",id:"what-is-prism",level:2},{value:"Core Value Propositions",id:"core-value-propositions",level:3},{value:"Key Metrics",id:"key-metrics",level:3},{value:"High-Level Architecture",id:"high-level-architecture",level:2},{value:"Three-Layer Design Philosophy",id:"three-layer-design-philosophy",level:3},{value:"System Architecture Diagram",id:"system-architecture-diagram",level:2},{value:"Complete Data Flow: Client \u2192 Proxy \u2192 Pattern \u2192 Pattern Provider \u2192 Backend",id:"complete-data-flow-client--proxy--pattern--pattern-provider--backend",level:3},{value:"Data Flow Example: Publishing Large Message",id:"data-flow-example-publishing-large-message",level:3},{value:"Proxy and Pattern Provider Architecture",id:"proxy-and-pattern-provider-architecture",level:2},{value:"Responsibility Separation",id:"responsibility-separation",level:3},{value:"Pattern Provider Interface (gRPC-Based)",id:"pattern-provider-interface-grpc-based",level:3},{value:"Zero-Copy Data Path",id:"zero-copy-data-path",level:3},{value:"Backend Interface Decomposition",id:"backend-interface-decomposition",level:2},{value:"Design Philosophy: Thin, Composable Interfaces",id:"design-philosophy-thin-composable-interfaces",level:3},{value:"Complete Interface Catalog (45 Interfaces)",id:"complete-interface-catalog-45-interfaces",level:3},{value:"Backend Implementation Matrix",id:"backend-implementation-matrix",level:2},{value:"Which Backends Implement Which Interfaces?",id:"which-backends-implement-which-interfaces",level:3},{value:"Backend Comparison: Redis vs PostgreSQL",id:"backend-comparison-redis-vs-postgresql",level:3},{value:"Capabilities Expressed Through Interface Presence",id:"capabilities-expressed-through-interface-presence",level:3},{value:"Pattern Composition and Backend Mapping",id:"pattern-composition-and-backend-mapping",level:2},{value:"Patterns Require Backend Interfaces",id:"patterns-require-backend-interfaces",level:3},{value:"Backend Slot Validation",id:"backend-slot-validation",level:3},{value:"Pattern Portability Across Backends",id:"pattern-portability-across-backends",level:3},{value:"Design Rationale and Decision History",id:"design-rationale-and-decision-history",level:2},{value:"Why Three Layers?",id:"why-three-layers",level:3},{value:"Why Rust for Proxy?",id:"why-rust-for-proxy",level:3},{value:"Why Thin Interfaces Instead of Capability Flags?",id:"why-thin-interfaces-instead-of-capability-flags",level:3},{value:"Why Out-of-Process Pattern Providers?",id:"why-out-of-process-pattern-providers",level:3},{value:"Why Provider-Side Token Validation?",id:"why-provider-side-token-validation",level:3},{value:"Related Documentation",id:"related-documentation",level:2},{value:"Core RFCs",id:"core-rfcs",level:3},{value:"Design Memos",id:"design-memos",level:3},{value:"Implementation Guides",id:"implementation-guides",level:3},{value:"Key ADRs",id:"key-adrs",level:3},{value:"Quick Reference",id:"quick-reference",level:2},{value:"Backend Selection Guide",id:"backend-selection-guide",level:3},{value:"Pattern Selection Guide",id:"pattern-selection-guide",level:3},{value:"Common Operations",id:"common-operations",level:3},{value:"Summary",id:"summary",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"architecture",children:"Architecture"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Target Audience"}),": Technical users, platform engineers, backend developers"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Provide a comprehensive architectural overview of Prism's layered design, component responsibilities, backend interface decomposition, and pattern composition strategy."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"what-is-prism",children:"What is Prism?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Prism is a high-performance data access gateway"})," that sits between applications and heterogeneous data backends (Kafka, NATS, Postgres, Redis, etc.), providing a unified, client-configurable interface with built-in reliability patterns."]}),"\n",(0,i.jsx)(n.h3,{id:"core-value-propositions",children:"Core Value Propositions"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unified API"}),": Single gRPC/HTTP interface across all backends"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client-Originated Configuration"}),": Applications declare requirements; Prism provisions and optimizes\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Organizational Scalability"}),": Teams self-service without infrastructure bottlenecks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authorization Boundaries"}),": Policy-driven configuration limits ensure security and reliability"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rust Performance"}),": 10-100x faster than JVM alternatives (Netflix Data Gateway)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pluggable Pattern Providers"}),": Add new backends without changing application code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pattern Composition"}),": Reliability patterns (Outbox, Claim Check, CDC) transparently implemented"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-metrics",children:"Key Metrics"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Metric"}),(0,i.jsx)(n.th,{children:"Target"}),(0,i.jsx)(n.th,{children:"Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"P50 Latency"}),(0,i.jsx)(n.td,{children:"< 1ms"}),(0,i.jsx)(n.td,{children:"\u2705 Achieved (Rust proxy)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"P99 Latency"}),(0,i.jsx)(n.td,{children:"< 10ms"}),(0,i.jsx)(n.td,{children:"\u2705 Achieved (no GC pauses)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Throughput"}),(0,i.jsx)(n.td,{children:"10k+ RPS per connection"}),(0,i.jsx)(n.td,{children:"\u2705 Achieved"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Memory Footprint"}),(0,i.jsx)(n.td,{children:"< 500MB per proxy instance"}),(0,i.jsx)(n.td,{children:"\u2705 Achieved"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Cold Start"}),(0,i.jsx)(n.td,{children:"< 100ms"}),(0,i.jsx)(n.td,{children:"\u2705 Achieved (vs JVM ~10s)"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"high-level-architecture",children:"High-Level Architecture"}),"\n",(0,i.jsx)(n.h3,{id:"three-layer-design-philosophy",children:"Three-Layer Design Philosophy"}),"\n",(0,i.jsxs)(n.p,{children:["Prism separates ",(0,i.jsx)(n.strong,{children:"What"})," (client API), ",(0,i.jsx)(n.strong,{children:"How"})," (pattern composition), and ",(0,i.jsx)(n.strong,{children:"Where"})," (backend execution):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502             Layer 3: Client API (What)                     \u2502\n\u2502  Queue | PubSub | Reader | Transact | Cache | Stream       \u2502\n\u2502  "I want to publish messages to a queue"                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Layer 2: Pattern Composition (How)                 \u2502\n\u2502  Claim Check | Outbox | CDC | Tiered Storage | WAL        \u2502\n\u2502  "Automatically store large payloads in S3"                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502\n                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Layer 1: Backend Execution (Where)                 \u2502\n\u2502  Kafka | NATS | Postgres | Redis | S3 | ClickHouse        \u2502\n\u2502  "Connect to and execute operations on backend"            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Insight"}),": Applications interact with ",(0,i.jsx)(n.strong,{children:"Layer 3"})," (stable APIs), while Prism transparently applies ",(0,i.jsx)(n.strong,{children:"Layer 2"})," patterns and routes to ",(0,i.jsx)(n.strong,{children:"Layer 1"})," backends. This separation enables:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Backend migration without client changes"}),"\n",(0,i.jsx)(n.li,{children:"Pattern evolution without API breakage"}),"\n",(0,i.jsx)(n.li,{children:"Configuration-driven reliability"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"system-architecture-diagram",children:"System Architecture Diagram"}),"\n",(0,i.jsx)(n.h3,{id:"complete-data-flow-client--proxy--pattern--pattern-provider--backend",children:"Complete Data Flow: Client \u2192 Proxy \u2192 Pattern \u2192 Pattern Provider \u2192 Backend"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Client Layer"\n        App1[Application 1<br/>Python Client]\n        App2[Application 2<br/>Go Client]\n        App3[Application 3<br/>Rust Client]\n    end\n\n    subgraph "Prism Proxy Core (Rust)"\n        subgraph "Layer 3: Client API"\n            gRPC[gRPC Server<br/>Port 8980]\n            Auth[Authentication<br/>mTLS/JWT]\n            Router[Request Router<br/>Namespace-Based]\n        end\n\n        subgraph "Layer 2: Pattern Executors"\n            PatternChain[Pattern Chain<br/>Executor]\n            Outbox[Outbox Pattern<br/>Transactional]\n            ClaimCheck[Claim Check<br/>Large Payloads]\n            CDC[CDC Pattern<br/>Change Streaming]\n            WAL[WAL Pattern<br/>Durability]\n        end\n\n        subgraph "Layer 1: Backend Router"\n            BackendRouter[Backend Router<br/>Plugin Loader]\n            Metrics[Metrics Collector<br/>Prometheus]\n        end\n    end\n\n    subgraph "Pattern Providers (Go)"\n        KafkaProvider[Kafka Provider<br/>Streaming Pattern]\n        PGProvider[PostgreSQL Provider<br/>Relational Pattern]\n        RedisProvider[Redis Provider<br/>Cache Pattern]\n        NATSProvider[NATS Provider<br/>PubSub Pattern]\n    end\n\n    subgraph "Data Backends"\n        Kafka[(Kafka<br/>Event Streaming)]\n        Postgres[(PostgreSQL<br/>ACID Storage)]\n        Redis[(Redis<br/>In-Memory Cache)]\n        NATS[(NATS<br/>Messaging)]\n    end\n\n    App1 --\x3e|mTLS| gRPC\n    App2 --\x3e|JWT| gRPC\n    App3 --\x3e|mTLS| gRPC\n\n    gRPC --\x3e Auth\n    Auth --\x3e Router\n    Router --\x3e PatternChain\n\n    PatternChain --\x3e|Compose| Outbox\n    PatternChain --\x3e|Compose| ClaimCheck\n    PatternChain --\x3e|Compose| CDC\n    PatternChain --\x3e|Compose| WAL\n\n    Outbox --\x3e BackendRouter\n    ClaimCheck --\x3e BackendRouter\n    CDC --\x3e BackendRouter\n    WAL --\x3e BackendRouter\n\n    BackendRouter --\x3e|gRPC| KafkaProvider\n    BackendRouter --\x3e|gRPC| PGProvider\n    BackendRouter --\x3e|gRPC| RedisProvider\n    BackendRouter --\x3e|gRPC| NATSProvider\n\n    KafkaProvider --\x3e Kafka\n    PGProvider --\x3e Postgres\n    RedisProvider --\x3e Redis\n    NATSProvider --\x3e NATS\n\n    PatternChain -.->|Emit| Metrics\n    BackendRouter -.->|Emit| Metrics'}),"\n",(0,i.jsx)(n.h3,{id:"data-flow-example-publishing-large-message",children:"Data Flow Example: Publishing Large Message"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Client Request:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'client.publish("videos", video_bytes)  # 2GB payload\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Internal Flow:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Layer 3 (Client API)"}),": ",(0,i.jsx)(n.code,{children:"PubSubService.Publish()"})," accepts request"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Authentication"}),": JWT validated, namespace access checked"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Layer 2 (Patterns)"}),":\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Claim Check Pattern"}),": Detects size > 1MB, uploads to S3, replaces payload with reference"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Outbox Pattern"}),": Wraps in transaction, inserts into outbox table"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Layer 1 (Pattern Provider)"}),": Kafka pattern provider publishes lightweight message (< 1KB)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Response"}),": Client receives success"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Consumer retrieves:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'event = client.subscribe("videos")\nvideo_bytes = event.payload  # Prism fetches 2GB from S3 transparently\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"proxy-and-pattern-provider-architecture",children:"Proxy and Pattern Provider Architecture"}),"\n",(0,i.jsx)(n.h3,{id:"responsibility-separation",children:"Responsibility Separation"}),"\n",(0,i.jsxs)(n.p,{children:["The Prism proxy is ",(0,i.jsx)(n.strong,{children:"intentionally minimal"})," - it handles networking, authentication, and routing. All backend-specific logic lives in ",(0,i.jsx)(n.strong,{children:"pattern providers"}),"."]}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TB\n    subgraph "Proxy Core Responsibilities"\n        NET[Network Termination<br/>gRPC/HTTP]\n        AUTH[Authentication<br/>mTLS/OAuth2]\n        CONFIG[Configuration Mgmt<br/>Namespace Configs]\n        ROUTE[Request Routing<br/>Namespace \u2192 Provider]\n        METRICS[Observability<br/>Metrics/Traces/Logs]\n    end\n\n    subgraph "Pattern Provider Responsibilities"\n        PROTO[Protocol Implementation<br/>Backend Wire Protocol]\n        POOL[Connection Pooling<br/>Backend Connections]\n        QUERY[Query Translation<br/>Generic \u2192 Backend-Specific]\n        CACHE[Caching Logic<br/>Per-Backend Optimization]\n        ERROR[Error Handling<br/>Backend \u2192 gRPC Status]\n    end\n\n    subgraph "What Providers Do NOT Do"\n        NOCONFIG[\u274c Configuration Storage]\n        NOAUTH[\u274c Authentication]\n        NOCLIENT[\u274c Direct Client Access]\n        NOCROSS[\u274c Cross-Provider Communication]\n    end\n\n    NET --\x3e AUTH\n    AUTH --\x3e CONFIG\n    CONFIG --\x3e ROUTE\n    ROUTE --\x3e|Secure Channel| PROTO\n    PROTO --\x3e POOL\n    POOL --\x3e QUERY\n    QUERY --\x3e CACHE\n    CACHE --\x3e ERROR\n    ERROR --\x3e|Metrics| METRICS'}),"\n",(0,i.jsx)(n.h3,{id:"pattern-provider-interface-grpc-based",children:"Pattern Provider Interface (gRPC-Based)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Design Decision"}),": Pattern providers are ",(0,i.jsx)(n.strong,{children:"out-of-process"})," by default for fault isolation and independent scaling."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"service PatternProvider {\n  // Initialize provider with configuration\n  rpc Initialize(InitializeRequest) returns (InitializeResponse);\n\n  // Health check\n  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);\n\n  // Execute operation (generic interface)\n  rpc Execute(ExecuteRequest) returns (ExecuteResponse);\n\n  // Stream operations (for subscriptions)\n  rpc ExecuteStream(stream StreamRequest) returns (stream StreamResponse);\n\n  // Shutdown gracefully\n  rpc Shutdown(ShutdownRequest) returns (ShutdownResponse);\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pattern Provider Deployment Options:"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Model"}),(0,i.jsx)(n.th,{children:"Use Case"}),(0,i.jsx)(n.th,{children:"Latency Overhead"}),(0,i.jsx)(n.th,{children:"Fault Isolation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"In-Process"})," (Shared Library)"]}),(0,i.jsx)(n.td,{children:"Ultra-low latency (Redis, Memcached)"}),(0,i.jsx)(n.td,{children:"~0.1ms"}),(0,i.jsx)(n.td,{children:"\u274c Shared process"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Sidecar"})," (Unix Socket)"]}),(0,i.jsx)(n.td,{children:"Most backends"}),(0,i.jsx)(n.td,{children:"~1-2ms"}),(0,i.jsx)(n.td,{children:"\u2705 Separate process"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.strong,{children:"Remote"})," (gRPC/mTLS)"]}),(0,i.jsx)(n.td,{children:"Cloud-managed providers"}),(0,i.jsx)(n.td,{children:"~5-10ms"}),(0,i.jsx)(n.td,{children:"\u2705 Network isolation"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Recommended Default"}),": ",(0,i.jsx)(n.strong,{children:"Sidecar deployment"})," for fault isolation and independent scaling."]}),"\n",(0,i.jsx)(n.h3,{id:"zero-copy-data-path",children:"Zero-Copy Data Path"}),"\n",(0,i.jsxs)(n.p,{children:["For large payloads (object storage, bulk exports), Prism uses ",(0,i.jsx)(n.strong,{children:"zero-copy proxying"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// Rust proxy with Tonic (gRPC) and Bytes (zero-copy buffers)\npub async fn handle_get(&self, req: &ExecuteRequest) -> Result<ExecuteResponse> {\n    // Extract key without copying\n    let key = req.params.as_ref();  // No allocation\n\n    // Fetch from backend (e.g., S3)\n    let object_data: Arc<Bytes> = self.client.get_object(key).await?;\n\n    // Return Arc<Bytes> - gRPC shares the same buffer\n    Ok(ExecuteResponse {\n        success: true,\n        result: Some(object_data),\n        ..Default::default()\n    })\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Negligible overhead for payloads > 1MB regardless of size."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"backend-interface-decomposition",children:"Backend Interface Decomposition"}),"\n",(0,i.jsx)(n.h3,{id:"design-philosophy-thin-composable-interfaces",children:"Design Philosophy: Thin, Composable Interfaces"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Decision"}),": Use ",(0,i.jsx)(n.strong,{children:"explicit interface flavors"})," (not capability flags) for type safety and clear contracts."]}),"\n",(0,i.jsx)(n.p,{children:"Each data model has multiple interface flavors:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<Model>Basic"})," - Core CRUD operations (required)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<Model>Scan"})," - Enumeration capability (optional)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<Model>TTL"})," - Time-to-live expiration (optional)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<Model>Transactional"})," - Multi-operation atomicity (optional)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<Model>Batch"})," - Bulk operations (optional)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: KeyValue Interfaces"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"// proto/interfaces/keyvalue_basic.proto\nservice KeyValueBasicInterface {\n  rpc Set(SetRequest) returns (SetResponse);\n  rpc Get(GetRequest) returns (GetResponse);\n  rpc Delete(DeleteRequest) returns (DeleteResponse);\n  rpc Exists(ExistsRequest) returns (ExistsResponse);\n}\n\n// proto/interfaces/keyvalue_scan.proto\nservice KeyValueScanInterface {\n  rpc Scan(ScanRequest) returns (stream ScanResponse);\n  rpc ScanKeys(ScanKeysRequest) returns (stream KeyResponse);\n  rpc Count(CountRequest) returns (CountResponse);\n}\n\n// proto/interfaces/keyvalue_ttl.proto\nservice KeyValueTTLInterface {\n  rpc Expire(ExpireRequest) returns (ExpireResponse);\n  rpc GetTTL(GetTTLRequest) returns (GetTTLResponse);\n  rpc Persist(PersistRequest) returns (PersistResponse);\n}\n\n// proto/interfaces/keyvalue_transactional.proto\nservice KeyValueTransactionalInterface {\n  rpc BeginTransaction(BeginTransactionRequest) returns (TransactionHandle);\n  rpc Commit(CommitRequest) returns (CommitResponse);\n  rpc Rollback(RollbackRequest) returns (RollbackResponse);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"complete-interface-catalog-45-interfaces",children:"Complete Interface Catalog (45 Interfaces)"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Data Model"}),(0,i.jsx)(n.th,{children:"Interfaces"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"KeyValue"})}),(0,i.jsx)(n.td,{children:"6 interfaces"}),(0,i.jsx)(n.td,{children:"keyvalue_basic, keyvalue_scan, keyvalue_ttl, keyvalue_transactional, keyvalue_batch, keyvalue_cas"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"PubSub"})}),(0,i.jsx)(n.td,{children:"5 interfaces"}),(0,i.jsx)(n.td,{children:"pubsub_basic, pubsub_wildcards, pubsub_persistent, pubsub_filtering, pubsub_ordering"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Stream"})}),(0,i.jsx)(n.td,{children:"5 interfaces"}),(0,i.jsx)(n.td,{children:"stream_basic, stream_consumer_groups, stream_replay, stream_retention, stream_partitioning"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Queue"})}),(0,i.jsx)(n.td,{children:"5 interfaces"}),(0,i.jsx)(n.td,{children:"queue_basic, queue_visibility, queue_dead_letter, queue_priority, queue_delayed"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"List"})}),(0,i.jsx)(n.td,{children:"4 interfaces"}),(0,i.jsx)(n.td,{children:"list_basic, list_indexing, list_range, list_blocking"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Set"})}),(0,i.jsx)(n.td,{children:"4 interfaces"}),(0,i.jsx)(n.td,{children:"set_basic, set_operations, set_cardinality, set_random"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"SortedSet"})}),(0,i.jsx)(n.td,{children:"5 interfaces"}),(0,i.jsx)(n.td,{children:"sortedset_basic, sortedset_range, sortedset_rank, sortedset_operations, sortedset_lex"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"TimeSeries"})}),(0,i.jsx)(n.td,{children:"4 interfaces"}),(0,i.jsx)(n.td,{children:"timeseries_basic, timeseries_aggregation, timeseries_retention, timeseries_interpolation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Graph"})}),(0,i.jsx)(n.td,{children:"4 interfaces"}),(0,i.jsx)(n.td,{children:"graph_basic, graph_traversal, graph_query, graph_analytics"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Document"})}),(0,i.jsx)(n.td,{children:"3 interfaces"}),(0,i.jsx)(n.td,{children:"document_basic, document_query, document_indexing"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Total: 45 thin, composable interfaces"})," across 10 data models."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"backend-implementation-matrix",children:"Backend Implementation Matrix"}),"\n",(0,i.jsx)(n.h3,{id:"which-backends-implement-which-interfaces",children:"Which Backends Implement Which Interfaces?"}),"\n",(0,i.jsx)(n.p,{children:"This table shows how backends compose multiple interfaces to provide capabilities:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Backend"}),(0,i.jsx)(n.th,{children:"Interfaces Implemented"}),(0,i.jsx)(n.th,{children:"Data Models"}),(0,i.jsx)(n.th,{children:"Implementability Score"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Redis"})}),(0,i.jsx)(n.td,{children:"16 interfaces"}),(0,i.jsx)(n.td,{children:"KeyValue, PubSub, Stream, List, Set, SortedSet"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"95/100"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Postgres"})}),(0,i.jsx)(n.td,{children:"16 interfaces"}),(0,i.jsx)(n.td,{children:"KeyValue, Queue, TimeSeries, Document, Graph"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"93/100"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Kafka"})}),(0,i.jsx)(n.td,{children:"7 interfaces"}),(0,i.jsx)(n.td,{children:"Stream, PubSub"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"78/100"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"NATS"})}),(0,i.jsx)(n.td,{children:"8 interfaces"}),(0,i.jsx)(n.td,{children:"PubSub, Stream, Queue"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"90/100"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"DynamoDB"})}),(0,i.jsx)(n.td,{children:"9 interfaces"}),(0,i.jsx)(n.td,{children:"KeyValue, Document, Set"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"85/100"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"MemStore"})}),(0,i.jsx)(n.td,{children:"6 interfaces"}),(0,i.jsx)(n.td,{children:"KeyValue, List"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"100/100"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"ClickHouse"})}),(0,i.jsx)(n.td,{children:"3 interfaces"}),(0,i.jsx)(n.td,{children:"TimeSeries, Stream"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"70/100"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Neptune"})}),(0,i.jsx)(n.td,{children:"4 interfaces"}),(0,i.jsx)(n.td,{children:"Graph"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"50/100"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"backend-comparison-redis-vs-postgresql",children:"Backend Comparison: Redis vs PostgreSQL"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Redis (16 interfaces):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"KeyValue: basic, scan, ttl, transactional, batch"}),"\n",(0,i.jsx)(n.li,{children:"PubSub: basic, wildcards"}),"\n",(0,i.jsx)(n.li,{children:"Stream: basic, consumer_groups, replay, retention"}),"\n",(0,i.jsx)(n.li,{children:"List: basic, indexing, range, blocking"}),"\n",(0,i.jsx)(n.li,{children:"Set: basic, operations, cardinality, random"}),"\n",(0,i.jsx)(n.li,{children:"SortedSet: All 5 interfaces"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"PostgreSQL (16 interfaces, different mix):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"KeyValue: basic, scan, transactional, batch (no TTL - requires cron)"}),"\n",(0,i.jsx)(n.li,{children:"Queue: basic, visibility, dead_letter, delayed"}),"\n",(0,i.jsx)(n.li,{children:"TimeSeries: basic, aggregation, retention (with TimescaleDB)"}),"\n",(0,i.jsx)(n.li,{children:"Document: basic, query, indexing (JSONB support)"}),"\n",(0,i.jsx)(n.li,{children:"Graph: basic, traversal (recursive CTEs)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Insight"}),": Redis and Postgres both implement 16 interfaces, but ",(0,i.jsx)(n.strong,{children:"different combinations"})," for different use cases. Redis excels at in-memory data structures; Postgres excels at durable ACID storage."]}),"\n",(0,i.jsx)(n.h3,{id:"capabilities-expressed-through-interface-presence",children:"Capabilities Expressed Through Interface Presence"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Design Principle"}),": Capabilities are NOT separate metadata - they're expressed through ",(0,i.jsx)(n.strong,{children:"interface implementation"}),"."]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Capability"}),(0,i.jsx)(n.th,{children:"How It's Expressed"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TTL Support"}),(0,i.jsxs)(n.td,{children:["Backend implements ",(0,i.jsx)(n.code,{children:"keyvalue_ttl"})," interface"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Scan Support"}),(0,i.jsxs)(n.td,{children:["Backend implements ",(0,i.jsx)(n.code,{children:"keyvalue_scan"})," interface"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Transactions"}),(0,i.jsxs)(n.td,{children:["Backend implements ",(0,i.jsx)(n.code,{children:"keyvalue_transactional"})," interface"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Wildcards in Pub/Sub"}),(0,i.jsxs)(n.td,{children:["Backend implements ",(0,i.jsx)(n.code,{children:"pubsub_wildcards"})," interface"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Consumer Groups"}),(0,i.jsxs)(n.td,{children:["Backend implements ",(0,i.jsx)(n.code,{children:"stream_consumer_groups"})," interface"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Replay"}),(0,i.jsxs)(n.td,{children:["Backend implements ",(0,i.jsx)(n.code,{children:"stream_replay"})," interface"]})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why This is Better:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type-safe"}),": Compiler enforces backend has required interfaces"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Self-documenting"}),": Look at implemented interfaces to know capabilities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No runtime surprises"}),": If interface is present, capability MUST work"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proto-first"}),": Everything in ",(0,i.jsx)(n.code,{children:".proto"})," files, not separate metadata"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"pattern-composition-and-backend-mapping",children:"Pattern Composition and Backend Mapping"}),"\n",(0,i.jsx)(n.h3,{id:"patterns-require-backend-interfaces",children:"Patterns Require Backend Interfaces"}),"\n",(0,i.jsxs)(n.p,{children:["Patterns declare ",(0,i.jsx)(n.strong,{children:"slots"})," that must be filled with backends implementing specific interfaces."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Multicast Registry Pattern"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'pattern: multicast-registry\nversion: v1\ndescription: "Register identities with metadata and multicast messages"\n\nslots:\n  registry:\n    description: "Stores identity \u2192 metadata mappings"\n    required_interfaces:\n      - keyvalue_basic  # MUST implement\n      - keyvalue_scan   # MUST implement (enumerate identities)\n    optional_interfaces:\n      - keyvalue_ttl    # Nice to have (auto-expire offline identities)\n    recommended_backends: [redis, postgres, dynamodb, etcd]\n\n  messaging:\n    description: "Delivers multicast messages to identities"\n    required_interfaces:\n      - pubsub_basic    # MUST implement\n    optional_interfaces:\n      - pubsub_persistent  # Nice to have (durable delivery)\n    recommended_backends: [nats, redis, kafka]\n\n  durability:\n    description: "Persists undelivered messages for offline identities"\n    required_interfaces:\n      - queue_basic           # MUST implement\n      - queue_visibility      # MUST implement\n      - queue_dead_letter     # MUST handle failed deliveries\n    recommended_backends: [postgres, sqs, rabbitmq]\n    optional: true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"backend-slot-validation",children:"Backend Slot Validation"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configuration Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"namespaces:\n  - name: iot-devices\n    pattern: multicast-registry\n\n    slots:\n      registry:\n        backend: redis\n        # Validation: Redis implements keyvalue_basic \u2713\n        #             Redis implements keyvalue_scan \u2713\n        #             Redis implements keyvalue_ttl \u2713 (bonus)\n\n      messaging:\n        backend: nats\n        # Validation: NATS implements pubsub_basic \u2713\n\n      durability:\n        backend: postgres\n        # Validation: Postgres implements queue_basic \u2713\n        #             Postgres implements queue_visibility \u2713\n        #             Postgres implements queue_dead_letter \u2713\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Validation at Config Load Time:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"$ prism validate namespace-config.yaml\n\nValidating namespace: iot-devices\nPattern: multicast-registry v1\n\nSlot: registry\n  Backend: redis\n  Required interfaces:\n    \u2713 keyvalue_basic       (redis implements)\n    \u2713 keyvalue_scan        (redis implements)\n  Optional interfaces:\n    \u2713 keyvalue_ttl         (redis implements)\n\nSlot: messaging\n  Backend: nats\n  Required interfaces:\n    \u2713 pubsub_basic         (nats implements)\n\nSlot: durability\n  Backend: postgres\n  Required interfaces:\n    \u2713 queue_basic          (postgres implements)\n    \u2713 queue_visibility     (postgres implements)\n    \u2713 queue_dead_letter    (postgres implements)\n\n\u2705 Configuration valid\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pattern-portability-across-backends",children:"Pattern Portability Across Backends"}),"\n",(0,i.jsx)(n.p,{children:"Same pattern works with different backend combinations:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Combination"}),(0,i.jsx)(n.th,{children:"Registry"}),(0,i.jsx)(n.th,{children:"Messaging"}),(0,i.jsx)(n.th,{children:"Durability"}),(0,i.jsx)(n.th,{children:"Use Case"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Combo 1"})}),(0,i.jsx)(n.td,{children:"Redis"}),(0,i.jsx)(n.td,{children:"NATS"}),(0,i.jsx)(n.td,{children:"Postgres"}),(0,i.jsx)(n.td,{children:"Production (high performance)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Combo 2"})}),(0,i.jsx)(n.td,{children:"Postgres"}),(0,i.jsx)(n.td,{children:"Kafka"}),(0,i.jsx)(n.td,{children:"Postgres"}),(0,i.jsx)(n.td,{children:"All-in-one (single DB)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Combo 3"})}),(0,i.jsx)(n.td,{children:"DynamoDB"}),(0,i.jsx)(n.td,{children:"SNS"}),(0,i.jsx)(n.td,{children:"SQS"}),(0,i.jsx)(n.td,{children:"AWS-native (managed services)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Combo 4"})}),(0,i.jsx)(n.td,{children:"MemStore"}),(0,i.jsx)(n.td,{children:"NATS"}),(0,i.jsx)(n.td,{children:"(none)"}),(0,i.jsx)(n.td,{children:"Local dev (fast, no persistence)"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Insight"}),": Application code is ",(0,i.jsx)(n.strong,{children:"identical"})," across all combinations. Only configuration changes."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"design-rationale-and-decision-history",children:"Design Rationale and Decision History"}),"\n",(0,i.jsx)(n.h3,{id:"why-three-layers",children:"Why Three Layers?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Netflix Data Gateway tightly couples client API with backend implementation. Adding Claim Check pattern requires changing application code."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Separate ",(0,i.jsx)(n.strong,{children:"What"})," (client API), ",(0,i.jsx)(n.strong,{children:"How"})," (patterns), and ",(0,i.jsx)(n.strong,{children:"Where"})," (backends)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Backend Migration"}),": Swap Redis \u2192 DynamoDB without client changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pattern Evolution"}),": Add CDC without API breakage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Configuration-Driven"}),": Declare needs, Prism selects patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testing Isolation"}),": Test patterns independently of backends"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Organizational Scalability"}),": Teams configure namespaces independently with policy guardrails"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reference"}),": ",(0,i.jsx)(n.a,{href:"/rfc/rfc-014-layered-data-access-patterns",children:"RFC-014: Layered Data Access Patterns"}),", ",(0,i.jsx)(n.a,{href:"/adr/adr-002",children:"ADR-002: Client-Originated Configuration"})]}),"\n",(0,i.jsx)(n.h3,{id:"why-rust-for-proxy",children:"Why Rust for Proxy?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": JVM-based proxies (Netflix Data Gateway) have GC pauses, high memory overhead, and unpredictable latency."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Rust proxy with Tokio async runtime."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Performance Comparison:"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Metric"}),(0,i.jsx)(n.th,{children:"Java/Spring Boot"}),(0,i.jsx)(n.th,{children:"Rust/Tokio"}),(0,i.jsx)(n.th,{children:"Improvement"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"P50 Latency"}),(0,i.jsx)(n.td,{children:"~5ms"}),(0,i.jsx)(n.td,{children:"~0.3ms"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"16x"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"P99 Latency"}),(0,i.jsx)(n.td,{children:"~50ms"}),(0,i.jsx)(n.td,{children:"~2ms"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"25x"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Throughput (RPS)"}),(0,i.jsx)(n.td,{children:"~20k"}),(0,i.jsx)(n.td,{children:"~200k"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"10x"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Memory (idle)"}),(0,i.jsx)(n.td,{children:"~500MB"}),(0,i.jsx)(n.td,{children:"~20MB"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"25x"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Cold Start"}),(0,i.jsx)(n.td,{children:"~10s"}),(0,i.jsx)(n.td,{children:"~100ms"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"100x"})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reference"}),": ",(0,i.jsx)(n.a,{href:"/adr/adr-001-rust-for-proxy",children:"ADR-001: Rust for Proxy Implementation"})]}),"\n",(0,i.jsx)(n.h3,{id:"why-thin-interfaces-instead-of-capability-flags",children:"Why Thin Interfaces Instead of Capability Flags?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Monolithic interfaces with capability flags lead to runtime errors."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Bad Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"backend: redis\ncapabilities:\n  scan_support: true  # Runtime metadata\n  ttl_support: true\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Good Example (Prism Approach):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"// Redis implements these interfaces (compile-time contracts)\nimplements:\n  - keyvalue_basic\n  - keyvalue_scan\n  - keyvalue_ttl\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type Safety"}),": Compiler enforces interface implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clear Contracts"}),": Interface presence guarantees functionality"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No Runtime Surprises"}),": If backend claims interface, it MUST work"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proto-First"}),": All contracts in ",(0,i.jsx)(n.code,{children:".proto"})," files"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reference"}),": ",(0,i.jsx)(n.a,{href:"/memos/memo-006-backend-interface-decomposition-schema-registry",children:"MEMO-006: Backend Interface Decomposition"})]}),"\n",(0,i.jsx)(n.h3,{id:"why-out-of-process-pattern-providers",children:"Why Out-of-Process Pattern Providers?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": In-process pattern providers (shared libraries) crash the proxy and lack fault isolation."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Pattern providers run as ",(0,i.jsx)(n.strong,{children:"separate processes"})," (sidecar) communicating via gRPC."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fault Isolation"}),": Provider crash doesn't affect proxy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Independent Scaling"}),": Scale providers separately from proxy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Language Flexibility"}),": Implement providers in Go, Python, Java (not just Rust)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security"}),": Process-level isolation limits blast radius"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Trade-off"}),": ~1-2ms latency overhead vs in-process (~0.1ms), but worth it for reliability."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reference"}),": ",(0,i.jsx)(n.a,{href:"/rfc/rfc-008-proxy-plugin-architecture",children:"RFC-008: Proxy Plugin Architecture"})]}),"\n",(0,i.jsx)(n.h3,{id:"why-provider-side-token-validation",children:"Why Provider-Side Token Validation?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Proxy validating tokens per-request adds 10-50ms latency per request."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Pattern providers validate tokens ",(0,i.jsx)(n.strong,{children:"once per session"}),", then cache validation result."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Amortized Cost"}),": Validate once, reuse claims for session lifetime"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Defense-in-Depth"}),": Even if proxy is bypassed, providers enforce auth"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Per-User Credentials"}),": Vault provides dynamic, short-lived credentials (1h TTL)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Audit Trails"}),": Backend logs show which user accessed what data"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Reference"}),": ",(0,i.jsx)(n.a,{href:"/rfc/rfc-019-plugin-sdk-authorization-layer",children:"RFC-019: Plugin SDK Authorization Layer"})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,i.jsx)(n.h3,{id:"core-rfcs",children:"Core RFCs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-001-prism-architecture",children:"RFC-001: Prism Architecture"})," - Foundational design"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-008-proxy-plugin-architecture",children:"RFC-008: Proxy Plugin Architecture"})," - Plugin system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-014-layered-data-access-patterns",children:"RFC-014: Layered Data Access Patterns"})," - Three-layer design"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-017-multicast-registry-pattern",children:"RFC-017: Multicast Registry Pattern"})," - Pattern example"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"design-memos",children:"Design Memos"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/memos/memo-005-client-protocol-design-philosophy",children:"MEMO-005: Client Protocol Design Philosophy"})," - Composition vs use-case"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/memos/memo-006-backend-interface-decomposition-schema-registry",children:"MEMO-006: Backend Interface Decomposition"})," - Interface catalog"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"implementation-guides",children:"Implementation Guides"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/memos/memo-004-backend-plugin-implementation-guide",children:"MEMO-004: Backend Plugin Implementation Guide"})," - Implementability scores"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-015-plugin-acceptance-test-framework",children:"RFC-015: Plugin Acceptance Test Framework"})," - Testing strategy"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"key-adrs",children:"Key ADRs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/adr/adr-001-rust-for-proxy",children:"ADR-001: Rust for Proxy Implementation"})," - Language choice"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/adr/adr-050-topaz-policy-authorization",children:"ADR-050: Topaz for Policy-Based Authorization"})," - Authorization"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,i.jsx)(n.h3,{id:"backend-selection-guide",children:"Backend Selection Guide"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: Which backend should I use for caching?"}),"\n",(0,i.jsx)(n.strong,{children:"A:"})," Redis (16 interfaces including ",(0,i.jsx)(n.code,{children:"keyvalue_ttl"}),") or MemStore (6 interfaces, zero dependencies)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: Which backend for event streaming?"}),"\n",(0,i.jsx)(n.strong,{children:"A:"})," Kafka (7 interfaces including ",(0,i.jsx)(n.code,{children:"stream_consumer_groups"}),") or NATS JetStream (8 interfaces)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: Which backend for transactional messaging?"}),"\n",(0,i.jsx)(n.strong,{children:"A:"})," PostgreSQL (16 interfaces including ",(0,i.jsx)(n.code,{children:"queue_basic"})," + ",(0,i.jsx)(n.code,{children:"keyvalue_transactional"})," for Outbox pattern)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: Which backend for graph queries?"}),"\n",(0,i.jsx)(n.strong,{children:"A:"})," Neptune (4 graph interfaces with Gremlin/SPARQL) or PostgreSQL (2 graph interfaces with recursive CTEs)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Q: Which backend for local testing?"}),"\n",(0,i.jsx)(n.strong,{children:"A:"})," MemStore (100/100 implementability score, zero external dependencies, sub-microsecond latency)"]}),"\n",(0,i.jsx)(n.h3,{id:"pattern-selection-guide",children:"Pattern Selection Guide"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Use Case"}),(0,i.jsx)(n.th,{children:"Recommended Pattern"}),(0,i.jsx)(n.th,{children:"Backend Combination"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"High-volume logging"})}),(0,i.jsx)(n.td,{children:"WAL + Tiered Storage"}),(0,i.jsx)(n.td,{children:"Kafka + S3"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Large files (videos, models)"})}),(0,i.jsx)(n.td,{children:"Claim Check"}),(0,i.jsx)(n.td,{children:"S3 + Kafka"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Transactional events"})}),(0,i.jsx)(n.td,{children:"Outbox"}),(0,i.jsx)(n.td,{children:"Postgres + Kafka"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Database change streaming"})}),(0,i.jsx)(n.td,{children:"CDC"}),(0,i.jsx)(n.td,{children:"Postgres + Kafka"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Fast cached reads"})}),(0,i.jsx)(n.td,{children:"Cache + CDC"}),(0,i.jsx)(n.td,{children:"Redis + Postgres"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Event sourcing"})}),(0,i.jsx)(n.td,{children:"WAL + Event Store"}),(0,i.jsx)(n.td,{children:"Kafka + ClickHouse"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"common-operations",children:"Common Operations"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Validate namespace configuration\nprism validate namespace-config.yaml\n\n# List available backends\nprism registry backends list\n\n# Find backends implementing specific interface\nprism registry backends find --interface=keyvalue_scan\n\n# Show pattern requirements\nprism registry patterns describe multicast-registry\n\n# Generate configuration from requirements\nprism generate config \\\n    --pattern=multicast-registry \\\n    --slot=registry:redis \\\n    --slot=messaging:nats\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prism Architecture in Three Sentences:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Three-layer design"})," separates client API (What), pattern composition (How), and backend execution (Where) for flexibility and reliability."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Thin, composable interfaces"})," (45 total across 10 data models) enable type-safe backend substitutability and clear capability contracts."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Out-of-process plugins"})," provide fault isolation and independent scaling, while the Rust proxy delivers 10-100x performance vs JVM alternatives."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Takeaways:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Applications interact with ",(0,i.jsx)(n.strong,{children:"stable Layer 3 APIs"})," (Queue, PubSub, Reader)"]}),"\n",(0,i.jsxs)(n.li,{children:["Prism transparently applies ",(0,i.jsx)(n.strong,{children:"Layer 2 patterns"})," (Outbox, Claim Check, CDC)"]}),"\n",(0,i.jsxs)(n.li,{children:["Patterns compose ",(0,i.jsx)(n.strong,{children:"Layer 1 backend interfaces"})," via slot-based configuration"]}),"\n",(0,i.jsxs)(n.li,{children:["Backend capabilities expressed through ",(0,i.jsx)(n.strong,{children:"interface presence"})," (not metadata flags)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Configuration-driven"}),": Same application code works across different backend combinations"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var s=r(96540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);