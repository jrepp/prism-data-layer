"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[1004],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var s=r(96540);const i={},a=s.createContext(i);function t(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(a.Provider,{value:n},e.children)}},49994:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>t,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"adr-057","title":"ADR-057: Refactor pattern-launcher to prism-launcher as General Control Plane Launcher","description":"Context","source":"@site/../docs-cms/adr/adr-057-prism-launcher-refactoring.md","sourceDirName":".","slug":"/adr-057","permalink":"/prism-data-layer/adr/adr-057","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-057-prism-launcher-refactoring.md","tags":[{"inline":true,"label":"launcher","permalink":"/prism-data-layer/adr/tags/launcher"},{"inline":true,"label":"refactoring","permalink":"/prism-data-layer/adr/tags/refactoring"},{"inline":true,"label":"control-plane","permalink":"/prism-data-layer/adr/tags/control-plane"},{"inline":true,"label":"architecture","permalink":"/prism-data-layer/adr/tags/architecture"},{"inline":true,"label":"procmgr","permalink":"/prism-data-layer/adr/tags/procmgr"}],"version":"current","frontMatter":{"date":"2025-10-15T00:00:00.000Z","deciders":"Engineering Team","doc_uuid":"7e2b9f5a-3c8d-4e6f-a9b1-5f7c8e3d2a4b","id":"adr-057","project_id":"prism-data-layer","status":"Accepted","tags":["launcher","refactoring","control-plane","architecture","procmgr"],"title":"ADR-057: Refactor pattern-launcher to prism-launcher as General Control Plane Launcher"},"sidebar":"adrSidebar","previous":{"title":"Launcher-Admin Control Plane Protocol \u2022 ADR-056","permalink":"/prism-data-layer/adr/adr-056"},"next":{"title":"Proxy Drain-on-Shutdown \u2022 ADR-058","permalink":"/prism-data-layer/adr/adr-058"}}');var i=r(74848),a=r(28453);const t={date:new Date("2025-10-15T00:00:00.000Z"),deciders:"Engineering Team",doc_uuid:"7e2b9f5a-3c8d-4e6f-a9b1-5f7c8e3d2a4b",id:"adr-057",project_id:"prism-data-layer",status:"Accepted",tags:["launcher","refactoring","control-plane","architecture","procmgr"],title:"ADR-057: Refactor pattern-launcher to prism-launcher as General Control Plane Launcher"},l=void 0,c={},o=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Phase 1: Rename and Generalize Types (Week 1)",id:"phase-1-rename-and-generalize-types-week-1",level:3},{value:"Phase 2: Generalize Control Plane Protocol (Week 2)",id:"phase-2-generalize-control-plane-protocol-week-2",level:3},{value:"Phase 3: Update Process Manager (Week 2)",id:"phase-3-update-process-manager-week-2",level:3},{value:"Phase 4: Update prismctl local (Week 3)",id:"phase-4-update-prismctl-local-week-3",level:3},{value:"Phase 5: Admin-Side Assignment Logic (Week 3)",id:"phase-5-admin-side-assignment-logic-week-3",level:3},{value:"Phase 6: Documentation Updates (Week 4)",id:"phase-6-documentation-updates-week-4",level:3},{value:"Migration Strategy",id:"migration-strategy",level:2},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsxs)(n.p,{children:["The current ",(0,i.jsx)(n.code,{children:"pattern-launcher"})," is narrowly focused on pattern process lifecycle management (RFC-035). However, the control plane architecture (ADR-055, ADR-056) reveals the need for a more general launcher capable of managing multiple types of Prism components:"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Current Limitations"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'Name "pattern-launcher" implies it only launches patterns'}),"\n",(0,i.jsx)(n.li,{children:"Architecture assumes all managed processes are pattern implementations"}),"\n",(0,i.jsx)(n.li,{children:"Process management logic tightly coupled to pattern-specific concepts"}),"\n",(0,i.jsx)(n.li,{children:"Cannot easily launch other Prism components (proxies, backends, utilities)"}),"\n",(0,i.jsx)(n.li,{children:"prismctl local command manually launches each component separately"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Emerging Requirements"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Launch prism-proxy instances dynamically"}),"\n",(0,i.jsx)(n.li,{children:"Launch backend drivers as separate processes (not just patterns)"}),"\n",(0,i.jsx)(n.li,{children:"Launch auxiliary services (monitoring agents, log collectors)"}),"\n",(0,i.jsx)(n.li,{children:"Unified process lifecycle for all Prism components"}),"\n",(0,i.jsx)(n.li,{children:"Control plane coordination for all managed processes (not just patterns)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Control Plane Evolution"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ADR-055: Proxies register with admin via control plane"}),"\n",(0,i.jsx)(n.li,{children:"ADR-056: Pattern-launcher registers with admin via control plane"}),"\n",(0,i.jsx)(n.li,{children:"Need: General launcher that can register ANY managed process type with admin"}),"\n",(0,i.jsx)(n.li,{children:"Goal: Single launcher binary managing entire Prism stack"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,i.jsxs)(n.p,{children:["Refactor ",(0,i.jsx)(n.code,{children:"pattern-launcher"})," to ",(0,i.jsx)(n.code,{children:"prism-launcher"})," as a general-purpose control plane launcher capable of managing any Prism component:"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Naming Changes"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Binary: ",(0,i.jsx)(n.code,{children:"pattern-launcher"})," \u2192 ",(0,i.jsx)(n.code,{children:"prism-launcher"})]}),"\n",(0,i.jsxs)(n.li,{children:["Package: ",(0,i.jsx)(n.code,{children:"pkg/launcher"})," (existing) \u2192 ",(0,i.jsx)(n.code,{children:"pkg/launcher"})," (generalized)"]}),"\n",(0,i.jsxs)(n.li,{children:["Process types: ",(0,i.jsx)(n.code,{children:"Pattern"})," \u2192 ",(0,i.jsx)(n.code,{children:"ManagedProcess"})," with type field"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Architecture Changes"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Process Type Abstraction"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'type ProcessType string\n\nconst (\n    ProcessTypePattern  ProcessType = "pattern"\n    ProcessTypeProxy    ProcessType = "proxy"\n    ProcessTypeBackend  ProcessType = "backend"\n    ProcessTypeUtility  ProcessType = "utility"\n)\n\ntype ManagedProcess struct {\n    ID             string\n    Type           ProcessType\n    Binary         string\n    Args           []string\n    Env            map[string]string\n    Config         interface{}  // Type-specific config\n    IsolationLevel IsolationLevel\n    HealthCheck    HealthCheckConfig\n    RestartPolicy  RestartPolicy\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unified Control Plane Registration"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Register launcher with admin (not just pattern-launcher)\ntype LauncherRegistration struct {\n    LauncherID      string\n    Address         string\n    Region          string\n    Capabilities    []string  // ["pattern", "proxy", "backend"]\n    MaxProcesses    int32     // Not just max_patterns\n    ProcessTypes    []string  // Types this launcher can manage\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Process Assignment Protocol"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Admin assigns any process type, not just patterns\ntype ProcessAssignment struct {\n    ProcessID   string\n    ProcessType ProcessType  // pattern, proxy, backend, utility\n    Namespace   string\n    Config      ProcessConfig  // Type-specific configuration\n    Slots       map[string]BackendConfig  // Only for patterns\n}\n\ntype ProcessConfig struct {\n    // Common fields\n    Binary      string\n    Args        []string\n    Env         map[string]string\n    Port        int32\n    HealthPort  int32\n\n    // Type-specific payloads\n    PatternConfig  *PatternConfig   // Non-nil if ProcessType=pattern\n    ProxyConfig    *ProxyConfig     // Non-nil if ProcessType=proxy\n    BackendConfig  *BackendConfig   // Non-nil if ProcessType=backend\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Process Manager Generalization"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// pkg/procmgr stays mostly the same but concepts generalize\ntype ProcessManager struct {\n    processes      map[string]*ManagedProcess  // Not just patterns\n    isolationMgr   *isolation.IsolationManager\n    healthChecker  *HealthChecker\n}\n\nfunc (pm *ProcessManager) Launch(proc *ManagedProcess) error {\n    // Works for any process type\n    // Pattern-specific logic only fires if proc.Type == ProcessTypePattern\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Launcher Command Structure"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"prism-launcher \\\n  --admin-endpoint admin.prism.local:8981 \\\n  --launcher-id launcher-01 \\\n  --listen :7070 \\\n  --max-processes 50 \\\n  --capabilities pattern,proxy,backend \\\n  --region us-west-2\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Process Type Capabilities"}),":"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Process Type"}),(0,i.jsx)(n.th,{children:"Description"}),(0,i.jsx)(n.th,{children:"Examples"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"pattern"})}),(0,i.jsx)(n.td,{children:"Pattern implementations"}),(0,i.jsx)(n.td,{children:"keyvalue-runner, pubsub-runner, multicast-registry"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"proxy"})}),(0,i.jsx)(n.td,{children:"Prism proxy instances"}),(0,i.jsx)(n.td,{children:"prism-proxy (control + data plane)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"backend"})}),(0,i.jsx)(n.td,{children:"Backend driver processes"}),(0,i.jsx)(n.td,{children:"redis-driver, kafka-driver, nats-driver"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"utility"})}),(0,i.jsx)(n.td,{children:"Auxiliary services"}),(0,i.jsx)(n.td,{children:"log-collector, metrics-exporter, health-monitor"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Backward Compatibility"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Existing pattern-launcher configs continue to work"}),"\n",(0,i.jsx)(n.li,{children:'ProcessType defaults to "pattern" if not specified'}),"\n",(0,i.jsx)(n.li,{children:"Pattern-specific fields (slots, isolation) only apply when type=pattern"}),"\n",(0,i.jsx)(n.li,{children:"Admin can gradually migrate to new ProcessAssignment messages"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Generalize Beyond Patterns:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"prismctl local needs unified launcher for entire stack (admin, proxy, patterns)"}),"\n",(0,i.jsx)(n.li,{children:"Launching proxy instances dynamically enables horizontal scaling"}),"\n",(0,i.jsx)(n.li,{children:"Backend drivers may run as separate processes (not in-proxy)"}),"\n",(0,i.jsx)(n.li,{children:"Monitoring/utility processes need same lifecycle management"}),"\n",(0,i.jsx)(n.li,{children:"Single launcher binary simplifies deployment"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Keep pkg/procmgr Intact:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Process manager is already general-purpose (manages any process)"}),"\n",(0,i.jsx)(n.li,{children:"Isolation levels work for any process type (not just patterns)"}),"\n",(0,i.jsx)(n.li,{children:"Health checks, restarts, circuit breakers apply universally"}),"\n",(0,i.jsxs)(n.li,{children:["Only process ",(0,i.jsx)(n.em,{children:"assignment"})," logic needs generalization"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Type-Specific Config Payloads:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Patterns need slot configurations (backends for pattern slots)"}),"\n",(0,i.jsx)(n.li,{children:"Proxies need admin-endpoint, control-port, data-port"}),"\n",(0,i.jsx)(n.li,{children:"Backends need connection strings, credentials"}),"\n",(0,i.jsx)(n.li,{children:"Type-safe configs prevent mismatched assignments"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Single Binary (not multiple launchers):"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Simplifies deployment (one launcher, many process types)"}),"\n",(0,i.jsx)(n.li,{children:"Unified control plane protocol (not pattern-specific)"}),"\n",(0,i.jsx)(n.li,{children:"Easier operational reasoning (one launcher process to monitor)"}),"\n",(0,i.jsx)(n.li,{children:"Enables mixed workloads (patterns + proxies + backends on same launcher)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Separate Launchers per Process Type"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"pattern-launcher for patterns"}),"\n",(0,i.jsx)(n.li,{children:"proxy-launcher for proxies"}),"\n",(0,i.jsx)(n.li,{children:"backend-launcher for backends"}),"\n",(0,i.jsx)(n.li,{children:"Pros: Clean separation, type-specific code"}),"\n",(0,i.jsx)(n.li,{children:"Cons: 3+ binaries, 3+ control plane connections, operational complexity"}),"\n",(0,i.jsx)(n.li,{children:"Rejected because: Single launcher is simpler"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Keep pattern-launcher Name, Generalize Internally"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pros: No renaming required"}),"\n",(0,i.jsx)(n.li,{children:"Cons: Misleading name (doesn't launch only patterns), confusing documentation"}),"\n",(0,i.jsx)(n.li,{children:"Rejected because: Name should reflect capability"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Launcher Plugins (Launcher launches launchers)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pros: Extensible, type-specific launch logic pluggable"}),"\n",(0,i.jsx)(n.li,{children:"Cons: Over-engineered, unnecessary indirection"}),"\n",(0,i.jsx)(n.li,{children:"Rejected because: Process types are finite and known"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Admin Directly Launches Processes (No Launcher)"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pros: Simpler control plane (no launcher)"}),"\n",(0,i.jsx)(n.li,{children:"Cons: Admin needs SSH/exec access to hosts, security risk, no local process management"}),"\n",(0,i.jsx)(n.li,{children:"Rejected because: Launcher provides local process lifecycle management"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,i.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unified Process Management"}),": Single launcher for all Prism components"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simplified Deployment"}),": One binary instead of multiple launchers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flexible Workloads"}),": Mix patterns, proxies, backends on same launcher"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Control Plane Simplicity"}),": One registration protocol for all process types"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"prismctl local Integration"}),": Single launcher manages entire local stack"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Horizontal Scaling"}),": Admin can launch proxy instances dynamically"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Backend Process Support"}),": Backend drivers can run as managed processes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operational Visibility"}),": All processes visible in admin UI/API"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Increased Complexity"}),": ProcessConfig becomes type-discriminated union"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Backward Compatibility"}),": Must maintain pattern-launcher compatibility"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testing Surface"}),": Must test all process types (patterns, proxies, backends)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type Safety"}),": Config type mismatches possible (pattern config sent to proxy)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation"}),": Must document all supported process types"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Binary renamed from pattern-launcher \u2192 prism-launcher"}),"\n",(0,i.jsx)(n.li,{children:"ProcessType enum extensible (add new types in future)"}),"\n",(0,i.jsx)(n.li,{children:"Admin must validate ProcessType before assignment"}),"\n",(0,i.jsx)(n.li,{children:"Launcher capabilities advertised in registration (not all launchers support all types)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,i.jsx)(n.h3,{id:"phase-1-rename-and-generalize-types-week-1",children:"Phase 1: Rename and Generalize Types (Week 1)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Rename binary:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Makefile\nbuild/binaries/prism-launcher: pkg/launcher/*.go cmd/prism-launcher/*.go\n\tgo build -o $@ ./cmd/prism-launcher\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Introduce ProcessType enum:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// pkg/launcher/types.go\ntype ProcessType string\n\nconst (\n    ProcessTypePattern  ProcessType = "pattern"\n    ProcessTypeProxy    ProcessType = "proxy"\n    ProcessTypeBackend  ProcessType = "backend"\n    ProcessTypeUtility  ProcessType = "utility"\n)\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsx)(n.li,{children:"Rename Process \u2192 ManagedProcess:"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// pkg/launcher/process.go\ntype ManagedProcess struct {\n    ID             string\n    Type           ProcessType  // NEW\n    Binary         string\n    Args           []string\n    Config         ProcessConfig  // Generalized\n    // ... rest stays same\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"phase-2-generalize-control-plane-protocol-week-2",children:"Phase 2: Generalize Control Plane Protocol (Week 2)"}),"\n",(0,i.jsx)(n.p,{children:"Update ADR-056 protobuf messages:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'message LauncherRegistration {\n  string launcher_id = 1;\n  string address = 2;\n  repeated string capabilities = 3;  // ["pattern", "proxy", "backend"]\n  int32 max_processes = 4;           // Renamed from max_patterns\n  repeated string process_types = 5; // Process types this launcher supports\n}\n\nmessage ProcessAssignment {\n  string process_id = 1;\n  string process_type = 2;           // "pattern", "proxy", "backend", "utility"\n  string namespace = 3;\n  ProcessConfig config = 4;\n}\n\nmessage ProcessConfig {\n  // Common\n  string binary = 1;\n  repeated string args = 2;\n  map<string, string> env = 3;\n  int32 port = 4;\n  int32 health_port = 5;\n\n  // Type-specific configs\n  PatternConfig pattern = 10;\n  ProxyConfig proxy = 11;\n  BackendConfig backend = 12;\n  UtilityConfig utility = 13;\n}\n\nmessage PatternConfig {\n  string pattern_type = 1;           // keyvalue, pubsub, etc.\n  string isolation_level = 2;        // none, namespace, session\n  map<string, BackendConfig> slots = 3;\n}\n\nmessage ProxyConfig {\n  string admin_endpoint = 1;\n  int32 control_port = 2;\n  int32 data_port = 3;\n  string proxy_id = 4;\n}\n\nmessage BackendConfig {\n  string backend_type = 1;           // redis, kafka, nats, postgres\n  string connection_string = 2;\n  map<string, string> credentials = 3;\n}\n\nmessage UtilityConfig {\n  string utility_type = 1;           // log-collector, metrics-exporter\n  map<string, string> settings = 2;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"phase-3-update-process-manager-week-2",children:"Phase 3: Update Process Manager (Week 2)"}),"\n",(0,i.jsx)(n.p,{children:"Minimal changes required:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// pkg/procmgr/process_manager.go\n\nfunc (pm *ProcessManager) Launch(proc *ManagedProcess) error {\n    // Validate process type\n    if !isValidProcessType(proc.Type) {\n        return fmt.Errorf("unsupported process type: %s", proc.Type)\n    }\n\n    // Type-specific validation\n    switch proc.Type {\n    case ProcessTypePattern:\n        if err := validatePatternConfig(proc.Config.PatternConfig); err != nil {\n            return err\n        }\n    case ProcessTypeProxy:\n        if err := validateProxyConfig(proc.Config.ProxyConfig); err != nil {\n            return err\n        }\n    // ... other types\n    }\n\n    // Existing launch logic works for all types\n    return pm.launchProcess(proc)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"phase-4-update-prismctl-local-week-3",children:"Phase 4: Update prismctl local (Week 3)"}),"\n",(0,i.jsx)(n.p,{children:"Simplify to use single prism-launcher:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// cmd/prismctl/cmd/local.go\ncomponents := []struct {\n    name    string\n    binary  string\n    args    []string\n}{\n    {\n        name:   "prism-admin",\n        binary: filepath.Join(binDir, "prism-admin"),\n        args:   []string{"serve", "--port=8980"},\n    },\n    {\n        name:   "prism-launcher",\n        binary: filepath.Join(binDir, "prism-launcher"),\n        args:   []string{\n            "--admin-endpoint=localhost:8980",\n            "--launcher-id=launcher-01",\n            "--listen=:7070",\n            "--max-processes=50",\n            "--capabilities=pattern,proxy,backend",\n        },\n    },\n}\n\n// After launcher starts, admin can dynamically provision:\n// - 2 proxy instances (proxy-01, proxy-02)\n// - keyvalue pattern with memstore backend\n// - Any other components\n'})}),"\n",(0,i.jsx)(n.h3,{id:"phase-5-admin-side-assignment-logic-week-3",children:"Phase 5: Admin-Side Assignment Logic (Week 3)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// cmd/prism-admin/process_provisioner.go\n\nfunc (s *ControlPlaneService) AssignProcess(\n    ctx context.Context,\n    req *pb.ProcessAssignment,\n) (*pb.ProcessAssignmentAck, error) {\n    // Select launcher based on capabilities\n    launchers, err := s.storage.ListLaunchersByCapability(ctx, req.ProcessType)\n    if err != nil {\n        return nil, err\n    }\n\n    if len(launchers) == 0 {\n        return nil, fmt.Errorf("no launchers support process type: %s", req.ProcessType)\n    }\n\n    // Choose launcher with most available capacity\n    launcher := selectLauncherByCapacity(launchers)\n\n    // Send assignment to launcher\n    if err := s.sendProcessAssignment(launcher.LauncherID, req); err != nil {\n        return nil, err\n    }\n\n    return &pb.ProcessAssignmentAck{\n        Success:     true,\n        LauncherId:  launcher.LauncherID,\n        ProcessId:   req.ProcessId,\n    }, nil\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"phase-6-documentation-updates-week-4",children:"Phase 6: Documentation Updates (Week 4)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Update RFC-035 to reflect generalized launcher"}),"\n",(0,i.jsx)(n.li,{children:"Update MEMO-034 quick start guide"}),"\n",(0,i.jsx)(n.li,{children:"Create new MEMO for prism-launcher usage patterns"}),"\n",(0,i.jsx)(n.li,{children:"Update prismctl local documentation"}),"\n",(0,i.jsx)(n.li,{children:"Migration guide from pattern-launcher \u2192 prism-launcher"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"migration-strategy",children:"Migration Strategy"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Backward Compatibility"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Keep ",(0,i.jsx)(n.code,{children:"pattern-launcher"})," as symlink to ",(0,i.jsx)(n.code,{children:"prism-launcher"})," for 1-2 releases"]}),"\n",(0,i.jsx)(n.li,{children:'Default ProcessType to "pattern" if not specified'}),"\n",(0,i.jsx)(n.li,{children:"Admin recognizes both old PatternAssignment and new ProcessAssignment"}),"\n",(0,i.jsx)(n.li,{children:"Gradual migration: existing deployments continue working"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Migration Steps"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Release prism-launcher with backward compatibility"}),"\n",(0,i.jsx)(n.li,{children:"Update admin to support both protocols"}),"\n",(0,i.jsx)(n.li,{children:"Documentation shows prism-launcher (note pattern-launcher deprecated)"}),"\n",(0,i.jsx)(n.li,{children:"After 2 releases, remove pattern-launcher symlink"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/adr/adr-055",children:"ADR-055: Proxy-Admin Control Plane Protocol"})," - Proxy registration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/adr/adr-056",children:"ADR-056: Launcher-Admin Control Plane Protocol"})," - Pattern-launcher registration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-035",children:"RFC-035: Pattern Process Launcher"})," - Original pattern-launcher design"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/memos/memo-034",children:"MEMO-034: Pattern Process Launcher Quick Start"})," - Usage guide"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://github.com/jrepp/prism-data-layer/tree/main/pkg/procmgr",children:"pkg/procmgr"})," - Process manager implementation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2025-10-15: Initial draft - Refactoring pattern-launcher to prism-launcher"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);