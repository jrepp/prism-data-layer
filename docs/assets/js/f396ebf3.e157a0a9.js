"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[13463],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(96540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}},47060:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"memo-017","title":"Message Schema Configuration for Publish Slots","description":"Context","source":"@site/../docs-cms/memos/MEMO-017-message-schema-configuration.md","sourceDirName":".","slug":"/memo-017","permalink":"/prism-data-layer/memos/memo-017","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/MEMO-017-message-schema-configuration.md","tags":[{"inline":true,"label":"messaging","permalink":"/prism-data-layer/memos/tags/messaging"},{"inline":true,"label":"schema","permalink":"/prism-data-layer/memos/tags/schema"},{"inline":true,"label":"validation","permalink":"/prism-data-layer/memos/tags/validation"},{"inline":true,"label":"multicast-registry","permalink":"/prism-data-layer/memos/tags/multicast-registry"}],"version":"current","frontMatter":{"author":"Claude","created":"2025-10-11T00:00:00.000Z","doc_uuid":"15828b58-345b-4995-bec7-f73476cde62e","id":"memo-017","project_id":"prism-data-layer","tags":["messaging","schema","validation","multicast-registry"],"title":"Message Schema Configuration for Publish Slots","updated":"2025-10-11T00:00:00.000Z"},"sidebar":"memosSidebar","previous":{"title":"Observability and Lifecycle Implementation Summary \u2022 MEMO-016","permalink":"/prism-data-layer/memos/memo-016"},"next":{"title":"POC 4 Multicast Registry - Complete Summary \u2022 MEMO-018","permalink":"/prism-data-layer/memos/memo-018"}}');var r=s(74848),t=s(28453);const a={author:"Claude",created:new Date("2025-10-11T00:00:00.000Z"),doc_uuid:"15828b58-345b-4995-bec7-f73476cde62e",id:"memo-017",project_id:"prism-data-layer",tags:["messaging","schema","validation","multicast-registry"],title:"Message Schema Configuration for Publish Slots",updated:new Date("2025-10-11T00:00:00.000Z")},l="MEMO-017: Message Schema Configuration for Publish Slots",o={},c=[{value:"Context",id:"context",level:2},{value:"Proposal",id:"proposal",level:2},{value:"Configuration Example",id:"configuration-example",level:3},{value:"Schema Format Support",id:"schema-format-support",level:3},{value:"1. <strong>Protobuf</strong> (Recommended)",id:"1-protobuf-recommended",level:4},{value:"2. <strong>JSON Schema</strong>",id:"2-json-schema",level:4},{value:"3. <strong>Avro</strong>",id:"3-avro",level:4},{value:"4. <strong>Plaintext/Binary</strong> (No Schema)",id:"4-plaintextbinary-no-schema",level:4},{value:"Validation Modes",id:"validation-modes",level:3},{value:"Implementation Phases",id:"implementation-phases",level:3},{value:"Phase 1: Configuration Only (Week 2)",id:"phase-1-configuration-only-week-2",level:4},{value:"Phase 2: Schema Registry Integration (Week 4)",id:"phase-2-schema-registry-integration-week-4",level:4},{value:"Phase 3: Runtime Validation (Week 6)",id:"phase-3-runtime-validation-week-6",level:4},{value:"Consumer Discovery",id:"consumer-discovery",level:3},{value:"1. <strong>Admin API</strong>",id:"1-admin-api",level:4},{value:"2. <strong>gRPC Metadata</strong> (Phase 2)",id:"2-grpc-metadata-phase-2",level:4},{value:"3. <strong>Pattern Documentation</strong>",id:"3-pattern-documentation",level:4},{value:"Example: End-to-End Flow",id:"example-end-to-end-flow",level:3},{value:"Benefits",id:"benefits",level:2},{value:"Open Questions",id:"open-questions",level:2},{value:"Recommendations",id:"recommendations",level:2},{value:"Related",id:"related",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"memo-017-message-schema-configuration-for-publish-slots",children:"MEMO-017: Message Schema Configuration for Publish Slots"})}),"\n",(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsxs)(n.p,{children:["When using the multicast registry pattern (or any pub/sub messaging pattern), ",(0,r.jsx)(n.strong,{children:"consumers need to know what message format to expect"})," from published messages. Without schema information, consumers must:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reverse-engineer message structure from examples"}),"\n",(0,r.jsx)(n.li,{children:"Handle unexpected formats with generic error handling"}),"\n",(0,r.jsx)(n.li,{children:"Maintain separate documentation outside the configuration"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"User requirement:"}),' "for publish slots i want to expose a setting which is the message schema for consumers"']}),"\n",(0,r.jsx)(n.h2,{id:"proposal",children:"Proposal"}),"\n",(0,r.jsxs)(n.p,{children:["Add ",(0,r.jsx)(n.code,{children:"message_schema"})," configuration to messaging backend slots, supporting multiple schema formats."]}),"\n",(0,r.jsx)(n.h3,{id:"configuration-example",children:"Configuration Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'pattern: multicast-registry\nname: device-notifications\n\nslots:\n  registry:\n    backend: redis\n    config:\n      addr: "localhost:6379"\n\n  messaging:\n    backend: nats\n    config:\n      servers: ["nats://localhost:4222"]\n      topic_prefix: "devices."\n\n    # NEW: Message schema specification\n    message_schema:\n      format: "protobuf"  # or "json-schema", "avro", "plaintext"\n      schema_ref: "prism.devices.v1.DeviceEvent"\n      schema_url: "https://schemas.prism.internal/devices/v1/event.proto"\n      validation: "strict"  # or "advisory", "none"\n\n      # Optional: inline schema for simple cases\n      inline_schema: |\n        syntax = "proto3";\n        message DeviceEvent {\n          string device_id = 1;\n          string event_type = 2;\n          int64 timestamp = 3;\n          bytes payload = 4;\n        }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"schema-format-support",children:"Schema Format Support"}),"\n",(0,r.jsxs)(n.h4,{id:"1-protobuf-recommended",children:["1. ",(0,r.jsx)(n.strong,{children:"Protobuf"})," (Recommended)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Format"}),": ",(0,r.jsx)(n.code,{children:"protobuf"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ref"}),": Fully-qualified message name (e.g., ",(0,r.jsx)(n.code,{children:"prism.devices.v1.DeviceEvent"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL"}),": Link to ",(0,r.jsx)(n.code,{children:".proto"})," file in schema registry"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": Proxy validates messages before publishing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Benefits"}),": Type safety, backward compatibility, code generation"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"message_schema:\n  format: protobuf\n  schema_ref: prism.devices.v1.DeviceEvent\n  schema_url: https://schemas.prism.internal/devices/v1/event.proto\n  validation: strict\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"2-json-schema",children:["2. ",(0,r.jsx)(n.strong,{children:"JSON Schema"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Format"}),": ",(0,r.jsx)(n.code,{children:"json-schema"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ref"}),": Schema ID in registry (e.g., ",(0,r.jsx)(n.code,{children:"device-event-v1"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL"}),": Link to JSON Schema file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": JSON structure validation before publishing"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"message_schema:\n  format: json-schema\n  schema_ref: device-event-v1\n  schema_url: https://schemas.prism.internal/devices/v1/event.json\n  validation: strict\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"3-avro",children:["3. ",(0,r.jsx)(n.strong,{children:"Avro"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Format"}),": ",(0,r.jsx)(n.code,{children:"avro"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Ref"}),": Avro schema name with namespace"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"URL"}),": Link to ",(0,r.jsx)(n.code,{children:".avsc"})," file"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": Avro binary format validation"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"message_schema:\n  format: avro\n  schema_ref: com.prism.devices.DeviceEvent\n  schema_url: https://schemas.prism.internal/devices/v1/event.avsc\n  validation: strict\n"})}),"\n",(0,r.jsxs)(n.h4,{id:"4-plaintextbinary-no-schema",children:["4. ",(0,r.jsx)(n.strong,{children:"Plaintext/Binary"})," (No Schema)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Format"}),": ",(0,r.jsx)(n.code,{children:"plaintext"})," or ",(0,r.jsx)(n.code,{children:"binary"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No validation"}),", consumers handle parsing"]}),"\n",(0,r.jsx)(n.li,{children:"Useful for opaque payloads (encrypted, custom formats)"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'message_schema:\n  format: plaintext\n  validation: none\n  description: "UTF-8 encoded JSON (consumer-parsed)"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"validation-modes",children:"Validation Modes"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Mode"}),(0,r.jsx)(n.th,{children:"Behavior"}),(0,r.jsx)(n.th,{children:"Use Case"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"strict"})}),(0,r.jsx)(n.td,{children:"Reject invalid messages, return error to publisher"}),(0,r.jsx)(n.td,{children:"Production environments"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"advisory"})}),(0,r.jsx)(n.td,{children:"Log warnings but allow invalid messages through"}),(0,r.jsx)(n.td,{children:"Migration/testing"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"none"})}),(0,r.jsx)(n.td,{children:"No validation, schema is documentation only"}),(0,r.jsx)(n.td,{children:"Opaque/encrypted payloads"})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"implementation-phases",children:"Implementation Phases"}),"\n",(0,r.jsx)(n.h4,{id:"phase-1-configuration-only-week-2",children:"Phase 1: Configuration Only (Week 2)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.code,{children:"message_schema"})," field to pattern configuration YAML"]}),"\n",(0,r.jsx)(n.li,{children:"Store schema metadata in pattern registry"}),"\n",(0,r.jsxs)(n.li,{children:["Expose schema info via admin API (",(0,r.jsx)(n.code,{children:"GET /api/patterns/{name}/schema"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No validation yet"})," - schema is documentation only"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"phase-2-schema-registry-integration-week-4",children:"Phase 2: Schema Registry Integration (Week 4)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Integrate with schema registry (e.g., Confluent Schema Registry, Buf Schema Registry)"}),"\n",(0,r.jsx)(n.li,{children:"Fetch schemas from registry by URL/ref"}),"\n",(0,r.jsx)(n.li,{children:"Cache schemas in proxy memory"}),"\n",(0,r.jsx)(n.li,{children:"Version schema evolution rules"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"phase-3-runtime-validation-week-6",children:"Phase 3: Runtime Validation (Week 6)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Validate messages against schema before publishing"}),"\n",(0,r.jsx)(n.li,{children:"Return structured errors for schema violations"}),"\n",(0,r.jsxs)(n.li,{children:["Metrics: ",(0,r.jsx)(n.code,{children:"prism_schema_validation_errors{pattern,format}"})]}),"\n",(0,r.jsxs)(n.li,{children:["Support ",(0,r.jsx)(n.code,{children:"validation: strict|advisory|none"})," modes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"consumer-discovery",children:"Consumer Discovery"}),"\n",(0,r.jsx)(n.p,{children:"Consumers can discover message schemas via:"}),"\n",(0,r.jsxs)(n.h4,{id:"1-admin-api",children:["1. ",(0,r.jsx)(n.strong,{children:"Admin API"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'GET /api/patterns/device-notifications/schema\n\nResponse:\n{\n  "format": "protobuf",\n  "schema_ref": "prism.devices.v1.DeviceEvent",\n  "schema_url": "https://schemas.prism.internal/devices/v1/event.proto",\n  "validation": "strict",\n  "inline_schema": "..."\n}\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"2-grpc-metadata-phase-2",children:["2. ",(0,r.jsx)(n.strong,{children:"gRPC Metadata"})," (Phase 2)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Proxy includes schema ref in gRPC response metadata"}),"\n",(0,r.jsxs)(n.li,{children:["Header: ",(0,r.jsx)(n.code,{children:"x-prism-message-schema: protobuf:prism.devices.v1.DeviceEvent"})]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"3-pattern-documentation",children:["3. ",(0,r.jsx)(n.strong,{children:"Pattern Documentation"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Auto-generate schema docs from pattern configuration"}),"\n",(0,r.jsx)(n.li,{children:"Include schema in pattern README"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"example-end-to-end-flow",children:"Example: End-to-End Flow"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Operator configures pattern with schema:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"pattern: multicast-registry\nname: iot-telemetry\n\nslots:\n  messaging:\n    backend: nats\n    message_schema:\n      format: protobuf\n      schema_ref: prism.iot.v1.TelemetryEvent\n      validation: strict\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Consumer queries schema:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ prism-cli pattern schema iot-telemetry\n\nFormat: protobuf\nSchema: prism.iot.v1.TelemetryEvent\nURL: https://schemas.prism.internal/iot/v1/telemetry.proto\n\nmessage TelemetryEvent {\n  string device_id = 1;\n  double temperature = 2;\n  double humidity = 3;\n  int64 timestamp = 4;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Consumer generates client code:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"$ buf generate https://schemas.prism.internal/iot/v1/telemetry.proto\n\nGenerated: iot/v1/telemetry_pb2.py\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Consumer subscribes with typed handler:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from iot.v1 import telemetry_pb2\n\ndef handle_telemetry(event: telemetry_pb2.TelemetryEvent):\n    print(f"Device {event.device_id}: {event.temperature}\xb0C")\n\nclient.subscribe("iot-telemetry", handle_telemetry)\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"5. Publisher sends validated message:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'event = telemetry_pb2.TelemetryEvent(\n    device_id="sensor-42",\n    temperature=23.5,\n    humidity=65.2,\n    timestamp=int(time.time())\n)\n\n# Proxy validates against schema before publishing\nclient.publish("iot-telemetry", event.SerializeToString())\n'})}),"\n",(0,r.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Self-Documenting"}),": Schema is part of pattern configuration, always in sync"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type Safety"}),": Publishers and consumers use generated code from schema"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Evolution"}),": Schema registry tracks versions, validates backward compatibility"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Discovery"}),": Consumers query schema via API, no separate documentation needed"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": Catch schema errors at publish time, not consumer runtime"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Schema Registry Backend"}),": Which registry to use?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Confluent Schema Registry (Kafka-focused, mature)"}),"\n",(0,r.jsx)(n.li,{children:"Buf Schema Registry (Protobuf-focused, modern)"}),"\n",(0,r.jsx)(n.li,{children:"Custom SQLite-based registry (simple, local-first)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Schema Evolution Rules"}),": How to handle breaking changes?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Require new topic/pattern for breaking changes?"}),"\n",(0,r.jsx)(n.li,{children:"Support schema compatibility checks (backward, forward, full)?"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance Impact"}),": Validation overhead?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Benchmark: Protobuf validation ~1-10\xb5s per message"}),"\n",(0,r.jsx)(n.li,{children:"Cache schemas in memory to avoid registry lookups"}),"\n",(0,r.jsx)(n.li,{children:"Make validation opt-in per pattern"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Schema Storage"}),": Where to store inline schemas?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Embed in pattern configuration YAML?"}),"\n",(0,r.jsx)(n.li,{children:"Store in separate schema registry?"}),"\n",(0,r.jsx)(n.li,{children:"Hybrid: simple schemas inline, complex schemas in registry?"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"recommendations",children:"Recommendations"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"POC 4 (Week 2)"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.code,{children:"message_schema"})," configuration field (documentation only, no validation)"]}),"\n",(0,r.jsx)(n.li,{children:"Implement admin API endpoint to query schema"}),"\n",(0,r.jsx)(n.li,{children:"Update pattern YAML examples to include schema"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"POC 5 (Weeks 3-4)"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Integrate with Buf Schema Registry (best for Protobuf)"}),"\n",(0,r.jsxs)(n.li,{children:["Implement schema validation with ",(0,r.jsx)(n.code,{children:"strict|advisory|none"})," modes"]}),"\n",(0,r.jsx)(n.li,{children:"Add gRPC metadata header with schema ref"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Production"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Support multiple schema formats (Protobuf, JSON Schema, Avro)"}),"\n",(0,r.jsx)(n.li,{children:"Schema registry with version management"}),"\n",(0,r.jsx)(n.li,{children:"Automated schema compatibility checks in CI/CD"}),"\n",(0,r.jsx)(n.li,{children:"Metrics and alerting for schema validation failures"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/rfc/rfc-017",children:"RFC-017: Multicast Registry Pattern"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/adr/adr-003",children:"ADR-003: Protobuf as Single Source of Truth"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/rfc/rfc-008",children:"RFC-008: Proxy Plugin Architecture"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);