"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[9476],{8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var s=r(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},9633:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"grpc-first-interface-design","title":"ADR-023: gRPC-First Interface Design","description":"Context","source":"@site/../docs-cms/adr/023-grpc-first-interface-design.md","sourceDirName":".","slug":"/grpc-first-interface-design","permalink":"/prism-data-layer/adr/grpc-first-interface-design","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/023-grpc-first-interface-design.md","tags":[{"inline":true,"label":"architecture","permalink":"/prism-data-layer/adr/tags/architecture"},{"inline":true,"label":"grpc","permalink":"/prism-data-layer/adr/tags/grpc"},{"inline":true,"label":"performance","permalink":"/prism-data-layer/adr/tags/performance"},{"inline":true,"label":"api-design","permalink":"/prism-data-layer/adr/tags/api-design"}],"version":"current","sidebarPosition":23,"frontMatter":{"title":"ADR-023: gRPC-First Interface Design","status":"Accepted","date":"2025-10-07T00:00:00.000Z","deciders":"Core Team","tags":["architecture","grpc","performance","api-design"]},"sidebar":"adrSidebar","previous":{"title":"ADR-022: Dynamic Client Configuration System","permalink":"/prism-data-layer/adr/dynamic-client-configuration"},"next":{"title":"ADR-024: Layered Interface Hierarchy","permalink":"/prism-data-layer/adr/layered-interface-hierarchy"}}');var i=r(4848),t=r(8453);const l={title:"ADR-023: gRPC-First Interface Design",status:"Accepted",date:new Date("2025-10-07T00:00:00.000Z"),deciders:"Core Team",tags:["architecture","grpc","performance","api-design"]},a=void 0,c={},o=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why gRPC",id:"why-grpc",level:3},{value:"Architecture",id:"architecture",level:3},{value:"Service Organization",id:"service-organization",level:3},{value:"Streaming Patterns",id:"streaming-patterns",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Metadata and Context",id:"metadata-and-context",level:3},{value:"Performance Optimizations",id:"performance-optimizations",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Server Implementation (Rust)",id:"server-implementation-rust",level:3},{value:"Client Implementation (Go)",id:"client-implementation-go",level:3},{value:"Testing with grpcurl",id:"testing-with-grpcurl",level:3},{value:"Code Generation",id:"code-generation",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsx)(n.p,{children:"Prism needs a high-performance, type-safe API for client-server communication:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Efficient binary protocol for low latency"}),"\n",(0,i.jsx)(n.li,{children:"Strong typing with code generation"}),"\n",(0,i.jsx)(n.li,{children:"Streaming support for large datasets"}),"\n",(0,i.jsx)(n.li,{children:"HTTP/2 multiplexing for concurrent requests"}),"\n",(0,i.jsx)(n.li,{children:"Cross-language client support"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Sub-millisecond overhead, 10k+ RPS per connection"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type safety"}),": Compile-time validation of requests/responses"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Streaming"}),": Bidirectional streaming for pub/sub and pagination"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Discoverability"}),": Self-documenting API via protobuf"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Evolution"}),": Backward-compatible API changes"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.strong,{children:"gRPC as the primary interface"})," for Prism data access layer:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"gRPC over HTTP/2"}),": Binary protocol with multiplexing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Protobuf messages"}),": All requests/responses in protobuf"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Streaming first-class"}),": Unary, server-streaming, client-streaming, bidirectional"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No REST initially"}),": Focus on gRPC, add REST gateway later if needed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service-per-pattern"}),": Separate gRPC services for each access pattern"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,i.jsx)(n.h3,{id:"why-grpc",children:"Why gRPC"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Performance benefits:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Binary serialization (smaller payloads than JSON)"}),"\n",(0,i.jsx)(n.li,{children:"HTTP/2 multiplexing (multiple requests per connection)"}),"\n",(0,i.jsx)(n.li,{children:"Header compression (reduces overhead)"}),"\n",(0,i.jsx)(n.li,{children:"Connection reuse (lower latency)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Developer experience:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Code generation for multiple languages"}),"\n",(0,i.jsx)(n.li,{children:"Type safety at compile time"}),"\n",(0,i.jsxs)(n.li,{children:["Self-documenting via ",(0,i.jsx)(n.code,{children:".proto"})," files"]}),"\n",(0,i.jsx)(n.li,{children:"Built-in deadline/timeout support"}),"\n",(0,i.jsx)(n.li,{children:"Rich error model with status codes"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Streaming support:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Server streaming for pagination and pub/sub"}),"\n",(0,i.jsx)(n.li,{children:"Client streaming for batch uploads"}),"\n",(0,i.jsx)(n.li,{children:"Bidirectional streaming for real-time communication"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Prism gRPC Server                      \u2502\n\u2502                   (Port 8980)                           \u2502\n\u2502                                                           \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502              gRPC Services                       \u2502   \u2502\n\u2502  \u2502                                                   \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502   \u2502\n\u2502  \u2502  \u2502 ConfigService\u2502  \u2502 SessionService\u2502            \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502   \u2502\n\u2502  \u2502                                                   \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502   \u2502\n\u2502  \u2502  \u2502  QueueService\u2502  \u2502 PubSubService\u2502            \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502   \u2502\n\u2502  \u2502                                                   \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502   \u2502\n\u2502  \u2502  \u2502 ReaderService\u2502  \u2502TransactService\u2502            \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                           \u2502\n                           \u2502 HTTP/2 + Protobuf\n                           \u2502\n              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502                         \u2502\n              \u2502                         \u2502\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502   Go Client       \u2502     \u2502   Rust Client     \u2502\n    \u2502 (generated code)  \u2502     \u2502 (generated code)  \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"service-organization",children:"Service Organization"}),"\n",(0,i.jsx)(n.p,{children:"Each access pattern gets its own service:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"// proto/prism/session/v1/session_service.proto\nservice SessionService {\n  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);\n  rpc CloseSession(CloseSessionRequest) returns (CloseSessionResponse);\n  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);\n}\n\n// proto/prism/queue/v1/queue_service.proto\nservice QueueService {\n  rpc Publish(PublishRequest) returns (PublishResponse);\n  rpc Subscribe(SubscribeRequest) returns (stream Message);\n  rpc Acknowledge(AcknowledgeRequest) returns (AcknowledgeResponse);\n  rpc Commit(CommitRequest) returns (CommitResponse);\n}\n\n// proto/prism/pubsub/v1/pubsub_service.proto\nservice PubSubService {\n  rpc Publish(PublishRequest) returns (PublishResponse);\n  rpc Subscribe(SubscribeRequest) returns (stream Event);\n  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse);\n}\n\n// proto/prism/reader/v1/reader_service.proto\nservice ReaderService {\n  rpc Read(ReadRequest) returns (stream Page);\n  rpc Query(QueryRequest) returns (stream Row);\n}\n\n// proto/prism/transact/v1/transact_service.proto\nservice TransactService {\n  rpc Write(WriteRequest) returns (WriteResponse);\n  rpc Transaction(stream TransactRequest) returns (stream TransactResponse);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"streaming-patterns",children:"Streaming Patterns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Server streaming"})," (pagination, pub/sub):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'service ReaderService {\n  // Server streams pages to client\n  rpc Read(ReadRequest) returns (stream Page) {\n    option (google.api.http) = {\n      post: "/v1/reader/read"\n      body: "*"\n    };\n  }\n}\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// Server implementation\nasync fn read(&self, req: Request<ReadRequest>) -> Result<Response<Self::ReadStream>, Status> {\n    let (tx, rx) = mpsc::channel(100);\n\n    tokio::spawn(async move {\n        let mut offset = 0;\n        loop {\n            let page = fetch_page(offset, 100).await?;\n            if page.items.is_empty() {\n                break;\n            }\n            tx.send(Ok(page)).await?;\n            offset += 100;\n        }\n    });\n\n    Ok(Response::new(ReceiverStream::new(rx)))\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Client streaming"})," (batch writes):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"service TransactService {\n  // Client streams write batches\n  rpc BatchWrite(stream WriteRequest) returns (WriteResponse);\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Bidirectional streaming"})," (pub/sub with acks):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"service PubSubService {\n  // Client subscribes, server streams events, client sends acks\n  rpc Stream(stream ClientMessage) returns (stream ServerMessage);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"Use gRPC status codes:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use tonic::{Code, Status};\n\n// Not found\nreturn Err(Status::not_found(format!("namespace {} not found", namespace)));\n\n// Invalid argument\nreturn Err(Status::invalid_argument("page size must be > 0"));\n\n// Unavailable\nreturn Err(Status::unavailable("backend connection failed"));\n\n// Deadline exceeded\nreturn Err(Status::deadline_exceeded("operation timed out"));\n\n// Permission denied\nreturn Err(Status::permission_denied("insufficient permissions"));\n'})}),"\n",(0,i.jsx)(n.p,{children:"Structured error details:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'import "google/rpc/error_details.proto";\n\nmessage ErrorInfo {\n  string reason = 1;\n  string domain = 2;\n  map<string, string> metadata = 3;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"metadata-and-context",children:"Metadata and Context"}),"\n",(0,i.jsx)(n.p,{children:"Use gRPC metadata for cross-cutting concerns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Server: extract session token from metadata\nlet session_token = req.metadata()\n    .get("x-session-token")\n    .and_then(|v| v.to_str().ok())\n    .ok_or_else(|| Status::unauthenticated("missing session token"))?;\n\n// Client: add session token to metadata\nlet mut request = Request::new(read_request);\nrequest.metadata_mut().insert(\n    "x-session-token",\n    session_token.parse().unwrap(),\n);\n'})}),"\n",(0,i.jsx)(n.p,{children:"Common metadata:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x-session-token"}),": Session identifier"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x-namespace"}),": Namespace for multi-tenancy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x-request-id"}),": Request tracing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"x-client-version"}),": Client version for compatibility"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"performance-optimizations",children:"Performance Optimizations"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Connection pooling:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Reuse connections\nlet channel = Channel::from_static("http://localhost:8980")\n    .connect_lazy();\n\nlet client = QueueServiceClient::new(channel.clone());\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compression:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Enable gzip compression\nlet channel = Channel::from_static("http://localhost:8980")\n    .http2_keep_alive_interval(Duration::from_secs(30))\n    .http2_adaptive_window(true)\n    .connect_lazy();\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Timeouts:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'service QueueService {\n  rpc Publish(PublishRequest) returns (PublishResponse) {\n    option (google.api.method_signature) = "timeout=5s";\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"REST/HTTP JSON API"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pros: Simple, widespread tooling, human-readable"}),"\n",(0,i.jsx)(n.li,{children:"Cons: Slower serialization, no streaming, manual typing"}),"\n",(0,i.jsx)(n.li,{children:"Rejected: Performance critical for Prism"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"GraphQL"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pros: Flexible queries, single endpoint"}),"\n",(0,i.jsx)(n.li,{children:"Cons: Complexity, performance overhead, limited streaming"}),"\n",(0,i.jsx)(n.li,{children:"Rejected: Over-engineered for data access patterns"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"WebSockets"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pros: Bidirectional, real-time"}),"\n",(0,i.jsx)(n.li,{children:"Cons: No type safety, manual protocol design"}),"\n",(0,i.jsx)(n.li,{children:"Rejected: gRPC bidirectional streaming provides same benefits"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Thrift or Avro"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pros: Binary protocols, similar performance"}),"\n",(0,i.jsx)(n.li,{children:"Cons: Smaller ecosystems, less tooling"}),"\n",(0,i.jsx)(n.li,{children:"Rejected: gRPC has better ecosystem and HTTP/2 benefits"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,i.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"High performance"}),": Binary protocol, HTTP/2 multiplexing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type safety"}),": Compile-time validation via protobuf"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Streaming"}),": First-class support for all streaming patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-language"}),": Generated clients for Go, Rust, Python, etc."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Self-documenting"}),": ",(0,i.jsx)(n.code,{children:".proto"})," files serve as API documentation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Evolution"}),": Backward-compatible changes via protobuf"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Observability"}),": Built-in tracing, metrics integration"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Debugging complexity"}),": Binary format harder to inspect than JSON"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tooling required"}),": Need ",(0,i.jsx)(n.code,{children:"grpcurl"}),", ",(0,i.jsx)(n.code,{children:"grpcui"})," for manual testing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Learning curve"}),": Teams unfamiliar with gRPC/protobuf"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Browser limitations"}),": No native browser support (need gRPC-Web)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTTP/2 required"}),": Not compatible with HTTP/1.1-only infrastructure"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"REST gateway optional"}),": Can add later with ",(0,i.jsx)(n.code,{children:"grpc-gateway"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,i.jsx)(n.h3,{id:"server-implementation-rust",children:"Server Implementation (Rust)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// proxy/src/main.rs\nuse tonic::transport::Server;\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let addr = "0.0.0.0:8980".parse()?;\n\n    let session_service = SessionServiceImpl::default();\n    let queue_service = QueueServiceImpl::default();\n    let pubsub_service = PubSubServiceImpl::default();\n\n    Server::builder()\n        .add_service(SessionServiceServer::new(session_service))\n        .add_service(QueueServiceServer::new(queue_service))\n        .add_service(PubSubServiceServer::new(pubsub_service))\n        .serve(addr)\n        .await?;\n\n    Ok(())\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"client-implementation-go",children:"Client Implementation (Go)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Client connection\nconn, err := grpc.Dial(\n    "localhost:8980",\n    grpc.WithTransportCredentials(insecure.NewCredentials()),\n    grpc.WithKeepaliveParams(keepalive.ClientParameters{\n        Time:    30 * time.Second,\n        Timeout: 10 * time.Second,\n    }),\n)\ndefer conn.Close()\n\n// Create typed client\nclient := queue.NewQueueServiceClient(conn)\n\n// Make request\nresp, err := client.Publish(ctx, &queue.PublishRequest{\n    Topic:   "events",\n    Payload: data,\n})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"testing-with-grpcurl",children:"Testing with grpcurl"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# List services\ngrpcurl -plaintext localhost:8980 list\n\n# Describe service\ngrpcurl -plaintext localhost:8980 describe prism.queue.v1.QueueService\n\n# Make request\ngrpcurl -plaintext -d \'{"topic":"events","payload":"dGVzdA=="}\' \\\n  localhost:8980 prism.queue.v1.QueueService/Publish\n'})}),"\n",(0,i.jsx)(n.h3,{id:"code-generation",children:"Code Generation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Generate Rust code\nbuf generate --template proxy/buf.gen.rust.yaml\n\n# Generate Go code\nbuf generate --template tools/buf.gen.go.yaml\n\n# Generate Python code\nbuf generate --template clients/python/buf.gen.python.yaml\n"})}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://grpc.io/docs/",children:"gRPC Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://grpc.io/docs/guides/performance/",children:"gRPC Performance Best Practices"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/hyperium/tonic",children:"tonic (Rust gRPC)"})}),"\n",(0,i.jsx)(n.li,{children:"ADR-003: Protobuf as Single Source of Truth"}),"\n",(0,i.jsx)(n.li,{children:"ADR-019: Rust Async Concurrency Patterns"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2025-10-07: Initial draft and acceptance"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);