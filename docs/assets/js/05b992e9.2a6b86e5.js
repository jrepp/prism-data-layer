"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[9646],{28453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var s=o(96540);const t={},r=s.createContext(t);function i(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(r.Provider,{value:n},e.children)}},47302:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"memo-001","title":"WAL Full Transaction Flow with Authorization and Session Management","description":"This diagram shows the complete lifecycle of a Write-Ahead Log transaction in Prism, including:","source":"@site/../docs-cms/memos/memo-001-wal-transaction-flow.md","sourceDirName":".","slug":"/memo-001","permalink":"/prism-data-layer/memos/memo-001","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/memo-001-wal-transaction-flow.md","tags":[{"inline":true,"label":"architecture","permalink":"/prism-data-layer/memos/tags/architecture"},{"inline":true,"label":"wal","permalink":"/prism-data-layer/memos/tags/wal"},{"inline":true,"label":"security","permalink":"/prism-data-layer/memos/tags/security"},{"inline":true,"label":"session-management","permalink":"/prism-data-layer/memos/tags/session-management"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-08T00:00:00.000Z","doc_uuid":"18d55bf4-c458-4725-9213-aed7d2064e14","id":"memo-001","project_id":"prism-data-layer","tags":["architecture","wal","security","session-management"],"title":"WAL Full Transaction Flow with Authorization and Session Management","updated":"2025-10-08T00:00:00.000Z"},"sidebar":"memosSidebar","previous":{"title":"Technical Memos","permalink":"/prism-data-layer/memos/"},"next":{"title":"Admin Protocol Security Review and Improvements \u2022 MEMO-002","permalink":"/prism-data-layer/memos/memo-002"}}');var t=o(74848),r=o(28453);const i={author:"Platform Team",created:new Date("2025-10-08T00:00:00.000Z"),doc_uuid:"18d55bf4-c458-4725-9213-aed7d2064e14",id:"memo-001",project_id:"prism-data-layer",tags:["architecture","wal","security","session-management"],title:"WAL Full Transaction Flow with Authorization and Session Management",updated:new Date("2025-10-08T00:00:00.000Z")},a="WAL Full Transaction Flow",c={},l=[{value:"Sequence Diagram",id:"sequence-diagram",level:2},{value:"State Transitions",id:"state-transitions",level:2},{value:"Error Scenarios and Recovery",id:"error-scenarios-and-recovery",level:2},{value:"Key Components",id:"key-components",level:2},{value:"Session Store Schema",id:"session-store-schema",level:3},{value:"WAL Message Schema",id:"wal-message-schema",level:3},{value:"Checkpoint Schema",id:"checkpoint-schema",level:3},{value:"Metrics",id:"metrics",level:2},{value:"References",id:"references",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"wal-full-transaction-flow",children:"WAL Full Transaction Flow"})}),"\n",(0,t.jsx)(n.p,{children:"This diagram shows the complete lifecycle of a Write-Ahead Log transaction in Prism, including:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Client authentication and authorization"}),"\n",(0,t.jsx)(n.li,{children:"Write operations to WAL"}),"\n",(0,t.jsx)(n.li,{children:"Async database application"}),"\n",(0,t.jsx)(n.li,{children:"Session disconnection scenarios"}),"\n",(0,t.jsx)(n.li,{children:"Crash recovery"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"sequence-diagram",children:"Sequence Diagram"}),"\n",(0,t.jsx)(n.mermaid,{value:'sequenceDiagram\n    actor Client\n    participant Proxy as Prism Proxy\n    participant Auth as Auth Service\n    participant Session as Session Store\n    participant WAL as WAL (Kafka)\n    participant Consumer as WAL Consumer\n    participant DB as Database (Postgres)\n    participant Monitor as Health Monitor\n\n    %% ========================================\n    %% Phase 1: Authentication & Authorization\n    %% ========================================\n\n    Note over Client,Session: Phase 1: Authentication & Session Setup\n\n    Client->>Proxy: Connect (credentials/mTLS)\n    Proxy->>Auth: Authenticate(credentials)\n\n    alt Invalid Credentials\n        Auth--\x3e>Proxy: AuthError\n        Proxy--\x3e>Client: 401 Unauthorized\n    else Valid Credentials\n        Auth--\x3e>Proxy: Token + Claims\n        Proxy->>Session: CreateSession(client_id, token, ttl=3600s)\n        Session--\x3e>Proxy: session_id\n        Proxy--\x3e>Client: 200 OK + session_id\n    end\n\n    Note over Client,Session: Session Active (TTL: 3600s)\n\n    %% ========================================\n    %% Phase 2: Normal Write Operation\n    %% ========================================\n\n    Note over Client,DB: Phase 2: Normal Write Flow\n\n    Client->>Proxy: Write(namespace="orders", key="order:123", data={...}, session_id)\n\n    Proxy->>Session: ValidateSession(session_id)\n\n    alt Session Expired\n        Session--\x3e>Proxy: SessionExpired\n        Proxy--\x3e>Client: 401 Session Expired\n        Note over Client,Proxy: Client must re-authenticate\n    else Session Valid\n        Session--\x3e>Proxy: SessionInfo(client_id, permissions)\n\n        Proxy->>Auth: Authorize(client_id, namespace="orders", operation="write")\n\n        alt Unauthorized\n            Auth--\x3e>Proxy: Forbidden\n            Proxy--\x3e>Client: 403 Forbidden\n        else Authorized\n            Auth--\x3e>Proxy: Allowed\n\n            %% Write to WAL\n            Proxy->>WAL: Append(topic="order-wal", msg={<br/>  client_id: "client123",<br/>  key: "order:123",<br/>  data: {...},<br/>  timestamp: 1704931200,<br/>  checksum: "abc123"<br/>})\n\n            Note over WAL: Replicate across 3 brokers<br/>fsync to disk\n\n            WAL--\x3e>Proxy: Ack(offset=523, partition=0)\n\n            Proxy->>Session: UpdateLastActivity(session_id)\n            Proxy--\x3e>Client: 200 OK {<br/>  wal_offset: 523,<br/>  partition: 0,<br/>  latency_ms: 1.2<br/>}\n\n            Note over Client: Write complete!<br/>Latency: 1-2ms\n        end\n    end\n\n    %% ========================================\n    %% Phase 3: Async DB Application\n    %% ========================================\n\n    Note over Consumer,DB: Phase 3: Async Apply to Database\n\n    loop Background Consumer\n        Consumer->>WAL: Poll(topic="order-wal", offset=523)\n        WAL--\x3e>Consumer: Batch[msg1, msg2, ..., msgN]\n\n        Consumer->>Consumer: ValidateChecksum(msgs)\n\n        alt Checksum Failed\n            Consumer->>Monitor: Alert(ChecksumError)\n            Note over Consumer: Skip corrupt message<br/>or retry from backup\n        else Checksum Valid\n            Consumer->>DB: BeginTransaction()\n\n            loop For each message in batch\n                Consumer->>DB: Apply(INSERT INTO orders ...)\n            end\n\n            alt DB Write Failed\n                DB--\x3e>Consumer: Error(DeadlockDetected)\n                Consumer->>DB: Rollback()\n                Note over Consumer: Retry with backoff\n            else DB Write Success\n                Consumer->>DB: Commit()\n                DB--\x3e>Consumer: Success\n                Consumer->>Consumer: UpdateCheckpoint(offset=523)\n                Note over Consumer: Checkpoint saved<br/>Recovery point updated\n            end\n        end\n    end\n\n    %% ========================================\n    %% Phase 4: Read-Your-Writes\n    %% ========================================\n\n    Note over Client,DB: Phase 4: Read Operation (Read-Your-Writes)\n\n    Client->>Proxy: Read(namespace="orders", key="order:123", session_id)\n\n    Proxy->>Session: ValidateSession(session_id)\n    Session--\x3e>Proxy: SessionInfo\n\n    Proxy->>Auth: Authorize(client_id, namespace="orders", operation="read")\n    Auth--\x3e>Proxy: Allowed\n\n    Proxy->>Consumer: GetAppliedOffset()\n    Consumer--\x3e>Proxy: applied_offset=520\n\n    alt Data not yet applied (offset 523 > 520)\n        Note over Proxy: WAL_FIRST read mode:<br/>Check WAL for unapplied writes\n\n        Proxy->>WAL: Fetch(topic="order-wal", offset=520..523)\n        WAL--\x3e>Proxy: [order:123 data]\n        Proxy--\x3e>Client: 200 OK {data, source: "wal"}\n\n    else Data already applied\n        Proxy->>DB: SELECT * FROM orders WHERE key = \'order:123\'\n        DB--\x3e>Proxy: {order data}\n        Proxy--\x3e>Client: 200 OK {data, source: "db"}\n    end\n\n    %% ========================================\n    %% Phase 5: Session Disconnection Scenarios\n    %% ========================================\n\n    Note over Client,Monitor: Phase 5: Session Disconnection\n\n    par Scenario A: Graceful Disconnect\n        Client->>Proxy: Disconnect(session_id)\n        Proxy->>Session: InvalidateSession(session_id)\n        Session--\x3e>Proxy: Deleted\n        Proxy--\x3e>Client: Connection Closed\n        Note over Client,Proxy: Session cleaned up<br/>Resources released\n    and Scenario B: Idle Timeout\n        Note over Session: No activity for 3600s\n        Session->>Session: TTL Expired\n        Session->>Monitor: SessionExpired(session_id)\n        Monitor->>Proxy: CloseConnection(session_id)\n        Proxy--\x3e>Client: Connection Closed (Timeout)\n        Note over Session: Session auto-deleted\n    and Scenario C: Network Failure\n        Note over Client: Network partition<br/>Client unreachable\n        Proxy->>Client: Heartbeat\n        Note over Proxy: Timeout (no response)\n        Proxy->>Session: MarkSessionDead(session_id)\n        Session->>Session: Schedule cleanup (grace period: 30s)\n        Note over Session: If no reconnect in 30s,<br/>session deleted\n    end\n\n    %% ========================================\n    %% Phase 6: Crash Recovery\n    %% ========================================\n\n    Note over Consumer,DB: Phase 6: Crash Recovery\n\n    Note over Consumer: Consumer crashes!\n\n    rect rgb(255, 200, 200)\n        Note over Consumer,DB: Recovery Process\n\n        Consumer->>Consumer: Restart\n        Consumer->>Consumer: LoadCheckpoint()\n        Note over Consumer: Last checkpoint: offset=500\n\n        Consumer->>WAL: Poll(topic="order-wal", offset=500)\n        WAL--\x3e>Consumer: Messages [500..523]\n\n        Consumer->>Consumer: Check idempotency keys\n        Note over Consumer: Skip already-applied messages<br/>using idempotency table\n\n        Consumer->>DB: BeginTransaction()\n\n        loop Replay unapplied messages\n            Consumer->>DB: Apply(INSERT ... ON CONFLICT DO NOTHING)\n        end\n\n        Consumer->>DB: Commit()\n        Consumer->>Consumer: UpdateCheckpoint(offset=523)\n\n        Note over Consumer: Recovery complete!<br/>Back to normal operation\n    end\n\n    %% ========================================\n    %% Phase 7: Health Monitoring\n    %% ========================================\n\n    Note over Proxy,Monitor: Phase 7: Continuous Health Monitoring\n\n    loop Every 10s\n        Monitor->>WAL: GetLatestOffset()\n        WAL--\x3e>Monitor: latest_offset=600\n\n        Monitor->>Consumer: GetAppliedOffset()\n        Consumer--\x3e>Monitor: applied_offset=590\n\n        Monitor->>Monitor: CalculateLag(600 - 590 = 10)\n\n        alt Lag > Threshold (100)\n            Monitor->>Monitor: Alert(HighWALLag)\n            Note over Monitor: Page on-call engineer\n        else Lag Acceptable\n            Monitor->>Monitor: Metrics(wal_lag_seconds=0.15)\n            Note over Monitor: All systems nominal\n        end\n    end'}),"\n",(0,t.jsx)(n.h2,{id:"state-transitions",children:"State Transitions"}),"\n",(0,t.jsx)(n.mermaid,{value:"stateDiagram-v2\n    [*] --\x3e Disconnected\n\n    Disconnected --\x3e Authenticating: Connect\n    Authenticating --\x3e Connected: Auth Success\n    Authenticating --\x3e Disconnected: Auth Failed\n\n    Connected --\x3e Active: Write/Read Operations\n    Active --\x3e Active: Operation Success\n    Active --\x3e Connected: Idle < TTL\n\n    Active --\x3e Disconnected: Graceful Disconnect\n    Active --\x3e Disconnected: Session Timeout\n    Active --\x3e NetworkError: Connection Lost\n\n    NetworkError --\x3e Disconnected: Grace Period Expired\n    NetworkError --\x3e Connected: Reconnect Successful\n\n    Connected --\x3e Disconnected: Idle Timeout\n\n    Disconnected --\x3e [*]"}),"\n",(0,t.jsx)(n.h2,{id:"error-scenarios-and-recovery",children:"Error Scenarios and Recovery"}),"\n",(0,t.jsx)(n.mermaid,{value:"flowchart TD\n    Start([Write Request]) --\x3e ValidateSession{Session<br/>Valid?}\n\n    ValidateSession --\x3e|No| SessionError[401 Session Expired]\n    SessionError --\x3e End1([Client Re-authenticates])\n\n    ValidateSession --\x3e|Yes| Authorize{Authorized?}\n\n    Authorize --\x3e|No| AuthError[403 Forbidden]\n    AuthError --\x3e End2([Request Denied])\n\n    Authorize --\x3e|Yes| WriteWAL[Append to WAL]\n\n    WriteWAL --\x3e WALAck{WAL<br/>Ack?}\n\n    WALAck --\x3e|No - Timeout| Retry{Retry<br/>Count < 3?}\n    Retry --\x3e|Yes| WriteWAL\n    Retry --\x3e|No| WALError[503 Service Unavailable]\n    WALError --\x3e End3([Alert + Circuit Breaker])\n\n    WALAck --\x3e|Yes| Success[200 OK]\n    Success --\x3e End4([Write Complete])\n\n    %% Async Consumer Flow\n    WriteWAL -.Async.-> Consumer[WAL Consumer Polls]\n    Consumer --\x3e Checkpoint{Checkpoint<br/>Valid?}\n\n    Checkpoint --\x3e|No| Recovery[Load from Last Checkpoint]\n    Recovery --\x3e ReplayWAL[Replay WAL Messages]\n\n    Checkpoint --\x3e|Yes| ReplayWAL\n\n    ReplayWAL --\x3e ApplyDB[Apply to Database]\n\n    ApplyDB --\x3e DBResult{DB<br/>Success?}\n\n    DBResult --\x3e|No| DBRetry{Retry?}\n    DBRetry --\x3e|Yes| ApplyDB\n    DBRetry --\x3e|No| DLQ[Send to Dead Letter Queue]\n    DLQ --\x3e AlertOps[Alert Operations]\n\n    DBResult --\x3e|Yes| SaveCheckpoint[Save Checkpoint]\n    SaveCheckpoint --\x3e Monitor[Update Metrics]\n    Monitor --\x3e Consumer\n\n    style SessionError fill:#ffcccc\n    style AuthError fill:#ffcccc\n    style WALError fill:#ffcccc\n    style DLQ fill:#ffcccc\n    style Success fill:#ccffcc\n    style End4 fill:#ccffcc"}),"\n",(0,t.jsx)(n.h2,{id:"key-components",children:"Key Components"}),"\n",(0,t.jsx)(n.h3,{id:"session-store-schema",children:"Session Store Schema"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'session:\n  session_id: uuid\n  client_id: string\n  created_at: timestamp\n  last_activity: timestamp\n  ttl: integer (seconds)\n  permissions: json\n  metadata:\n    ip_address: string\n    user_agent: string\n    connection_type: "mTLS" | "OAuth2"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"wal-message-schema",children:"WAL Message Schema"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'wal_message:\n  client_id: string\n  namespace: string\n  key: string\n  operation: "insert" | "update" | "delete"\n  data: bytes\n  timestamp: int64\n  checksum: string (SHA256)\n  idempotency_key: uuid\n  metadata:\n    partition: int\n    offset: int64\n'})}),"\n",(0,t.jsx)(n.h3,{id:"checkpoint-schema",children:"Checkpoint Schema"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"checkpoint:\n  consumer_id: string\n  topic: string\n  partition: int\n  offset: int64\n  timestamp: int64\n  message_count: int64\n"})}),"\n",(0,t.jsx)(n.h2,{id:"metrics",children:"Metrics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-promql",children:'# WAL lag (critical for monitoring)\nprism_wal_lag_seconds{namespace="orders"} 0.15\n\n# Unapplied entries\nprism_wal_unapplied_entries{namespace="orders"} 10\n\n# Session metrics\nprism_active_sessions{proxy="proxy-1"} 1250\nprism_session_expirations_total{reason="timeout"} 45\nprism_session_expirations_total{reason="network_error"} 12\n\n# Auth metrics\nprism_auth_requests_total{result="success"} 50000\nprism_auth_requests_total{result="forbidden"} 120\n\n# Write latency (target: <2ms)\nprism_wal_write_latency_seconds{quantile="0.99"} 0.0018\n\n# DB apply latency\nprism_db_apply_latency_seconds{quantile="0.99"} 0.015\n'})}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"RFC-009: Distributed Reliability Data Patterns (Write-Ahead Log Pattern)"}),"\n",(0,t.jsx)(n.li,{children:"ADR-002: Client-Originated Configuration"}),"\n",(0,t.jsx)(n.li,{children:"ADR-035: Connection Pooling and Resource Management"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);