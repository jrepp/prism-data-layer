"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[4220],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},38792:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"rfc-003","title":"Admin Interface for Prism","description":"Abstract","source":"@site/../docs-cms/rfcs/rfc-003-admin-interface.md","sourceDirName":".","slug":"/rfc-003","permalink":"/prism-data-layer/rfc/rfc-003","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/rfc-003-admin-interface.md","tags":[],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-08T00:00:00.000Z","doc_uuid":"c6dbb179-7bd3-4d60-9262-8ca117270771","id":"rfc-003","project_id":"prism-data-layer","status":"Proposed","title":"Admin Interface for Prism","updated":"2025-10-08T00:00:00.000Z"},"sidebar":"rfcSidebar","previous":{"title":"Data Layer Interface Specification \u2022 RFC-002","permalink":"/prism-data-layer/rfc/rfc-002"},"next":{"title":"Redis Integration for Cache, PubSub, and Vector Search \u2022 RFC-004","permalink":"/prism-data-layer/rfc/rfc-004"}}');var s=t(74848),r=t(28453);const a={author:"Platform Team",created:new Date("2025-10-08T00:00:00.000Z"),doc_uuid:"c6dbb179-7bd3-4d60-9262-8ca117270771",id:"rfc-003",project_id:"prism-data-layer",status:"Proposed",title:"Admin Interface for Prism",updated:new Date("2025-10-08T00:00:00.000Z")},o=void 0,c={},l=[{value:"Abstract",id:"abstract",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Proposed Design",id:"proposed-design",level:2},{value:"Architecture Overview",id:"architecture-overview",level:3}];function d(e){const n={a:"a",br:"br",code:"code",createconfigresponse:"createconfigresponse",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",permission:"permission",pre:"pre",strong:"strong",ul:"ul",utc:"utc",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,s.jsx)(n.p,{children:"This RFC specifies the administrative interface for Prism, enabling operators to manage configurations, monitor sessions, view backend health, and perform operational tasks. The design separates admin concerns from the data plane while maintaining consistency with Prism's gRPC-first architecture."}),"\n",(0,s.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,s.jsx)(n.p,{children:"Prism requires administrative capabilities beyond the data plane APIs. Operators need to:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Manage Configuration"}),": Create, update, and delete client configurations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Monitor Sessions"}),": View active sessions, metrics, and troubleshoot issues"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Maintain System Health"}),": Check backend status, drain connections, enable maintenance mode"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Audit Operations"}),": Track administrative actions for compliance and debugging"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Visualize System State"}),": Browser-accessible UI for non-CLI users"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Goals:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Provide complete administrative control via gRPC API"}),"\n",(0,s.jsx)(n.li,{children:"Enable browser-based administration for broader accessibility"}),"\n",(0,s.jsx)(n.li,{children:"Maintain security isolation from data plane"}),"\n",(0,s.jsx)(n.li,{children:"Support audit logging for all administrative actions"}),"\n",(0,s.jsx)(n.li,{children:"Keep deployment simple with minimal dependencies"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Non-Goals:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Real-time monitoring dashboards (use Prometheus/Grafana)"}),"\n",(0,s.jsx)(n.li,{children:"Complex workflow orchestration (use external tools)"}),"\n",(0,s.jsx)(n.li,{children:"Multi-cluster management (single cluster scope)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"proposed-design",children:"Proposed Design"}),"\n",(0,s.jsx)(n.h3,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,s.jsx)(n.p,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Admin Clients                         \u2502\n\u2502                                                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 CLI Tool     \u2502  \u2502 Web Browser  \u2502  \u2502 Automation   \u2502   \u2502\n\u2502  \u2502 (grpcurl)    \u2502  \u2502 (FastAPI UI) \u2502  \u2502 (Go/Python)  \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502         \u2502                  \u2502                  \u2502            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502                  \u2502                  \u2502\n\u2502 gRPC             \u2502 HTTP/gRPC-Web    \u2502 gRPC\n\u2502                  \u2502                  \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502               Prism Proxy (Port 8981)                      \u2502\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 AdminService (gRPC)                                  \u2502 \u2502\n\u2502  \u2502 - Config management                                  \u2502 \u2502\n\u2502  \u2502 - Session monitoring                                 \u2502 \u2502\n\u2502  \u2502 - Namespace operations                               \u2502 \u2502\n\u2502  \u2502 - Backend health                                     \u2502 \u2502\n\u2502  \u2502 - Operational commands                               \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502 Audit Logger                                         \u2502 \u2502\n\u2502  \u2502 - Records all admin operations                       \u2502 \u2502\n\u2502  \u2502 - Actor identity tracking                            \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u2502 Data access\n\u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Backend Storage                           \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                  \u2502\n\u2502  \u2502 Postgres \u2502  \u2502 Kafka    \u2502  \u2502 NATS     \u2502                  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### Component 1: Admin API (gRPC)\n\n**Design Choice: Separate gRPC service on dedicated port**\n\n**Rationale:**\n- **Security Isolation**: Different port prevents accidental data plane access\n- **Independent Scaling**: Admin traffic patterns differ from data plane\n- **Evolution**: Admin API versions independently\n- **Firewall-Friendly**: Internal-only port easily restricted\n\n**Alternative Considered: Combined service**\n- *Pros*: Simpler deployment, single port\n- *Cons*: Security risk, hard to separate auth, unclear boundaries\n- *Decision*: Rejected due to security requirements\n\n**API Surface:**\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"service AdminService {\n// Configuration Management\nrpc ListConfigs(ListConfigsRequest) returns (ListConfigsResponse);\nrpc GetConfig(GetConfigRequest) returns (GetConfigResponse);\nrpc CreateConfig(CreateConfigRequest) returns (CreateConfigResponse);\nrpc UpdateConfig(UpdateConfigRequest) returns (UpdateConfigResponse);\nrpc DeleteConfig(DeleteConfigRequest) returns (DeleteConfigResponse);"}),"\n",(0,s.jsx)(n.p,{children:"// Session Management\nrpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse);\nrpc GetSession(GetSessionRequest) returns (GetSessionResponse);\nrpc TerminateSession(TerminateSessionRequest) returns (TerminateSessionResponse);"}),"\n",(0,s.jsx)(n.p,{children:"// Namespace Management\nrpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse);\nrpc CreateNamespace(CreateNamespaceRequest) returns (CreateNamespaceResponse);\nrpc UpdateNamespace(UpdateNamespaceRequest) returns (UpdateNamespaceResponse);\nrpc DeleteNamespace(DeleteNamespaceRequest) returns (DeleteNamespaceResponse);"}),"\n",(0,s.jsx)(n.p,{children:"// Backend Health\nrpc GetBackendStatus(GetBackendStatusRequest) returns (GetBackendStatusResponse);\nrpc ListBackends(ListBackendsRequest) returns (ListBackendsResponse);"}),"\n",(0,s.jsx)(n.p,{children:"// Operational Commands\nrpc SetMaintenanceMode(SetMaintenanceModeRequest) returns (SetMaintenanceModeResponse);\nrpc DrainConnections(DrainConnectionsRequest) returns (DrainConnectionsResponse);\nrpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);"}),"\n",(0,s.jsx)(n.p,{children:"// Audit\nrpc GetAuditLog(GetAuditLogRequest) returns (stream AuditLogEntry);\n}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Implementation:**\n\nRun on separate port (8981) alongside data plane (8980):\n\n"})}),"\n",(0,s.jsx)(n.p,{children:'// proxy/src/main.rs\n#[tokio::main]\nasync fn main() -> Result<()> {\nlet data_addr = "0.0.0.0:8980".parse()?;\nlet admin_addr = "0.0.0.0:8981".parse()?;'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"// Data plane server\nlet data_server = Server::builder()\n    .add_service(SessionServiceServer::new(session_svc))\n    .add_service(QueueServiceServer::new(queue_svc))\n    .serve(data_addr);\n\n// Admin plane server\nlet admin_server = Server::builder()\n    .add_service(AdminServiceServer::new(admin_svc))\n    .serve(admin_addr);\n\ntokio::try_join!(data_server, admin_server)?;\nOk(())\n"})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Authentication:**\n\nAdmin API requires separate credentials:\n\n"})}),"\n",(0,s.jsx)(n.h1,{id:"metadata-in-all-admin-requests",children:"Metadata in all admin requests"}),"\n",(0,s.jsxs)(n.p,{children:['metadata:\nx-admin-token: "admin-abc123"\nx-admin-user: "',(0,s.jsx)(n.a,{href:"mailto:alice@example.com",children:"alice@example.com"}),'"']}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Pros:**\n- Strong security boundary\n- Standard gRPC authentication patterns\n- Supports multiple auth methods (API keys, OAuth2, mTLS)\n\n**Cons:**\n- Requires credential management\n- Different auth flow than data plane\n\n**Decision**: Use admin API keys with rotation policy\n\n### Component 2: Admin UI (FastAPI + gRPC-Web)\n\n**Design Choice: FastAPI serving static files + gRPC-Web proxy**\n\n**Rationale:**\n- **Browser Compatibility**: gRPC-Web enables browser access to gRPC backend\n- **Simple Deployment**: Single container with Python service\n- **No Framework Overhead**: Vanilla JavaScript sufficient for admin UI\n- **Fast Iteration**: No build step for frontend changes\n\n**Alternative Considered: React/Vue SPA**\n- *Pros*: Rich UI, reactive, component-based\n- *Cons*: Build complexity, large bundle size, overkill for admin UI\n- *Decision*: Rejected in favor of simplicity\n\n**Alternative Considered: Envoy gRPC-Web proxy**\n- *Pros*: Production-grade, feature-rich\n- *Cons*: Additional process, more complex configuration\n- *Decision*: Deferred; FastAPI sufficient initially, can migrate if needed\n\n**Architecture:**\n\nBrowser \u2192 HTTP/gRPC-Web \u2192 FastAPI \u2192 gRPC \u2192 Prism Admin API\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Implementation:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# admin-ui/main.py\nfrom fastapi import FastAPI\nfrom fastapi.staticfiles import StaticFiles\nfrom fastapi.responses import FileResponse\n\napp = FastAPI(title="Prism Admin UI")\n\n# Serve static files\napp.mount("/static", StaticFiles(directory="static"), name="static")\n\n@app.get("/")\nasync def read_root():\n    return FileResponse("static/index.html")\n\n@app.post("/prism.admin.v1.AdminService/{method}")\nasync def grpc_proxy(method: str, request: bytes):\n    """Proxy gRPC-Web requests to gRPC backend"""\n    channel = grpc.aio.insecure_channel("prism-proxy:8981")\n    # Forward request and convert response\n    # ... implementation details ...\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Frontend Structure:"})}),"\n",(0,s.jsx)(n.p,{children:"admin-ui/static/\n\u251c\u2500\u2500 index.html          # Main page\n\u251c\u2500\u2500 css/\n\u2502   \u2514\u2500\u2500 styles.css      # Tailwind or minimal CSS\n\u251c\u2500\u2500 js/\n\u2502   \u251c\u2500\u2500 admin_grpc_web_pb.js   # Generated gRPC-Web client\n\u2502   \u251c\u2500\u2500 config.js       # Config management\n\u2502   \u251c\u2500\u2500 sessions.js     # Session monitoring\n\u2502   \u2514\u2500\u2500 health.js       # Health dashboard\n\u2514\u2500\u2500 lib/\n\u2514\u2500\u2500 grpc-web.js     # gRPC-Web runtime"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**JavaScript Client:**\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"// admin-ui/static/js/config.js\nimport {AdminServiceClient} from './admin_grpc_web_pb.js';"}),"\n",(0,s.jsxs)(n.p,{children:["const client = new AdminServiceClient('",(0,s.jsx)(n.a,{href:"http://localhost:8000",children:"http://localhost:8000"}),"');"]}),"\n",(0,s.jsx)(n.p,{children:"async function loadConfigs() {\nconst request = new ListConfigsRequest();"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"client.listConfigs(request, {'x-admin-token': getAdminToken()}, (err, response) => {\n    if (err) {\n        console.error('Error:', err);\n        return;\n    }\n    renderConfigs(response.getConfigsList());\n});\n"})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Pros:**\n- No build step required\n- Fast development iteration\n- Small deployment footprint\n- Easy debugging (view source in browser)\n\n**Cons:**\n- Manual DOM manipulation\n- No reactive framework\n- Limited UI component library\n\n**Decision**: Use vanilla JavaScript initially, migrate to framework if UI complexity grows\n\n### Component 3: Audit Logging\n\n**Design Choice: Structured audit log with queryable storage**\n\n**Rationale:**\n- **Compliance**: Track all administrative actions\n- **Debugging**: Reconstruct sequence of operations\n- **Security**: Detect unauthorized access attempts\n\n**Implementation:**\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["impl AdminService {\nasync fn create_config(&self, req: CreateConfigRequest) -> Result",(0,s.jsx)(n.createconfigresponse,{children:" {\nlet actor = self.get_admin_user_from_metadata()?;"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'    // Perform operation\n    let result = self.config_store.create(req.config).await;\n\n    // Audit log\n    self.audit_logger.log(AuditLogEntry {\n        timestamp: Utc::now(),\n        actor: actor.email,\n        operation: "CreateConfig".to_string(),\n        resource: format!("config:{}", req.config.name),\n        namespace: req.config.namespace,\n        success: result.is_ok(),\n        error: result.as_ref().err().map(|e| e.to_string()),\n        metadata: extract_metadata(&req),\n    }).await;\n\n    result\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Storage:**\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"CREATE TABLE audit_log (\nid UUID PRIMARY KEY,\ntimestamp TIMESTAMPTZ NOT NULL,\nactor TEXT NOT NULL,\noperation TEXT NOT NULL,\nresource TEXT NOT NULL,\nnamespace TEXT,\nsuccess BOOLEAN NOT NULL,\nerror TEXT,\nmetadata JSONB,"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"INDEX idx_audit_timestamp ON audit_log(timestamp DESC),\nINDEX idx_audit_actor ON audit_log(actor),\nINDEX idx_audit_operation ON audit_log(operation)\n"})}),"\n",(0,s.jsx)(n.p,{children:");"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Pros:**\n- Comprehensive audit trail\n- Queryable via SQL\n- Supports compliance requirements\n\n**Cons:**\n- Storage overhead\n- Performance impact (async mitigates)\n\n**Decision**: Always log admin operations; use async writes to minimize latency\n\n## Deployment\n\n**Docker Compose:**\n\n"})}),"\n",(0,s.jsx)(n.p,{children:'services:\nprism-proxy:\nimage: prism/proxy:latest\nports:\n- "8980:8980"  # Data plane\n- "8981:8981"  # Admin API\nenvironment:\nPRISM_DATA_PORT: 8980\nPRISM_ADMIN_PORT: 8981'}),"\n",(0,s.jsx)(n.p,{children:'admin-ui:\nimage: prism/admin-ui:latest\nports:\n- "8000:8000"\nenvironment:\nPRISM_ADMIN_ENDPOINT: prism-proxy:8981\nADMIN_TOKEN_SECRET: ${ADMIN_TOKEN_SECRET}\ndepends_on:\n- prism-proxy'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Network Policy:**\n\n"})}),"\n",(0,s.jsx)(n.h1,{id:"kubernetes-networkpolicy-example",children:"Kubernetes NetworkPolicy example"}),"\n",(0,s.jsx)(n.p,{children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\nname: prism-admin-policy\nspec:\npodSelector:\nmatchLabels:\napp: prism-proxy\ningress:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["from:\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"podSelector:\nmatchLabels:\nrole: admin\nports:"}),"\n",(0,s.jsx)(n.li,{children:"protocol: TCP\nport: 8981  # Admin API - internal only"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["from:\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"podSelector: {}\nports:"}),"\n",(0,s.jsx)(n.li,{children:"protocol: TCP\nport: 8980  # Data plane - all pods"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n## Security Considerations\n\n### Authentication\n\n**Admin API Keys:**\n- Long-lived, rotatable tokens\n- Scoped to specific operations (RBAC)\n- Stored in secret management system\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["#[derive(Debug)]\npub struct AdminApiKey {\npub key_id: String,\npub key_hash: String,\npub created_at: DateTime",(0,s.jsxs)(n.utc,{children:[",\npub expires_at: Option<DateTime",(0,s.jsxs)(n.utc,{children:[">,\npub permissions: Vec",(0,s.jsx)(n.permission,{children:",\n}"})]})]})]}),"\n",(0,s.jsx)(n.p,{children:"pub enum Permission {\nConfigRead,\nConfigWrite,\nSessionRead,\nSessionTerminate,\nNamespaceAdmin,\nOperationalAdmin,\n}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Alternative: OAuth2**\n- *Pros*: Standard protocol, integrates with IdP\n- *Cons*: More complex, external dependency\n- *Decision*: Support both; OAuth2 for enterprise deployments\n\n### Authorization\n\n**Role-Based Access Control (RBAC):**\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"roles:\nadmin:\n- config:*\n- session:*\n- namespace:*\n- operational:*"}),"\n",(0,s.jsx)(n.p,{children:"operator:\n- config:read\n- session:read\n- session:terminate\n- operational:maintenance"}),"\n",(0,s.jsx)(n.p,{children:"viewer:\n- config:read\n- session:read\n- backend:read"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### Network Isolation\n\n**Production Setup:**\n- Admin API on internal network only\n- Admin UI behind VPN or internal load balancer\n- mTLS for admin API connections\n\n"})}),"\n",(0,s.jsx)(n.h1,{id:"example-firewall-rules",children:"Example firewall rules"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"port: 8980\nprotocol: TCP\nallow: [public]"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"port: 8981\nprotocol: TCP\nallow: [internal, 10.0.0.0/8]"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n## Performance Considerations\n\n### Caching\n\nAdmin UI caches configuration list:\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"// Cache configs for 30 seconds\nconst configCache = new Map();\nconst CACHE_TTL = 30000;"}),"\n",(0,s.jsx)(n.p,{children:"async function getConfigs() {\nconst now = Date.now();\nconst cached = configCache.get('list');"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"if (cached && (now - cached.timestamp) < CACHE_TTL) {\n    return cached.data;\n}\n\nconst configs = await fetchConfigs();\nconfigCache.set('list', { data: configs, timestamp: now });\nreturn configs;\n"})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### Pagination\n\nAll list operations support pagination:\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"message ListSessionsRequest {\nint32 page_size = 1;\noptional string page_token = 2;\n}"}),"\n",(0,s.jsx)(n.p,{children:"message ListSessionsResponse {\nrepeated SessionInfo sessions = 1;\noptional string next_page_token = 2;\nint32 total_count = 3;\n}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### Async Operations\n\nLong-running operations return operation handle:\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"message DrainConnectionsRequest {\noptional string namespace = 1;\noptional google.protobuf.Duration timeout = 2;\n}"}),"\n",(0,s.jsx)(n.p,{children:"message DrainConnectionsResponse {\nstring operation_id = 1;  // Track progress\nint32 initial_count = 2;\n}"}),"\n",(0,s.jsx)(n.p,{children:"// Poll for status\nmessage GetOperationRequest {\nstring operation_id = 1;\n}"}),"\n",(0,s.jsx)(n.p,{children:"message GetOperationResponse {\nbool complete = 1;\nint32 progress_percent = 2;\noptional string error = 3;\n}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n## Migration and Rollout\n\n### Phase 1: Admin API (Week 1-2)\n- Implement AdminService in Rust\n- Add authentication/authorization\n- Deploy on port 8981\n- CLI tooling for early adopters\n\n### Phase 2: Audit Logging (Week 2-3)\n- Implement audit logger\n- Database schema for audit log\n- Query interface via GetAuditLog RPC\n\n### Phase 3: Admin UI (Week 3-4)\n- FastAPI service setup\n- gRPC-Web proxy implementation\n- Basic UI (config management only)\n- Deploy to staging\n\n### Phase 4: Full UI Features (Week 4-6)\n- Session monitoring page\n- Backend health dashboard\n- Namespace management\n- Operational commands\n\n### Phase 5: Productionization (Week 6-8)\n- OAuth2 integration\n- RBAC implementation\n- Production deployment\n- Documentation and training\n\n## Testing Strategy\n\n### Unit Tests\n"})}),"\n",(0,s.jsx)(n.p,{children:"#[cfg(test)]\nmod tests {\n#[tokio::test]\nasync fn test_create_config() {\nlet service = AdminService::new_test();\nlet req = CreateConfigRequest { /* ... */ };\nlet res = service.create_config(req).await.unwrap();\nassert!(res.success);\n}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"#[tokio::test]\nasync fn test_unauthorized_access() {\n    let service = AdminService::new_test();\n    let req = /* request without admin token */;\n    let err = service.create_config(req).await.unwrap_err();\n    assert_eq!(err.code(), Code::Unauthenticated);\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### Integration Tests\n"})}),"\n",(0,s.jsx)(n.h1,{id:"test-admin-api",children:"Test admin API"}),"\n",(0,s.jsxs)(n.p,{children:['grpcurl -H "x-admin-token: test-token" ',(0,s.jsx)(n.br,{}),"\nlocalhost:8981 ",(0,s.jsx)(n.br,{}),"\nprism.admin.v1.AdminService/ListConfigs"]}),"\n",(0,s.jsx)(n.h1,{id:"test-audit-logging",children:"Test audit logging"}),"\n",(0,s.jsx)(n.p,{children:"psql -c \"SELECT * FROM audit_log WHERE operation = 'CreateConfig'\""}),"\n",(0,s.jsx)(n.h1,{id:"test-ui",children:"Test UI"}),"\n",(0,s.jsxs)(n.p,{children:["curl ",(0,s.jsx)(n.a,{href:"http://localhost:8000",children:"http://localhost:8000"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### E2E Tests\n"})}),"\n",(0,s.jsx)(n.h1,{id:"testse2etest_admin_workflowpy",children:"tests/e2e/test_admin_workflow.py"}),"\n",(0,s.jsx)(n.p,{children:"def test_full_admin_workflow():\n# Create config via UI\nui_client.create_config(config_data)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'# Verify config exists\nconfig = api_client.get_config(config_name)\nassert config.name == config_name\n\n# Verify audit log\naudit = api_client.get_audit_log(operation="CreateConfig")\nassert len(audit) == 1\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n## Monitoring and Observability\n\n### Metrics\n\n"})}),"\n",(0,s.jsx)(n.p,{children:'// Prometheus metrics for admin API\nlazy_static! {\nstatic ref ADMIN_REQUESTS: IntCounterVec = register_int_counter_vec!(\n"prism_admin_requests_total",\n"Total admin API requests",\n&["operation", "status"]\n).unwrap();'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'static ref ADMIN_LATENCY: HistogramVec = register_histogram_vec!(\n    "prism_admin_request_duration_seconds",\n    "Admin API request latency",\n    &["operation"]\n).unwrap();\n'})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### Alerts\n\n"})}),"\n",(0,s.jsx)(n.h1,{id:"prometheus-alerting-rules",children:"Prometheus alerting rules"}),"\n",(0,s.jsx)(n.p,{children:"groups:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["name: prism_admin\nrules:\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'alert: AdminAPIHighErrorRate\nexpr: |\nrate(prism_admin_requests_total{status="error"}[5m]) > 0.1\nannotations:\nsummary: "High error rate on admin API"'}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'alert: UnauthorizedAdminAccess\nexpr: |\nrate(prism_admin_requests_total{status="unauthenticated"}[5m]) > 0\nannotations:\nsummary: "Unauthorized access attempts detected"'}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n## Open Questions\n\n1. **OAuth2 Integration**: Which IdP to support first (Okta, Auth0, Google)?\n2. **UI Framework Migration**: At what complexity threshold migrate to React/Vue?\n3. **Multi-cluster Support**: How to extend admin UI for multi-cluster management?\n4. **Backup/Restore**: Should admin UI include backup/restore capabilities?\n\n## References\n\n- ADR-027: Admin API via gRPC\n- ADR-028: Admin UI with FastAPI and gRPC-Web\n- ADR-029: Protocol Recording with Protobuf Tagging\n- ADR-030: Schema Recording with Protobuf Tagging\n- RFC-001: Prism Architecture\n- RFC-002: Data Layer Interface Specification\n- [gRPC-Web Specification](https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md)\n- [FastAPI Documentation](https://fastapi.tiangolo.com/)\n\n## Revision History\n\n- 2025-10-08: Initial draft\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);