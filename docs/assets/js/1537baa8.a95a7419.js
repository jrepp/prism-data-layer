"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[6751],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>i});var s=t(96540);const r={},a=s.createContext(r);function l(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(a.Provider,{value:n},e.children)}},51731:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"memo-034","title":"MEMO-034: Pattern Launcher Quick Start for Developers","description":"TL;DR: Get a pattern running in 3 commands. Test all isolation levels in 5 minutes.","source":"@site/../docs-cms/memos/MEMO-034-pattern-launcher-quickstart.md","sourceDirName":".","slug":"/memo-034","permalink":"/prism-data-layer/memos/memo-034","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/MEMO-034-pattern-launcher-quickstart.md","tags":[{"inline":true,"label":"patterns","permalink":"/prism-data-layer/memos/tags/patterns"},{"inline":true,"label":"launcher","permalink":"/prism-data-layer/memos/tags/launcher"},{"inline":true,"label":"quickstart","permalink":"/prism-data-layer/memos/tags/quickstart"},{"inline":true,"label":"developer-guide","permalink":"/prism-data-layer/memos/tags/developer-guide"},{"inline":true,"label":"go","permalink":"/prism-data-layer/memos/tags/go"},{"inline":true,"label":"testing","permalink":"/prism-data-layer/memos/tags/testing"}],"version":"current","frontMatter":{"title":"MEMO-034: Pattern Launcher Quick Start for Developers","author":"Claude Code","created":"2025-10-15T00:00:00.000Z","updated":"2025-10-15T00:00:00.000Z","tags":["patterns","launcher","quickstart","developer-guide","go","testing"],"id":"memo-034","project_id":"prism-data-access","doc_uuid":"f8e4d2c9-5a7b-4d1e-9c6f-3e8a7b2d5c9f"},"sidebar":"memosSidebar","previous":{"title":"Process Isolation and the Bulkhead Pattern \u2022 MEMO-033","permalink":"/prism-data-layer/memos/memo-033"}}');var r=t(74848),a=t(28453);const l={title:"MEMO-034: Pattern Launcher Quick Start for Developers",author:"Claude Code",created:new Date("2025-10-15T00:00:00.000Z"),updated:new Date("2025-10-15T00:00:00.000Z"),tags:["patterns","launcher","quickstart","developer-guide","go","testing"],id:"memo-034",project_id:"prism-data-access",doc_uuid:"f8e4d2c9-5a7b-4d1e-9c6f-3e8a7b2d5c9f"},i="MEMO-034: Pattern Launcher Quick Start for Developers",c={},o=[{value:"What You&#39;re Building",id:"what-youre-building",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Create a Test Pattern (2 minutes)",id:"step-1-create-a-test-pattern-2-minutes",level:2},{value:"Step 2: Create Pattern Manifest (30 seconds)",id:"step-2-create-pattern-manifest-30-seconds",level:2},{value:"Step 3: Start the Launcher (1 command)",id:"step-3-start-the-launcher-1-command",level:2},{value:"Step 4: Launch Your First Pattern (grpcurl)",id:"step-4-launch-your-first-pattern-grpcurl",level:2},{value:"Step 5: Test Isolation Levels (3 minutes)",id:"step-5-test-isolation-levels-3-minutes",level:2},{value:"Test 1: Namespace Isolation (Different Tenants = Different Processes)",id:"test-1-namespace-isolation-different-tenants--different-processes",level:3},{value:"Test 2: Session Isolation (Different Users = Different Processes)",id:"test-2-session-isolation-different-users--different-processes",level:3},{value:"Test 3: None Isolation (Shared Process)",id:"test-3-none-isolation-shared-process",level:3},{value:"Step 6: Test Crash Recovery (2 minutes)",id:"step-6-test-crash-recovery-2-minutes",level:2},{value:"Step 7: Check Metrics (1 minute)",id:"step-7-check-metrics-1-minute",level:2},{value:"Step 8: Terminate Patterns (30 seconds)",id:"step-8-terminate-patterns-30-seconds",level:2},{value:"Quick Reference",id:"quick-reference",level:2},{value:"Launch Pattern",id:"launch-pattern",level:3},{value:"List Patterns",id:"list-patterns",level:3},{value:"Check Health",id:"check-health",level:3},{value:"Terminate Pattern",id:"terminate-pattern",level:3},{value:"Common Issues",id:"common-issues",level:2},{value:"&quot;Pattern not found&quot;",id:"pattern-not-found",level:3},{value:"&quot;Health check failed&quot;",id:"health-check-failed",level:3},{value:"&quot;Process keeps restarting&quot;",id:"process-keeps-restarting",level:3},{value:"What You Just Did",id:"what-you-just-did",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Use the Go Client",id:"use-the-go-client",level:3},{value:"Use the Builder (Production)",id:"use-the-builder-production",level:3},{value:"Add Authentication",id:"add-authentication",level:3},{value:"Key Concepts",id:"key-concepts",level:2},{value:"Documentation",id:"documentation",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"memo-034-pattern-launcher-quick-start-for-developers",children:"MEMO-034: Pattern Launcher Quick Start for Developers"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"TL;DR"}),": Get a pattern running in 3 commands. Test all isolation levels in 5 minutes."]}),"\n",(0,r.jsx)(n.h2,{id:"what-youre-building",children:"What You're Building"}),"\n",(0,r.jsx)(n.p,{children:'A process manager that launches pattern executables with fault isolation. Think "systemd for patterns" but with tenant-level isolation.'}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# You need Go 1.21+\ngo version\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-1-create-a-test-pattern-2-minutes",children:"Step 1: Create a Test Pattern (2 minutes)"}),"\n",(0,r.jsx)(n.p,{children:"Create the simplest possible pattern:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Create pattern directory\nmkdir -p patterns/hello-pattern\n\n# Write the pattern\ncat > patterns/hello-pattern/main.go << \'EOF\'\npackage main\n\nimport (\n    "fmt"\n    "log"\n    "net/http"\n    "os"\n    "time"\n)\n\nfunc main() {\n    name := os.Getenv("PATTERN_NAME")\n    namespace := os.Getenv("NAMESPACE")\n    healthPort := os.Getenv("HEALTH_PORT")\n\n    log.Printf("Starting %s (namespace=%s, health_port=%s)", name, namespace, healthPort)\n\n    // Health endpoint (required)\n    http.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {\n        w.WriteHeader(http.StatusOK)\n        fmt.Fprintf(w, "OK - %s is healthy\\n", name)\n    })\n\n    // Optional: Do some work\n    go func() {\n        for {\n            log.Printf("[%s:%s] Processing...", namespace, name)\n            time.Sleep(5 * time.Second)\n        }\n    }()\n\n    log.Printf("Health server starting on :%s", healthPort)\n    if err := http.ListenAndServe(":"+healthPort, nil); err != nil {\n        log.Fatal(err)\n    }\n}\nEOF\n\n# Build it\ncd patterns/hello-pattern && go build -o hello-pattern main.go && cd ../..\n\n# Make it executable\nchmod +x patterns/hello-pattern/hello-pattern\n\n# Test it works\nPATTERN_NAME=hello HEALTH_PORT=9999 ./patterns/hello-pattern/hello-pattern &\ncurl http://localhost:9999/health\nkill %1\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Expected"}),': "OK - hello is healthy"']}),"\n",(0,r.jsx)(n.h2,{id:"step-2-create-pattern-manifest-30-seconds",children:"Step 2: Create Pattern Manifest (30 seconds)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cat > patterns/hello-pattern/manifest.yaml << 'EOF'\nname: hello-pattern\nversion: 1.0.0\nexecutable: ./hello-pattern\nisolation_level: namespace\n\nhealthcheck:\n  port: 9090\n  path: /health\n  interval: 30s\n  timeout: 5s\n\nresources:\n  cpu_limit: 1.0\n  memory_limit: 256Mi\nEOF\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"That's it"}),". Pattern is ready."]}),"\n",(0,r.jsx)(n.h2,{id:"step-3-start-the-launcher-1-command",children:"Step 3: Start the Launcher (1 command)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# From project root\ngo run cmd/pattern-launcher/main.go \\\n    --patterns-dir ./patterns \\\n    --grpc-port 8080\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Expected output"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Discovering patterns in directory: ./patterns\nDiscovered pattern: hello-pattern (version: 1.0.0, isolation: namespace)\nPattern launcher service created with 1 patterns\nServing gRPC on :8080\n"})}),"\n",(0,r.jsx)(n.p,{children:"Keep this running in terminal 1."}),"\n",(0,r.jsx)(n.h2,{id:"step-4-launch-your-first-pattern-grpcurl",children:"Step 4: Launch Your First Pattern (grpcurl)"}),"\n",(0,r.jsx)(n.p,{children:"In a new terminal:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Install grpcurl if needed\nbrew install grpcurl  # or: go install github.com/fullstorydev/grpcurl/cmd/grpcurl@latest\n\n# Launch pattern for tenant-a\ngrpcurl -plaintext \\\n    -d \'{\n        "pattern_name": "hello-pattern",\n        "isolation": "ISOLATION_NAMESPACE",\n        "namespace": "tenant-a"\n    }\' \\\n    localhost:8080 prism.launcher.PatternLauncher/LaunchPattern\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Expected"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "processId": "ns:tenant-a:hello-pattern",\n  "state": "STATE_RUNNING",\n  "address": "localhost:50051",\n  "healthy": true\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Verify it's running"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"curl http://localhost:9090/health\n# OK - hello-pattern is healthy\n"})}),"\n",(0,r.jsx)(n.h2,{id:"step-5-test-isolation-levels-3-minutes",children:"Step 5: Test Isolation Levels (3 minutes)"}),"\n",(0,r.jsx)(n.h3,{id:"test-1-namespace-isolation-different-tenants--different-processes",children:"Test 1: Namespace Isolation (Different Tenants = Different Processes)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Launch for tenant-a (already done above)\n\n# Launch for tenant-b\ngrpcurl -plaintext \\\n    -d \'{\n        "pattern_name": "hello-pattern",\n        "isolation": "ISOLATION_NAMESPACE",\n        "namespace": "tenant-b"\n    }\' \\\n    localhost:8080 prism.launcher.PatternLauncher/LaunchPattern\n\n# List running patterns\ngrpcurl -plaintext \\\n    localhost:8080 prism.launcher.PatternLauncher/ListPatterns\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Expected"}),": 2 processes running (one per namespace)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "patterns": [\n    {\n      "patternName": "hello-pattern",\n      "processId": "ns:tenant-a:hello-pattern",\n      "state": "STATE_RUNNING",\n      "namespace": "tenant-a"\n    },\n    {\n      "patternName": "hello-pattern",\n      "processId": "ns:tenant-b:hello-pattern",\n      "state": "STATE_RUNNING",\n      "namespace": "tenant-b"\n    }\n  ],\n  "totalCount": 2\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"test-2-session-isolation-different-users--different-processes",children:"Test 2: Session Isolation (Different Users = Different Processes)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Launch for user-1\ngrpcurl -plaintext \\\n    -d \'{\n        "pattern_name": "hello-pattern",\n        "isolation": "ISOLATION_SESSION",\n        "namespace": "tenant-a",\n        "session_id": "user-1"\n    }\' \\\n    localhost:8080 prism.launcher.PatternLauncher/LaunchPattern\n\n# Launch for user-2\ngrpcurl -plaintext \\\n    -d \'{\n        "pattern_name": "hello-pattern",\n        "isolation": "ISOLATION_SESSION",\n        "namespace": "tenant-a",\n        "session_id": "user-2"\n    }\' \\\n    localhost:8080 prism.launcher.PatternLauncher/LaunchPattern\n\n# List again\ngrpcurl -plaintext \\\n    localhost:8080 prism.launcher.PatternLauncher/ListPatterns\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Expected"}),": 4 processes now (2 namespace + 2 session)"]}),"\n",(0,r.jsx)(n.h3,{id:"test-3-none-isolation-shared-process",children:"Test 3: None Isolation (Shared Process)"}),"\n",(0,r.jsx)(n.p,{children:"Create a read-only pattern:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'mkdir -p patterns/config-lookup\n\ncat > patterns/config-lookup/main.go << \'EOF\'\npackage main\n\nimport (\n    "fmt"\n    "log"\n    "net/http"\n    "os"\n)\n\nfunc main() {\n    healthPort := os.Getenv("HEALTH_PORT")\n\n    http.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {\n        w.WriteHeader(http.StatusOK)\n        fmt.Fprint(w, "OK")\n    })\n\n    log.Printf("Config lookup service on :%s", healthPort)\n    http.ListenAndServe(":"+healthPort, nil)\n}\nEOF\n\ncd patterns/config-lookup && go build -o config-lookup main.go && cd ../..\nchmod +x patterns/config-lookup/config-lookup\n\ncat > patterns/config-lookup/manifest.yaml << \'EOF\'\nname: config-lookup\nversion: 1.0.0\nexecutable: ./config-lookup\nisolation_level: none\n\nhealthcheck:\n  port: 9090\n  path: /health\n  interval: 30s\n  timeout: 5s\nEOF\n\n# Restart launcher to pick up new pattern (Ctrl+C and re-run)\n'})}),"\n",(0,r.jsx)(n.p,{children:"Launch with NONE isolation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Request 1\ngrpcurl -plaintext \\\n    -d \'{"pattern_name": "config-lookup", "isolation": "ISOLATION_NONE"}\' \\\n    localhost:8080 prism.launcher.PatternLauncher/LaunchPattern\n\n# Request 2 (should reuse same process)\ngrpcurl -plaintext \\\n    -d \'{"pattern_name": "config-lookup", "isolation": "ISOLATION_NONE"}\' \\\n    localhost:8080 prism.launcher.PatternLauncher/LaunchPattern\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Expected"}),': Same processId for both requests ("shared:config-lookup")']}),"\n",(0,r.jsx)(n.h2,{id:"step-6-test-crash-recovery-2-minutes",children:"Step 6: Test Crash Recovery (2 minutes)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Get process ID\ngrpcurl -plaintext \\\n    localhost:8080 prism.launcher.PatternLauncher/ListPatterns | grep processId\n\n# Kill the process\nps aux | grep hello-pattern\nkill -9 <PID>\n\n# Wait 5 seconds, then check status\nsleep 5\ngrpcurl -plaintext \\\n    localhost:8080 prism.launcher.PatternLauncher/ListPatterns\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Expected"}),": Process automatically restarted with new PID"]}),"\n",(0,r.jsx)(n.h2,{id:"step-7-check-metrics-1-minute",children:"Step 7: Check Metrics (1 minute)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Get launcher health\ngrpcurl -plaintext \\\n    -d '{\"include_processes\": true}' \\\n    localhost:8080 prism.launcher.PatternLauncher/Health\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Expected"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "healthy": true,\n  "totalProcesses": 5,\n  "runningProcesses": 5,\n  "isolationDistribution": {\n    "Namespace": 2,\n    "Session": 2,\n    "None": 1\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"step-8-terminate-patterns-30-seconds",children:"Step 8: Terminate Patterns (30 seconds)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Graceful shutdown with 10 second grace period\ngrpcurl -plaintext \\\n    -d \'{\n        "process_id": "ns:tenant-a:hello-pattern",\n        "grace_period_secs": 10\n    }\' \\\n    localhost:8080 prism.launcher.PatternLauncher/TerminatePattern\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Expected"}),": Process receives SIGTERM, shuts down gracefully"]}),"\n",(0,r.jsx)(n.h2,{id:"quick-reference",children:"Quick Reference"}),"\n",(0,r.jsx)(n.h3,{id:"launch-pattern",children:"Launch Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'grpcurl -plaintext -d \'{\n    "pattern_name": "PATTERN_NAME",\n    "isolation": "ISOLATION_LEVEL",\n    "namespace": "TENANT_ID",\n    "session_id": "USER_ID"\n}\' localhost:8080 prism.launcher.PatternLauncher/LaunchPattern\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Isolation levels"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ISOLATION_NONE"}),": Shared process (stateless lookups)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ISOLATION_NAMESPACE"}),": One per tenant (multi-tenant SaaS)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"ISOLATION_SESSION"}),": One per user (high security)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"list-patterns",children:"List Patterns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"grpcurl -plaintext localhost:8080 prism.launcher.PatternLauncher/ListPatterns\n"})}),"\n",(0,r.jsx)(n.h3,{id:"check-health",children:"Check Health"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"grpcurl -plaintext localhost:8080 prism.launcher.PatternLauncher/Health\n"})}),"\n",(0,r.jsx)(n.h3,{id:"terminate-pattern",children:"Terminate Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'grpcurl -plaintext -d \'{\n    "process_id": "PROCESS_ID",\n    "grace_period_secs": 10\n}\' localhost:8080 prism.launcher.PatternLauncher/TerminatePattern\n'})}),"\n",(0,r.jsx)(n.h2,{id:"common-issues",children:"Common Issues"}),"\n",(0,r.jsx)(n.h3,{id:"pattern-not-found",children:'"Pattern not found"'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Check manifest exists\nls -la patterns/*/manifest.yaml\n\n# Check launcher logs for discovery errors\n"})}),"\n",(0,r.jsx)(n.h3,{id:"health-check-failed",children:'"Health check failed"'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Test health endpoint directly\ncurl http://localhost:9090/health\n\n# Check pattern is using HEALTH_PORT from environment\n"})}),"\n",(0,r.jsx)(n.h3,{id:"process-keeps-restarting",children:'"Process keeps restarting"'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Check pattern logs\n# Pattern stdout/stderr goes to launcher logs\n\n# Test pattern standalone\nPATTERN_NAME=test HEALTH_PORT=9999 ./patterns/hello-pattern/hello-pattern\n"})}),"\n",(0,r.jsx)(n.h2,{id:"what-you-just-did",children:"What You Just Did"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Created a minimal pattern with health endpoint"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Started the launcher service"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Launched patterns with all three isolation levels"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Verified process isolation (separate PIDs)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Tested automatic crash recovery"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Checked metrics and health status"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Gracefully terminated patterns"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Time"}),": ~10 minutes total"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(n.h3,{id:"use-the-go-client",children:"Use the Go Client"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "log"\n\n    pb "github.com/jrepp/prism-data-layer/pkg/plugin/gen/prism/launcher"\n    "google.golang.org/grpc"\n    "google.golang.org/grpc/credentials/insecure"\n)\n\nfunc main() {\n    conn, _ := grpc.Dial("localhost:8080",\n        grpc.WithTransportCredentials(insecure.NewCredentials()))\n    defer conn.Close()\n\n    client := pb.NewPatternLauncherClient(conn)\n\n    resp, err := client.LaunchPattern(context.Background(), &pb.LaunchRequest{\n        PatternName: "hello-pattern",\n        Isolation:   pb.IsolationLevel_ISOLATION_NAMESPACE,\n        Namespace:   "my-app",\n    })\n\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    log.Printf("Pattern launched: %s at %s", resp.ProcessId, resp.Address)\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"use-the-builder-production",children:"Use the Builder (Production)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'service, err := launcher.NewBuilder().\n    WithPatternsDir("/opt/patterns").\n    WithProductionDefaults().\n    Build()\n'})}),"\n",(0,r.jsx)(n.h3,{id:"add-authentication",children:"Add Authentication"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// In production, add mTLS or OIDC token validation\ngrpcServer := grpc.NewServer(\n    grpc.Creds(credentials.NewTLS(tlsConfig)),\n)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-concepts",children:"Key Concepts"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Isolation Levels"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NONE"}),": 1 process total (all tenants share)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"NAMESPACE"}),": N processes (one per tenant)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"SESSION"}),": M\xd7N processes (one per user per tenant)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pattern Requirements"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["HTTP ",(0,r.jsx)(n.code,{children:"/health"})," endpoint on ",(0,r.jsx)(n.code,{children:"HEALTH_PORT"})]}),"\n",(0,r.jsx)(n.li,{children:"Read config from environment variables"}),"\n",(0,r.jsx)(n.li,{children:"Exit cleanly on SIGTERM"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Automatic Features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Crash detection and restart"}),"\n",(0,r.jsx)(n.li,{children:"Health monitoring (30s intervals)"}),"\n",(0,r.jsx)(n.li,{children:"Circuit breaker (5 consecutive errors = terminal)"}),"\n",(0,r.jsx)(n.li,{children:"Orphan process cleanup (60s intervals)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"documentation",children:"Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Full docs: ",(0,r.jsx)(n.code,{children:"pkg/launcher/README.md"})]}),"\n",(0,r.jsxs)(n.li,{children:["API reference: ",(0,r.jsx)(n.code,{children:"pkg/launcher/doc.go"})]}),"\n",(0,r.jsxs)(n.li,{children:["Examples: ",(0,r.jsx)(n.code,{children:"pkg/launcher/examples/"})]}),"\n",(0,r.jsxs)(n.li,{children:["RFC: ",(0,r.jsx)(n.code,{children:"docs-cms/rfcs/RFC-035-pattern-process-launcher.md"})]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"You're ready!"})," Start building patterns with fault isolation. \ud83d\ude80"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}}}]);