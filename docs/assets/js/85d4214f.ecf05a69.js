"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[183],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>a});var t=i(96540);const r={},s=t.createContext(r);function o(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(s.Provider,{value:n},e.children)}},35930:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"key-documents","title":"Foundations","description":"This page references the most important documents that drive the philosophy, architecture, and development practices of the Prism Data Access Layer.","source":"@site/docs/key.md","sourceDirName":".","slug":"/key-documents","permalink":"/prism-data-layer/docs/key-documents","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docusaurus/docs/key.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Foundations","sidebar_position":2,"id":"key-documents","project_id":"prism-data-layer","doc_uuid":"939d9f73-b542-4d3c-8cd3-43cc04222098"},"sidebar":"tutorialSidebar","previous":{"title":"Overview","permalink":"/prism-data-layer/docs/intro"},"next":{"title":"Architecture","permalink":"/prism-data-layer/docs/architecture"}}');var r=i(74848),s=i(28453);const o={title:"Foundations",sidebar_position:2,id:"key-documents",project_id:"prism-data-layer",doc_uuid:"939d9f73-b542-4d3c-8cd3-43cc04222098"},a="Key Philosophy & Foundational Documents",c={},l=[{value:"\ud83c\udfaf Vision &amp; Requirements",id:"-vision--requirements",level:2},{value:"Product Requirements Document (PRD)",id:"product-requirements-document-prd",level:3},{value:"\ud83c\udfdb\ufe0f Architectural Foundations",id:"\ufe0f-architectural-foundations",level:2},{value:"ADR-001: Why Rust for the Proxy",id:"adr-001-why-rust-for-the-proxy",level:3},{value:"ADR-002: Client-Originated Configuration",id:"adr-002-client-originated-configuration",level:3},{value:"ADR-003: Protobuf as Single Source of Truth",id:"adr-003-protobuf-as-single-source-of-truth",level:3},{value:"ADR-004: Local-First Testing Strategy",id:"adr-004-local-first-testing-strategy",level:3},{value:"\ud83d\udd27 Implementation Philosophy",id:"-implementation-philosophy",level:2},{value:"MEMO-004: Backend Plugin Implementation Guide",id:"memo-004-backend-plugin-implementation-guide",level:3},{value:"MEMO-006: Backend Interface Decomposition &amp; Schema Registry",id:"memo-006-backend-interface-decomposition--schema-registry",level:3},{value:"RFC-018: POC Implementation Strategy",id:"rfc-018-poc-implementation-strategy",level:3},{value:"\ud83d\udcda Development Practices",id:"-development-practices",level:2},{value:"CLAUDE.md (in repository root)",id:"claudemd-in-repository-root",level:3},{value:"\ud83e\uddea Testing &amp; Quality",id:"-testing--quality",level:2},{value:"MEMO-015: Cross-Backend Acceptance Test Framework",id:"memo-015-cross-backend-acceptance-test-framework",level:3},{value:"MEMO-016: Observability &amp; Lifecycle Implementation",id:"memo-016-observability--lifecycle-implementation",level:3},{value:"\ud83d\udcd6 How to Use This Index",id:"-how-to-use-this-index",level:2},{value:"\ud83d\udd17 Document Hierarchy",id:"-document-hierarchy",level:2},{value:"\ud83d\udcdd Keeping This Index Updated",id:"-keeping-this-index-updated",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"key-philosophy--foundational-documents",children:"Key Philosophy & Foundational Documents"})}),"\n",(0,r.jsx)(n.p,{children:"This page references the most important documents that drive the philosophy, architecture, and development practices of the Prism Data Access Layer."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-vision--requirements",children:"\ud83c\udfaf Vision & Requirements"}),"\n",(0,r.jsx)(n.h3,{id:"product-requirements-document-prd",children:(0,r.jsx)(n.a,{href:"/prd",children:"Product Requirements Document (PRD)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why it matters"}),": Defines the core value proposition, user personas, success metrics, and implementation roadmap for Prism."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key insights"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"10-100x faster than existing solutions (Netflix Data Gateway)"}),"\n",(0,r.jsx)(n.li,{children:"Self-service data provisioning"}),"\n",(0,r.jsx)(n.li,{children:"Zero-downtime migrations"}),"\n",(0,r.jsx)(n.li,{children:"Sub-millisecond P50 latency target"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-architectural-foundations",children:"\ud83c\udfdb\ufe0f Architectural Foundations"}),"\n",(0,r.jsx)(n.h3,{id:"adr-001-why-rust-for-the-proxy",children:(0,r.jsx)(n.a,{href:"/adr/adr-001",children:"ADR-001: Why Rust for the Proxy"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why it matters"}),": Explains the fundamental technology choice that enables Prism's performance characteristics."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key decision"}),": Rust provides 10-100x performance improvement over JVM-based proxies with memory safety guarantees."]}),"\n",(0,r.jsx)(n.h3,{id:"adr-002-client-originated-configuration",children:(0,r.jsx)(n.a,{href:"/adr/adr-002",children:"ADR-002: Client-Originated Configuration"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why it matters"}),": Defines how applications declare their data access patterns and requirements."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key insight"}),": Applications specify requirements (RPS, consistency, latency SLOs); Prism auto-configures and provisions backends."]}),"\n",(0,r.jsx)(n.h3,{id:"adr-003-protobuf-as-single-source-of-truth",children:(0,r.jsx)(n.a,{href:"/adr/adr-003",children:"ADR-003: Protobuf as Single Source of Truth"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why it matters"}),": Establishes the data modeling philosophy and code generation strategy."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key principle"}),": Protobuf definitions with custom tags drive code generation across all components (clients, proxy, backends)."]}),"\n",(0,r.jsx)(n.h3,{id:"adr-004-local-first-testing-strategy",children:(0,r.jsx)(n.a,{href:"/adr/adr-004",children:"ADR-004: Local-First Testing Strategy"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why it matters"}),": Defines the development and testing philosophy that prioritizes real backends over mocks."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key practice"}),": Use real local backends (SQLite, local Kafka, PostgreSQL in Docker) for realistic testing."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-implementation-philosophy",children:"\ud83d\udd27 Implementation Philosophy"}),"\n",(0,r.jsx)(n.h3,{id:"memo-004-backend-plugin-implementation-guide",children:(0,r.jsx)(n.a,{href:"/memos/memo-004",children:"MEMO-004: Backend Plugin Implementation Guide"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why it matters"}),": Comprehensive backend comparison and implementation priorities."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key content"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"8 backends ranked by implementability"}),"\n",(0,r.jsx)(n.li,{children:"Go SDK quality, data models, testing difficulty analysis"}),"\n",(0,r.jsx)(n.li,{children:"Demo plugin configurations"}),"\n",(0,r.jsx)(n.li,{children:"Implementation phases and priorities"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"memo-006-backend-interface-decomposition--schema-registry",children:(0,r.jsx)(n.a,{href:"/memos/memo-006",children:"MEMO-006: Backend Interface Decomposition & Schema Registry"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why it matters"}),": Defines the three-layer schema architecture and backend interface decomposition strategy."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key architecture"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Layer 1: Backend Capabilities (KeyValue, PubSub, Timeseries, Locks)"}),"\n",(0,r.jsx)(n.li,{children:"Layer 2: Proxy DAL Patterns (KeyValue, Entity, TimeSeries, Graph)"}),"\n",(0,r.jsx)(n.li,{children:"Layer 3: Client Protocols (application-specific)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"rfc-018-poc-implementation-strategy",children:(0,r.jsx)(n.a,{href:"/rfc/rfc-018",children:"RFC-018: POC Implementation Strategy"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why it matters"}),": Defines the incremental POC approach with Walking Skeleton methodology."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key strategy"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"POC 1: KeyValue + MemStore (foundation)"}),"\n",(0,r.jsx)(n.li,{children:"POC 2: KeyValue + Redis (real backend)"}),"\n",(0,r.jsx)(n.li,{children:"POC 3: PubSub + NATS (messaging pattern)"}),"\n",(0,r.jsx)(n.li,{children:"POC 4: Multicast Registry (composite pattern)"}),"\n",(0,r.jsx)(n.li,{children:"POC 5: Authentication (security + multi-tenancy)"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-development-practices",children:"\ud83d\udcda Development Practices"}),"\n",(0,r.jsx)(n.h3,{id:"claudemd-in-repository-root",children:(0,r.jsx)(n.a,{href:"../../CLAUDE.md",children:"CLAUDE.md (in repository root)"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why it matters"}),": Comprehensive development guide for contributors and AI assistants."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key practices"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Documentation validation workflow (mandatory before commits)"}),"\n",(0,r.jsx)(n.li,{children:"Test-Driven Development (TDD) with code coverage requirements"}),"\n",(0,r.jsx)(n.li,{children:"Git commit best practices"}),"\n",(0,r.jsx)(n.li,{children:"Architecture Decision Records (ADR) process"}),"\n",(0,r.jsx)(n.li,{children:"Monorepo structure and navigation"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-testing--quality",children:"\ud83e\uddea Testing & Quality"}),"\n",(0,r.jsx)(n.h3,{id:"memo-015-cross-backend-acceptance-test-framework",children:(0,r.jsx)(n.a,{href:"/memos/memo-015",children:"MEMO-015: Cross-Backend Acceptance Test Framework"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why it matters"}),": Establishes the table-driven, property-based testing approach for backend compliance."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key innovation"}),": Single test suite automatically validates all backends (Redis, MemStore, PostgreSQL) with randomized data."]}),"\n",(0,r.jsx)(n.h3,{id:"memo-016-observability--lifecycle-implementation",children:(0,r.jsx)(n.a,{href:"/memos/memo-016",children:"MEMO-016: Observability & Lifecycle Implementation"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why it matters"}),": Documents the observability infrastructure and lifecycle testing framework."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Key features"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"OpenTelemetry tracing"}),"\n",(0,r.jsx)(n.li,{children:"Prometheus metrics endpoints"}),"\n",(0,r.jsx)(n.li,{children:"Graceful shutdown handling"}),"\n",(0,r.jsx)(n.li,{children:"Zero-boilerplate backend drivers"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-how-to-use-this-index",children:"\ud83d\udcd6 How to Use This Index"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"For new contributors"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Start with the ",(0,r.jsx)(n.a,{href:"/prd",children:"PRD"})," to understand the vision"]}),"\n",(0,r.jsxs)(n.li,{children:["Read ",(0,r.jsx)(n.a,{href:"/adr/adr-001",children:"ADR-001"})," through ",(0,r.jsx)(n.a,{href:"/adr/adr-004",children:"ADR-004"})," for architectural foundations"]}),"\n",(0,r.jsxs)(n.li,{children:["Review ",(0,r.jsx)(n.a,{href:"../../CLAUDE.md",children:"CLAUDE.md"})," for development practices"]}),"\n",(0,r.jsxs)(n.li,{children:["Explore ",(0,r.jsx)(n.a,{href:"/memos/memo-004",children:"MEMO-004"})," for implementation guidance"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"For architectural decisions"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Review existing ADRs to understand past decisions"}),"\n",(0,r.jsx)(n.li,{children:"Follow the ADR template when proposing new decisions"}),"\n",(0,r.jsx)(n.li,{children:"Ensure alignment with foundational principles"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"For implementation work"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Follow TDD practices from ",(0,r.jsx)(n.a,{href:"../../CLAUDE.md",children:"CLAUDE.md"})]}),"\n",(0,r.jsxs)(n.li,{children:["Refer to ",(0,r.jsx)(n.a,{href:"/memos/memo-004",children:"MEMO-004"})," for backend-specific guidance"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.a,{href:"/memos/memo-015",children:"MEMO-015"})," test framework for new backends"]}),"\n",(0,r.jsxs)(n.li,{children:["Ensure observability from ",(0,r.jsx)(n.a,{href:"/memos/memo-016",children:"MEMO-016"})," is integrated"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-document-hierarchy",children:"\ud83d\udd17 Document Hierarchy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"Vision & Requirements (WHY)\n\u251c\u2500\u2500 PRD - Product vision and success criteria\n\u2502\nArchitecture (WHAT)\n\u251c\u2500\u2500 ADR-001 - Technology: Rust\n\u251c\u2500\u2500 ADR-002 - Pattern: Client-originated config\n\u251c\u2500\u2500 ADR-003 - Data modeling: Protobuf\n\u251c\u2500\u2500 ADR-004 - Testing: Local-first\n\u2502\nImplementation (HOW)\n\u251c\u2500\u2500 MEMO-004 - Backend implementation guide\n\u251c\u2500\u2500 MEMO-006 - Three-layer schema architecture\n\u251c\u2500\u2500 RFC-018 - POC implementation strategy\n\u2502\nDevelopment Practices (WORKFLOWS)\n\u251c\u2500\u2500 CLAUDE.md - Development guide\n\u251c\u2500\u2500 MEMO-015 - Testing framework\n\u2514\u2500\u2500 MEMO-016 - Observability implementation\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-keeping-this-index-updated",children:"\ud83d\udcdd Keeping This Index Updated"}),"\n",(0,r.jsx)(n.p,{children:"When creating new foundational documents:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:'Add them to this index with a brief explanation of "Why it matters"'}),"\n",(0,r.jsx)(n.li,{children:"Update the document hierarchy if the structure changes"}),"\n",(0,r.jsx)(n.li,{children:"Ensure cross-references are maintained"}),"\n",(0,r.jsx)(n.li,{children:"Update the changelog with notable additions"}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"Last updated: 2025-10-12"})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);