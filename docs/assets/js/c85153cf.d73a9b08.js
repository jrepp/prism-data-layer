"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[16411],{28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var i=n(96540);const t={},s=i.createContext(t);function o(e){const r=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:r},e.children)}},88118:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"memo-011","title":"Distributed Error Handling Best Practices","description":"Purpose","source":"@site/../docs-cms/memos/memo-011-error-handling-best-practices.md","sourceDirName":".","slug":"/memo-011","permalink":"/prism-data-layer/memos/memo-011","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/memo-011-error-handling-best-practices.md","tags":[{"inline":true,"label":"errors","permalink":"/prism-data-layer/memos/tags/errors"},{"inline":true,"label":"observability","permalink":"/prism-data-layer/memos/tags/observability"},{"inline":true,"label":"distributed-systems","permalink":"/prism-data-layer/memos/tags/distributed-systems"},{"inline":true,"label":"reliability","permalink":"/prism-data-layer/memos/tags/reliability"},{"inline":true,"label":"best-practices","permalink":"/prism-data-layer/memos/tags/best-practices"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-10T00:00:00.000Z","doc_uuid":"dc5657bb-d97b-43c6-a424-0bc2ce52f5ac","id":"memo-011","project_id":"prism-data-layer","tags":["errors","observability","distributed-systems","reliability","best-practices"],"title":"Distributed Error Handling Best Practices","updated":"2025-10-10T00:00:00.000Z"},"sidebar":"memosSidebar","previous":{"title":"POC 1 Edge Case Analysis and Foundation Hardening \u2022 MEMO-010","permalink":"/prism-data-layer/memos/memo-010"},"next":{"title":"Developer Experience and Common Workflows \u2022 MEMO-012","permalink":"/prism-data-layer/memos/memo-012"}}');var t=n(74848),s=n(28453);const o={author:"Platform Team",created:new Date("2025-10-10T00:00:00.000Z"),doc_uuid:"dc5657bb-d97b-43c6-a424-0bc2ce52f5ac",id:"memo-011",project_id:"prism-data-layer",tags:["errors","observability","distributed-systems","reliability","best-practices"],title:"Distributed Error Handling Best Practices",updated:new Date("2025-10-10T00:00:00.000Z")},a="MEMO-011: Distributed Error Handling Best Practices",l={},c=[{value:"Purpose",id:"purpose",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Solution: Rich Structured Errors",id:"solution-rich-structured-errors",level:2},{value:"Core Design Principles",id:"core-design-principles",level:2},{value:"1. Simple by Default, Rich When Needed",id:"1-simple-by-default-rich-when-needed",level:3},{value:"2. Machine-Readable and Human-Readable",id:"2-machine-readable-and-human-readable",level:3},{value:"3. Error Chaining for Distributed Context",id:"3-error-chaining-for-distributed-context",level:3},{value:"4. Retry Guidance",id:"4-retry-guidance",level:3},{value:"5. Structured Error Details",id:"5-structured-error-details",level:3},{value:"FieldViolation (validation errors)",id:"fieldviolation-validation-errors",level:4},{value:"BackendError (backend-specific context)",id:"backenderror-backend-specific-context",level:4},{value:"PatternError (pattern-level semantics)",id:"patternerror-pattern-level-semantics",level:4},{value:"QuotaViolation (rate limiting)",id:"quotaviolation-rate-limiting",level:4},{value:"PreconditionFailure (CAS, version conflicts)",id:"preconditionfailure-cas-version-conflicts",level:4},{value:"6. Error Categorization for Observability",id:"6-error-categorization-for-observability",level:3},{value:"7. Traceability and Correlation",id:"7-traceability-and-correlation",level:3},{value:"8. Batch Error Handling",id:"8-batch-error-handling",level:3},{value:"Error Code Design",id:"error-code-design",level:2},{value:"HTTP-Style Codes (Broad Compatibility)",id:"http-style-codes-broad-compatibility",level:3},{value:"Mapping to gRPC Status Codes",id:"mapping-to-grpc-status-codes",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Example 1: Validation Error",id:"example-1-validation-error",level:3},{value:"Example 2: Backend Connection Pool Exhaustion",id:"example-2-backend-connection-pool-exhaustion",level:3},{value:"Example 3: Interface Not Supported",id:"example-3-interface-not-supported",level:3},{value:"Example 4: Rate Limit Exceeded",id:"example-4-rate-limit-exceeded",level:3},{value:"Error Handling Patterns",id:"error-handling-patterns",level:2},{value:"Pattern 1: Client Retry Logic",id:"pattern-1-client-retry-logic",level:3},{value:"Pattern 2: Structured Logging",id:"pattern-2-structured-logging",level:3},{value:"Pattern 3: Prometheus Metrics",id:"pattern-3-prometheus-metrics",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:2},{value:"DO:",id:"do",level:3},{value:"DON&#39;T:",id:"dont",level:3},{value:"Related Documents",id:"related-documents",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"memo-011-distributed-error-handling-best-practices",children:"MEMO-011: Distributed Error Handling Best Practices"})}),"\n",(0,t.jsx)(r.h2,{id:"purpose",children:"Purpose"}),"\n",(0,t.jsxs)(r.p,{children:["Document comprehensive error handling best practices for distributed systems and explain the design of Prism's enhanced error proto (",(0,t.jsx)(r.code,{children:"prism.common.Error"}),")."]}),"\n",(0,t.jsx)(r.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,t.jsxs)(r.p,{children:["Basic error messages like ",(0,t.jsx)(r.code,{children:'Error { code: 500, message: "Internal error" }'})," are insufficient for distributed systems because:"]}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Lack of Context"}),": No information about where/when/why the error occurred"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Not Actionable"}),": Clients don't know if they should retry or give up"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Poor Observability"}),": Can't categorize, aggregate, or alert on errors effectively"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Debugging Difficulty"}),": Missing correlation IDs, trace context, and cause chains"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Backend Opacity"}),": Can't distinguish Redis errors from Kafka errors"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"No Remediation"}),": No hints on how to fix the problem"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"solution-rich-structured-errors",children:"Solution: Rich Structured Errors"}),"\n",(0,t.jsxs)(r.p,{children:["Prism's ",(0,t.jsx)(r.code,{children:"Error"})," message captures distributed systems best practices from:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Google's API error model (",(0,t.jsx)(r.code,{children:"google.rpc.Status"}),", ",(0,t.jsx)(r.code,{children:"ErrorInfo"}),", ",(0,t.jsx)(r.code,{children:"RetryInfo"}),")"]}),"\n",(0,t.jsx)(r.li,{children:"Stripe's error design (detailed, actionable)"}),"\n",(0,t.jsx)(r.li,{children:"AWS error patterns (retryable classification, throttling guidance)"}),"\n",(0,t.jsx)(r.li,{children:"gRPC error handling (status codes + rich details)"}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"core-design-principles",children:"Core Design Principles"}),"\n",(0,t.jsx)(r.h3,{id:"1-simple-by-default-rich-when-needed",children:"1. Simple by Default, Rich When Needed"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Basic error"})," (minimal fields):"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'Error {\n  code: ERROR_CODE_NOT_FOUND\n  message: "Key \'user:12345\' not found"\n  request_id: "req-abc123"\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Rich error"})," (with full context):"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'Error {\n  code: ERROR_CODE_BACKEND_ERROR\n  message: "Redis connection timeout"\n  request_id: "req-abc123"\n  category: ERROR_CATEGORY_BACKEND_ERROR\n  severity: ERROR_SEVERITY_ERROR\n  timestamp: { seconds: 1696867200 }\n  source: "prism-proxy-pod-3"\n  namespace: "user-profiles"\n\n  retry_policy: {\n    retryable: true\n    retry_after: { seconds: 5 }\n    max_retries: 3\n    backoff_strategy: BACKOFF_STRATEGY_EXPONENTIAL\n    backoff_multiplier: 2.0\n  }\n\n  details: [{\n    backend_error: {\n      backend_type: "redis"\n      backend_instance: "redis-master-1"\n      backend_error_code: "ETIMEDOUT"\n      backend_error_message: "Connection timeout after 5000ms"\n      operation: "GET"\n      pool_state: {\n        active_connections: 50\n        idle_connections: 0\n        max_connections: 50\n        wait_count: 12\n        wait_duration: { seconds: 3 }\n      }\n    }\n  }]\n\n  help_links: [{\n    title: "Troubleshooting Redis Timeouts"\n    url: "https://docs.prism.io/troubleshooting/redis-timeout"\n    link_type: "troubleshooting"\n  }]\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"2-machine-readable-and-human-readable",children:"2. Machine-Readable and Human-Readable"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Machine-readable"})," (for clients to handle programmatically):"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"code"})," - HTTP-style error codes"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"category"})," - Classification for metrics/alerting"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"severity"})," - Impact level"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"retry_policy"})," - Actionable retry guidance"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Human-readable"})," (for developers debugging):"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"message"})," - Clear English description"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"help_links"})," - Links to documentation/runbooks"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"retry_policy.retry_advice"})," - Human-readable retry guidance"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"3-error-chaining-for-distributed-context",children:"3. Error Chaining for Distributed Context"}),"\n",(0,t.jsxs)(r.p,{children:["Errors can have ",(0,t.jsx)(r.strong,{children:"causes"})," (errors that led to this error):"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'Error {\n  code: ERROR_CODE_GATEWAY_TIMEOUT\n  message: "Pattern execution timed out"\n  source: "prism-proxy"\n\n  causes: [{\n    code: ERROR_CODE_BACKEND_ERROR\n    message: "Redis SET operation timed out"\n    source: "redis-plugin"\n\n    causes: [{\n      code: ERROR_CODE_NETWORK_ERROR\n      message: "Connection refused"\n      source: "redis-client"\n    }]\n  }]\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["This enables ",(0,t.jsx)(r.strong,{children:"root cause analysis"})," across service boundaries."]}),"\n",(0,t.jsx)(r.h3,{id:"4-retry-guidance",children:"4. Retry Guidance"}),"\n",(0,t.jsx)(r.p,{children:"Clients shouldn't guess whether to retry. The error tells them:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'RetryPolicy {\n  retryable: true                   // Yes, retry\n  retry_after: { seconds: 10 }      // Wait 10 seconds\n  max_retries: 3                    // Try up to 3 times\n  backoff_strategy: EXPONENTIAL     // Use exponential backoff\n  backoff_multiplier: 2.0           // Double delay each time\n  retry_advice: "Backend is temporarily overloaded. Retry with exponential backoff."\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Non-retryable errors"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'RetryPolicy {\n  retryable: false\n  backoff_strategy: NEVER\n  retry_advice: "Key validation failed. Fix the key format and retry."\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"5-structured-error-details",children:"5. Structured Error Details"}),"\n",(0,t.jsxs)(r.p,{children:["Use ",(0,t.jsx)(r.code,{children:"ErrorDetail"})," oneof for type-safe error information:"]}),"\n",(0,t.jsx)(r.h4,{id:"fieldviolation-validation-errors",children:"FieldViolation (validation errors)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'field_violation: {\n  field: "ttl_seconds"\n  description: "TTL must be positive"\n  invalid_value: "-100"\n  constraint: "ttl_seconds > 0"\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"backenderror-backend-specific-context",children:"BackendError (backend-specific context)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'backend_error: {\n  backend_type: "kafka"\n  backend_instance: "kafka-broker-2"\n  backend_error_code: "OFFSET_OUT_OF_RANGE"\n  backend_error_message: "Offset 12345 is out of range [0, 10000]"\n  operation: "CONSUME"\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"patternerror-pattern-level-semantics",children:"PatternError (pattern-level semantics)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'pattern_error: {\n  pattern_type: "keyvalue"\n  interface_name: "KeyValueTTLInterface"\n  semantic_error: "TTL not supported by PostgreSQL backend"\n  supported_operations: ["Set", "Get", "Delete", "Exists"]\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"quotaviolation-rate-limiting",children:"QuotaViolation (rate limiting)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'quota_violation: {\n  dimension: "requests_per_second"\n  current: 1500\n  limit: 1000\n  reset_time: { seconds: 1696867260 }  // 60 seconds from now\n}\n'})}),"\n",(0,t.jsx)(r.h4,{id:"preconditionfailure-cas-version-conflicts",children:"PreconditionFailure (CAS, version conflicts)"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'precondition_failure: {\n  type: "ETAG_MISMATCH"\n  field: "etag"\n  expected: "abc123"\n  actual: "def456"\n  description: "Key was modified by another client"\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"6-error-categorization-for-observability",children:"6. Error Categorization for Observability"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"ErrorCategory"})," enables metrics aggregation:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"CLIENT_ERROR"})," - User made a mistake (400-level)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"SERVER_ERROR"})," - Internal service failure (500-level)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"BACKEND_ERROR"})," - Backend storage issue"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"NETWORK_ERROR"})," - Connectivity problem"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"TIMEOUT_ERROR"})," - Operation took too long"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"RATE_LIMIT_ERROR"})," - Quota exceeded"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"AUTHORIZATION_ERROR"})," - Permission denied"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"VALIDATION_ERROR"})," - Input validation failed"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"RESOURCE_ERROR"})," - Resource not found/unavailable"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"CONCURRENCY_ERROR"})," - Concurrent modification conflict"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Prometheus metrics"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-text",children:'prism_errors_total{category="backend_error", backend="redis", code="503"} 42\nprism_errors_total{category="timeout_error", pattern="keyvalue", code="504"} 12\nprism_errors_total{category="rate_limit_error", namespace="prod", code="429"} 156\n'})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"ErrorSeverity"})," for prioritization:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"DEBUG"})," - Informational, no action needed"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"INFO"})," - Notable but expected (e.g., cache miss)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"WARNING"})," - Degraded but functional"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"ERROR"})," - Operation failed, action may be needed"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"CRITICAL"})," - Severe failure, immediate action required"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"7-traceability-and-correlation",children:"7. Traceability and Correlation"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Request ID"}),": Correlate errors across services"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'request_id: "req-abc123-def456"\n'})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Source"}),": Which service generated the error"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'source: "prism-proxy-pod-3"\n'})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Timestamp"}),": When the error occurred"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:"timestamp: { seconds: 1696867200 }\n"})}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"Debug Info"})," (development only):"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'debug_info: {\n  trace_id: "abc123def456"\n  span_id: "span-789"\n  stack_entries: [\n    "at handleRequest (proxy.rs:123)",\n    "at executePattern (pattern.rs:456)",\n    "at redisGet (redis.rs:789)"\n  ]\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"8-batch-error-handling",children:"8. Batch Error Handling"}),"\n",(0,t.jsxs)(r.p,{children:["For batch operations, use ",(0,t.jsx)(r.code,{children:"ErrorResponse"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-protobuf",children:'ErrorResponse {\n  error: {\n    code: ERROR_CODE_UNPROCESSABLE_ENTITY\n    message: "Batch operation partially failed"\n  }\n  partial_success: true\n  success_count: 8\n  failure_count: 2\n\n  item_errors: [\n    {\n      index: 3\n      item_id: "user:12345"\n      error: {\n        code: ERROR_CODE_NOT_FOUND\n        message: "Key not found"\n      }\n    },\n    {\n      index: 7\n      item_id: "user:67890"\n      error: {\n        code: ERROR_CODE_PRECONDITION_FAILED\n        message: "Version conflict"\n      }\n    }\n  ]\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"error-code-design",children:"Error Code Design"}),"\n",(0,t.jsx)(r.h3,{id:"http-style-codes-broad-compatibility",children:"HTTP-Style Codes (Broad Compatibility)"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"2xx Success"}),":"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"200 OK"})," - Success (shouldn't appear in errors)"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"4xx Client Errors"})," (caller should fix):"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"400 BAD_REQUEST"})," - Invalid request syntax/parameters"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"401 UNAUTHORIZED"})," - Authentication required"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"403 FORBIDDEN"})," - Authenticated but not authorized"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"404 NOT_FOUND"})," - Resource doesn't exist"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"405 METHOD_NOT_ALLOWED"})," - Operation not supported"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"409 CONFLICT"})," - Resource state conflict"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"410 GONE"})," - Resource permanently deleted"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"412 PRECONDITION_FAILED"})," - Precondition not met (CAS)"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"413 PAYLOAD_TOO_LARGE"})," - Request exceeds size limits"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"422 UNPROCESSABLE_ENTITY"})," - Validation failed"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"429 TOO_MANY_REQUESTS"})," - Rate limit exceeded"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"5xx Server Errors"})," (caller should retry):"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"500 INTERNAL_ERROR"})," - Unexpected internal error"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"501 NOT_IMPLEMENTED"})," - Feature not implemented"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"502 BAD_GATEWAY"})," - Upstream backend error"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"503 SERVICE_UNAVAILABLE"})," - Temporarily unavailable"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"504 GATEWAY_TIMEOUT"})," - Upstream timeout"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"507 INSUFFICIENT_STORAGE"})," - Backend storage full"]}),"\n"]}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.strong,{children:"6xx Prism-Specific"})," (custom errors):"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"600 BACKEND_ERROR"})," - Backend-specific error"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"601 PATTERN_ERROR"})," - Pattern-level semantic error"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"602 INTERFACE_NOT_SUPPORTED"})," - Backend doesn't implement interface"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"603 SLOT_ERROR"})," - Pattern slot configuration error"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"604 CIRCUIT_BREAKER_OPEN"})," - Circuit breaker preventing requests"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"mapping-to-grpc-status-codes",children:"Mapping to gRPC Status Codes"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"HTTP Code"}),(0,t.jsx)(r.th,{children:"gRPC Status"}),(0,t.jsx)(r.th,{children:"Description"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"400"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"INVALID_ARGUMENT"})}),(0,t.jsx)(r.td,{children:"Bad request"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"401"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"UNAUTHENTICATED"})}),(0,t.jsx)(r.td,{children:"Missing auth"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"403"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"PERMISSION_DENIED"})}),(0,t.jsx)(r.td,{children:"No permission"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"404"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"NOT_FOUND"})}),(0,t.jsx)(r.td,{children:"Resource missing"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"409"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"ALREADY_EXISTS"})}),(0,t.jsx)(r.td,{children:"Conflict"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"412"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"FAILED_PRECONDITION"})}),(0,t.jsx)(r.td,{children:"Precondition failed"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"429"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"RESOURCE_EXHAUSTED"})}),(0,t.jsx)(r.td,{children:"Rate limited"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"500"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"INTERNAL"})}),(0,t.jsx)(r.td,{children:"Internal error"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"501"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"UNIMPLEMENTED"})}),(0,t.jsx)(r.td,{children:"Not implemented"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"503"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"UNAVAILABLE"})}),(0,t.jsx)(r.td,{children:"Service down"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"504"}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"DEADLINE_EXCEEDED"})}),(0,t.jsx)(r.td,{children:"Timeout"})]})]})]}),"\n",(0,t.jsx)(r.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,t.jsx)(r.h3,{id:"example-1-validation-error",children:"Example 1: Validation Error"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'return &Error{\n    Code: ErrorCode_ERROR_CODE_UNPROCESSABLE_ENTITY,\n    Message: "Invalid key format",\n    RequestId: requestID,\n    Category: ErrorCategory_ERROR_CATEGORY_VALIDATION_ERROR,\n    Severity: ErrorSeverity_ERROR_SEVERITY_ERROR,\n    Source: "prism-proxy",\n    Namespace: req.Namespace,\n    RetryPolicy: &RetryPolicy{\n        Retryable: false,\n        BackoffStrategy: BackoffStrategy_BACKOFF_STRATEGY_NEVER,\n        RetryAdvice: "Fix the key format and retry. Keys must match pattern: [a-zA-Z0-9:_-]+",\n    },\n    Details: []*ErrorDetail{{\n        Detail: &ErrorDetail_FieldViolation{\n            FieldViolation: &FieldViolation{\n                Field: "key",\n                Description: "Key contains invalid characters",\n                InvalidValue: "user@#$%",\n                Constraint: "key must match regex: [a-zA-Z0-9:_-]+",\n            },\n        },\n    }},\n    HelpLinks: []*ErrorLink{{\n        Title: "Key Naming Conventions",\n        Url: "https://docs.prism.io/keyvalue/naming",\n        LinkType: "documentation",\n    }},\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"example-2-backend-connection-pool-exhaustion",children:"Example 2: Backend Connection Pool Exhaustion"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'return &Error{\n    Code: ErrorCode_ERROR_CODE_SERVICE_UNAVAILABLE,\n    Message: "Redis connection pool exhausted",\n    RequestId: requestID,\n    Category: ErrorCategory_ERROR_CATEGORY_BACKEND_ERROR,\n    Severity: ErrorSeverity_ERROR_SEVERITY_CRITICAL,\n    Timestamp: timestamppb.Now(),\n    Source: "redis-plugin",\n    Namespace: req.Namespace,\n    RetryPolicy: &RetryPolicy{\n        Retryable: true,\n        RetryAfter: durationpb.New(10 * time.Second),\n        MaxRetries: 5,\n        BackoffStrategy: BackoffStrategy_BACKOFF_STRATEGY_EXPONENTIAL,\n        BackoffMultiplier: 2.0,\n        RetryAdvice: "Connection pool is full. Retry with exponential backoff.",\n    },\n    Details: []*ErrorDetail{{\n        Detail: &ErrorDetail_BackendError{\n            BackendError: &BackendError{\n                BackendType: "redis",\n                BackendInstance: "redis-master-1",\n                BackendErrorCode: "POOL_EXHAUSTED",\n                BackendErrorMessage: "All 50 connections in use",\n                Operation: "GET",\n                PoolState: &ConnectionPoolState{\n                    ActiveConnections: 50,\n                    IdleConnections: 0,\n                    MaxConnections: 50,\n                    WaitCount: 28,\n                    WaitDuration: durationpb.New(5 * time.Second),\n                },\n            },\n        },\n    }},\n    HelpLinks: []*ErrorLink{{\n        Title: "Scaling Redis Connection Pools",\n        Url: "https://docs.prism.io/backends/redis/connection-pools",\n        LinkType: "documentation",\n    }},\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"example-3-interface-not-supported",children:"Example 3: Interface Not Supported"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'return &Error{\n    Code: ErrorCode_ERROR_CODE_INTERFACE_NOT_SUPPORTED,\n    Message: "TTL operations not supported by PostgreSQL backend",\n    RequestId: requestID,\n    Category: ErrorCategory_ERROR_CATEGORY_CLIENT_ERROR,\n    Severity: ErrorSeverity_ERROR_SEVERITY_ERROR,\n    Source: "postgres-plugin",\n    Namespace: req.Namespace,\n    RetryPolicy: &RetryPolicy{\n        Retryable: false,\n        BackoffStrategy: BackoffStrategy_BACKOFF_STRATEGY_NEVER,\n        RetryAdvice: "Use Redis or DynamoDB for TTL support",\n    },\n    Details: []*ErrorDetail{{\n        Detail: &ErrorDetail_PatternError{\n            PatternError: &PatternError{\n                PatternType: "keyvalue",\n                InterfaceName: "KeyValueTTLInterface",\n                SemanticError: "PostgreSQL does not implement TTL interface",\n                SupportedOperations: []string{"Set", "Get", "Delete", "Exists", "BatchSet", "BatchGet"},\n            },\n        },\n    }},\n    HelpLinks: []*ErrorLink{{\n        Title: "Backend Interface Support Matrix",\n        Url: "https://docs.prism.io/backends/interface-matrix",\n        LinkType: "documentation",\n    }},\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"example-4-rate-limit-exceeded",children:"Example 4: Rate Limit Exceeded"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'return &Error{\n    Code: ErrorCode_ERROR_CODE_TOO_MANY_REQUESTS,\n    Message: "Rate limit exceeded for namespace \'user-profiles\'",\n    RequestId: requestID,\n    Category: ErrorCategory_ERROR_CATEGORY_RATE_LIMIT_ERROR,\n    Severity: ErrorSeverity_ERROR_SEVERITY_WARNING,\n    Timestamp: timestamppb.Now(),\n    Source: "prism-proxy",\n    Namespace: "user-profiles",\n    RetryPolicy: &RetryPolicy{\n        Retryable: true,\n        RetryAfter: durationpb.New(60 * time.Second),\n        MaxRetries: 10,\n        BackoffStrategy: BackoffStrategy_BACKOFF_STRATEGY_LINEAR,\n        RetryAdvice: "Wait 60 seconds for quota reset",\n    },\n    Details: []*ErrorDetail{{\n        Detail: &ErrorDetail_QuotaViolation{\n            QuotaViolation: &QuotaViolation{\n                Dimension: "requests_per_second",\n                Current: 1500,\n                Limit: 1000,\n                ResetTime: timestamppb.New(time.Now().Add(60 * time.Second)),\n            },\n        },\n    }},\n    HelpLinks: []*ErrorLink{{\n        Title: "Rate Limiting Policies",\n        Url: "https://docs.prism.io/quotas-and-limits",\n        LinkType: "documentation",\n    }},\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"error-handling-patterns",children:"Error Handling Patterns"}),"\n",(0,t.jsx)(r.h3,{id:"pattern-1-client-retry-logic",children:"Pattern 1: Client Retry Logic"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'func retryWithBackoff(req *Request, maxRetries int) (*Response, error) {\n    var lastErr *Error\n\n    for attempt := 0; attempt <= maxRetries; attempt++ {\n        resp, err := client.Call(req)\n        if err == nil {\n            return resp, nil\n        }\n\n        // Extract Prism error\n        lastErr = extractPrismError(err)\n\n        // Check if retryable\n        if lastErr.RetryPolicy == nil || !lastErr.RetryPolicy.Retryable {\n            return nil, fmt.Errorf("non-retryable error: %s", lastErr.Message)\n        }\n\n        // Respect max retries from server\n        if lastErr.RetryPolicy.MaxRetries > 0 && attempt >= int(lastErr.RetryPolicy.MaxRetries) {\n            break\n        }\n\n        // Calculate backoff delay\n        delay := calculateBackoff(lastErr.RetryPolicy, attempt)\n\n        log.Warn("Retrying after error",\n            "attempt", attempt,\n            "error", lastErr.Message,\n            "delay", delay)\n\n        time.Sleep(delay)\n    }\n\n    return nil, fmt.Errorf("max retries exceeded: %s", lastErr.Message)\n}\n\nfunc calculateBackoff(policy *RetryPolicy, attempt int) time.Duration {\n    baseDelay := policy.RetryAfter.AsDuration()\n\n    switch policy.BackoffStrategy {\n    case BackoffStrategy_BACKOFF_STRATEGY_IMMEDIATE:\n        return 0\n    case BackoffStrategy_BACKOFF_STRATEGY_LINEAR:\n        return baseDelay * time.Duration(attempt+1)\n    case BackoffStrategy_BACKOFF_STRATEGY_EXPONENTIAL:\n        return baseDelay * time.Duration(math.Pow(policy.BackoffMultiplier, float64(attempt)))\n    case BackoffStrategy_BACKOFF_STRATEGY_JITTER:\n        exp := baseDelay * time.Duration(math.Pow(policy.BackoffMultiplier, float64(attempt)))\n        jitter := time.Duration(rand.Int63n(int64(exp / 2)))\n        return exp + jitter\n    default:\n        return baseDelay\n    }\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"pattern-2-structured-logging",children:"Pattern 2: Structured Logging"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'func logError(err *Error) {\n    logger.Error("Request failed",\n        "code", err.Code.String(),\n        "category", err.Category.String(),\n        "severity", err.Severity.String(),\n        "message", err.Message,\n        "request_id", err.RequestId,\n        "source", err.Source,\n        "namespace", err.Namespace,\n        "timestamp", err.Timestamp.AsTime(),\n        "retryable", err.RetryPolicy != nil && err.RetryPolicy.Retryable,\n    )\n\n    // Log backend-specific details\n    for _, detail := range err.Details {\n        if backendErr := detail.GetBackendError(); backendErr != nil {\n            logger.Error("Backend error details",\n                "backend", backendErr.BackendType,\n                "instance", backendErr.BackendInstance,\n                "backend_code", backendErr.BackendErrorCode,\n                "operation", backendErr.Operation,\n            )\n        }\n    }\n\n    // Log cause chain\n    for i, cause := range err.Causes {\n        logger.Error("Error cause",\n            "depth", i+1,\n            "message", cause.Message,\n            "source", cause.Source,\n        )\n    }\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"pattern-3-prometheus-metrics",children:"Pattern 3: Prometheus Metrics"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-go",children:'var (\n    errorCounter = promauto.NewCounterVec(\n        prometheus.CounterOpts{\n            Name: "prism_errors_total",\n            Help: "Total number of errors by category, code, and backend",\n        },\n        []string{"category", "code", "backend", "namespace"},\n    )\n\n    errorSeverity = promauto.NewCounterVec(\n        prometheus.CounterOpts{\n            Name: "prism_errors_by_severity",\n            Help: "Errors by severity level",\n        },\n        []string{"severity", "namespace"},\n    )\n)\n\nfunc recordError(err *Error) {\n    backend := extractBackendType(err)\n\n    errorCounter.WithLabelValues(\n        err.Category.String(),\n        strconv.Itoa(int(err.Code)),\n        backend,\n        err.Namespace,\n    ).Inc()\n\n    errorSeverity.WithLabelValues(\n        err.Severity.String(),\n        err.Namespace,\n    ).Inc()\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,t.jsx)(r.h3,{id:"do",children:"DO:"}),"\n",(0,t.jsxs)(r.p,{children:["\u2705 Use structured error details (",(0,t.jsx)(r.code,{children:"ErrorDetail"})," oneof)\n\u2705 Provide retry guidance (",(0,t.jsx)(r.code,{children:"RetryPolicy"}),")\n\u2705 Chain errors across services (",(0,t.jsx)(r.code,{children:"causes"}),")\n\u2705 Include correlation IDs (",(0,t.jsx)(r.code,{children:"request_id"}),")\n\u2705 Add help links for common errors\n\u2705 Set appropriate severity levels\n\u2705 Populate backend context (",(0,t.jsx)(r.code,{children:"BackendError"}),")\n\u2705 Use semantic error codes (not just 500)\n\u2705 Sanitize sensitive data from error messages\n\u2705 Log errors with structured fields"]}),"\n",(0,t.jsx)(r.h3,{id:"dont",children:"DON'T:"}),"\n",(0,t.jsxs)(r.p,{children:['\u274c Return generic "Internal error" without context\n\u274c Expose internal implementation details to clients\n\u274c Use string error codes (use enums)\n\u274c Forget to set ',(0,t.jsx)(r.code,{children:"category"})," and ",(0,t.jsx)(r.code,{children:"severity"}),"\n\u274c Include stack traces in production responses\n\u274c Make all errors retryable (guide clients)\n\u274c Leak backend credentials or internal IPs\n\u274c Use HTTP status codes incorrectly\n\u274c Ignore error cause chains\n\u274c Skip setting ",(0,t.jsx)(r.code,{children:"namespace"})," for multi-tenant errors"]}),"\n",(0,t.jsx)(r.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"/rfc/rfc-001",children:"RFC-001: Prism Architecture"})," - Overall architecture"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"/memos/memo-006",children:"MEMO-006: Backend Interface Decomposition"})," - Interface design"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://cloud.google.com/apis/design/errors",children:"Google API Error Model"})," - Industry best practices"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"https://grpc.io/docs/guides/error/",children:"gRPC Error Handling"})," - gRPC status codes"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"2025-10-10: Initial draft with comprehensive error proto design"}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);