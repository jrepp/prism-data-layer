"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[9936],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}},50984:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"adr-039","title":"CLI Acceptance Testing with testscript","description":"Context","source":"@site/../docs-cms/adr/adr-039-cli-acceptance-testing.md","sourceDirName":".","slug":"/adr-039","permalink":"/prism-data-layer/adr/adr-039","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-039-cli-acceptance-testing.md","tags":[{"inline":true,"label":"testing","permalink":"/prism-data-layer/adr/tags/testing"},{"inline":true,"label":"cli","permalink":"/prism-data-layer/adr/tags/cli"},{"inline":true,"label":"go","permalink":"/prism-data-layer/adr/tags/go"},{"inline":true,"label":"acceptance-testing","permalink":"/prism-data-layer/adr/tags/acceptance-testing"},{"inline":true,"label":"developer-experience","permalink":"/prism-data-layer/adr/tags/developer-experience"}],"version":"current","frontMatter":{"date":"2025-10-09T00:00:00.000Z","deciders":"System","doc_uuid":"d3a12d0e-b92f-4771-bd6b-c276ee9b5501","id":"adr-039","project_id":"prism-data-layer","status":"Accepted","tags":["testing","cli","go","acceptance-testing","developer-experience"],"title":"CLI Acceptance Testing with testscript"},"sidebar":"adrSidebar","previous":{"title":"Backend Connector Buffer Architecture \u2022 ADR-038","permalink":"/prism-data-layer/adr/adr-038"},"next":{"title":"Go Binary for Admin CLI (prismctl) \u2022 ADR-040","permalink":"/prism-data-layer/adr/adr-040"}}');var i=s(74848),r=s(28453);const a={date:new Date("2025-10-09T00:00:00.000Z"),deciders:"System",doc_uuid:"d3a12d0e-b92f-4771-bd6b-c276ee9b5501",id:"adr-039",project_id:"prism-data-layer",status:"Accepted",tags:["testing","cli","go","acceptance-testing","developer-experience"],title:"CLI Acceptance Testing with testscript"},c=void 0,l={},d=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why testscript?",id:"why-testscript",level:3},{value:"Pros",id:"pros",level:4},{value:"Cons",id:"cons",level:4},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"1. BATS (Bash Automated Testing System)",id:"1-bats-bash-automated-testing-system",level:4},{value:"2. exec.Command + Table-Driven Tests (Pure Go)",id:"2-execcommand--table-driven-tests-pure-go",level:4},{value:"3. Ginkgo + Gomega (BDD-style)",id:"3-ginkgo--gomega-bdd-style",level:4},{value:"Decision: testscript",id:"decision-testscript",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Directory Structure",id:"directory-structure",level:3},{value:"CI Integration",id:"ci-integration",level:3},{value:"Performance Targets",id:"performance-targets",level:2},{value:"Debugging Failed Tests",id:"debugging-failed-tests",level:2},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Migration Path",id:"migration-path",level:2},{value:"Phase 1: Smoke Tests (Week 1)",id:"phase-1-smoke-tests-week-1",level:3},{value:"Phase 2: Core Commands (Week 2)",id:"phase-2-core-commands-week-2",level:3},{value:"Phase 3: Advanced Workflows (Week 3)",id:"phase-3-advanced-workflows-week-3",level:3},{value:"Phase 4: Full Coverage (Week 4)",id:"phase-4-full-coverage-week-4",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function o(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsxs)(n.p,{children:["The Prism admin CLI (",(0,i.jsx)(n.code,{children:"prismctl"}),") requires comprehensive testing to ensure:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Shell-Based Acceptance Tests"}),": Verify CLI behavior as users would invoke it from the shell"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Realistic Integration"}),": Test actual compiled binaries, not just function calls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-Platform Compatibility"}),": Ensure CLI works on Linux, macOS, Windows"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Regression Prevention"}),": Catch breaking changes in command flags, output formats, exit codes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation Validation"}),": Test examples from documentation actually work"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Requirements"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests must invoke CLI as subprocess (no in-process testing)"}),"\n",(0,i.jsx)(n.li,{children:"Support for testing stdout, stderr, exit codes, and file I/O"}),"\n",(0,i.jsx)(n.li,{children:"Ability to test interactive sequences and multi-command workflows"}),"\n",(0,i.jsx)(n.li,{children:"Fast enough for CI/CD (target: <10s for full suite)"}),"\n",(0,i.jsx)(n.li,{children:"Easy to write and maintain (prefer declarative over imperative)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.strong,{children:"testscript"})," for CLI acceptance tests, supplemented with table-driven Go tests for unit-level command testing."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"testscript"})," is a Go library from the Go team that runs txtar-formatted test scripts:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txtar",children:"# Test: Basic namespace creation\nprismctl namespace create test-ns --backend sqlite\nstdout 'Created namespace \"test-ns\"'\n! stderr .\n[exit 0]\n\n# Verify namespace exists\nprismctl namespace list\nstdout 'test-ns.*sqlite'\n"})}),"\n",(0,i.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,i.jsx)(n.h3,{id:"why-testscript",children:"Why testscript?"}),"\n",(0,i.jsx)(n.h4,{id:"pros",children:"Pros"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Shell-Native Syntax"}),": Tests look like actual shell sessions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Go Team Blessed"}),": Used for testing Go itself (",(0,i.jsx)(n.code,{children:"go test"}),", ",(0,i.jsx)(n.code,{children:"go mod"}),", etc.)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Declarative"}),": Test intent clear from script, not buried in Go code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Txtar Format"}),": Embedded files, setup/teardown, multi-step workflows"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast Execution"}),": Runs in-process but as separate command invocations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Excellent Tooling"}),": Built-in assertions for stdout, stderr, exit codes, files"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-Platform"}),": Handles path separators, environment variables correctly"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"cons",children:"Cons"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Learning Curve"}),": Txtar format unfamiliar to developers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Limited Debugging"}),": Failures harder to debug than native Go tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Less Flexible"}),": Some complex scenarios easier in pure Go"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,i.jsx)(n.h4,{id:"1-bats-bash-automated-testing-system",children:"1. BATS (Bash Automated Testing System)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# test_namespace.bats\n@test "create namespace" {\n  run prismctl namespace create test-ns --backend sqlite\n  [ "$status" -eq 0 ]\n  [[ "$output" =~ "Created namespace" ]]\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Shell-native, familiar to ops teams"}),"\n",(0,i.jsx)(n.li,{children:"Large ecosystem, widely used"}),"\n",(0,i.jsx)(n.li,{children:"Excellent for testing shell scripts"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rejected"}),": Bash-only (no cross-platform)"]}),"\n",(0,i.jsx)(n.li,{children:"Slower than Go-based solutions"}),"\n",(0,i.jsx)(n.li,{children:"External dependency not in Go ecosystem"}),"\n",(0,i.jsxs)(n.li,{children:["Harder to integrate with ",(0,i.jsx)(n.code,{children:"go test"})]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"2-execcommand--table-driven-tests-pure-go",children:"2. exec.Command + Table-Driven Tests (Pure Go)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func TestNamespaceCreate(t *testing.T) {\n    tests := []struct {\n        name string\n        args []string\n        wantStdout string\n        wantExitCode int\n    }{\n        {"basic", []string{"namespace", "create", "test-ns"}, "Created", 0},\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            cmd := exec.Command("prismctl", tt.args...)\n            out, err := cmd.CombinedOutput()\n            // assertions...\n        })\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pure Go, no external dependencies"}),"\n",(0,i.jsx)(n.li,{children:"Full power of Go testing"}),"\n",(0,i.jsx)(n.li,{children:"Easy debugging"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rejected"}),": Verbose and imperative"]}),"\n",(0,i.jsx)(n.li,{children:"Harder to read multi-step workflows"}),"\n",(0,i.jsx)(n.li,{children:"Manual handling of temp directories, cleanup"}),"\n",(0,i.jsx)(n.li,{children:"More boilerplate per test"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"3-ginkgo--gomega-bdd-style",children:"3. Ginkgo + Gomega (BDD-style)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var _ = Describe("Namespace", func() {\n    It("creates a namespace", func() {\n        session := RunCommand("prismctl", "namespace", "create", "test-ns")\n        Eventually(session).Should(gexec.Exit(0))\n        Expect(session.Out).To(gbytes.Say("Created"))\n    })\n})\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"BDD-style readability"}),"\n",(0,i.jsx)(n.li,{children:"Rich matchers"}),"\n",(0,i.jsx)(n.li,{children:"Popular in Kubernetes ecosystem"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rejected"}),": Heavy framework for CLI testing"]}),"\n",(0,i.jsx)(n.li,{children:"Still requires Go code for each test"}),"\n",(0,i.jsx)(n.li,{children:"Slower than testscript"}),"\n",(0,i.jsx)(n.li,{children:"Not as declarative as txtar scripts"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"decision-testscript",children:"Decision: testscript"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Chosen for"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Declarative shell-like syntax"}),"\n",(0,i.jsx)(n.li,{children:"Fast execution"}),"\n",(0,i.jsx)(n.li,{children:"Go team's endorsement"}),"\n",(0,i.jsx)(n.li,{children:"Perfect fit for CLI acceptance testing"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,i.jsx)(n.p,{children:"tools/\n\u251c\u2500\u2500 cmd/\n\u2502   \u2514\u2500\u2500 prismctl/\n\u2502       \u251c\u2500\u2500 main.go\n\u2502       \u251c\u2500\u2500 namespace.go\n\u2502       \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 internal/\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 testdata/\n\u2502   \u2514\u2500\u2500 script/\n\u2502       \u251c\u2500\u2500 namespace_create.txtar\n\u2502       \u251c\u2500\u2500 namespace_list.txtar\n\u2502       \u251c\u2500\u2500 namespace_delete.txtar\n\u2502       \u251c\u2500\u2500 session_list.txtar\n\u2502       \u251c\u2500\u2500 backend_health.txtar\n\u2502       \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 acceptance_test.go         # testscript runner\n\u2514\u2500\u2500 go.mod"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n### Test Runner\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"// tools/acceptance_test.go\npackage tools_test"}),"\n",(0,i.jsx)(n.p,{children:'import (\n"os"\n"os/exec"\n"testing"'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'"github.com/rogpeppe/go-internal/testscript"\n'})}),"\n",(0,i.jsx)(n.p,{children:")"}),"\n",(0,i.jsx)(n.p,{children:'func TestMain(m *testing.M) {\nos.Exit(testscript.RunMain(m, map[string]func() int{\n"prismctl": mainCLI,\n}))\n}'}),"\n",(0,i.jsx)(n.p,{children:'func TestScripts(t *testing.T) {\ntestscript.Run(t, testscript.Params{\nDir: "testdata/script",\nSetup: func(env *testscript.Env) error {\n// Set up test environment (mock proxy, temp dirs, etc.)\nenv.Setenv("PRISM_ENDPOINT", "localhost:50052")\nenv.Setenv("PRISM_CONFIG", env.Getenv("WORK")+"/prism-config.yaml")\nreturn nil\n},\n})\n}'}),"\n",(0,i.jsx)(n.p,{children:"// mainCLI wraps the CLI entry point for testscript\nfunc mainCLI() int {\nif err := rootCmd.Execute(); err != nil {\nreturn 1\n}\nreturn 0\n}"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n### Example Test Script\n\n"})}),"\n",(0,i.jsx)(n.h1,{id:"testdatascriptnamespace_createtxtar",children:"testdata/script/namespace_create.txtar"}),"\n",(0,i.jsx)(n.h1,{id:"test-create-a-namespace-with-explicit-configuration",children:"Test: Create a namespace with explicit configuration"}),"\n",(0,i.jsxs)(n.p,{children:["prismctl namespace create my-app ",(0,i.jsx)(n.br,{}),"\n--backend sqlite ",(0,i.jsx)(n.br,{}),"\n--pattern keyvalue ",(0,i.jsx)(n.br,{}),"\n--consistency strong"]}),"\n",(0,i.jsx)(n.p,{children:"stdout 'Created namespace \"my-app\"'\n! stderr 'error'"}),"\n",(0,i.jsx)(n.h1,{id:"test-list-namespaces-to-verify-creation",children:"Test: List namespaces to verify creation"}),"\n",(0,i.jsx)(n.p,{children:"prismctl namespace list\nstdout 'my-app.*sqlite.*keyvalue'"}),"\n",(0,i.jsx)(n.h1,{id:"test-describe-namespace",children:"Test: Describe namespace"}),"\n",(0,i.jsx)(n.p,{children:"prismctl namespace describe my-app\nstdout 'Namespace: my-app'\nstdout 'Backend: sqlite'\nstdout 'Pattern: keyvalue'\nstdout 'Consistency: strong'"}),"\n",(0,i.jsx)(n.h1,{id:"test-delete-namespace",children:"Test: Delete namespace"}),"\n",(0,i.jsx)(n.p,{children:"prismctl namespace delete my-app --force\nstdout 'Deleted namespace \"my-app\"'"}),"\n",(0,i.jsx)(n.h1,{id:"verify-deletion",children:"Verify deletion"}),"\n",(0,i.jsx)(n.p,{children:"prismctl namespace list\n! stdout 'my-app'"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n### Advanced Test: Configuration File Discovery\n\n"})}),"\n",(0,i.jsx)(n.h1,{id:"testdatascriptconfig_discoverytxtar",children:"testdata/script/config_discovery.txtar"}),"\n",(0,i.jsx)(n.h1,{id:"create-project-config-file",children:"Create project config file"}),"\n",(0,i.jsx)(n.p,{children:"-- .prism.yaml --\nnamespace: my-project\nproxy:\nendpoint: localhost:50052\nbackend:\ntype: postgres\npattern: keyvalue"}),"\n",(0,i.jsx)(n.h1,{id:"test-cli-discovers-config-automatically",children:"Test: CLI discovers config automatically"}),"\n",(0,i.jsx)(n.p,{children:"prismctl namespace create my-project\nstdout 'Created namespace \"my-project\"'\nstdout 'Backend: postgres'"}),"\n",(0,i.jsx)(n.h1,{id:"test-cli-respects-config-for-scoped-commands",children:"Test: CLI respects config for scoped commands"}),"\n",(0,i.jsx)(n.p,{children:"prismctl config show\nstdout 'namespace: my-project'\nstdout 'backend:.*postgres'"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n### Multi-Step Workflow Test\n\n"})}),"\n",(0,i.jsx)(n.h1,{id:"testdatascriptshadow_traffictxtar",children:"testdata/script/shadow_traffic.txtar"}),"\n",(0,i.jsx)(n.h1,{id:"setup-create-source-namespace",children:"Setup: Create source namespace"}),"\n",(0,i.jsx)(n.p,{children:"prismctl namespace create prod-app --backend postgres"}),"\n",(0,i.jsx)(n.h1,{id:"setup-create-target-namespace",children:"Setup: Create target namespace"}),"\n",(0,i.jsx)(n.p,{children:"prismctl namespace create prod-app-new --backend redis"}),"\n",(0,i.jsx)(n.h1,{id:"test-enable-shadow-traffic",children:"Test: Enable shadow traffic"}),"\n",(0,i.jsxs)(n.p,{children:["prismctl shadow enable prod-app ",(0,i.jsx)(n.br,{}),"\n--target prod-app-new ",(0,i.jsx)(n.br,{}),"\n--percentage 10"]}),"\n",(0,i.jsx)(n.p,{children:"stdout 'Shadow traffic enabled'\nstdout '10% traffic to prod-app-new'"}),"\n",(0,i.jsx)(n.h1,{id:"test-check-shadow-status",children:"Test: Check shadow status"}),"\n",(0,i.jsx)(n.p,{children:"prismctl shadow status prod-app\nstdout 'Status: Active'\nstdout 'Target: prod-app-new'\nstdout '10%.*redis'"}),"\n",(0,i.jsx)(n.h1,{id:"test-disable-shadow-traffic",children:"Test: Disable shadow traffic"}),"\n",(0,i.jsx)(n.p,{children:"prismctl shadow disable prod-app\nstdout 'Shadow traffic disabled'"}),"\n",(0,i.jsx)(n.h1,{id:"cleanup",children:"Cleanup"}),"\n",(0,i.jsx)(n.p,{children:"prismctl namespace delete prod-app --force\nprismctl namespace delete prod-app-new --force"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n### Error Handling Test\n\n"})}),"\n",(0,i.jsx)(n.h1,{id:"testdatascriptnamespace_errorstxtar",children:"testdata/script/namespace_errors.txtar"}),"\n",(0,i.jsx)(n.h1,{id:"test-create-namespace-with-invalid-backend",children:"Test: Create namespace with invalid backend"}),"\n",(0,i.jsx)(n.p,{children:"! prismctl namespace create bad-ns --backend invalid-backend\nstderr 'error: unsupported backend \"invalid-backend\"'\n[exit 1]"}),"\n",(0,i.jsx)(n.h1,{id:"test-delete-non-existent-namespace",children:"Test: Delete non-existent namespace"}),"\n",(0,i.jsx)(n.p,{children:"! prismctl namespace delete does-not-exist\nstderr 'error: namespace \"does-not-exist\" not found'\n[exit 1]"}),"\n",(0,i.jsx)(n.h1,{id:"test-create-duplicate-namespace",children:"Test: Create duplicate namespace"}),"\n",(0,i.jsx)(n.p,{children:"prismctl namespace create duplicate --backend sqlite\n! prismctl namespace create duplicate --backend sqlite\nstderr 'error: namespace \"duplicate\" already exists'\n[exit 1]"}),"\n",(0,i.jsx)(n.h1,{id:"cleanup-1",children:"Cleanup"}),"\n",(0,i.jsx)(n.p,{children:"prismctl namespace delete duplicate --force"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n### JSON Output Test\n\n"})}),"\n",(0,i.jsx)(n.h1,{id:"testdatascriptjson_outputtxtar",children:"testdata/script/json_output.txtar"}),"\n",(0,i.jsx)(n.h1,{id:"create-test-namespace",children:"Create test namespace"}),"\n",(0,i.jsx)(n.p,{children:"prismctl namespace create json-test --backend sqlite"}),"\n",(0,i.jsx)(n.h1,{id:"test-json-output-format",children:"Test: JSON output format"}),"\n",(0,i.jsx)(n.p,{children:'prismctl namespace list --output json\nstdout \'{"namespaces":[\'\nstdout \'{"name":"json-test"\'\nstdout \'"backend":"sqlite"\''}),"\n",(0,i.jsx)(n.h1,{id:"test-parse-json-with-jq-if-available",children:"Test: Parse JSON with jq (if available)"}),"\n",(0,i.jsx)(n.p,{children:'[exec:jq] prismctl namespace list --output json\nstdout \'"name":.*"json-test"\''}),"\n",(0,i.jsx)(n.h1,{id:"cleanup-2",children:"Cleanup"}),"\n",(0,i.jsx)(n.p,{children:"prismctl namespace delete json-test --force"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n## Testing Strategy\n\n### Test Categories\n\n1. **Smoke Tests** (Fast, &lt;1s total)\n   - `prismctl --help`\n   - `prismctl --version`\n   - Basic command validation\n\n2. **Unit Tests** (Go table-driven tests)\n   - Flag parsing\n   - Configuration loading\n   - Output formatting\n\n3. **Acceptance Tests** (testscript, ~5-10s)\n   - End-to-end CLI workflows\n   - Integration with mock proxy\n   - Error handling paths\n\n4. **Integration Tests** (Against real proxy, slower)\n   - Full stack: CLI \u2192 Proxy \u2192 Backend\n   - Separate CI job (not in `go test`)\n\n### Test Organization\n\ntestdata/script/\n\u251c\u2500\u2500 smoke/              # Fast smoke tests\n\u2502   \u251c\u2500\u2500 help.txtar\n\u2502   \u2514\u2500\u2500 version.txtar\n\u251c\u2500\u2500 namespace/          # Namespace management\n\u2502   \u251c\u2500\u2500 create.txtar\n\u2502   \u251c\u2500\u2500 list.txtar\n\u2502   \u251c\u2500\u2500 describe.txtar\n\u2502   \u251c\u2500\u2500 update.txtar\n\u2502   \u2514\u2500\u2500 delete.txtar\n\u251c\u2500\u2500 backend/            # Backend operations\n\u2502   \u251c\u2500\u2500 health.txtar\n\u2502   \u2514\u2500\u2500 stats.txtar\n\u251c\u2500\u2500 session/            # Session management\n\u2502   \u251c\u2500\u2500 list.txtar\n\u2502   \u2514\u2500\u2500 trace.txtar\n\u251c\u2500\u2500 config/             # Configuration\n\u2502   \u251c\u2500\u2500 discovery.txtar\n\u2502   \u2514\u2500\u2500 validation.txtar\n\u2514\u2500\u2500 errors/             # Error scenarios\n    \u251c\u2500\u2500 invalid_args.txtar\n    \u2514\u2500\u2500 connection_errors.txtar\n"})}),"\n",(0,i.jsx)(n.h3,{id:"ci-integration",children:"CI Integration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/cli-tests.yml\nname: CLI Acceptance Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-go@v5\n        with:\n          go-version: '1.22'\n\n      - name: Build CLI\n        run: cd tools && go build ./cmd/prismctl\n\n      - name: Run acceptance tests\n        run: cd tools && go test -v ./acceptance_test.go\n\n      - name: Upload test results\n        if: failure()\n        uses: actions/upload-artifact@v4\n        with:\n          name: test-results\n          path: tools/testdata/script/**/*.log\n"})}),"\n",(0,i.jsx)(n.h2,{id:"performance-targets",children:"Performance Targets"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Smoke tests"}),": <1s total"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Acceptance test suite"}),": <10s total"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Individual test"}),": <500ms average"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallel execution"}),": 4x faster (use ",(0,i.jsx)(n.code,{children:"t.Parallel()"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"debugging-failed-tests",children:"Debugging Failed Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run single test\ncd tools\ngo test -v -run TestScripts/namespace_create\n\n# Show verbose output\ngo test -v -run TestScripts/namespace_create -testscript.verbose\n\n# Update golden files\ngo test -v -run TestScripts/namespace_create -testscript.update\n"})}),"\n",(0,i.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,i.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Declarative tests that read like shell sessions"}),"\n",(0,i.jsx)(n.li,{children:"Fast execution (in-process but subprocess-like)"}),"\n",(0,i.jsx)(n.li,{children:"Cross-platform support out of the box"}),"\n",(0,i.jsx)(n.li,{children:"Easy to write and maintain"}),"\n",(0,i.jsx)(n.li,{children:"Excellent for testing CLI UX"}),"\n",(0,i.jsx)(n.li,{children:"Catches regressions in output formats"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Learning curve for txtar format"}),"\n",(0,i.jsx)(n.li,{children:"Debugging failures less intuitive than pure Go"}),"\n",(0,i.jsx)(n.li,{children:"Limited access to Go testing utilities inside scripts"}),"\n",(0,i.jsx)(n.li,{children:"Some complex scenarios still need Go table tests"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Two testing approaches (testscript + Go tests)"}),"\n",(0,i.jsx)(n.li,{children:"Requires discipline to choose right tool for each test"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"migration-path",children:"Migration Path"}),"\n",(0,i.jsx)(n.h3,{id:"phase-1-smoke-tests-week-1",children:"Phase 1: Smoke Tests (Week 1)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implement testscript runner"}),"\n",(0,i.jsx)(n.li,{children:"Add basic smoke tests (help, version, invalid commands)"}),"\n",(0,i.jsx)(n.li,{children:"Verify CI integration"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-2-core-commands-week-2",children:"Phase 2: Core Commands (Week 2)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Namespace CRUD tests"}),"\n",(0,i.jsx)(n.li,{children:"Backend health tests"}),"\n",(0,i.jsx)(n.li,{children:"Basic error handling"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-3-advanced-workflows-week-3",children:"Phase 3: Advanced Workflows (Week 3)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Shadow traffic tests"}),"\n",(0,i.jsx)(n.li,{children:"Multi-step workflows"}),"\n",(0,i.jsx)(n.li,{children:"Configuration discovery"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-4-full-coverage-week-4",children:"Phase 4: Full Coverage (Week 4)"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Session management tests"}),"\n",(0,i.jsx)(n.li,{children:"Metrics tests"}),"\n",(0,i.jsx)(n.li,{children:"Edge cases and error scenarios"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://pkg.go.dev/github.com/rogpeppe/go-internal/testscript",children:"testscript Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://pkg.go.dev/golang.org/x/tools/txtar",children:"Txtar Format"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/golang/go/tree/master/src/cmd/go/testdata/script",children:"Go Command Testing"})}),"\n",(0,i.jsx)(n.li,{children:"ADR-012: Go for Tooling"}),"\n",(0,i.jsx)(n.li,{children:"ADR-015: Go Testing Strategy"}),"\n",(0,i.jsx)(n.li,{children:"ADR-016: Go CLI Configuration"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2025-10-09: Initial draft proposing testscript for CLI acceptance tests"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);