"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[73778],{10916:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"adr-049","title":"Podman and Container Optimization for Instant Testing","description":"Status","source":"@site/../docs-cms/adr/adr-049-podman-container-optimization.md","sourceDirName":".","slug":"/adr-049","permalink":"/prism-data-layer/adr/adr-049","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-049-podman-container-optimization.md","tags":[{"inline":true,"label":"containers","permalink":"/prism-data-layer/adr/tags/containers"},{"inline":true,"label":"podman","permalink":"/prism-data-layer/adr/tags/podman"},{"inline":true,"label":"testing","permalink":"/prism-data-layer/adr/tags/testing"},{"inline":true,"label":"performance","permalink":"/prism-data-layer/adr/tags/performance"},{"inline":true,"label":"dx","permalink":"/prism-data-layer/adr/tags/dx"},{"inline":true,"label":"macos","permalink":"/prism-data-layer/adr/tags/macos"}],"version":"current","frontMatter":{"date":"2025-10-09T00:00:00.000Z","deciders":"Platform Team","doc_uuid":"96198d1b-0f98-49f9-8487-e22667179e24","id":"adr-049","project_id":"prism-data-layer","status":"Accepted","tags":["containers","podman","testing","performance","dx","macos"],"title":"Podman and Container Optimization for Instant Testing"},"sidebar":"adrSidebar","previous":{"title":"Local Signoz Instance for Observability Testing \u2022 ADR-048","permalink":"/prism-data-layer/adr/adr-048"},"next":{"title":"Topaz for Policy-Based Authorization \u2022 ADR-050","permalink":"/prism-data-layer/adr/adr-050"}}');var r=s(74848),t=s(28453);const l={date:new Date("2025-10-09T00:00:00.000Z"),deciders:"Platform Team",doc_uuid:"96198d1b-0f98-49f9-8487-e22667179e24",id:"adr-049",project_id:"prism-data-layer",status:"Accepted",tags:["containers","podman","testing","performance","dx","macos"],title:"Podman and Container Optimization for Instant Testing"},d="ADR-049: Podman and Container Optimization for Instant Testing",o={},a=[{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Problem Statement",id:"problem-statement",level:3},{value:"Requirements",id:"requirements",level:3},{value:"Constraints",id:"constraints",level:3},{value:"Decision",id:"decision",level:2},{value:"Layer 1: In-Process Testing (Instant) \ud83d\udd25 <strong>PRIMARY</strong>",id:"layer-1-in-process-testing-instant--primary",level:3},{value:"Layer 2: Podman for Integration Testing (Fast)",id:"layer-2-podman-for-integration-testing-fast",level:3},{value:"Layer 3: Optimized Container Images (Smallest)",id:"layer-3-optimized-container-images-smallest",level:3},{value:"Layer 4: MicroVMs (Experimental)",id:"layer-4-microvms-experimental",level:3},{value:"Implementation Strategy",id:"implementation-strategy",level:2},{value:"Phase 1: In-Process Testing (Week 1)",id:"phase-1-in-process-testing-week-1",level:3},{value:"Phase 2: Podman Migration (Week 2)",id:"phase-2-podman-migration-week-2",level:3},{value:"Phase 3: Container Optimization (Week 3)",id:"phase-3-container-optimization-week-3",level:3},{value:"Phase 4: CI/CD Optimization (Week 4)",id:"phase-4-cicd-optimization-week-4",level:3},{value:"Performance Targets",id:"performance-targets",level:2},{value:"Before (Docker Desktop)",id:"before-docker-desktop",level:3},{value:"After (Podman + Optimization)",id:"after-podman--optimization",level:3},{value:"Technical Details",id:"technical-details",level:2},{value:"Podman Machine Configuration",id:"podman-machine-configuration",level:3},{value:"Container Build Optimization",id:"container-build-optimization",level:3},{value:"Testing Strategy",id:"testing-strategy",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Mitigations",id:"mitigations",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:2},{value:"Alternative 1: Keep Docker Desktop",id:"alternative-1-keep-docker-desktop",level:3},{value:"Alternative 2: Colima (Lima-based)",id:"alternative-2-colima-lima-based",level:3},{value:"Alternative 3: Native macOS Binaries",id:"alternative-3-native-macos-binaries",level:3},{value:"Alternative 4: Remote Development (Linux VM)",id:"alternative-4-remote-development-linux-vm",level:3},{value:"Implementation Checklist",id:"implementation-checklist",level:2},{value:"Related Decisions",id:"related-decisions",level:2},{value:"References",id:"references",level:2},{value:"Podman Documentation",id:"podman-documentation",level:3},{value:"Container Optimization",id:"container-optimization",level:3},{value:"MicroVMs",id:"microvms",level:3},{value:"Revision History",id:"revision-history",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"adr-049-podman-and-container-optimization-for-instant-testing",children:"ADR-049: Podman and Container Optimization for Instant Testing"})}),"\n",(0,r.jsx)(e.h2,{id:"status",children:"Status"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Accepted"})," - 2025-10-09"]}),"\n",(0,r.jsx)(e.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(e.h3,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsxs)(e.p,{children:["Developers need the ",(0,r.jsx)(e.strong,{children:"fastest possible build-test cycle"})," for backend plugin development. Current Docker-based workflow has several pain points:"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Performance Issues:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Docker Desktop on Mac requires a VM (HyperKit/Virtualization.framework)"}),"\n",(0,r.jsx)(e.li,{children:"Container startup time: 3-30 seconds depending on backend"}),"\n",(0,r.jsx)(e.li,{children:"Docker daemon overhead: ~2GB RAM baseline"}),"\n",(0,r.jsx)(e.li,{children:"Layer caching misses during development"}),"\n",(0,r.jsx)(e.li,{children:"Volume mount performance degradation (osxfs)"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Developer Experience Issues:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Docker Desktop licensing changes (free for individuals, paid for enterprises)"}),"\n",(0,r.jsx)(e.li,{children:"Docker daemon must be running (background process)"}),"\n",(0,r.jsx)(e.li,{children:"Root-level daemon security concerns"}),"\n",(0,r.jsx)(e.li,{children:"OCI compliance questions"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Testing Workflow:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Current slow path (Docker)\ndocker-compose up -d postgres  # 5-10 seconds\ngo test ./...                   # Test execution\ndocker-compose down             # 2-3 seconds\n# Total: 7-13 seconds overhead per cycle\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Desired Workflow:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Instant testing (goal)\ngo test ./...  # <1 second total\n"})}),"\n",(0,r.jsx)(e.h3,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Minimize VM overhead"}),": Reduce or eliminate VM layer where possible"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Optimize container size"}),": Smallest possible images (<10MB for Go binaries)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Instant startup"}),": Container/process startup <100ms"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Mac-native development"}),": Optimize for macOS developers"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"CI/CD parity"}),": Local testing matches CI environment"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Zero licensing concerns"}),": Open source, no enterprise restrictions"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"constraints",children:"Constraints"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Technical Reality:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Linux containers on Mac REQUIRE a VM"})," - Mac kernel \u2260 Linux kernel"]}),"\n",(0,r.jsx)(e.li,{children:"No way to run Linux binaries natively on macOS"}),"\n",(0,r.jsx)(e.li,{children:"Any container runtime on Mac uses a hypervisor (Virtualization.framework, HyperKit, etc.)"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Options Evaluated:"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Docker Desktop (current)"}),"\n",(0,r.jsx)(e.li,{children:"Podman + podman machine"}),"\n",(0,r.jsx)(e.li,{children:"Colima (Lima-based)"}),"\n",(0,r.jsx)(e.li,{children:"MicroVMs (Firecracker, Cloud Hypervisor)"}),"\n",(0,r.jsx)(e.li,{children:"Native macOS binaries (no containers)"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"We will adopt a layered testing strategy:"})}),"\n",(0,r.jsxs)(e.h3,{id:"layer-1-in-process-testing-instant--primary",children:["Layer 1: In-Process Testing (Instant) \ud83d\udd25 ",(0,r.jsx)(e.strong,{children:"PRIMARY"})]}),"\n",(0,r.jsxs)(e.p,{children:["For rapid iteration, use ",(0,r.jsx)(e.strong,{children:"zero-container"})," testing:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'// Instant: No containers, pure Go\nfunc TestMemStore(t *testing.T) {\n    store := memstore.NewMemStore()  // In-process\n    // ... tests run in <1ms\n}\n\nfunc TestSQLite(t *testing.T) {\n    db := sql.Open("sqlite3", ":memory:")  // In-process\n    // ... tests run in <10ms\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Backends supporting instant testing:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"MemStore"}),": Pure Go, sync.Map (ADR: see MEMO-004)"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"SQLite"}),": Embedded, no external process"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Embedded NATS"}),": ",(0,r.jsx)(e.code,{children:"server.NewServer()"})," in-process"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Mock backends"}),": For unit tests"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Benefits:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Startup time: ",(0,r.jsx)(e.strong,{children:"<1ms"})]}),"\n",(0,r.jsx)(e.li,{children:"No VM overhead"}),"\n",(0,r.jsx)(e.li,{children:"No container images needed"}),"\n",(0,r.jsx)(e.li,{children:"Perfect for TDD workflow"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"layer-2-podman-for-integration-testing-fast",children:"Layer 2: Podman for Integration Testing (Fast)"}),"\n",(0,r.jsxs)(e.p,{children:["For backends requiring real services, use ",(0,r.jsx)(e.strong,{children:"Podman"}),":"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Why Podman over Docker:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Daemonless"}),": No background daemon required"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Rootless"}),": Runs without root privileges"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Open source"}),": Apache 2.0 license, no enterprise restrictions"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"OCI-compliant"}),": Drop-in replacement for Docker"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Docker compatible"}),": ",(0,r.jsx)(e.code,{children:"alias docker=podman"})," works"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Smaller footprint"}),": No daemon overhead"]}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Podman on Mac:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Install\nbrew install podman\n\n# Initialize VM (one-time, uses Lima/QEMU)\npodman machine init --cpus 4 --memory 4096 --disk-size 50\n\n# Start VM (boots in ~5 seconds)\npodman machine start\n\n# Use like Docker\npodman run -d postgres:16-alpine\npodman-compose up -d\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Reality Check:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Podman on Mac ",(0,r.jsx)(e.strong,{children:"still uses a VM"})," (qemu + Virtualization.framework)"]}),"\n",(0,r.jsx)(e.li,{children:"No escape from VM requirement for Linux containers"}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Advantage"}),": Lighter than Docker Desktop, daemonless, rootless"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"layer-3-optimized-container-images-smallest",children:"Layer 3: Optimized Container Images (Smallest)"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Container Size Optimization:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-dockerfile",children:'# BEFORE: Alpine-based (15MB compressed, 45MB uncompressed)\nFROM golang:1.21-alpine AS builder\nWORKDIR /app\nCOPY . .\nRUN go build -o plugin ./cmd/server\n\nFROM alpine:latest\nCOPY --from=builder /app/plugin /plugin\nENTRYPOINT ["/plugin"]\n# Size: ~15MB\n\n# AFTER: Distroless (8MB compressed, 12MB uncompressed)\nFROM golang:1.21 AS builder\nWORKDIR /app\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build \\\n    -ldflags="-s -w" \\\n    -o plugin ./cmd/server\n\nFROM gcr.io/distroless/static-debian12:nonroot\nCOPY --from=builder /app/plugin /plugin\nUSER nonroot:nonroot\nENTRYPOINT ["/plugin"]\n# Size: ~8MB\n\n# BEST: Scratch (2MB compressed, 6MB uncompressed)\nFROM golang:1.21 AS builder\nWORKDIR /app\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build \\\n    -a -installsuffix cgo \\\n    -ldflags="-s -w -extldflags \'-static\'" \\\n    -o plugin ./cmd/server\n\nFROM scratch\nCOPY --from=builder /app/plugin /plugin\nENTRYPOINT ["/plugin"]\n# Size: ~2MB (just the binary!)\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Size Comparison:"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Base Image"}),(0,r.jsx)(e.th,{children:"Compressed"}),(0,r.jsx)(e.th,{children:"Uncompressed"}),(0,r.jsx)(e.th,{children:"Startup Time"}),(0,r.jsx)(e.th,{children:"Security Updates"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Alpine"}),(0,r.jsx)(e.td,{children:"15MB"}),(0,r.jsx)(e.td,{children:"45MB"}),(0,r.jsx)(e.td,{children:"500ms"}),(0,r.jsx)(e.td,{children:"\u2705 Yes (apk)"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Distroless"}),(0,r.jsx)(e.td,{children:"8MB"}),(0,r.jsx)(e.td,{children:"12MB"}),(0,r.jsx)(e.td,{children:"300ms"}),(0,r.jsx)(e.td,{children:"\u2705 Yes (minimal)"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Scratch"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"2MB"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"6MB"})}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"100ms"})}),(0,r.jsx)(e.td,{children:"\u26a0\ufe0f Binary only"})]})]})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Recommendation"}),": Use ",(0,r.jsx)(e.strong,{children:"scratch"})," for plugins (statically linked Go binaries)."]}),"\n",(0,r.jsx)(e.h3,{id:"layer-4-microvms-experimental",children:"Layer 4: MicroVMs (Experimental)"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Firecracker/Cloud Hypervisor on Mac:"})}),"\n",(0,r.jsxs)(e.p,{children:["\u274c ",(0,r.jsx)(e.strong,{children:"Not practical for macOS development:"})]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Firecracker requires KVM (Linux kernel module)"}),"\n",(0,r.jsx)(e.li,{children:"Mac uses Virtualization.framework (different API)"}),"\n",(0,r.jsx)(e.li,{children:"Would need QEMU wrapper \u2192 same VM overhead as Podman"}),"\n",(0,r.jsx)(e.li,{children:"No significant performance gain on Mac"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Where MicroVMs help:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u2705 Linux CI/CD environments (GitHub Actions, AWS)"}),"\n",(0,r.jsx)(e.li,{children:"\u2705 Production Kubernetes clusters"}),"\n",(0,r.jsx)(e.li,{children:"\u274c Mac development workflow"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Verdict"}),": Skip microVMs for local Mac development."]}),"\n",(0,r.jsx)(e.h2,{id:"implementation-strategy",children:"Implementation Strategy"}),"\n",(0,r.jsx)(e.h3,{id:"phase-1-in-process-testing-week-1",children:"Phase 1: In-Process Testing (Week 1)"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Priority: Enable instant testing for 80% of development workflow"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'// plugins/postgres/internal/store/store_test.go\n\nfunc TestPostgresPlugin_FastPath(t *testing.T) {\n    // Use in-memory SQLite as Postgres substitute\n    db := sql.Open("sqlite3", ":memory:")\n    defer db.Close()\n\n    // Most SQL is compatible\n    db.Exec("CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT)")\n    db.Exec("INSERT INTO users (id, name) VALUES (1, \'Alice\')")\n\n    // Test plugin logic without container\n    // Runs in <10ms\n}\n\nfunc TestPostgresPlugin_RealBackend(t *testing.T) {\n    if testing.Short() {\n        t.Skip("Skipping integration test in short mode")\n    }\n\n    // Use real Postgres via testcontainers\n    // Only runs with: go test -v (not go test -short)\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Run modes:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Fast: In-process only (TDD workflow)\ngo test -short ./...  # <1 second\n\n# Full: With containers (pre-commit)\ngo test ./...         # ~30 seconds\n"})}),"\n",(0,r.jsx)(e.h3,{id:"phase-2-podman-migration-week-2",children:"Phase 2: Podman Migration (Week 2)"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Replace Docker with Podman:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Remove Docker Desktop dependency\nbrew uninstall --cask docker\n\n# Install Podman\nbrew install podman podman-compose\n\n# Initialize Podman machine\npodman machine init prism-dev \\\n    --cpus 4 \\\n    --memory 4096 \\\n    --disk-size 50 \\\n    --rootful=false\n\npodman machine start prism-dev\n"})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Makefile updates:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-makefile",children:"# Old\nDOCKER := docker\nCOMPOSE := docker-compose\n\n# New (Podman-compatible)\nCONTAINER_RUNTIME := $(shell command -v podman || command -v docker)\nCOMPOSE := $(shell command -v podman-compose || command -v docker-compose)\n\n.PHONY: test-integration\ntest-integration:\n\t$(COMPOSE) -f local-dev/compose.yml up -d\n\tgo test -v ./tests/integration/...\n\t$(COMPOSE) -f local-dev/compose.yml down\n"})}),"\n",(0,r.jsx)(e.h3,{id:"phase-3-container-optimization-week-3",children:"Phase 3: Container Optimization (Week 3)"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Rebuild all plugin images with scratch base:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# plugins/postgres/Dockerfile\nFROM golang:1.21 AS builder\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux go build \\\n    -a -installsuffix cgo \\\n    -ldflags="-s -w -extldflags \'-static\'" \\\n    -o plugin-postgres ./cmd/server\n\nFROM scratch\nCOPY --from=builder /app/plugin-postgres /plugin\nEXPOSE 50051\nENTRYPOINT ["/plugin"]\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Expected improvements:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Image size: 45MB \u2192 6MB (",(0,r.jsx)(e.strong,{children:"87% reduction"}),")"]}),"\n",(0,r.jsx)(e.li,{children:"Pull time: 3s \u2192 200ms"}),"\n",(0,r.jsx)(e.li,{children:"Startup time: 500ms \u2192 100ms"}),"\n",(0,r.jsx)(e.li,{children:"Memory: 50MB \u2192 10MB baseline"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"phase-4-cicd-optimization-week-4",children:"Phase 4: CI/CD Optimization (Week 4)"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"GitHub Actions with layer caching:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:"# .github/workflows/test.yml\nname: Test\n\non: [push, pull_request]\n\njobs:\n  unit-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      # Fast: In-process tests only\n      - name: Unit tests (instant)\n        run: go test -short -v ./...\n        timeout-minutes: 1\n\n  integration-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n\n      # Use Podman in CI (faster than Docker)\n      - name: Install Podman\n        run: |\n          sudo apt-get update\n          sudo apt-get -y install podman\n\n      # Full: With real backends\n      - name: Integration tests\n        run: |\n          podman-compose -f local-dev/compose.yml up -d\n          go test -v ./tests/integration/...\n          podman-compose -f local-dev/compose.yml down\n        timeout-minutes: 5\n"})}),"\n",(0,r.jsx)(e.h2,{id:"performance-targets",children:"Performance Targets"}),"\n",(0,r.jsx)(e.h3,{id:"before-docker-desktop",children:"Before (Docker Desktop)"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Test Type"}),(0,r.jsx)(e.th,{children:"Startup"}),(0,r.jsx)(e.th,{children:"Execution"}),(0,r.jsx)(e.th,{children:"Teardown"}),(0,r.jsx)(e.th,{children:"Total"}),(0,r.jsx)(e.th,{children:"Frequency"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Unit (mock)"}),(0,r.jsx)(e.td,{children:"0ms"}),(0,r.jsx)(e.td,{children:"100ms"}),(0,r.jsx)(e.td,{children:"0ms"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"100ms"})}),(0,r.jsx)(e.td,{children:"Every save"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Unit (SQLite)"}),(0,r.jsx)(e.td,{children:"50ms"}),(0,r.jsx)(e.td,{children:"200ms"}),(0,r.jsx)(e.td,{children:"10ms"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"260ms"})}),(0,r.jsx)(e.td,{children:"Every save"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Integration (Postgres)"}),(0,r.jsx)(e.td,{children:"5000ms"}),(0,r.jsx)(e.td,{children:"1000ms"}),(0,r.jsx)(e.td,{children:"2000ms"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"8000ms"})}),(0,r.jsx)(e.td,{children:"Pre-commit"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Integration (Kafka)"}),(0,r.jsx)(e.td,{children:"30000ms"}),(0,r.jsx)(e.td,{children:"2000ms"}),(0,r.jsx)(e.td,{children:"3000ms"}),(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"35000ms"})}),(0,r.jsx)(e.td,{children:"Pre-commit"})]})]})]}),"\n",(0,r.jsx)(e.h3,{id:"after-podman--optimization",children:"After (Podman + Optimization)"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Test Type"}),(0,r.jsx)(e.th,{children:"Startup"}),(0,r.jsx)(e.th,{children:"Execution"}),(0,r.jsx)(e.th,{children:"Teardown"}),(0,r.jsx)(e.th,{children:"Total"}),(0,r.jsx)(e.th,{children:"Frequency"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Unit (MemStore)"}),(0,r.jsx)(e.td,{children:"0ms"}),(0,r.jsx)(e.td,{children:"1ms"}),(0,r.jsx)(e.td,{children:"0ms"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.strong,{children:"1ms"})," \u26a1"]}),(0,r.jsx)(e.td,{children:"Every save"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Unit (SQLite)"}),(0,r.jsx)(e.td,{children:"1ms"}),(0,r.jsx)(e.td,{children:"50ms"}),(0,r.jsx)(e.td,{children:"1ms"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.strong,{children:"52ms"})," \u26a1"]}),(0,r.jsx)(e.td,{children:"Every save"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Integration (Postgres)"}),(0,r.jsx)(e.td,{children:"3000ms"}),(0,r.jsx)(e.td,{children:"1000ms"}),(0,r.jsx)(e.td,{children:"500ms"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.strong,{children:"4500ms"})," \u2705"]}),(0,r.jsx)(e.td,{children:"Pre-commit"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:"Integration (Kafka)"}),(0,r.jsx)(e.td,{children:"20000ms"}),(0,r.jsx)(e.td,{children:"2000ms"}),(0,r.jsx)(e.td,{children:"1000ms"}),(0,r.jsxs)(e.td,{children:[(0,r.jsx)(e.strong,{children:"23000ms"})," \u2705"]}),(0,r.jsx)(e.td,{children:"Pre-commit"})]})]})]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Key Improvements:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Instant tests"}),": 100ms \u2192 ",(0,r.jsx)(e.strong,{children:"1ms"})," (100x faster) \ud83d\udd25"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"SQLite tests"}),": 260ms \u2192 ",(0,r.jsx)(e.strong,{children:"52ms"})," (5x faster)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Integration tests"}),": 8s \u2192 ",(0,r.jsx)(e.strong,{children:"4.5s"})," (44% faster)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Kafka tests"}),": 35s \u2192 ",(0,r.jsx)(e.strong,{children:"23s"})," (34% faster)"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"technical-details",children:"Technical Details"}),"\n",(0,r.jsx)(e.h3,{id:"podman-machine-configuration",children:"Podman Machine Configuration"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Optimal settings for Mac development:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'# ~/.config/containers/containers.conf\n[containers]\nnetns="host"\nuserns="host"\nipcns="host"\nutsns="host"\ncgroupns="host"\ncgroups="disabled"\nlog_driver = "k8s-file"\npids_limit = 2048\n\n[engine]\ncgroup_manager = "cgroupfs"\nevents_logger = "file"\nruntime = "crun"  # Faster than runc\n\n[network]\nnetwork_backend = "netavark"  # Faster than CNI\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"VM resource allocation:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# For 16GB Mac (adjust proportionally)\npodman machine init prism-dev \\\n    --cpus 4 \\\n    --memory 4096 \\\n    --disk-size 50 \\\n    --rootful=false \\\n    --now\n"})}),"\n",(0,r.jsx)(e.h3,{id:"container-build-optimization",children:"Container Build Optimization"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Multi-stage build with caching:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-dockerfile",children:'# Stage 1: Dependencies (cached layer)\nFROM golang:1.21 AS deps\nWORKDIR /app\nCOPY go.mod go.sum ./\nRUN go mod download\n\n# Stage 2: Build\nFROM deps AS builder\nCOPY . .\nRUN CGO_ENABLED=0 go build -ldflags="-s -w" -o plugin ./cmd/server\n\n# Stage 3: Runtime (scratch)\nFROM scratch\nCOPY --from=builder /app/plugin /plugin\nENTRYPOINT ["/plugin"]\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Build cache usage:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# First build: ~60 seconds (downloads deps)\npodman build -t plugin-postgres:latest .\n\n# Subsequent builds: ~5 seconds (cached deps)\n# Only rebuilds if source code changes\npodman build -t plugin-postgres:latest .\n"})}),"\n",(0,r.jsx)(e.h3,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Three-tier testing approach:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'// tests/testing.go\n\n// Tier 1: Instant (in-process)\nfunc NewTestStore(t *testing.T) Store {\n    if testing.Short() {\n        return memstore.NewMemStore()  // <1ms\n    }\n    return newContainerStore(t)\n}\n\n// Tier 2: Fast (embedded)\nfunc newContainerStore(t *testing.T) Store {\n    if useSQLite := os.Getenv("USE_SQLITE"); useSQLite == "true" {\n        db, _ := sql.Open("sqlite3", ":memory:")\n        return sqlite.NewStore(db)  // <50ms\n    }\n    return newRealBackend(t)\n}\n\n// Tier 3: Real (testcontainers)\nfunc newRealBackend(t *testing.T) Store {\n    container := startPostgres(t)  // 3-5 seconds\n    return postgres.NewStore(container.ConnectionString())\n}\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Environment-based control:"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Development: Instant tests only\ngo test -short ./...\n\n# Pre-commit: Include embedded backends\nUSE_SQLITE=true go test ./...\n\n# CI: Full integration with real backends\ngo test -v ./...\n"})}),"\n",(0,r.jsx)(e.h2,{id:"consequences",children:"Consequences"}),"\n",(0,r.jsx)(e.h3,{id:"positive",children:"Positive"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Instant feedback loop"}),": TDD with <1ms test cycles"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"No Docker Desktop dependency"}),": Avoid licensing concerns"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Smaller images"}),": 87% reduction in size (45MB \u2192 6MB)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Faster CI"}),": Parallel unit tests complete in <1 second"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Rootless containers"}),": Better security posture"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Lower resource usage"}),": No Docker daemon overhead"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"negative",children:"Negative"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"VM still required on Mac"}),": Cannot eliminate VM for Linux containers"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Learning curve"}),": Developers must understand podman machine"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Two testing modes"}),": Must maintain both instant and integration paths"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Scratch images"}),": No shell for debugging (must use distroless for debug builds)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Podman maturity"}),": Less ecosystem tooling than Docker"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"mitigations",children:"Mitigations"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Document Podman setup"}),": Add to onboarding guide"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Makefile abstractions"}),": Hide container runtime details"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"CI parity"}),": Use same Podman version locally and in CI"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Debug builds"}),": Provide distroless variant with shell for debugging"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Gradual migration"}),": Start with new plugins, migrate existing over time"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,r.jsx)(e.h3,{id:"alternative-1-keep-docker-desktop",children:"Alternative 1: Keep Docker Desktop"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Familiar to all developers"}),"\n",(0,r.jsx)(e.li,{children:"Mature ecosystem"}),"\n",(0,r.jsx)(e.li,{children:"Good documentation"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Licensing restrictions (enterprise)"}),"\n",(0,r.jsx)(e.li,{children:"Daemon overhead (~2GB RAM)"}),"\n",(0,r.jsx)(e.li,{children:"Slower than Podman"}),"\n",(0,r.jsx)(e.li,{children:"Root-level daemon"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Verdict"}),": \u274c Rejected due to licensing and performance concerns."]}),"\n",(0,r.jsx)(e.h3,{id:"alternative-2-colima-lima-based",children:"Alternative 2: Colima (Lima-based)"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Docker-compatible"}),"\n",(0,r.jsx)(e.li,{children:"Free and open source"}),"\n",(0,r.jsx)(e.li,{children:"Good Mac integration"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Another VM layer (Lima)"}),"\n",(0,r.jsx)(e.li,{children:"Less mature than Podman"}),"\n",(0,r.jsx)(e.li,{children:"Still requires Docker CLI"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Verdict"}),": \u274c Rejected - Podman is more standard."]}),"\n",(0,r.jsx)(e.h3,{id:"alternative-3-native-macos-binaries",children:"Alternative 3: Native macOS Binaries"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"No VM required"}),"\n",(0,r.jsx)(e.li,{children:"True instant startup"}),"\n",(0,r.jsx)(e.li,{children:"Native performance"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Requires cross-compilation"}),"\n",(0,r.jsx)(e.li,{children:"Different from production (Linux)"}),"\n",(0,r.jsx)(e.li,{children:"Not all backends available (no Kafka for Mac ARM)"}),"\n",(0,r.jsx)(e.li,{children:"CI/CD parity issues"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Verdict"}),": \u2705 ",(0,r.jsx)(e.strong,{children:"Use for Tier 1 testing"})," (MemStore, SQLite), but not for all backends."]}),"\n",(0,r.jsx)(e.h3,{id:"alternative-4-remote-development-linux-vm",children:"Alternative 4: Remote Development (Linux VM)"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Pros:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Native Linux environment"}),"\n",(0,r.jsx)(e.li,{children:"No Mac-specific issues"}),"\n",(0,r.jsx)(e.li,{children:"True production parity"}),"\n"]}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Cons:"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Network latency"}),"\n",(0,r.jsx)(e.li,{children:"Requires cloud resources"}),"\n",(0,r.jsx)(e.li,{children:"Complexity for developers"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Verdict"}),": \u274c Rejected - Hurts developer experience."]}),"\n",(0,r.jsx)(e.h2,{id:"implementation-checklist",children:"Implementation Checklist"}),"\n",(0,r.jsxs)(e.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," Install Podman on all developer machines"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," Configure podman machine with optimal settings"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," Update all Dockerfiles to use scratch/distroless"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," Create in-process test variants (MemStore, SQLite)"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," Update Makefile to support both Docker and Podman"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," Document testing tiers in CONTRIBUTING.md"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," Update CI/CD to use Podman"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," Measure and document performance improvements"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," Create onboarding guide for Podman setup"]}),"\n",(0,r.jsxs)(e.li,{className:"task-list-item",children:[(0,r.jsx)(e.input,{type:"checkbox",disabled:!0})," Migrate existing plugins incrementally"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"related-decisions",children:"Related Decisions"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/adr/adr-004",children:"ADR-004: Local-First Testing"})," - Testing philosophy"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/adr/adr-026",children:"ADR-026: Distroless Container Images"})," - Container security"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/memos/memo-004",children:"MEMO-004: Backend Plugin Implementation Guide"})," - MemStore for instant testing"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"references",children:"References"}),"\n",(0,r.jsx)(e.h3,{id:"podman-documentation",children:"Podman Documentation"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://podman.io/getting-started/installation#macos",children:"Podman on macOS"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://docs.podman.io/en/latest/markdown/podman-machine.1.html",children:"Podman Machine"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/containers/podman/blob/main/docs/tutorials/rootless_tutorial.md",children:"Rootless Containers"})}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"container-optimization",children:"Container Optimization"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://github.com/GoogleContainerTools/distroless",children:"Distroless Images"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://docs.docker.com/build/building/multi-stage/",children:"Multi-stage Builds"})}),"\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"https://blog.filippo.io/shrinking-go-binaries/",children:"Go Binary Size Reduction"})}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"microvms",children:"MicroVMs"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://firecracker-microvm.github.io/",children:"Firecracker"})," (Linux only)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"https://github.com/lima-vm/lima",children:"Lima"})," (Mac VM manager)"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"2025-10-09: Initial decision for Podman adoption and container optimization strategy"}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},28453:(n,e,s)=>{s.d(e,{R:()=>l,x:()=>d});var i=s(96540);const r={},t=i.createContext(r);function l(n){const e=i.useContext(t);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function d(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:l(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);