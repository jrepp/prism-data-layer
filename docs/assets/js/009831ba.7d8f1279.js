"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[6763],{28453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var t=r(96540);const o={},i=t.createContext(o);function l(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),t.createElement(i.Provider,{value:n},e.children)}},67665:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>l,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"adr-017","title":"Go Structured Logging with slog","description":"Context","source":"@site/../docs-cms/adr/adr-017-go-structured-logging.md","sourceDirName":".","slug":"/adr-017","permalink":"/prism-data-layer/adr/adr-017","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-017-go-structured-logging.md","tags":[{"inline":true,"label":"go","permalink":"/prism-data-layer/adr/tags/go"},{"inline":true,"label":"logging","permalink":"/prism-data-layer/adr/tags/logging"},{"inline":true,"label":"observability","permalink":"/prism-data-layer/adr/tags/observability"},{"inline":true,"label":"debugging","permalink":"/prism-data-layer/adr/tags/debugging"}],"version":"current","frontMatter":{"date":"2025-10-07T00:00:00.000Z","deciders":"Core Team","doc_uuid":"b2630de5-e8f1-47d7-a639-53edaa255cb7","id":"adr-017","project_id":"prism-data-layer","status":"Accepted","tags":["go","logging","observability","debugging"],"title":"Go Structured Logging with slog"},"sidebar":"adrSidebar","previous":{"title":"Go CLI and Configuration Management \u2022 ADR-016","permalink":"/prism-data-layer/adr/adr-016"},"next":{"title":"Rust Error Handling Strategy \u2022 ADR-018","permalink":"/prism-data-layer/adr/adr-018"}}');var o=r(74848),i=r(28453);const l={date:new Date("2025-10-07T00:00:00.000Z"),deciders:"Core Team",doc_uuid:"b2630de5-e8f1-47d7-a639-53edaa255cb7",id:"adr-017",project_id:"prism-data-layer",status:"Accepted",tags:["go","logging","observability","debugging"],title:"Go Structured Logging with slog"},a=void 0,s={},d=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why slog (Go 1.21+ Standard Library)",id:"why-slog-go-121-standard-library",level:3},{value:"Why NOT zap or logrus?",id:"why-not-zap-or-logrus",level:3},{value:"Context Propagation Pattern",id:"context-propagation-pattern",level:3},{value:"Logging Schema",id:"logging-schema",level:2},{value:"Log Levels",id:"log-levels",level:3},{value:"Standard Fields (always present)",id:"standard-fields-always-present",level:3},{value:"Contextual Fields (operation-specific)",id:"contextual-fields-operation-specific",level:3},{value:"Error Fields",id:"error-fields",level:3},{value:"Implementation Pattern",id:"implementation-pattern",level:2},{value:"Package Structure",id:"package-structure",level:3}];function g(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,o.jsx)(n.p,{children:"Go tooling requires production-grade logging with:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Structured fields for machine parsing"}),"\n",(0,o.jsx)(n.li,{children:"Context propagation through call stacks"}),"\n",(0,o.jsx)(n.li,{children:"High performance (minimal overhead)"}),"\n",(0,o.jsx)(n.li,{children:"Integration with observability systems"}),"\n",(0,o.jsx)(n.li,{children:"Standard library compatibility"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.strong,{children:"slog"})," (Go standard library) for structured logging with context management."]}),"\n",(0,o.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,o.jsx)(n.h3,{id:"why-slog-go-121-standard-library",children:"Why slog (Go 1.21+ Standard Library)"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Standard Library"}),": No external dependency, guaranteed compatibility"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Performance"}),": Designed for high-throughput logging"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Structured by Default"}),": Key-value pairs, not string formatting"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Context Integration"}),": First-class ",(0,o.jsx)(n.code,{children:"context.Context"})," support"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Handlers"}),": JSON, Text, and custom handlers"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Levels"}),": Debug, Info, Warn, Error"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Attributes"}),": Rich type support (string, int, bool, time, error, etc.)"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"why-not-zap-or-logrus",children:"Why NOT zap or logrus?"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"zap"}),": Excellent performance, but slog is now in stdlib with comparable speed"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"logrus"}),": Mature but slower, maintenance mode, superseded by slog"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"zerolog"}),": Fast but non-standard API, less idiomatic"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"context-propagation-pattern",children:"Context Propagation Pattern"}),"\n",(0,o.jsx)(n.p,{children:"Logging flows through context to maintain operation correlation:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// Add logger to context\nctx := log.WithContext(ctx, logger.With("operation", "migrate", "namespace", ns))\n\n// Extract logger from context\nlogger := log.FromContext(ctx)\nlogger.Info("starting migration")\n'})}),"\n",(0,o.jsx)(n.h2,{id:"logging-schema",children:"Logging Schema"}),"\n",(0,o.jsx)(n.h3,{id:"log-levels",children:"Log Levels"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Debug"}),": Detailed diagnostic information (disabled in production)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Info"}),": General informational messages (normal operations)"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Warn"}),": Warning conditions that don't prevent operation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Error"}),": Error conditions that prevent specific operation"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"standard-fields-always-present",children:"Standard Fields (always present)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "time": "2025-10-07T12:00:00Z",\n  "level": "info",\n  "msg": "migration completed",\n  "service": "prism-migrate",\n  "version": "1.0.0"\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"contextual-fields-operation-specific",children:"Contextual Fields (operation-specific)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "time": "2025-10-07T12:00:00Z",\n  "level": "info",\n  "msg": "migration completed",\n  "service": "prism-migrate",\n  "version": "1.0.0",\n  "namespace": "production",\n  "operation": "migrate",\n  "rows_migrated": 15234,\n  "duration_ms": 5230,\n  "workers": 8\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"error-fields",children:"Error Fields"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "time": "2025-10-07T12:00:00Z",\n  "level": "error",\n  "msg": "migration failed",\n  "service": "prism-migrate",\n  "error": "backend unavailable",\n  "error_type": "ErrBackendUnavailable",\n  "namespace": "production",\n  "retry_count": 3\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"implementation-pattern",children:"Implementation Pattern"}),"\n",(0,o.jsx)(n.h3,{id:"package-structure",children:"Package Structure"}),"\n",(0,o.jsx)(n.p,{children:"tools/internal/\nlog/\nlog.go           # slog wrapper with context helpers\ncontext.go       # Context management\nlog_test.go      # Tests"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"\n### Core API\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"package log"}),"\n",(0,o.jsx)(n.p,{children:'import (\n"context"\n"log/slog"\n"os"\n)'}),"\n",(0,o.jsx)(n.p,{children:"var global *slog.Logger"}),"\n",(0,o.jsx)(n.p,{children:"// Init initializes the global logger\nfunc Init(level slog.Level, format string) error {\nvar handler slog.Handler"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'switch format {\ncase "json":\n    handler = slog.NewJSONHandler(os.Stderr, &slog.HandlerOptions{\n        Level:     level,\n        AddSource: level == slog.LevelDebug,\n    })\ncase "text":\n    handler = slog.NewTextHandler(os.Stderr, &slog.HandlerOptions{\n        Level:     level,\n        AddSource: level == slog.LevelDebug,\n    })\ndefault:\n    return fmt.Errorf("unknown log format: %s", format)\n}\n\n// Add service metadata\nhandler = withServiceMetadata(handler)\n\nglobal = slog.New(handler)\nslog.SetDefault(global)\n\nreturn nil\n'})}),"\n",(0,o.jsx)(n.p,{children:"}"}),"\n",(0,o.jsx)(n.p,{children:"// WithContext adds logger to context\nfunc WithContext(ctx context.Context, logger *slog.Logger) context.Context {\nreturn context.WithValue(ctx, loggerKey{}, logger)\n}"}),"\n",(0,o.jsx)(n.p,{children:"// FromContext extracts logger from context (or returns default)\nfunc FromContext(ctx context.Context) *slog.Logger {\nif logger, ok := ctx.Value(loggerKey{}).(*slog.Logger); ok {\nreturn logger\n}\nreturn slog.Default()\n}"}),"\n",(0,o.jsx)(n.p,{children:"// With adds fields to logger in context\nfunc With(ctx context.Context, args ...any) context.Context {\nlogger := FromContext(ctx).With(args...)\nreturn WithContext(ctx, logger)\n}"}),"\n",(0,o.jsx)(n.p,{children:"type loggerKey struct{}"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"\n### Usage Examples\n\n"})}),"\n",(0,o.jsx)(n.p,{children:'// Initialize at startup\nif err := log.Init(slog.LevelInfo, "json"); err != nil {\npanic(err)\n}'}),"\n",(0,o.jsx)(n.p,{children:'// Add operation context\nctx := log.WithContext(ctx, slog.Default().With(\n"operation", "migrate",\n"namespace", namespace,\n))'}),"\n",(0,o.jsx)(n.p,{children:'// Log with context\nlogger := log.FromContext(ctx)\nlogger.Info("starting migration")'}),"\n",(0,o.jsx)(n.p,{children:'// Add more fields\nctx = log.With(ctx, "rows", count)\nlog.FromContext(ctx).Info("migrated rows")'}),"\n",(0,o.jsx)(n.p,{children:'// Error logging\nlogger.Error("migration failed",\n"error", err,\n"namespace", namespace,\n"retry", retry,\n)'}),"\n",(0,o.jsx)(n.p,{children:'// Debug logging (only in debug mode)\nlogger.Debug("worker started",\n"worker_id", workerID,\n"queue_size", queueSize,\n)'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"\n### Performance-Critical Paths\n\nFor hot paths, use conditional logging:\n\n"})}),"\n",(0,o.jsx)(n.p,{children:'if logger.Enabled(ctx, slog.LevelDebug) {\nlogger.DebugContext(ctx, "processing item",\n"item_id", id,\n"batch", batchNum,\n)\n}'}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"\n### Testing Pattern\n\n"})}),"\n",(0,o.jsx)(n.p,{children:"// Custom handler for testing\ntype TestHandler struct {\nlogs []slog.Record\nmu   sync.Mutex\n}"}),"\n",(0,o.jsx)(n.p,{children:"func (h *TestHandler) Handle(ctx context.Context, r slog.Record) error {\nh.mu.Lock()\ndefer h.mu.Unlock()\nh.logs = append(h.logs, r)\nreturn nil\n}"}),"\n",(0,o.jsx)(n.p,{children:"// Test example\nfunc TestMigrate_Logging(t *testing.T) {\nhandler := &TestHandler{}\nlogger := slog.New(handler)\nctx := log.WithContext(context.Background(), logger)"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:'// Code that logs\nmigrate(ctx, "test-namespace")\n\n// Assert logs\nif len(handler.logs) < 1 {\n    t.Error("expected at least 1 log entry")\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"}"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-text",children:"\n## Logging Guidelines\n\n### DO:\n- Use structured fields, not string formatting\n- Pass context through call stack\n- Log errors with context (namespace, operation, etc.)\n- Use appropriate log levels\n- Include duration for operations\n- Log at service boundaries (start/end of major operations)\n\n### DON'T:\n- Log in tight loops\n- Log sensitive data (credentials, PII)\n- Use global logger (use context instead)\n- Format strings with %v (use structured fields)\n- Log at Info level for internal function calls\n\n## Log Level Guidelines\n\n### Debug\n- Internal function entry/exit\n- Variable values during debugging\n- Detailed state information\n- **Disabled in production**\n\n### Info\n- Service start/stop\n- Major operation start/complete\n- Configuration loaded\n- Summary statistics\n\n### Warn\n- Degraded performance\n- Retryable errors\n- Non-fatal issues\n\n### Error\n- Failed operations\n- Unrecoverable errors\n- Connection failures\n\n## Consequences\n\n### Positive\n\n- Zero external dependencies (stdlib)\n- Excellent performance\n- First-class context support\n- Structured logging enforced by API\n- Easy testing with custom handlers\n- Future-proof (Go stdlib commitment)\n\n### Negative\n\n- slog is relatively new (Go 1.21+)\n- Basic functionality (no log rotation, sampling, etc.)\n\n### Mitigations\n\n- Require Go 1.25 (already planned)\n- Use external tools for log aggregation (Fluentd, Logstash)\n\n## References\n\n- [slog Documentation](https://pkg.go.dev/log/slog)\n- [slog Design Proposal](https://go.googlesource.com/proposal/+/master/design/56345-structured-logging.md)\n- ADR-012: Go for Tooling\n- ADR-008: Observability Strategy\n- org-stream-producer ADR-011: Structured Logging\n\n## Revision History\n\n- 2025-10-07: Initial draft and acceptance (adapted from org-stream-producer)\n\n"})})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(g,{...e})}):g(e)}}}]);