"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[5377],{2339:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"go-testing-strategy","title":"ADR-015: Go Testing Strategy","description":"Context","source":"@site/../docs-cms/adr/015-go-testing-strategy.md","sourceDirName":".","slug":"/go-testing-strategy","permalink":"/prism-data-layer/adr/go-testing-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/015-go-testing-strategy.md","tags":[{"inline":true,"label":"go","permalink":"/prism-data-layer/adr/tags/go"},{"inline":true,"label":"testing","permalink":"/prism-data-layer/adr/tags/testing"},{"inline":true,"label":"quality","permalink":"/prism-data-layer/adr/tags/quality"},{"inline":true,"label":"ci-cd","permalink":"/prism-data-layer/adr/tags/ci-cd"}],"version":"current","sidebarPosition":15,"frontMatter":{"title":"ADR-015: Go Testing Strategy","status":"Accepted","date":"2025-10-07T00:00:00.000Z","deciders":"Core Team","tags":["go","testing","quality","ci-cd"]},"sidebar":"adrSidebar","previous":{"title":"ADR-014: Go Concurrency Patterns","permalink":"/prism-data-layer/adr/go-concurrency-patterns"},"next":{"title":"ADR-016: Go CLI and Configuration Management","permalink":"/prism-data-layer/adr/go-cli-configuration"}}');var r=t(4848),s=t(8453);const o={title:"ADR-015: Go Testing Strategy",status:"Accepted",date:new Date("2025-10-07T00:00:00.000Z"),deciders:"Core Team",tags:["go","testing","quality","ci-cd"]},a=void 0,l={},c=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Coverage Requirements",id:"coverage-requirements",level:3},{value:"Rationale",id:"rationale",level:2},{value:"Testing Tiers",id:"testing-tiers",level:3},{value:"Tier 1: Unit Tests",id:"tier-1-unit-tests",level:4},{value:"Tier 2: Integration Tests",id:"tier-2-integration-tests",level:4},{value:"Tier 3: End-to-End Tests",id:"tier-3-end-to-end-tests",level:4},{value:"Test Harness for Proxy Integration",id:"test-harness-for-proxy-integration",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Directory Structure",id:"directory-structure",level:3},{value:"Running Tests",id:"running-tests",level:3},{value:"CI Configuration",id:"ci-configuration",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(n.p,{children:"We need a comprehensive testing strategy for Go tooling that:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ensures correctness at multiple levels"}),"\n",(0,r.jsx)(n.li,{children:"Maintains 80%+ code coverage"}),"\n",(0,r.jsx)(n.li,{children:"Supports rapid development"}),"\n",(0,r.jsx)(n.li,{children:"Catches regressions early"}),"\n",(0,r.jsx)(n.li,{children:"Validates integration points with Prism proxy"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Testing pyramid: Unit tests (base) \u2192 Integration tests \u2192 E2E tests (top)"}),"\n",(0,r.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsxs)(n.p,{children:["Implement ",(0,r.jsx)(n.strong,{children:"three-tier testing strategy"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unit Tests"}),": Package-level, test individual functions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Integration Tests"}),": Test package interactions and proxy integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"E2E Tests"}),": Validate full CLI workflows with real backends"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"coverage-requirements",children:"Coverage Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Minimum"}),": 80% per package (CI enforced)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Target"}),": 90%+ for critical packages (",(0,r.jsx)(n.code,{children:"internal/config"}),", ",(0,r.jsx)(n.code,{children:"internal/migrate"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"New code"}),": 100% coverage required"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,r.jsx)(n.h3,{id:"testing-tiers",children:"Testing Tiers"}),"\n",(0,r.jsx)(n.h4,{id:"tier-1-unit-tests",children:"Tier 1: Unit Tests"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Scope"}),": Individual functions and types within a package"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"*_test.go"})," files alongside source"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pattern"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package config\n\nimport "testing"\n\nfunc TestValidateConfig_Valid(t *testing.T) {\n    cfg := &Config{\n        Namespace: "test",\n        Backend:   "postgres",\n    }\n    if err := ValidateConfig(cfg); err != nil {\n        t.Fatalf("ValidateConfig() error = %v", err)\n    }\n}\n\nfunc TestValidateConfig_MissingNamespace(t *testing.T) {\n    cfg := &Config{Backend: "postgres"}\n    err := ValidateConfig(cfg)\n    if !errors.Is(err, ErrInvalidConfig) {\n        t.Errorf("expected ErrInvalidConfig, got %v", err)\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Characteristics"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Fast (milliseconds)"}),"\n",(0,r.jsx)(n.li,{children:"No external dependencies"}),"\n",(0,r.jsx)(n.li,{children:"Use table-driven tests for multiple scenarios"}),"\n",(0,r.jsx)(n.li,{children:"Mock external interfaces"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"tier-2-integration-tests",children:"Tier 2: Integration Tests"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Scope"}),": Package interactions, integration with Prism proxy"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"*_integration_test.go"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pattern"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package migrate_test\n\nimport (\n    "context"\n    "testing"\n\n    "github.com/prism/tools/internal/migrate"\n    "github.com/prism/tools/testutil"\n)\n\nfunc TestMigrate_PostgresToSqlite(t *testing.T) {\n    if testing.Short() {\n        t.Skip("skipping integration test in short mode")\n    }\n\n    // Start test Prism proxy\n    proxy := testutil.StartTestProxy(t, testutil.ProxyConfig{\n        Backends: []string{"postgres", "sqlite"},\n    })\n    defer proxy.Stop()\n\n    // Run migration\n    ctx := context.Background()\n    err := migrate.Run(ctx, migrate.Config{\n        Source: "postgres://localhost/test",\n        Dest:   "sqlite://test.db",\n    })\n    if err != nil {\n        t.Fatalf("migrate.Run() error = %v", err)\n    }\n\n    // Verify data migrated\n    // ...\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"tier-3-end-to-end-tests",children:"Tier 3: End-to-End Tests"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Scope"}),": Full CLI workflows with real Prism proxy"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Location"}),": ",(0,r.jsx)(n.code,{children:"cmd/*/e2e_test.go"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pattern"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package main_test\n\nimport (\n    "bytes"\n    "os/exec"\n    "testing"\n)\n\nfunc TestCLI_Get_E2E(t *testing.T) {\n    if testing.Short() {\n        t.Skip("skipping e2e test in short mode")\n    }\n\n    // Run prism-cli binary\n    cmd := exec.Command("./bin/prism-cli", "get", "test", "user123", "profile")\n    var stdout, stderr bytes.Buffer\n    cmd.Stdout = &stdout\n    cmd.Stderr = &stderr\n\n    if err := cmd.Run(); err != nil {\n        t.Fatalf("prism-cli failed: %v\\nstderr: %s", err, stderr.String())\n    }\n\n    // Validate output\n    output := stdout.String()\n    if !strings.Contains(output, "value") {\n        t.Errorf("expected value in output, got: %s", output)\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"test-harness-for-proxy-integration",children:"Test Harness for Proxy Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'package testutil\n\nimport (\n    "os"\n    "os/exec"\n    "testing"\n    "time"\n)\n\ntype ProxyConfig struct {\n    Port     int\n    Backends []string\n}\n\ntype TestProxy struct {\n    cmd     *exec.Cmd\n    cleanup func()\n}\n\nfunc (p *TestProxy) Stop() { p.cleanup() }\n\nfunc StartTestProxy(t *testing.T, cfg ProxyConfig) *TestProxy {\n    t.Helper()\n\n    // Start proxy in background\n    cmd := exec.Command("../proxy/target/release/prism-proxy", "--port", fmt.Sprintf("%d", cfg.Port))\n    if err := cmd.Start(); err != nil {\n        t.Fatal(err)\n    }\n\n    // Wait for proxy to be ready\n    time.Sleep(1 * time.Second)\n\n    return &TestProxy{\n        cmd: cmd,\n        cleanup: func() {\n            cmd.Process.Kill()\n            cmd.Wait()\n        },\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,r.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"High confidence in correctness (three validation levels)"}),"\n",(0,r.jsx)(n.li,{children:"Fast feedback loop (unit tests ~seconds)"}),"\n",(0,r.jsx)(n.li,{children:"Integration tests catch proxy interaction bugs"}),"\n",(0,r.jsx)(n.li,{children:"E2E tests validate production behavior"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"More code to maintain (tests often 2x source code)"}),"\n",(0,r.jsx)(n.li,{children:"Integration tests require Prism proxy running"}),"\n",(0,r.jsx)(n.li,{children:"E2E tests slower (seconds to minutes)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"80%+ coverage requirement enforced in CI"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,r.jsx)(n.h3,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"tools/\n\u251c\u2500\u2500 cmd/\n\u2502   \u251c\u2500\u2500 prism-cli/\n\u2502   \u2502   \u251c\u2500\u2500 main.go\n\u2502   \u2502   \u251c\u2500\u2500 main_test.go       # Unit tests\n\u2502   \u2502   \u2514\u2500\u2500 e2e_test.go        # E2E tests\n\u2502   \u2514\u2500\u2500 prism-migrate/\n\u2502       \u251c\u2500\u2500 main.go\n\u2502       \u2514\u2500\u2500 main_test.go\n\u251c\u2500\u2500 internal/\n\u2502   \u251c\u2500\u2500 config/\n\u2502   \u2502   \u251c\u2500\u2500 config.go\n\u2502   \u2502   \u251c\u2500\u2500 config_test.go\n\u2502   \u2502   \u2514\u2500\u2500 config_integration_test.go\n\u2502   \u2514\u2500\u2500 migrate/\n\u2502       \u251c\u2500\u2500 migrate.go\n\u2502       \u2514\u2500\u2500 migrate_test.go\n\u2514\u2500\u2500 testutil/                   # Test harness\n    \u251c\u2500\u2500 proxy.go\n    \u2514\u2500\u2500 fixtures.go\n"})}),"\n",(0,r.jsx)(n.h3,{id:"running-tests",children:"Running Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Unit tests only (fast)\ngo test ./... -short\n\n# All tests including integration\ngo test ./...\n\n# With coverage\ngo test ./... -coverprofile=coverage.out\ngo tool cover -html=coverage.out\n\n# E2E only\ngo test ./cmd/... -run E2E\n\n# Specific package\ngo test ./internal/migrate -v\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ci-configuration",children:"CI Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/go-test.yml\njobs:\n  test:\n    steps:\n      - name: Unit Tests\n        run: |\n          cd tools\n          go test ./... -short -coverprofile=coverage.out\n\n      - name: Build Proxy (for integration tests)\n        run: |\n          cd proxy\n          cargo build --release\n\n      - name: Integration Tests\n        run: |\n          cd tools\n          go test ./...\n\n      - name: Coverage Check\n        run: |\n          go tool cover -func=coverage.out | grep total | \\\n          awk '{if ($3 < 80.0) {print \"Coverage below 80%\"; exit 1}}'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://go.dev/doc/tutorial/add-a-test",children:"Go Testing Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://go.dev/wiki/TableDrivenTests",children:"Table Driven Tests in Go"})}),"\n",(0,r.jsx)(n.li,{children:"ADR-012: Go for Tooling"}),"\n",(0,r.jsx)(n.li,{children:"ADR-014: Go Concurrency Patterns"}),"\n",(0,r.jsx)(n.li,{children:"org-stream-producer ADR-007: Testing Strategy"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2025-10-07: Initial draft and acceptance (adapted from org-stream-producer)"}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);