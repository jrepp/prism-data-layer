"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[3748],{7272:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"local-first-testing","title":"ADR-004: Local-First Testing Strategy","description":"Context","source":"@site/../docs-cms/adr/004-local-first-testing.md","sourceDirName":".","slug":"/local-first-testing","permalink":"/prism-data-layer/adr/local-first-testing","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/004-local-first-testing.md","tags":[{"inline":true,"label":"testing","permalink":"/prism-data-layer/adr/tags/testing"},{"inline":true,"label":"dx","permalink":"/prism-data-layer/adr/tags/dx"},{"inline":true,"label":"reliability","permalink":"/prism-data-layer/adr/tags/reliability"}],"version":"current","sidebarPosition":4,"frontMatter":{"title":"ADR-004: Local-First Testing Strategy","status":"Accepted","date":"2025-10-05T00:00:00.000Z","deciders":"Core Team","tags":["testing","dx","reliability"]},"sidebar":"adrSidebar","previous":{"title":"ADR-003: Protobuf as Single Source of Truth","permalink":"/prism-data-layer/adr/protobuf-single-source-of-truth"},"next":{"title":"ADR-005: Backend Plugin Architecture","permalink":"/prism-data-layer/adr/backend-plugin-architecture"}}');var i=s(4848),r=s(8453);const l={title:"ADR-004: Local-First Testing Strategy",status:"Accepted",date:new Date("2025-10-05T00:00:00.000Z"),deciders:"Core Team",tags:["testing","dx","reliability"]},o=void 0,a={},c=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Principles",id:"principles",level:3},{value:"Architecture",id:"architecture",level:3},{value:"Local Stack Configuration",id:"local-stack-configuration",level:3},{value:"Python Tooling",id:"python-tooling",level:3},{value:"Test Structure",id:"test-structure",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Optimizations for Speed",id:"optimizations-for-speed",level:3},{value:"CI Configuration",id:"ci-configuration",level:3},{value:"Developer Workflow",id:"developer-workflow",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsx)(n.p,{children:"Testing data infrastructure is challenging:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Traditional approach"}),": Use mocks/fakes for unit tests, real databases for integration tests"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problems with mocks"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Don't catch integration bugs"}),"\n",(0,i.jsx)(n.li,{children:"Drift from real behavior"}),"\n",(0,i.jsx)(n.li,{children:"Give false confidence"}),"\n",(0,i.jsx)(n.li,{children:"Don't test performance characteristics"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problems with cloud-only testing"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Slow feedback loop (deploy to test)"}),"\n",(0,i.jsx)(n.li,{children:"Expensive (running test infra 24/7)"}),"\n",(0,i.jsx)(n.li,{children:"Complex setup (VPNs, credentials, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Hard to reproduce CI failures locally"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": How do we test Prism thoroughly while maintaining fast iteration and developer happiness?"]}),"\n",(0,i.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,i.jsxs)(n.p,{children:["Adopt a ",(0,i.jsx)(n.strong,{children:"local-first testing strategy"}),": All backends must support running locally with Docker Compose. Prioritize real local backends over mocks. Use the same test suite locally and in CI."]}),"\n",(0,i.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,i.jsx)(n.h3,{id:"principles",children:"Principles"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Real > Fake"}),": Use actual databases (sqlite, postgres, kafka) instead of mocks"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Local > Cloud"}),": Developers can run full stack on laptop"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast > Slow"}),": Optimize for sub-second test execution"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simple > Complex"}),": Minimal setup; works out of the box"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Developer Laptop\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Tests (Rust, Python)                  \u2502\n\u2502         \u2193 \u2193 \u2193                          \u2502\n\u2502  Prism Proxy (Rust)                    \u2502\n\u2502         \u2193 \u2193 \u2193                          \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502 Docker Compose                   \u2502  \u2502\n\u2502  \u2502  \u2022 PostgreSQL (in-memory mode)   \u2502  \u2502\n\u2502  \u2502  \u2022 Kafka (kraft, single broker)  \u2502  \u2502\n\u2502  \u2502  \u2022 NATS (embedded mode)          \u2502  \u2502\n\u2502  \u2502  \u2022 SQLite (file://local.db)      \u2502  \u2502\n\u2502  \u2502  \u2022 Neptune (localstack)          \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"local-stack-configuration",children:"Local Stack Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.test.yml\nversion: \'3.9\'\n\nservices:\n  postgres:\n    image: postgres:16-alpine\n    environment:\n      POSTGRES_DB: prism_test\n      POSTGRES_USER: prism\n      POSTGRES_PASSWORD: prism_test_password\n    command:\n      - postgres\n      - -c\n      - fsync=off              # Faster for tests\n      - -c\n      - full_page_writes=off\n      - -c\n      - synchronous_commit=off\n    tmpfs:\n      - /var/lib/postgresql/data  # In-memory for speed\n    ports:\n      - "5432:5432"\n    healthcheck:\n      test: ["CMD-SHELL", "pg_isready -U prism"]\n      interval: 1s\n      timeout: 1s\n      retries: 30\n\n  kafka:\n    image: apache/kafka:latest\n    environment:\n      KAFKA_NODE_ID: 1\n      KAFKA_PROCESS_ROLES: broker,controller\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093\n      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092\n      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER\n      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093\n      # Fast for tests\n      KAFKA_LOG_FLUSH_INTERVAL_MESSAGES: 1\n      KAFKA_LOG_FLUSH_INTERVAL_MS: 10\n    ports:\n      - "9092:9092"\n    healthcheck:\n      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092"]\n      interval: 1s\n      timeout: 1s\n      retries: 30\n\n  nats:\n    image: nats:alpine\n    command: ["-js", "-m", "8222"]  # Enable JetStream and monitoring\n    ports:\n      - "4222:4222"  # Client port\n      - "8222:8222"  # Monitoring port\n    healthcheck:\n      test: ["CMD-SHELL", "wget -q --spider http://localhost:8222/healthz"]\n      interval: 1s\n      timeout: 1s\n      retries: 10\n\n  # AWS Neptune compatible (for local graph testing)\n  neptune:\n    image: localstack/localstack:latest\n    environment:\n      SERVICES: neptune\n      DEBUG: 1\n    ports:\n      - "8182:8182"\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n'})}),"\n",(0,i.jsx)(n.h3,{id:"python-tooling",children:"Python Tooling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# tooling/test/local_stack.py\n\nimport subprocess\nimport time\nfrom dataclasses import dataclass\n\n@dataclass\nclass Backend:\n    name: str\n    port: int\n    healthcheck: callable\n\nclass LocalStack:\n    """Manage local test infrastructure."""\n\n    def __init__(self):\n        self.backends = [\n            Backend("postgres", 5432, self._check_postgres),\n            Backend("kafka", 9092, self._check_kafka),\n            Backend("nats", 4222, self._check_nats),\n        ]\n\n    def up(self, wait: bool = True):\n        """Start all backend services."""\n        subprocess.run([\n            "docker", "compose",\n            "-f", "docker-compose.test.yml",\n            "up", "-d"\n        ], check=True)\n\n        if wait:\n            self.wait_healthy()\n\n    def down(self):\n        """Stop and remove all services."""\n        subprocess.run([\n            "docker", "compose",\n            "-f", "docker-compose.test.yml",\n            "down", "-v"  # Remove volumes\n        ], check=True)\n\n    def wait_healthy(self, timeout: int = 60):\n        """Wait for all services to be healthy."""\n        start = time.time()\n        while time.time() - start < timeout:\n            if all(b.healthcheck() for b in self.backends):\n                print("\u2713 All services healthy")\n                return\n            time.sleep(0.5)\n        raise TimeoutError("Services failed to become healthy")\n\n    def reset(self):\n        """Reset all data (for test isolation)."""\n        # Truncate all tables, delete all Kafka topics, etc.\n        pass\n\n# CLI\nif __name__ == "__main__":\n    import argparse\n    parser = argparse.ArgumentParser()\n    parser.add_argument("command", choices=["up", "down", "reset"])\n    args = parser.parse_args()\n\n    stack = LocalStack()\n    if args.command == "up":\n        stack.up()\n    elif args.command == "down":\n        stack.down()\n    elif args.command == "reset":\n        stack.reset()\n'})}),"\n",(0,i.jsx)(n.h3,{id:"test-structure",children:"Test Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// proxy/tests/integration/keyvalue_test.rs\n\nuse prism_proxy::*;\nuse testcontainers::*; // Fallback if Docker Compose not available\n\n#[tokio::test]\nasync fn test_keyvalue_postgres() {\n    // Uses real Postgres from docker-compose.test.yml\n    let mut proxy = TestProxy::new(Backend::Postgres).await;\n\n    // Write data\n    proxy.put("user:123", b"Alice").await.unwrap();\n\n    // Read it back\n    let value = proxy.get("user:123").await.unwrap();\n    assert_eq!(value, b"Alice");\n\n    // Verify it\'s actually in Postgres\n    let row: (String,) = sqlx::query_as("SELECT value FROM kv WHERE key = $1")\n        .bind("user:123")\n        .fetch_one(&proxy.postgres_pool())\n        .await\n        .unwrap();\n    assert_eq!(row.0, "Alice");\n}\n\n#[tokio::test]\nasync fn test_keyvalue_kafka() {\n    let mut proxy = TestProxy::new(Backend::Kafka).await;\n\n    // Same API, different backend\n    proxy.put("event:456", b"Login").await.unwrap();\n\n    let value = proxy.get("event:456").await.unwrap();\n    assert_eq!(value, b"Login");\n\n    // Verify it\'s actually in Kafka\n    // ... Kafka consumer check ...\n}\n\n// Load test\n#[tokio::test]\n#[ignore]  // Run explicitly with: cargo test --ignored\nasync fn load_test_keyvalue_writes() {\n    let proxy = TestProxy::new(Backend::Postgres).await;\n\n    let start = std::time::Instant::now();\n    let tasks: Vec<_> = (0..1000)\n        .map(|i| {\n            let mut proxy = proxy.clone();\n            tokio::spawn(async move {\n                proxy.put(&format!("key:{}", i), b"value").await.unwrap();\n            })\n        })\n        .collect();\n\n    futures::future::join_all(tasks).await;\n\n    let elapsed = start.elapsed();\n    let throughput = 1000.0 / elapsed.as_secs_f64();\n\n    println!("Throughput: {:.0} writes/sec", throughput);\n    println!("Latency: {:.2}ms per write", elapsed.as_secs_f64() / 1000.0 * 1000.0);\n\n    assert!(throughput > 500.0, "Throughput too low: {}", throughput);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Mock All The Things"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Pros:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fast tests"}),"\n",(0,i.jsx)(n.li,{children:"No external dependencies"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Cons:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Doesn't catch integration bugs"}),"\n",(0,i.jsx)(n.li,{children:"Mocks drift from reality"}),"\n",(0,i.jsx)(n.li,{children:"More code to maintain (mocks)"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Rejected because: Low confidence in test results"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cloud-Only Testing"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Pros:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests production environment"}),"\n",(0,i.jsx)(n.li,{children:"No local setup"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Cons:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Slow feedback (minutes, not seconds)"}),"\n",(0,i.jsx)(n.li,{children:"Expensive"}),"\n",(0,i.jsx)(n.li,{children:"Can't debug locally"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Rejected because: Poor developer experience"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"In-Memory Fakes"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Pros:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Faster than real databases"}),"\n",(0,i.jsx)(n.li,{children:"No Docker required"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Cons:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Subtle behavior differences"}),"\n",(0,i.jsx)(n.li,{children:"Don't test performance"}),"\n",(0,i.jsx)(n.li,{children:"Still not the real thing"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Rejected because: Real backends with optimization are fast enough"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Testcontainers Only"})," (no Docker Compose)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Pros:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Programmatic container management"}),"\n",(0,i.jsx)(n.li,{children:"Good for isolated tests"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Cons:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Slower startup per test"}),"\n",(0,i.jsx)(n.li,{children:"Harder to reuse containers"}),"\n",(0,i.jsx)(n.li,{children:"No standard docker-compose.yml for docs"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Rejected because: Docker Compose is simpler; can use testcontainers as fallback"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,i.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"High Confidence"}),": Tests use real backends, catch real bugs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast Feedback"}),": Full test suite runs in ",(0,i.jsx)(n.code,{children:"<1 minute"})," locally"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Easy Debugging"}),": Reproduce any test failure on laptop"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance Testing"}),": Load tests use same local infrastructure"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation"}),": docker-compose.yml shows how to run Prism"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Requires Docker"}),": Developers must install Docker","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Mitigation"}),": Docker is ubiquitous; provide install instructions"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Slower Than Mocks"}),": Real databases have overhead","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Mitigation"}),": Optimize with in-memory modes, tmpfs"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"More Complex Setup"}),": docker-compose.yml to maintain","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Mitigation"}),": Tooling abstracts complexity; ",(0,i.jsx)(n.code,{children:"python -m tooling.test.local-stack up"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Not Production-Identical"}),": Local postgres \u2260 AWS RDS","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use same software version; accept minor differences"}),"\n",(0,i.jsx)(n.li,{children:"Run subset of tests against staging/prod"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resource Usage"}),": Running backends uses CPU/memory","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Modern laptops handle it fine"}),"\n",(0,i.jsx)(n.li,{children:"CI runners sized appropriately"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,i.jsx)(n.h3,{id:"optimizations-for-speed",children:"Optimizations for Speed"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"In-Memory Postgres"}),": Use ",(0,i.jsx)(n.code,{children:"tmpfs"})," for data directory"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Kafka"}),": Single broker, minimal replication"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Connection Pooling"}),": Reuse connections between tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallel Tests"}),": Use ",(0,i.jsx)(n.code,{children:"cargo test --jobs 4"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test Isolation"}),": Each test uses unique namespace (no truncation needed)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"ci-configuration",children:"CI Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/test.yml\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Start local stack\n        run: python -m tooling.test.local-stack up\n\n      - name: Run tests\n        run: cargo test --workspace\n\n      - name: Run load tests\n        run: cargo test --workspace --ignored\n\n      - name: Stop local stack\n        if: always()\n        run: python -m tooling.test.local-stack down\n"})}),"\n",(0,i.jsx)(n.h3,{id:"developer-workflow",children:"Developer Workflow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# One-time setup\ncurl -LsSf https://astral.sh/uv/install.sh | sh\nuv sync\n\n# Start backends (leave running)\npython -m tooling.test.local-stack up\n\n# Run tests (as many times as you want)\ncargo test\ncargo test --ignored  # Load tests\n\n# Stop when done\npython -m tooling.test.local-stack down\n"})}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.testcontainers.org/",children:"Testcontainers"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.docker.com/compose/",children:"Docker Compose"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://martinfowler.com/bliki/IntegrationTest.html",children:"Martin Fowler - Integration Testing"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://testing.googleblog.com/2010/12/test-sizes.html",children:"Google Testing Blog - Test Sizes"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2025-10-05: Initial draft and acceptance"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>o});var t=s(6540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);