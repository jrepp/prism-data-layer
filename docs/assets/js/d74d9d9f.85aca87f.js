"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[48934],{20630:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rfc-032","title":"RFC-032: Minimal Prism Schema Registry for Local Testing","description":"Abstract","source":"@site/../docs-cms/rfcs/RFC-032-minimal-schema-registry-standin.md","sourceDirName":".","slug":"/rfc-032","permalink":"/prism-data-layer/rfc/rfc-032","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/RFC-032-minimal-schema-registry-standin.md","tags":[{"inline":true,"label":"testing","permalink":"/prism-data-layer/rfc/tags/testing"},{"inline":true,"label":"schema-registry","permalink":"/prism-data-layer/rfc/tags/schema-registry"},{"inline":true,"label":"local-development","permalink":"/prism-data-layer/rfc/tags/local-development"},{"inline":true,"label":"acceptance-testing","permalink":"/prism-data-layer/rfc/tags/acceptance-testing"},{"inline":true,"label":"interoperability","permalink":"/prism-data-layer/rfc/tags/interoperability"}],"version":"current","frontMatter":{"title":"RFC-032: Minimal Prism Schema Registry for Local Testing","author":"Platform Team","created":"2025-10-13T00:00:00.000Z","updated":"2025-10-13T00:00:00.000Z","status":"Draft","tags":["testing","schema-registry","local-development","acceptance-testing","interoperability"],"id":"rfc-032","project_id":"prism-data-layer","doc_uuid":"9b8d0a4f-3c26-4e9b-8a7f-5d2b9c0f8e3a"},"sidebar":"rfcSidebar","previous":{"title":"Message Envelope Protocol for Pub/Sub Systems \u2022 RFC-031","permalink":"/prism-data-layer/rfc/rfc-031"},"next":{"title":"Claim Check Pattern for Large Payloads \u2022 RFC-033","permalink":"/prism-data-layer/rfc/rfc-033"}}');var r=s(74848),t=s(28453);const l={title:"RFC-032: Minimal Prism Schema Registry for Local Testing",author:"Platform Team",created:new Date("2025-10-13T00:00:00.000Z"),updated:new Date("2025-10-13T00:00:00.000Z"),status:"Draft",tags:["testing","schema-registry","local-development","acceptance-testing","interoperability"],id:"rfc-032",project_id:"prism-data-layer",doc_uuid:"9b8d0a4f-3c26-4e9b-8a7f-5d2b9c0f8e3a"},c=void 0,a={},d=[{value:"Abstract",id:"abstract",level:2},{value:"Motivation",id:"motivation",level:2},{value:"The Problem: External Dependencies in Tests",id:"the-problem-external-dependencies-in-tests",level:3},{value:"What We Need: Minimal Local Registry",id:"what-we-need-minimal-local-registry",level:3},{value:"Goals",id:"goals",level:2},{value:"Non-Goals",id:"non-goals",level:2},{value:"Proposed Solution: Minimal Prism Schema Registry",id:"proposed-solution-minimal-prism-schema-registry",level:2},{value:"Core Architecture",id:"core-architecture",level:3},{value:"Confluent Schema Registry REST API Compatibility",id:"confluent-schema-registry-rest-api-compatibility",level:3},{value:"Schema Format Support",id:"schema-format-support",level:3},{value:"Compatibility Checking",id:"compatibility-checking",level:3},{value:"Acceptance Test Integration",id:"acceptance-test-integration",level:3},{value:"Interface Coverage: Confluent vs AWS Glue vs Apicurio",id:"interface-coverage-confluent-vs-aws-glue-vs-apicurio",level:3},{value:"Use Cases for Minimal Schema Registry",id:"use-cases-for-minimal-schema-registry",level:3},{value:"Implementation Plan",id:"implementation-plan",level:2},{value:"Phase 1: Core Registry (Week 1)",id:"phase-1-core-registry-week-1",level:3},{value:"Phase 2: Extended Compatibility (Week 2)",id:"phase-2-extended-compatibility-week-2",level:3},{value:"Phase 3: Acceptance Test Integration (Week 3)",id:"phase-3-acceptance-test-integration-week-3",level:3},{value:"Phase 4: Developer Experience (Week 4)",id:"phase-4-developer-experience-week-4",level:3},{value:"Success Criteria",id:"success-criteria",level:2},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,r.jsxs)(n.p,{children:["This RFC defines a ",(0,r.jsx)(n.strong,{children:"minimal Prism Schema Registry"})," as a local stand-in for testing and acceptance tests. It provides a lightweight implementation of the schema registry interface (RFC-030) that:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Runs locally without external dependencies (no Confluent, no Apicurio)"}),"\n",(0,r.jsx)(n.li,{children:"Implements core schema registry operations (register, get, list, validate)"}),"\n",(0,r.jsx)(n.li,{children:"Serves as baseline for acceptance tests across all backend plugins"}),"\n",(0,r.jsx)(n.li,{children:"Provides interface compatibility with Confluent and AWS Glue schema registries"}),"\n",(0,r.jsx)(n.li,{children:"Enables fast developer iteration (<100ms startup, in-memory storage)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["This is ",(0,r.jsx)(n.strong,{children:"not a production schema registry"})," - it's a testing tool for local development and CI/CD."]}),"\n",(0,r.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,r.jsx)(n.h3,{id:"the-problem-external-dependencies-in-tests",children:"The Problem: External Dependencies in Tests"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Current Testing Challenges:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Test requires running Confluent Schema Registry (JVM, 1GB+ memory, 30s startup)\ndocker-compose up schema-registry kafka zookeeper  # 3 services for one test!\n\n# Integration test:\npytest test_schema_validation.py --schema-registry http://localhost:8081\n# \u274c Flaky: Schema registry not ready yet\n# \u274c Slow: 30s startup + 5s per test\n# \u274c Heavy: 1GB+ memory for registry alone\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Problems:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"External Dependency"}),": Tests can't run without Confluent/Apicurio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Slow Startup"}),": 30+ seconds before tests can run"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource Heavy"}),": 1GB+ memory for JVM-based registry"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flaky Tests"}),": Race conditions during startup"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CI/CD Cost"}),": Every test run spawns heavy containers"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"what-we-need-minimal-local-registry",children:"What We Need: Minimal Local Registry"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Ideal test experience:\nprism-schema-registry --port 8081 &  # <100ms startup, <10MB memory\npytest test_schema_validation.py      # Tests run immediately\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 In-memory storage (no persistence needed for tests)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Rust-based (fast, small footprint)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 REST + gRPC APIs (compatible with Confluent clients)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Schema validation (protobuf, JSON Schema)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Compatibility checking (backward, forward, full)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c NOT for production (no HA, no persistence, no auth)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"goals",children:"Goals"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fast Local Testing"}),": <100ms startup, in-memory storage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Acceptance Test Baseline"}),": All plugin tests use same registry"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Interface Compatibility"}),": Drop-in replacement for Confluent Schema Registry REST API"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Schema Format Support"}),": Protobuf, JSON Schema, Avro"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation Coverage"}),": Backward/forward/full compatibility checks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Developer Experience"}),": Single binary, no external dependencies"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"non-goals",children:"Non-Goals"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Production Deployment"}),": Use Confluent/Apicurio for production"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Persistence"}),": In-memory only (tests recreate schemas)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"High Availability"}),": Single instance, no clustering"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Authentication"}),": No auth/authz (local testing only)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-Tenancy"}),": Single global namespace"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"proposed-solution-minimal-prism-schema-registry",children:"Proposed Solution: Minimal Prism Schema Registry"}),"\n",(0,r.jsx)(n.h3,{id:"core-architecture",children:"Core Architecture"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  prism-schema-registry (Rust binary, <10MB)                \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                            \u2502\n\u2502  REST API (Confluent-compatible)                          \u2502\n\u2502  \u251c\u2500 POST /subjects/:subject/versions                      \u2502\n\u2502  \u251c\u2500 GET  /subjects/:subject/versions/:version             \u2502\n\u2502  \u251c\u2500 GET  /subjects/:subject/versions                      \u2502\n\u2502  \u251c\u2500 POST /compatibility/subjects/:subject/versions/:ver   \u2502\n\u2502  \u2514\u2500 DELETE /subjects/:subject/versions/:version           \u2502\n\u2502                                                            \u2502\n\u2502  gRPC API (Prism-native)                                   \u2502\n\u2502  \u251c\u2500 RegisterSchema()                                       \u2502\n\u2502  \u251c\u2500 GetSchema()                                            \u2502\n\u2502  \u251c\u2500 ListSchemas()                                          \u2502\n\u2502  \u2514\u2500 CheckCompatibility()                                   \u2502\n\u2502                                                            \u2502\n\u2502  In-Memory Storage                                         \u2502\n\u2502  \u2514\u2500 HashMap<SubjectVersion, Schema>                       \u2502\n\u2502                                                            \u2502\n\u2502  Schema Validators                                         \u2502\n\u2502  \u251c\u2500 Protobuf (via prost)                                  \u2502\n\u2502  \u251c\u2500 JSON Schema (via jsonschema crate)                    \u2502\n\u2502  \u2514\u2500 Avro (via apache-avro)                                \u2502\n\u2502                                                            \u2502\n\u2502  Compatibility Checker                                     \u2502\n\u2502  \u2514\u2500 Backward/Forward/Full validation logic                \u2502\n\u2502                                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,r.jsx)(n.h3,{id:"confluent-schema-registry-rest-api-compatibility",children:"Confluent Schema Registry REST API Compatibility"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why Confluent API:"})," Most widely adopted, rich client library ecosystem"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Core Endpoints (Subset):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# Register new schema version\nPOST /subjects/{subject}/versions\n{\n  "schema": "{...protobuf IDL...}",\n  "schemaType": "PROTOBUF"\n}\n\u2192 200 OK\n{\n  "id": 1,\n  "version": 1\n}\n\n# Get schema by version\nGET /subjects/{subject}/versions/{version}\n\u2192 200 OK\n{\n  "id": 1,\n  "version": 1,\n  "schema": "{...protobuf IDL...}",\n  "schemaType": "PROTOBUF"\n}\n\n# List all versions for subject\nGET /subjects/{subject}/versions\n\u2192 200 OK\n[1, 2, 3]\n\n# Check compatibility\nPOST /compatibility/subjects/{subject}/versions/{version}\n{\n  "schema": "{...new schema...}",\n  "schemaType": "PROTOBUF"\n}\n\u2192 200 OK\n{\n  "is_compatible": true\n}\n\n# Delete schema version\nDELETE /subjects/{subject}/versions/{version}\n\u2192 200 OK\n1\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Not Implemented (Out of Scope for Minimal Registry):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/config"})," endpoints (global/subject compatibility settings)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/mode"})," endpoints (READONLY, READWRITE modes)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"/schemas/ids/:id"})," (lookup by global schema ID)"]}),"\n",(0,r.jsx)(n.li,{children:"Advanced compatibility modes (TRANSITIVE, NONE_TRANSITIVE)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"schema-format-support",children:"Schema Format Support"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Protobuf (Primary):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use prost_reflect::DescriptorPool;\n\nfn validate_protobuf(schema: &str) -> Result<(), ValidationError> {\n    // Parse protobuf schema\n    let descriptor = DescriptorPool::decode(schema.as_bytes())?;\n\n    // Validate syntax\n    for msg in descriptor.all_messages() {\n        // Check for required fields (backward compat violation)\n        for field in msg.fields() {\n            if field.is_required() {\n                return Err(ValidationError::RequiredField(field.name()));\n            }\n        }\n    }\n\n    Ok(())\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"JSON Schema (Secondary):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use jsonschema::JSONSchema;\n\nfn validate_json_schema(schema: &str) -> Result<(), ValidationError> {\n    let schema_json: serde_json::Value = serde_json::from_str(schema)?;\n    let compiled = JSONSchema::compile(&schema_json)?;\n    Ok(())\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Avro (Tertiary - Basic Support):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:"use apache_avro::Schema as AvroSchema;\n\nfn validate_avro(schema: &str) -> Result<(), ValidationError> {\n    let avro_schema = AvroSchema::parse_str(schema)?;\n    Ok(())\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"compatibility-checking",children:"Compatibility Checking"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Backward Compatibility (Most Common):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'fn check_backward_compatible(old_schema: &Schema, new_schema: &Schema) -> CompatibilityResult {\n    match (old_schema.schema_type, new_schema.schema_type) {\n        (SchemaType::Protobuf, SchemaType::Protobuf) => {\n            check_protobuf_backward(old_schema, new_schema)\n        }\n        _ => CompatibilityResult::Incompatible("Type mismatch")\n    }\n}\n\nfn check_protobuf_backward(old: &Schema, new: &Schema) -> CompatibilityResult {\n    let old_desc = parse_protobuf(&old.content)?;\n    let new_desc = parse_protobuf(&new.content)?;\n\n    // Check rules:\n    // 1. New schema can read old data\n    // 2. Can\'t remove required fields\n    // 3. Can\'t change field types\n    // 4. Can add optional fields\n\n    for old_field in old_desc.fields() {\n        if let Some(new_field) = new_desc.get_field(old_field.number()) {\n            // Field exists in both - check type compatibility\n            if old_field.type_name() != new_field.type_name() {\n                return CompatibilityResult::Incompatible(\n                    format!("Field {} changed type", old_field.name())\n                );\n            }\n        } else {\n            // Field removed - check if it was required\n            if old_field.is_required() {\n                return CompatibilityResult::Incompatible(\n                    format!("Required field {} removed", old_field.name())\n                );\n            }\n        }\n    }\n\n    CompatibilityResult::Compatible\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"acceptance-test-integration",children:"Acceptance Test Integration"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Test Setup (Minimal):"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Test fixture: Start registry before tests\nfunc TestMain(m *testing.M) {\n    // Start minimal registry (in-memory)\n    registry := StartMinimalRegistry(&RegistryConfig{\n        Port: 8081,\n        InMemory: true,\n    })\n    defer registry.Stop()\n\n    // Wait for ready (<100ms)\n    registry.WaitReady(100 * time.Millisecond)\n\n    // Run tests\n    exitCode := m.Run()\n    os.Exit(exitCode)\n}\n\n// Plugin acceptance test\nfunc TestKafkaPluginSchemaValidation(t *testing.T) {\n    // Register schema with minimal registry\n    schemaID := registerSchema(t, "orders.created", orderCreatedProto)\n\n    // Configure Kafka plugin to use minimal registry\n    plugin := NewKafkaPlugin(&KafkaConfig{\n        SchemaRegistry: "http://localhost:8081",\n    })\n\n    // Test: Publish with schema validation\n    err := plugin.Publish(ctx, "orders.created", orderBytes, map[string]string{\n        "schema-id": fmt.Sprint(schemaID),\n    })\n    require.NoError(t, err)\n\n    // Test: Schema compatibility check\n    incompatibleSchema := modifySchema(orderCreatedProto, RemoveRequiredField("order_id"))\n    compat := checkCompatibility(t, "orders.created", incompatibleSchema)\n    assert.False(t, compat.IsCompatible)\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Parallel Test Execution:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Each test gets isolated registry instance (fast startup)\nfunc TestPlugins(t *testing.T) {\n    tests := []struct{\n        name string\n        plugin Plugin\n    }{\n        {"Kafka", NewKafkaPlugin()},\n        {"NATS", NewNATSPlugin()},\n        {"Redis", NewRedisPlugin()},\n    }\n\n    for _, tt := range tests {\n        t.Run(tt.name, func(t *testing.T) {\n            t.Parallel()  // Tests run concurrently\n\n            // Each test gets own registry on random port\n            registry := StartMinimalRegistry(&RegistryConfig{\n                Port: 0,  // Random port\n                InMemory: true,\n            })\n            defer registry.Stop()\n\n            // Configure plugin with test registry\n            tt.plugin.SetSchemaRegistry(registry.URL())\n\n            // Test plugin schema validation\n            testPluginSchemaValidation(t, tt.plugin, registry)\n        })\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"interface-coverage-confluent-vs-aws-glue-vs-apicurio",children:"Interface Coverage: Confluent vs AWS Glue vs Apicurio"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Feature"}),(0,r.jsx)(n.th,{children:"Confluent SR"}),(0,r.jsx)(n.th,{children:"AWS Glue SR"}),(0,r.jsx)(n.th,{children:"Apicurio"}),(0,r.jsx)(n.th,{children:"Prism Minimal"}),(0,r.jsx)(n.th,{children:"Priority"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Register Schema"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"HIGH"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Get Schema"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"HIGH"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"List Versions"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"HIGH"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Delete Schema"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"MEDIUM"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Compatibility Check"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"HIGH"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Subject-based Versioning"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"HIGH"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Global Config"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"LOW"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"READONLY Mode"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"LOW"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Schema References"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u26a0\ufe0f"}),(0,r.jsx)(n.td,{children:"MEDIUM"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Protobuf Support"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"HIGH"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"JSON Schema"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"HIGH"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Avro"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u26a0\ufe0f"}),(0,r.jsx)(n.td,{children:"MEDIUM"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"High Availability"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"N/A (testing)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Authentication"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"N/A (local)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Persistence"})}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"N/A (in-memory)"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Legend:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Fully supported"}),"\n",(0,r.jsx)(n.li,{children:"\u26a0\ufe0f Partial support (basic functionality only)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Not supported (out of scope)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Coverage Target:"})," 80% of Confluent REST API for core operations"]}),"\n",(0,r.jsx)(n.h3,{id:"use-cases-for-minimal-schema-registry",children:"Use Cases for Minimal Schema Registry"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Local Development"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Developer workflow: Start registry in background\nprism-schema-registry --port 8081 &\n\n# Develop against local registry\nprism schema register --file orders.proto --subject orders.created\nprism schema validate --file orders_v2.proto --subject orders.created --check backward\n\n# Run application locally\nmy-app --schema-registry http://localhost:8081\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. CI/CD Pipeline"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# GitHub Actions\njobs:\n  acceptance-tests:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Start minimal schema registry\n        run: |\n          prism-schema-registry --port 8081 &\n          sleep 0.1  # Registry ready in <100ms\n\n      - name: Run acceptance tests\n        run: make test-acceptance\n        env:\n          SCHEMA_REGISTRY_URL: http://localhost:8081\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Plugin Development"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// New backend plugin development\nfunc TestNewPluginSchemaIntegration(t *testing.T) {\n    // Use minimal registry as acceptance test baseline\n    registry := test.StartMinimalRegistry(t)\n\n    // Register test schema\n    schemaID := registry.RegisterSchema("test.topic", testSchema)\n\n    // Test plugin implements schema validation\n    plugin := NewMyPlugin(registry.URL())\n    err := plugin.ValidateSchema(context.Background(), schemaID)\n    assert.NoError(t, err)\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"4. Schema Evolution Testing"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# Test schema compatibility before deploying to production\ndef test_schema_evolution():\n    registry = MinimalSchemaRegistry()\n\n    # Register v1 schema\n    v1_id = registry.register("users", user_v1_schema)\n\n    # Test v2 compatibility\n    compat = registry.check_compatibility("users", user_v2_schema)\n    assert compat.is_compatible, f"Breaking changes: {compat.errors}"\n\n    # Safe to deploy v2\n    v2_id = registry.register("users", user_v2_schema)\n'})}),"\n",(0,r.jsx)(n.h2,{id:"implementation-plan",children:"Implementation Plan"}),"\n",(0,r.jsx)(n.h3,{id:"phase-1-core-registry-week-1",children:"Phase 1: Core Registry (Week 1)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Rust binary with in-memory storage"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Confluent REST API (register, get, list)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Protobuf validation"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Basic compatibility checking"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-2-extended-compatibility-week-2",children:"Phase 2: Extended Compatibility (Week 2)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 JSON Schema support"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Avro support (basic)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Forward/full compatibility modes"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Delete schema endpoint"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-3-acceptance-test-integration-week-3",children:"Phase 3: Acceptance Test Integration (Week 3)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Go test helper library"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 All plugin acceptance tests use minimal registry"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Parallel test support (isolated registries)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-4-developer-experience-week-4",children:"Phase 4: Developer Experience (Week 4)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 CLI wrapper (",(0,r.jsx)(n.code,{children:"prism schema-registry start"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Docker image (distroless, <10MB)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Documentation + examples"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"success-criteria",children:"Success Criteria"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Startup Time"}),": <100ms cold start"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Footprint"}),": <10MB for registry + 100 schemas"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Test Performance"}),": Acceptance tests 50%+ faster than with Confluent"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API Compatibility"}),": 80%+ of Confluent REST API endpoints supported"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Developer Adoption"}),": 100% of new plugin tests use minimal registry"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RFC-030"}),": Schema Evolution and Validation (schema registry requirements)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RFC-031"}),": Message Envelope Protocol (schema context integration)"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.confluent.io/platform/current/schema-registry/develop/api.html",children:"Confluent Schema Registry API"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/glue/latest/dg/schema-registry.html",children:"AWS Glue Schema Registry"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.apicur.io/registry/",children:"Apicurio Registry"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2025-10-13 (v1): Initial draft - Minimal schema registry for local testing and acceptance tests"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var i=s(96540);const r={},t=i.createContext(r);function l(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);