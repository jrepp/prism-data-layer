"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[66790],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(96540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}},47571:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"adr-054","title":"ADR-054: SQLite Storage for prism-admin Local State","description":"Context","source":"@site/../docs-cms/adr/adr-054-prism-admin-sqlite-storage.md","sourceDirName":".","slug":"/adr-054","permalink":"/prism-data-layer/adr/adr-054","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-054-prism-admin-sqlite-storage.md","tags":[{"inline":true,"label":"admin","permalink":"/prism-data-layer/adr/tags/admin"},{"inline":true,"label":"database","permalink":"/prism-data-layer/adr/tags/database"},{"inline":true,"label":"sqlite","permalink":"/prism-data-layer/adr/tags/sqlite"},{"inline":true,"label":"storage","permalink":"/prism-data-layer/adr/tags/storage"},{"inline":true,"label":"cli","permalink":"/prism-data-layer/adr/tags/cli"},{"inline":true,"label":"audit","permalink":"/prism-data-layer/adr/tags/audit"}],"version":"current","frontMatter":{"date":"2025-10-15T00:00:00.000Z","deciders":"Engineering Team","doc_uuid":"8f3c4d2a-9b5e-4f1c-a2d7-3e8f9c1d5b4a","id":"adr-054","project_id":"prism-data-layer","status":"Accepted","tags":["admin","database","sqlite","storage","cli","audit"],"title":"ADR-054: SQLite Storage for prism-admin Local State"},"sidebar":"adrSidebar","previous":{"title":"Claim Check TTL and Garbage Collection \u2022 ADR-053","permalink":"/prism-data-layer/adr/adr-053"},"next":{"title":"Proxy-Admin Control Plane Protocol \u2022 ADR-055","permalink":"/prism-data-layer/adr/adr-055"}}');var r=i(74848),t=i(28453);const a={date:new Date("2025-10-15T00:00:00.000Z"),deciders:"Engineering Team",doc_uuid:"8f3c4d2a-9b5e-4f1c-a2d7-3e8f9c1d5b4a",id:"adr-054",project_id:"prism-data-layer",status:"Accepted",tags:["admin","database","sqlite","storage","cli","audit"],title:"ADR-054: SQLite Storage for prism-admin Local State"},l=void 0,d={},o=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Database Driver Selection",id:"database-driver-selection",level:3},{value:"Default Database Location",id:"default-database-location",level:3},{value:"Migration Strategy",id:"migration-strategy",level:3},{value:"Audit Logging Middleware",id:"audit-logging-middleware",level:3},{value:"Database URN Parsing",id:"database-urn-parsing",level:3},{value:"Audit Log Retention",id:"audit-log-retention",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"prism-admin"})," CLI tool needs to persist operational state including:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Namespaces"}),": Configured namespaces and their settings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Proxy registry"}),": Last known proxies, their health status, and connection information"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pattern registry"}),": Active patterns connected to proxies"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audit log"}),": Complete record of all API interactions with the admin API"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Currently, prism-admin is stateless and relies on querying live proxy instances. This creates issues:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No historical data when proxies are down"}),"\n",(0,r.jsx)(n.li,{children:"No audit trail of administrative actions"}),"\n",(0,r.jsx)(n.li,{children:"Cannot track namespace configuration over time"}),"\n",(0,r.jsx)(n.li,{children:"Difficult to debug past issues"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"We need a lightweight, embedded storage solution that requires zero external dependencies for local development and testing while supporting optional external database URNs for production deployments."}),"\n",(0,r.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsxs)(n.p,{children:["Use SQLite as the default embedded storage backend for prism-admin with support for alternative database URNs via the ",(0,r.jsx)(n.code,{children:"-db"})," flag:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Default: Creates ~/.prism/admin.db\nprism-admin server\n\n# Custom SQLite location\nprism-admin server -db sqlite:///path/to/admin.db\n\n# PostgreSQL for production\nprism-admin server -db postgresql://user:pass@host:5432/prism_admin\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Schema Design:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Namespaces table\nCREATE TABLE namespaces (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    name TEXT NOT NULL UNIQUE,\n    description TEXT,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    metadata JSON\n);\n\n-- Proxies table (last known state)\nCREATE TABLE proxies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    proxy_id TEXT NOT NULL UNIQUE,\n    address TEXT NOT NULL,\n    version TEXT,\n    status TEXT CHECK(status IN ('healthy', 'unhealthy', 'unknown')),\n    last_seen TIMESTAMP,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    metadata JSON\n);\n\n-- Patterns table (active connections)\nCREATE TABLE patterns (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    pattern_id TEXT NOT NULL,\n    pattern_type TEXT NOT NULL,\n    proxy_id TEXT NOT NULL,\n    namespace TEXT NOT NULL,\n    status TEXT CHECK(status IN ('active', 'stopped', 'error')),\n    config JSON,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (proxy_id) REFERENCES proxies(proxy_id),\n    FOREIGN KEY (namespace) REFERENCES namespaces(name)\n);\n\n-- Audit log table\nCREATE TABLE audit_logs (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    user TEXT,\n    action TEXT NOT NULL,\n    resource_type TEXT NOT NULL,\n    resource_id TEXT,\n    namespace TEXT,\n    method TEXT,\n    path TEXT,\n    status_code INTEGER,\n    request_body JSON,\n    response_body JSON,\n    error TEXT,\n    duration_ms INTEGER,\n    client_ip TEXT,\n    user_agent TEXT\n);\n\n-- Indexes for common queries\nCREATE INDEX idx_audit_logs_timestamp ON audit_logs(timestamp);\nCREATE INDEX idx_audit_logs_namespace ON audit_logs(namespace);\nCREATE INDEX idx_audit_logs_resource ON audit_logs(resource_type, resource_id);\nCREATE INDEX idx_proxies_status ON proxies(status, last_seen);\nCREATE INDEX idx_patterns_namespace ON patterns(namespace);\nCREATE INDEX idx_patterns_proxy ON patterns(proxy_id);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why SQLite as default:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Zero configuration: Works out-of-the-box with no setup"}),"\n",(0,r.jsx)(n.li,{children:"Zero external dependencies: Embedded in the Go binary"}),"\n",(0,r.jsx)(n.li,{children:"Cross-platform: Works on macOS, Linux, Windows"}),"\n",(0,r.jsx)(n.li,{children:"Excellent for local development and testing"}),"\n",(0,r.jsx)(n.li,{children:"Sufficient performance for admin workloads (writes are infrequent)"}),"\n",(0,r.jsx)(n.li,{children:"Battle-tested reliability"}),"\n",(0,r.jsx)(n.li,{children:"Built-in JSON support for flexible metadata storage"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why support external database URNs:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Production deployments may require PostgreSQL for high availability"}),"\n",(0,r.jsx)(n.li,{children:"Allows multiple prism-admin instances to share state"}),"\n",(0,r.jsx)(n.li,{children:"Enables centralized audit logging"}),"\n",(0,r.jsx)(n.li,{children:"Supports compliance requirements for audit log retention"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"PostgreSQL only"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pros: Production-ready, handles high concurrency"}),"\n",(0,r.jsx)(n.li,{children:"Cons: Requires external setup, overkill for local dev, increases friction"}),"\n",(0,r.jsx)(n.li,{children:"Rejected because: Developer experience suffers, local testing becomes complex"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"JSON files"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pros: Simple, human-readable"}),"\n",(0,r.jsx)(n.li,{children:"Cons: No transactional integrity, poor query performance, no concurrent access"}),"\n",(0,r.jsx)(n.li,{children:"Rejected because: Audit logs grow quickly, queries would be slow"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Embedded key-value store (BoltDB/BadgerDB)"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pros: Fast, embedded, good for key-value access"}),"\n",(0,r.jsx)(n.li,{children:"Cons: Poor support for complex queries, no SQL, harder to inspect data"}),"\n",(0,r.jsx)(n.li,{children:"Rejected because: Audit log queries require filtering, joins, aggregations"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Redis"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pros: Fast, supports various data structures"}),"\n",(0,r.jsx)(n.li,{children:"Cons: Requires external service, not embedded, persistence not primary use case"}),"\n",(0,r.jsx)(n.li,{children:"Rejected because: Not suitable for audit logs, requires external dependency"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,r.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Zero-config local development"}),": Developers can use prism-admin immediately"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audit compliance"}),": Complete trail of all administrative actions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Historical visibility"}),": View past proxy and pattern states even when offline"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Debugging capability"}),": Troubleshoot issues using historical data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flexibility"}),": Supports both embedded (SQLite) and external (PostgreSQL) databases"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Standard tooling"}),": Can inspect/backup database with standard SQL tools"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"JSON columns"}),": Flexible schema for metadata without migrations"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SQLite limitations in production"}),":\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Single-writer limitation (but admin writes are infrequent)"}),"\n",(0,r.jsx)(n.li,{children:"No network access (but can use external DB URN for multi-instance)"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Schema migrations"}),": Need to manage database schema versions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Disk usage"}),": Audit logs grow over time, need rotation policy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backup complexity"}),": Need to document backup procedures for both SQLite and PostgreSQL"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Database URN parsing adds configuration complexity"}),"\n",(0,r.jsx)(n.li,{children:"Need to support two database drivers (sqlite3 and pgx)"}),"\n",(0,r.jsx)(n.li,{children:"Must test both SQLite and PostgreSQL code paths"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,r.jsx)(n.h3,{id:"database-driver-selection",children:"Database Driver Selection"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"SQLite"}),": Use ",(0,r.jsx)(n.code,{children:"modernc.org/sqlite"})," (pure Go, no CGO required)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Avoids CGO cross-compilation issues"}),"\n",(0,r.jsx)(n.li,{children:"Fully compatible with SQLite file format"}),"\n",(0,r.jsx)(n.li,{children:"Excellent performance for admin workloads"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"PostgreSQL"}),": Use ",(0,r.jsx)(n.code,{children:"github.com/jackc/pgx/v5"})," (pure Go)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Best-in-class PostgreSQL driver"}),"\n",(0,r.jsx)(n.li,{children:"Native Go implementation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"default-database-location",children:"Default Database Location"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func defaultDatabasePath() string {\n    homeDir, _ := os.UserHomeDir()\n    prismDir := filepath.Join(homeDir, ".prism")\n    os.MkdirAll(prismDir, 0700)\n    return filepath.Join(prismDir, "admin.db")\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"migration-strategy",children:"Migration Strategy"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.code,{children:"golang-migrate/migrate"})," with embedded migrations:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'//go:embed migrations/*.sql\nvar migrations embed.FS\n\nfunc runMigrations(db *sql.DB, dbType string) error {\n    driver, _ := sqlite.WithInstance(db, &sqlite.Config{})\n    m, _ := migrate.NewWithDatabaseInstance(\n        "embed://migrations",\n        dbType,\n        driver,\n    )\n    return m.Up()\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"audit-logging-middleware",children:"Audit Logging Middleware"}),"\n",(0,r.jsx)(n.p,{children:"Wrap all gRPC/HTTP handlers with audit logging:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func AuditMiddleware(store *Storage) func(next http.Handler) http.Handler {\n    return func(next http.Handler) http.Handler {\n        return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n            start := time.Now()\n\n            // Capture request body\n            var bodyBytes []byte\n            if r.Body != nil {\n                bodyBytes, _ = io.ReadAll(r.Body)\n                r.Body = io.NopCloser(bytes.NewBuffer(bodyBytes))\n            }\n\n            // Wrap response writer to capture status code\n            rec := &responseRecorder{ResponseWriter: w, statusCode: 200}\n\n            // Execute handler\n            next.ServeHTTP(rec, r)\n\n            // Log audit entry\n            store.LogAudit(context.Background(), &AuditEntry{\n                Timestamp:   start,\n                Action:      r.Method + " " + r.URL.Path,\n                Method:      r.Method,\n                Path:        r.URL.Path,\n                StatusCode:  rec.statusCode,\n                DurationMs:  time.Since(start).Milliseconds(),\n                ClientIP:    r.RemoteAddr,\n                UserAgent:   r.UserAgent(),\n                RequestBody: json.RawMessage(bodyBytes),\n            })\n        })\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"database-urn-parsing",children:"Database URN Parsing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func ParseDatabaseURN(urn string) (*DatabaseConfig, error) {\n    if urn == "" {\n        return &DatabaseConfig{\n            Type: "sqlite",\n            Path: defaultDatabasePath(),\n        }, nil\n    }\n\n    // Parse sqlite:///path/to/db\n    if strings.HasPrefix(urn, "sqlite://") {\n        path := strings.TrimPrefix(urn, "sqlite://")\n        return &DatabaseConfig{Type: "sqlite", Path: path}, nil\n    }\n\n    // Parse postgresql://... or postgres://...\n    if strings.HasPrefix(urn, "postgres") {\n        return &DatabaseConfig{Type: "postgresql", URN: urn}, nil\n    }\n\n    return nil, fmt.Errorf("unsupported database URN: %s", urn)\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"audit-log-retention",children:"Audit Log Retention"}),"\n",(0,r.jsx)(n.p,{children:"Implement configurable retention policy:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"-- Delete audit logs older than 90 days (default)\nDELETE FROM audit_logs WHERE timestamp < datetime('now', '-90 days');\n"})}),"\n",(0,r.jsx)(n.p,{children:"Run as cron job or on prism-admin startup."}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/adr/adr-036",children:"ADR-036: SQLite Config Storage"})," - Proxy config storage pattern"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/adr/adr-040",children:"ADR-040: Go Binary Admin CLI"})," - Admin CLI architecture"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/adr/adr-027",children:"ADR-027: Admin API gRPC"})," - Admin API design"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.sqlite.org/json1.html",children:"SQLite JSON Functions"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/golang-migrate/migrate",children:"golang-migrate"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://gitlab.com/cznic/sqlite",children:"modernc.org/sqlite"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/jackc/pgx",children:"pgx PostgreSQL driver"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2025-10-15: Initial draft"}),"\n",(0,r.jsx)(n.li,{children:"2025-10-15: Accepted - zero-config local storage for prism-admin"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);