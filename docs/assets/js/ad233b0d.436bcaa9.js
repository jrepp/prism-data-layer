"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[18186],{24266:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"memo-015","title":"Cross-Backend Acceptance Test Framework","description":"Overview","source":"@site/../docs-cms/memos/MEMO-015-cross-backend-acceptance-test-framework.md","sourceDirName":".","slug":"/memo-015","permalink":"/prism-data-layer/memos/memo-015","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/MEMO-015-cross-backend-acceptance-test-framework.md","tags":[{"inline":true,"label":"testing","permalink":"/prism-data-layer/memos/tags/testing"},{"inline":true,"label":"acceptance-tests","permalink":"/prism-data-layer/memos/tags/acceptance-tests"},{"inline":true,"label":"table-driven","permalink":"/prism-data-layer/memos/tags/table-driven"},{"inline":true,"label":"backends","permalink":"/prism-data-layer/memos/tags/backends"},{"inline":true,"label":"postgres","permalink":"/prism-data-layer/memos/tags/postgres"},{"inline":true,"label":"redis","permalink":"/prism-data-layer/memos/tags/redis"},{"inline":true,"label":"memstore","permalink":"/prism-data-layer/memos/tags/memstore"}],"version":"current","frontMatter":{"author":"System","created":"2025-10-12T00:00:00.000Z","doc_uuid":"629ebb92-fbaa-49e2-911e-6b94d5a67bc5","id":"memo-015","project_id":"prism-data-layer","tags":["testing","acceptance-tests","table-driven","backends","postgres","redis","memstore"],"title":"Cross-Backend Acceptance Test Framework","updated":"2025-10-12T00:00:00.000Z"},"sidebar":"memosSidebar","previous":{"title":"Pattern SDK Shared Complexity Analysis \u2022 MEMO-014","permalink":"/prism-data-layer/memos/memo-014"},"next":{"title":"Observability and Lifecycle Implementation Summary \u2022 MEMO-016","permalink":"/prism-data-layer/memos/memo-016"}}');var t=s(74848),r=s(28453);const a={author:"System",created:new Date("2025-10-12T00:00:00.000Z"),doc_uuid:"629ebb92-fbaa-49e2-911e-6b94d5a67bc5",id:"memo-015",project_id:"prism-data-layer",tags:["testing","acceptance-tests","table-driven","backends","postgres","redis","memstore"],title:"Cross-Backend Acceptance Test Framework",updated:new Date("2025-10-12T00:00:00.000Z")},l="Cross-Backend Acceptance Test Framework",d={},c=[{value:"Overview",id:"overview",level:2},{value:"Test Results",id:"test-results",level:2},{value:"\u2705 All Tests Passing",id:"-all-tests-passing",level:3},{value:"Test Matrix",id:"test-matrix",level:3},{value:"Test Framework Features",id:"test-framework-features",level:2},{value:"1. Table-Driven Testing",id:"1-table-driven-testing",level:3},{value:"2. Property-Based Testing with Random Data",id:"2-property-based-testing-with-random-data",level:3},{value:"3. Backend Isolation",id:"3-backend-isolation",level:3},{value:"4. Interface Compliance Verification",id:"4-interface-compliance-verification",level:3},{value:"Test Scenarios",id:"test-scenarios",level:2},{value:"1. Set_Get_Random_Data",id:"1-set_get_random_data",level:3},{value:"2. Set_Get_Binary_Random_Data",id:"2-set_get_binary_random_data",level:3},{value:"3. Multiple_Random_Keys",id:"3-multiple_random_keys",level:3},{value:"4. Overwrite_With_Random_Data",id:"4-overwrite_with_random_data",level:3},{value:"5. Delete_Random_Keys",id:"5-delete_random_keys",level:3},{value:"6. Exists_Random_Keys",id:"6-exists_random_keys",level:3},{value:"7. Large_Random_Values",id:"7-large_random_values",level:3},{value:"8. Empty_And_Null_Values",id:"8-empty_and_null_values",level:3},{value:"9. Special_Characters_In_Keys",id:"9-special_characters_in_keys",level:3},{value:"10. Rapid_Sequential_Operations",id:"10-rapid_sequential_operations",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Test Flow",id:"test-flow",level:3},{value:"Key Components",id:"key-components",level:3},{value:"Benefits",id:"benefits",level:2},{value:"1. True Interface Compliance",id:"1-true-interface-compliance",level:3},{value:"2. Easy Backend Addition",id:"2-easy-backend-addition",level:3},{value:"3. Randomized Testing",id:"3-randomized-testing",level:3},{value:"4. Isolation",id:"4-isolation",level:3},{value:"5. Extensibility",id:"5-extensibility",level:3},{value:"Running the Tests",id:"running-the-tests",level:2},{value:"Adding New Test Cases",id:"adding-new-test-cases",level:2},{value:"Adding New Backends",id:"adding-new-backends",level:2},{value:"Future Enhancements",id:"future-enhancements",level:2},{value:"Conclusion",id:"conclusion",level:2}];function o(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"cross-backend-acceptance-test-framework",children:"Cross-Backend Acceptance Test Framework"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"We've built a comprehensive table-driven, cross-backend acceptance test framework that validates interface compliance across all backend implementations using property-based testing with random data."}),"\n",(0,t.jsx)(n.h2,{id:"test-results",children:"Test Results"}),"\n",(0,t.jsx)(n.h3,{id:"-all-tests-passing",children:"\u2705 All Tests Passing"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Test Run Summary:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Test Cases"}),": 10 comprehensive scenarios"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Backends Tested"}),": 3 (Redis, MemStore, PostgreSQL)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Total Test Runs"}),": 30 (10 tests \xd7 3 backends)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pass Rate"}),": 100%"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Duration"}),": ~0.53s"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"test-matrix",children:"Test Matrix"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Test Case"}),(0,t.jsx)(n.th,{children:"Redis"}),(0,t.jsx)(n.th,{children:"MemStore"}),(0,t.jsx)(n.th,{children:"PostgreSQL"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Set_Get_Random_Data"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Set_Get_Binary_Random_Data"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Multiple_Random_Keys"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Overwrite_With_Random_Data"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Delete_Random_Keys"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Exists_Random_Keys"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Large_Random_Values"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Empty_And_Null_Values"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Special_Characters_In_Keys"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Rapid_Sequential_Operations"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"}),(0,t.jsx)(n.td,{children:"\u2705 PASS"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"test-framework-features",children:"Test Framework Features"}),"\n",(0,t.jsx)(n.h3,{id:"1-table-driven-testing",children:"1. Table-Driven Testing"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type TestCase struct {\n    Name        string\n    Setup       func(t *testing.T, driver KeyValueBasicDriver)\n    Run         func(t *testing.T, driver KeyValueBasicDriver)\n    Verify      func(t *testing.T, driver KeyValueBasicDriver)\n    Cleanup     func(t *testing.T, driver KeyValueBasicDriver)\n    SkipBackend map[string]bool\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Tests are defined once and automatically run against all backends."}),"\n",(0,t.jsx)(n.h3,{id:"2-property-based-testing-with-random-data",children:"2. Property-Based Testing with Random Data"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type RandomDataGenerator struct{}\n\n// Methods:\n- RandomString(length int) string\n- RandomKey(testName string) string\n- RandomBytes(length int) []byte\n- RandomHex(length int) string\n- RandomInt(min, max int) int\n"})}),"\n",(0,t.jsx)(n.p,{children:"Every test run uses completely random data:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"No hardcoded test values"}),"\n",(0,t.jsx)(n.li,{children:"Different data every execution"}),"\n",(0,t.jsx)(n.li,{children:"Discovers edge cases through randomization"}),"\n",(0,t.jsx)(n.li,{children:"Validates real-world data patterns"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-backend-isolation",children:"3. Backend Isolation"}),"\n",(0,t.jsx)(n.p,{children:"Each backend runs in its own isolated testcontainer:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Redis"}),": ",(0,t.jsx)(n.code,{children:"redis:7-alpine"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"PostgreSQL"}),": ",(0,t.jsx)(n.code,{children:"postgres:16-alpine"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"MemStore"}),": In-memory (no container needed)"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Containers are:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Started fresh for each test suite"}),"\n",(0,t.jsx)(n.li,{children:"Shared across tests within a suite (for performance)"}),"\n",(0,t.jsx)(n.li,{children:"Automatically cleaned up after tests complete"}),"\n",(0,t.jsx)(n.li,{children:"Completely isolated from each other"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-interface-compliance-verification",children:"4. Interface Compliance Verification"}),"\n",(0,t.jsxs)(n.p,{children:["All backends must implement ",(0,t.jsx)(n.code,{children:"KeyValueBasicInterface"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:"type KeyValueBasicInterface interface {\n    Set(key string, value []byte, ttlSeconds int64) error\n    Get(key string) ([]byte, bool, error)\n    Delete(key string) error\n    Exists(key string) (bool, error)\n}\n"})}),"\n",(0,t.jsx)(n.p,{children:"Tests verify that data written through one backend can be read back correctly, ensuring true interface compliance."}),"\n",(0,t.jsx)(n.h2,{id:"test-scenarios",children:"Test Scenarios"}),"\n",(0,t.jsx)(n.h3,{id:"1-set_get_random_data",children:"1. Set_Get_Random_Data"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Generates random 100-character string"}),"\n",(0,t.jsx)(n.li,{children:"Writes to random key"}),"\n",(0,t.jsx)(n.li,{children:"Reads back and verifies match"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validates"}),": Basic write-read cycle"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-set_get_binary_random_data",children:"2. Set_Get_Binary_Random_Data"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Generates 256 bytes of random binary data"}),"\n",(0,t.jsx)(n.li,{children:"Writes to random key"}),"\n",(0,t.jsx)(n.li,{children:"Reads back and verifies byte-perfect match"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validates"}),": Binary data handling"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-multiple_random_keys",children:"3. Multiple_Random_Keys"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creates 10-50 random keys (randomized count)"}),"\n",(0,t.jsx)(n.li,{children:"Each key gets random value (10-200 bytes)"}),"\n",(0,t.jsx)(n.li,{children:"Writes all keys"}),"\n",(0,t.jsx)(n.li,{children:"Reads all keys back and verifies"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validates"}),": Bulk operations, no data loss"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-overwrite_with_random_data",children:"4. Overwrite_With_Random_Data"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Writes initial random value"}),"\n",(0,t.jsx)(n.li,{children:"Overwrites with different random value"}),"\n",(0,t.jsx)(n.li,{children:"Verifies only latest value is retrieved"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validates"}),": Update semantics"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"5-delete_random_keys",children:"5. Delete_Random_Keys"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creates 5-15 random keys"}),"\n",(0,t.jsx)(n.li,{children:"Deletes random subset"}),"\n",(0,t.jsx)(n.li,{children:"Verifies deleted keys are gone"}),"\n",(0,t.jsx)(n.li,{children:"Verifies non-deleted keys remain"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validates"}),": Deletion correctness"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"6-exists_random_keys",children:"6. Exists_Random_Keys"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Creates one key"}),"\n",(0,t.jsx)(n.li,{children:"Checks existence (should return true)"}),"\n",(0,t.jsx)(n.li,{children:"Checks non-existent random key (should return false)"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validates"}),": Existence checks"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"7-large_random_values",children:"7. Large_Random_Values"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Tests three size ranges:\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"1-10 KB"}),"\n",(0,t.jsx)(n.li,{children:"100-500 KB"}),"\n",(0,t.jsx)(n.li,{children:"1-2 MB"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Writes and reads back each size"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validates"}),": Large payload handling"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"8-empty_and_null_values",children:"8. Empty_And_Null_Values"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Stores empty byte array"}),"\n",(0,t.jsx)(n.li,{children:"Reads back and verifies"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validates"}),": Edge case handling"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"9-special_characters_in_keys",children:"9. Special_Characters_In_Keys"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Tests keys with colons, dashes, underscores, dots, slashes"}),"\n",(0,t.jsx)(n.li,{children:"Writes and reads each"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validates"}),": Key format compatibility"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"10-rapid_sequential_operations",children:"10. Rapid_Sequential_Operations"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Performs 50-100 rapid updates (randomized count)"}),"\n",(0,t.jsx)(n.li,{children:"Each update overwrites previous value"}),"\n",(0,t.jsx)(n.li,{children:"Verifies final value is correct"}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Validates"}),": Consistency under rapid updates"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,t.jsx)(n.h3,{id:"test-flow",children:"Test Flow"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"1. GetStandardBackends() \u2192 [Redis, MemStore, PostgreSQL]\n2. For each backend:\n   a. Start testcontainer (if needed)\n   b. Initialize driver\n   c. Run all test cases\n   d. Cleanup driver\n   e. Terminate container\n3. Report results\n"})}),"\n",(0,t.jsx)(n.h3,{id:"key-components",children:"Key Components"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File"}),": ",(0,t.jsx)(n.code,{children:"tests/acceptance/interfaces/table_driven_test.go"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"RandomDataGenerator"}),": Random data generation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TestCase"}),": Test case definition"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"KeyValueTestSuite"}),": Suite of test cases"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"RunTestSuite()"}),": Test runner"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GetKeyValueBasicTestSuite()"}),": Test case definitions"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File"}),": ",(0,t.jsx)(n.code,{children:"tests/acceptance/interfaces/helpers_test.go"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"BackendDriverSetup"}),": Backend configuration"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"GetStandardBackends()"}),": Registry of all backends"]}),"\n",(0,t.jsx)(n.li,{children:"Helper functions for concurrent operations"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"File"}),": ",(0,t.jsx)(n.code,{children:"tests/testing/backends/postgres.go"})]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"PostgresBackend"}),": Testcontainer setup"]}),"\n",(0,t.jsx)(n.li,{children:"Schema creation utilities"}),"\n",(0,t.jsx)(n.li,{children:"Connection string management"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,t.jsx)(n.h3,{id:"1-true-interface-compliance",children:"1. True Interface Compliance"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Tests validate actual interface contracts"}),"\n",(0,t.jsx)(n.li,{children:"No mocking - tests use real backends"}),"\n",(0,t.jsx)(n.li,{children:"Data written must be readable through interface"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"2-easy-backend-addition",children:"2. Easy Backend Addition"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Add new backend to ",(0,t.jsx)(n.code,{children:"GetStandardBackends()"})]}),"\n",(0,t.jsxs)(n.li,{children:["Implement ",(0,t.jsx)(n.code,{children:"KeyValueBasicInterface"})]}),"\n",(0,t.jsx)(n.li,{children:"Automatically gets full test coverage"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"3-randomized-testing",children:"3. Randomized Testing"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Different data every run"}),"\n",(0,t.jsx)(n.li,{children:"Discovers edge cases"}),"\n",(0,t.jsx)(n.li,{children:"No test data maintenance"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"4-isolation",children:"4. Isolation"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Each backend completely isolated"}),"\n",(0,t.jsx)(n.li,{children:"No cross-contamination"}),"\n",(0,t.jsx)(n.li,{children:"Clean state for every run"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"5-extensibility",children:"5. Extensibility"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Easy to add new test cases"}),"\n",(0,t.jsx)(n.li,{children:"Can skip specific backends per test"}),"\n",(0,t.jsx)(n.li,{children:"Setup/Verify/Cleanup hooks"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"running-the-tests",children:"Running the Tests"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Run all table-driven tests\ncd tests/acceptance/interfaces\ngo test -v -run TestKeyValueBasicInterface_TableDriven\n\n# Run with timeout (for slow backends)\ngo test -v -timeout 10m -run TestKeyValueBasicInterface_TableDriven\n\n# Run specific backend\ngo test -v -run TestKeyValueBasicInterface_TableDriven/Postgres\n\n# Run specific test case\ngo test -v -run TestKeyValueBasicInterface_TableDriven/Postgres/Large_Random_Values\n"})}),"\n",(0,t.jsx)(n.h2,{id:"adding-new-test-cases",children:"Adding New Test Cases"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// Add to GetKeyValueBasicTestSuite()\n{\n    Name: "My_New_Test",\n    Run: func(t *testing.T, driver KeyValueBasicDriver) {\n        gen := NewRandomDataGenerator()\n        key := gen.RandomKey(t.Name())\n        // ... test logic\n    },\n    SkipBackend: map[string]bool{\n        "MemStore": true, // Skip if needed\n    },\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"adding-new-backends",children:"Adding New Backends"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// Add to GetStandardBackends() in helpers_test.go\n{\n    Name:         "MyBackend",\n    SetupFunc:    setupMyBackendDriver,\n    SupportsTTL:  true,\n    SupportsScan: false,\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Coverage Reporting"}),": Detailed coverage by backend"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Benchmarks"}),": Track ops/sec per backend"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Failure Injection"}),": Test error handling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Schema Validation"}),": Verify backend schemas"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Multi-Interface Tests"}),": Test backends implementing multiple interfaces"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsx)(n.p,{children:"This framework provides:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"\u2705 Comprehensive interface validation"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 True backend isolation"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Property-based testing with random data"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 Easy extensibility"}),"\n",(0,t.jsx)(n.li,{children:"\u2705 100% passing tests across all backends"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"The table-driven approach ensures all backends implement interfaces correctly and consistently, catching bugs before they reach production."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(96540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);