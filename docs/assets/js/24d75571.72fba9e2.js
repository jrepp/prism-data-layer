"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[52760],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(96540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}},41356:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"rfc-017","title":"Multicast Registry Pattern","description":"Status: Draft","source":"@site/../docs-cms/rfcs/rfc-017-multicast-registry-pattern.md","sourceDirName":".","slug":"/rfc-017","permalink":"/prism-data-layer/rfc/rfc-017","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/rfc-017-multicast-registry-pattern.md","tags":[{"inline":true,"label":"patterns","permalink":"/prism-data-layer/rfc/tags/patterns"},{"inline":true,"label":"client-api","permalink":"/prism-data-layer/rfc/tags/client-api"},{"inline":true,"label":"registry","permalink":"/prism-data-layer/rfc/tags/registry"},{"inline":true,"label":"pubsub","permalink":"/prism-data-layer/rfc/tags/pubsub"},{"inline":true,"label":"service-discovery","permalink":"/prism-data-layer/rfc/tags/service-discovery"},{"inline":true,"label":"composition","permalink":"/prism-data-layer/rfc/tags/composition"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-09T00:00:00.000Z","doc_uuid":"c606fc3f-2267-4182-9e99-9a666dc258f3","id":"rfc-017","project_id":"prism-data-layer","status":"Draft","tags":["patterns","client-api","registry","pubsub","service-discovery","composition"],"title":"Multicast Registry Pattern","updated":"2025-10-09T00:00:00.000Z"},"sidebar":"rfcSidebar","previous":{"title":"Local Development Infrastructure \u2022 RFC-016","permalink":"/prism-data-layer/rfc/rfc-016"},"next":{"title":"POC Implementation Strategy \u2022 RFC-018","permalink":"/prism-data-layer/rfc/rfc-018"}}');var s=t(74848),r=t(28453);const a={author:"Platform Team",created:new Date("2025-10-09T00:00:00.000Z"),doc_uuid:"c606fc3f-2267-4182-9e99-9a666dc258f3",id:"rfc-017",project_id:"prism-data-layer",status:"Draft",tags:["patterns","client-api","registry","pubsub","service-discovery","composition"],title:"Multicast Registry Pattern",updated:new Date("2025-10-09T00:00:00.000Z")},l="RFC-017: Multicast Registry Pattern",c={},d=[{value:"Abstract",id:"abstract",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Problem Statement",id:"problem-statement",level:3},{value:"Goals",id:"goals",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"Use Case 1: Microservice Coordination",id:"use-case-1-microservice-coordination",level:4},{value:"Use Case 2: IoT Command-and-Control",id:"use-case-2-iot-command-and-control",level:4},{value:"Use Case 3: Presence System",id:"use-case-3-presence-system",level:4},{value:"Use Case 4: Agent Pool Management",id:"use-case-4-agent-pool-management",level:4},{value:"Pattern Definition",id:"pattern-definition",level:2},{value:"Core Concepts",id:"core-concepts",level:3},{value:"Operations",id:"operations",level:3},{value:"Register Operation",id:"register-operation",level:4},{value:"Enumerate Operation",id:"enumerate-operation",level:4},{value:"Multicast Operation",id:"multicast-operation",level:4},{value:"Optional: Unregister Operation",id:"optional-unregister-operation",level:3},{value:"Architecture: Pattern Composition",id:"architecture-pattern-composition",level:2},{value:"Conceptual Model",id:"conceptual-model",level:3},{value:"Filter Evaluation Strategy",id:"filter-evaluation-strategy",level:3},{value:"Strategy 1: Backend-Native Filtering",id:"strategy-1-backend-native-filtering",level:4},{value:"Strategy 2: Client-Side Filtering",id:"strategy-2-client-side-filtering",level:4},{value:"Multicast Fan-out Algorithm",id:"multicast-fan-out-algorithm",level:3},{value:"Backend Slot Requirements",id:"backend-slot-requirements",level:2},{value:"Slot 1: Registry Backend",id:"slot-1-registry-backend",level:3},{value:"Slot 2: Messaging Backend",id:"slot-2-messaging-backend",level:3},{value:"Slot 3: Durability Backend (Optional)",id:"slot-3-durability-backend-optional",level:3},{value:"Configuration Examples",id:"configuration-examples",level:2},{value:"Example 1: Redis Registry + NATS Pub/Sub (Low Latency)",id:"example-1-redis-registry--nats-pubsub-low-latency",level:3},{value:"Example 2: PostgreSQL Registry + Kafka Pub/Sub (Durable)",id:"example-2-postgresql-registry--kafka-pubsub-durable",level:3},{value:"Example 3: DynamoDB Registry + SNS Fan-out (AWS-Native)",id:"example-3-dynamodb-registry--sns-fan-out-aws-native",level:3},{value:"Example 4: Composed Pattern (PostgreSQL Outbox + Kafka)",id:"example-4-composed-pattern-postgresql-outbox--kafka",level:3},{value:"Client API Design",id:"client-api-design",level:2},{value:"Python Client API (Conceptual Example)",id:"python-client-api-conceptual-example",level:3},{value:"Go Client API",id:"go-client-api",level:3},{value:"Rust Client API",id:"rust-client-api",level:3},{value:"Schema Definition",id:"schema-definition",level:2},{value:"Identity Schema",id:"identity-schema",level:3},{value:"Filter Schema",id:"filter-schema",level:3},{value:"Comparison to Alternatives",id:"comparison-to-alternatives",level:2},{value:"vs. Pure Service Discovery (Consul, etcd)",id:"vs-pure-service-discovery-consul-etcd",level:3},{value:"vs. Pure Pub/Sub (Kafka, NATS)",id:"vs-pure-pubsub-kafka-nats",level:3},{value:"vs. Actor Systems (Akka, Orleans)",id:"vs-actor-systems-akka-orleans",level:3},{value:"vs. Message Queues (RabbitMQ, SQS)",id:"vs-message-queues-rabbitmq-sqs",level:3},{value:"Implementation Phases",id:"implementation-phases",level:2},{value:"Phase 1: Core Pattern (Week 1-2)",id:"phase-1-core-pattern-week-1-2",level:3},{value:"Phase 2: Rich Backends (Week 3-4)",id:"phase-2-rich-backends-week-3-4",level:3},{value:"Phase 3: Durability &amp; Outbox (Week 5-6)",id:"phase-3-durability--outbox-week-5-6",level:3},{value:"Phase 4: Advanced Features (Week 7-8)",id:"phase-4-advanced-features-week-7-8",level:3},{value:"Open Questions",id:"open-questions",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Related Patterns and Documents",id:"related-patterns-and-documents",level:2},{value:"References",id:"references",level:2},{value:"Academic Papers",id:"academic-papers",level:3},{value:"Real-World Systems",id:"real-world-systems",level:3},{value:"Pattern Implementations",id:"pattern-implementations",level:3},{value:"Revision History",id:"revision-history",level:2}];function o(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"rfc-017-multicast-registry-pattern",children:"RFC-017: Multicast Registry Pattern"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status"}),": Draft\n",(0,s.jsx)(n.strong,{children:"Author"}),": Platform Team\n",(0,s.jsx)(n.strong,{children:"Created"}),": 2025-10-09\n",(0,s.jsx)(n.strong,{children:"Updated"}),": 2025-10-09"]}),"\n",(0,s.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"Multicast Registry Pattern"})," is a composite client pattern that combines identity management, metadata storage, and selective broadcasting. It enables applications to:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Register identities"})," with rich metadata (presence, capabilities, location, etc.)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enumerate registered identities"})," with metadata filtering"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multicast publish"})," messages to all or filtered subsets of registered identities"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This pattern emerges from multiple use cases (service discovery, IoT command-and-control, presence systems, microservice coordination) that share common requirements but have been implemented ad-hoc across different systems."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Key Innovation"}),": The pattern is ",(0,s.jsx)(n.strong,{children:"schematized with pluggable backend slots"}),", allowing the same client API to be backed by different storage and messaging combinations depending on scale, consistency, and durability requirements."]}),"\n",(0,s.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,s.jsx)(n.h3,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsx)(n.p,{children:"Modern distributed applications frequently need to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Track a dynamic set of participants (services, devices, users, agents)"}),"\n",(0,s.jsx)(n.li,{children:"Store metadata about each participant (status, capabilities, location, version)"}),"\n",(0,s.jsx)(n.li,{children:"Send messages to all participants or filtered subsets"}),"\n",(0,s.jsx)(n.li,{children:"Discover participants based on metadata queries"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Current approaches are fragmented"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Service Discovery Only"})," (Consul, etcd, Kubernetes Service):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Identity registration and enumeration"}),"\n",(0,s.jsx)(n.li,{children:"\u274c No native multicast messaging"}),"\n",(0,s.jsx)(n.li,{children:"\ud83d\udd27 Applications must implement pub/sub separately"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pure Pub/Sub"})," (Kafka, NATS):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Multicast messaging"}),"\n",(0,s.jsx)(n.li,{children:"\u274c No built-in identity registry with metadata"}),"\n",(0,s.jsx)(n.li,{children:"\ud83d\udd27 Applications must maintain subscriber lists separately"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Ad-Hoc Solutions"})," (Redis Sets + Pub/Sub):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Can combine primitives"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Application-specific, not reusable"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Error-prone consistency between registry and messaging"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Heavy Frameworks"})," (Akka Cluster, Orleans):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Complete solution"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Language/framework lock-in"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Complex operational overhead"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"goals",children:"Goals"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unified Pattern"}),": Single client API for register \u2192 enumerate \u2192 multicast workflow"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Metadata-Rich"}),": First-class support for identity metadata and filtering"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Schematized Composition"}),': Define backend "slots" that can be filled with different implementations']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backend Flexibility"}),": Same pattern works with Redis, PostgreSQL+Kafka, NATS, or other combinations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Semantic Clarity"}),": Clear guarantees about consistency, durability, and delivery"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Operational Simplicity"}),": Prism handles coordination between registry and pub/sub backends"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsx)(n.h4,{id:"use-case-1-microservice-coordination",children:"Use Case 1: Microservice Coordination"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# Service registry with broadcast notifications\npattern: multicast-registry\nidentity_schema:\n  service_name: string\n  version: string\n  endpoint: string\n  health_status: enum[healthy, degraded, unhealthy]\n  capabilities: array[string]\n\noperations:\n  - register: Service announces itself with metadata\n  - enumerate: Discovery service lists all healthy services\n  - multicast: Config service broadcasts new feature flags to all services\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Service A registers\nregistry.register(\n    identity="payment-service-instance-42",\n    metadata={\n        "service_name": "payment-service",\n        "version": "2.3.1",\n        "endpoint": "http://" + "10.1.2.42:8080",\n        "health_status": "healthy",\n        "capabilities": ["credit-card", "paypal", "stripe"]\n    },\n    ttl=30  # Heartbeat required every 30s\n)\n\n# API Gateway enumerates healthy services\nservices = registry.enumerate(\n    filter={"service_name": "payment-service", "health_status": "healthy"}\n)\n\n# Config service broadcasts to all services\nregistry.multicast(\n    filter={"service_name": "*"},  # All services\n    message={"type": "config_update", "feature_flags": {...}}\n)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"use-case-2-iot-command-and-control",children:"Use Case 2: IoT Command-and-Control"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# Device registry with command broadcast\npattern: multicast-registry\nidentity_schema:\n  device_id: string\n  device_type: enum[sensor, actuator, gateway]\n  location: geo_point\n  firmware_version: string\n  battery_level: float\n  last_seen: timestamp\n\noperations:\n  - register: Device registers on connect\n  - enumerate: Dashboard lists devices by location\n  - multicast: Control plane sends firmware update command to all v1.0 devices\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# IoT device registers\nregistry.register(\n    identity="sensor-temp-floor2-room5",\n    metadata={\n        "device_type": "sensor",\n        "location": {"lat": 37.7749, "lon": -122.4194},\n        "firmware_version": "1.0.3",\n        "battery_level": 0.78,\n        "capabilities": ["temperature", "humidity"]\n    }\n)\n\n# Dashboard enumerates devices in building\ndevices = registry.enumerate(\n    filter={"location.building": "HQ", "battery_level.lt": 0.2}\n)\n\n# Send firmware update to all v1.0 devices\nregistry.multicast(\n    filter={"firmware_version.startswith": "1.0"},\n    message={"command": "update_firmware", "url": "https://..."}\n)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"use-case-3-presence-system",children:"Use Case 3: Presence System"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# User presence with room-based broadcast\npattern: multicast-registry\nidentity_schema:\n  user_id: string\n  display_name: string\n  status: enum[online, away, busy, offline]\n  current_room: string\n  client_version: string\n  last_activity: timestamp\n\noperations:\n  - register: User joins with status\n  - enumerate: Show room participant list\n  - multicast: Send message to all users in room\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# User joins chat room\nregistry.register(\n    identity="user-alice-session-abc123",\n    metadata={\n        "user_id": "alice",\n        "display_name": "Alice",\n        "status": "online",\n        "current_room": "engineering",\n        "client_version": "web-2.0"\n    }\n)\n\n# Enumerate users in room\nparticipants = registry.enumerate(\n    filter={"current_room": "engineering", "status": "online"}\n)\n\n# Broadcast message to room\nregistry.multicast(\n    filter={"current_room": "engineering"},\n    message={"type": "chat", "from": "alice", "text": "Hello team!"}\n)\n'})}),"\n",(0,s.jsx)(n.h4,{id:"use-case-4-agent-pool-management",children:"Use Case 4: Agent Pool Management"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# Worker agent registry with task broadcast\npattern: multicast-registry\nidentity_schema:\n  agent_id: string\n  agent_type: enum[cpu, gpu, memory]\n  available_resources: object\n  current_tasks: int\n  max_tasks: int\n  tags: array[string]\n\noperations:\n  - register: Agent announces capacity\n  - enumerate: Scheduler finds available agents\n  - multicast: Broadcast cancel signal to all agents with specific tag\n"})}),"\n",(0,s.jsx)(n.h2,{id:"pattern-definition",children:"Pattern Definition"}),"\n",(0,s.jsx)(n.h3,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,s.jsx)(n.p,{children:"The Multicast Registry pattern provides three primitive operations:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Register"}),": Store identity with metadata"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enumerate"}),": Query/list identities with optional filtering"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multicast"}),": Publish message to all or filtered identities"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Identity"}),": Unique identifier (string) within the registry namespace"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Metadata"}),": Structured key-value data associated with identity (JSON-like)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Filter"}),": Query expression for selecting identities based on metadata"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TTL (Time-To-Live)"}),": Optional expiration for identity registration (heartbeat pattern)"]}),"\n",(0,s.jsx)(n.h3,{id:"operations",children:"Operations"}),"\n",(0,s.jsx)(n.h4,{id:"register-operation",children:"Register Operation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-protobuf",children:"message RegisterRequest {\n  string identity = 1;                // Unique identity within namespace\n  map<string, Value> metadata = 2;    // Metadata key-value pairs\n  optional int64 ttl_seconds = 3;     // Optional TTL (0 = no expiration)\n  bool replace = 4;                   // Replace if exists (default: false)\n}\n\nmessage RegisterResponse {\n  bool success = 1;\n  optional string error = 2;\n  Timestamp registered_at = 3;\n  optional Timestamp expires_at = 4;  // If TTL specified\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Semantics"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Identity must be unique within namespace"}),"\n",(0,s.jsx)(n.li,{children:"Metadata can be arbitrary JSON-like structure"}),"\n",(0,s.jsx)(n.li,{children:"TTL creates automatic expiration (requires heartbeat/re-registration)"}),"\n",(0,s.jsx)(n.li,{children:"Replace flag controls conflict behavior"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Error Cases"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ALREADY_EXISTS"}),": Identity already registered (if replace=false)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"INVALID_METADATA"}),": Metadata doesn't match schema"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"QUOTA_EXCEEDED"}),": Namespace registration limit reached"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"enumerate-operation",children:"Enumerate Operation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-protobuf",children:'message EnumerateRequest {\n  optional Filter filter = 1;         // Optional metadata filter\n  optional Pagination pagination = 2; // Limit/offset for large registries\n  bool include_metadata = 3;          // Return full metadata (default: true)\n  repeated string sort_by = 4;        // Sort order (e.g., ["metadata.created_at desc"])\n}\n\nmessage EnumerateResponse {\n  repeated Identity identities = 1;\n  int64 total_count = 2;              // Total matching identities\n  optional string next_cursor = 3;    // For pagination\n}\n\nmessage Identity {\n  string identity = 1;\n  map<string, Value> metadata = 2;    // If include_metadata=true\n  Timestamp registered_at = 3;\n  optional Timestamp expires_at = 4;\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Filter Syntax"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'// Equality\n{"service_name": "payment-service"}\n\n// Comparison operators\n{"battery_level.lt": 0.2}  // less than\n{"version.gte": "2.0"}     // greater than or equal\n\n// String matching\n{"firmware_version.startswith": "1.0"}\n{"endpoint.contains": "prod"}\n\n// Logical operators\n{"$and": [\n  {"status": "healthy"},\n  {"version.gte": "2.0"}\n]}\n\n{"$or": [\n  {"device_type": "sensor"},\n  {"device_type": "gateway"}\n]}\n\n// Array membership\n{"capabilities.contains": "credit-card"}\n\n// Existence\n{"metadata.exists": "location"}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Semantics"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Returns snapshot of current registrations"}),"\n",(0,s.jsx)(n.li,{children:"Filter evaluated at query time (not subscription)"}),"\n",(0,s.jsx)(n.li,{children:"Pagination for large result sets"}),"\n",(0,s.jsx)(n.li,{children:"Sort by metadata fields"}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"multicast-operation",children:"Multicast Operation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-protobuf",children:"message MulticastRequest {\n  optional Filter filter = 1;         // Target identities (null = all)\n  bytes payload = 2;                  // Message payload\n  optional string content_type = 3;   // MIME type (default: application/octet-stream)\n  optional DeliverySemantics delivery = 4;  // At-most-once, at-least-once, exactly-once\n  optional int64 timeout_ms = 5;      // Delivery timeout\n}\n\nmessage MulticastResponse {\n  int64 target_count = 1;             // Number of identities matched by filter\n  int64 delivered_count = 2;          // Number of messages delivered\n  repeated DeliveryStatus statuses = 3; // Per-identity delivery status\n}\n\nmessage DeliveryStatus {\n  string identity = 1;\n  enum Status {\n    DELIVERED = 0;\n    PENDING = 1;\n    FAILED = 2;\n    TIMEOUT = 3;\n  }\n  Status status = 2;\n  optional string error = 3;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Semantics"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Filter applied at publish time (captures current registrations)"}),"\n",(0,s.jsx)(n.li,{children:"Fan-out to all matching identities"}),"\n",(0,s.jsx)(n.li,{children:"Delivery guarantees depend on backend"}),"\n",(0,s.jsx)(n.li,{children:"Response includes per-identity delivery status (if durable backend)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Delivery Semantics"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"At-most-once"}),": Fire-and-forget, no acknowledgment"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"At-least-once"}),": Retry until acknowledged (may duplicate)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Exactly-once"}),": Deduplication + acknowledgment (requires transactional backend)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"optional-unregister-operation",children:"Optional: Unregister Operation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-protobuf",children:"message UnregisterRequest {\n  string identity = 1;\n}\n\nmessage UnregisterResponse {\n  bool success = 1;\n  optional string error = 2;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Semantics"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Explicit removal from registry"}),"\n",(0,s.jsx)(n.li,{children:"Alternative to waiting for TTL expiration"}),"\n",(0,s.jsx)(n.li,{children:"Idempotent (unregister non-existent identity succeeds)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"architecture-pattern-composition",children:"Architecture: Pattern Composition"}),"\n",(0,s.jsx)(n.h3,{id:"conceptual-model",children:"Conceptual Model"}),"\n",(0,s.jsxs)(n.p,{children:["The Multicast Registry pattern ",(0,s.jsx)(n.strong,{children:"composes"})," three data access primitives:"]}),"\n",(0,s.jsx)(n.p,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          Multicast Registry Pattern                     \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  KeyValue   \u2502  \u2502    PubSub    \u2502  \u2502    Queue      \u2502 \u2502\n\u2502  \u2502  (Registry) \u2502  \u2502  (Broadcast) \u2502  \u2502  (Durable)    \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502        \u2502                  \u2502                  \u2502         \u2502\n\u2502        \u2502                  \u2502                  \u2502         \u2502\n\u2502        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502\n\u2502                     Coordinated by Proxy               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### Primitive Mapping\n\n| Operation | Registry (KeyValue) | Pub/Sub | Queue/Durable |\n|-----------|-------------------|---------|---------------|\n| **Register** | `SET identity metadata` | Subscribe to identity's topic | Create queue for identity |\n| **Enumerate** | `SCAN` with filter | (List subscriptions) | (List queues) |\n| **Multicast** | `GET` identities by filter \u2192 fan-out | `PUBLISH` to each topic | `ENQUEUE` to each queue |\n| **Unregister** | `DELETE identity` | Unsubscribe | Delete queue |\n| **TTL** | `EXPIRE identity ttl` | (Auto-unsubscribe) | (Queue expiration) |\n\n### Backend Slot Architecture\n\nThe pattern defines **three backend slots** that can be filled independently:\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"pattern: multicast-registry"}),"\n",(0,s.jsx)(n.p,{children:"backend_slots:\nregistry:\npurpose: Store identity metadata\noperations: [set, get, scan, delete, expire]\ncandidates: [redis, postgres, dynamodb, etcd]"}),"\n",(0,s.jsx)(n.p,{children:"messaging:\npurpose: Deliver multicast messages\noperations: [publish, subscribe]\ncandidates: [kafka, nats, redis-pubsub, rabbitmq]"}),"\n",(0,s.jsx)(n.p,{children:"durability:\npurpose: Persist undelivered messages (optional)\noperations: [enqueue, dequeue, ack]\ncandidates: [kafka, postgres, sqs, redis-stream]"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Key Design Principle**: The same client API works with different backend combinations, allowing trade-offs between consistency, durability, and performance.\n\n## Proxy Implementation\n\n### Proxy Responsibilities\n\nThe Prism proxy coordinates the pattern by:\n\n1. **Identity Lifecycle Management**:\n   - Store identity + metadata in registry backend\n   - Manage TTL/expiration (background cleanup)\n   - Maintain subscriber mapping (identity \u2192 pub/sub topic/queue)\n\n2. **Enumeration**:\n   - Translate filter expressions to backend queries\n   - Execute query against registry backend\n   - Return matched identities with metadata\n\n3. **Multicast Fan-out**:\n   - Evaluate filter to find target identities\n   - Fan out to messaging backend (pub/sub or queues)\n   - Track delivery status (if durable backend)\n   - Return aggregate delivery report\n\n4. **Consistency Coordination**:\n   - Ensure registry and messaging backend stay synchronized\n   - Handle registration \u2192 subscription creation\n   - Handle unregistration \u2192 cleanup\n\n### Proxy State Machine\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Registering \u2502\n\u2502   Identity   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n       \u2502\n       \u2502 1. Store metadata in registry backend\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n       \u2502                                       \u2502\n       \u2502 2. Create subscriber mapping          \u2502\n       \u2502    (identity \u2192 topic/queue)           \u2502\n       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n       \u2502                                       \u2502\n       \u2502 3. Subscribe to pub/sub or            \u2502\n       \u2502    create queue (if durable)          \u2502\n       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n                      \u25bc\n              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502   Registered  \u2502\n              \u2502   (Active)    \u2502\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                      \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502             \u2502             \u2502\n   Multicast     Enumerate      TTL Expired\n     Recv'd        Request        or Unreg\n        \u2502             \u2502             \u2502\n        \u25bc             \u25bc             \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502 Publish\u2502   \u2502  Query   \u2502  \u2502  Cleanup  \u2502\n   \u2502 to     \u2502   \u2502 Registry \u2502  \u2502  Unreg +  \u2502\n   \u2502 Topic  \u2502   \u2502  Backend \u2502  \u2502  Unsub    \u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h3,{id:"filter-evaluation-strategy",children:"Filter Evaluation Strategy"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Two evaluation strategies depending on backend"}),":"]}),"\n",(0,s.jsx)(n.h4,{id:"strategy-1-backend-native-filtering",children:"Strategy 1: Backend-Native Filtering"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// PostgreSQL with JSONB\nasync fn enumerate_postgres(filter: &Filter) -> Vec<Identity> {\n    let sql = translate_filter_to_sql(filter);\n    // SELECT identity, metadata FROM registry WHERE metadata @> \'{"status": "healthy"}\'\n    db.query(sql).await\n}\n\n// Redis with Lua script\nasync fn enumerate_redis(filter: &Filter) -> Vec<Identity> {\n    let lua_script = translate_filter_to_lua(filter);\n    redis.eval(lua_script).await\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pros"}),": Fast, leverages backend indexing\n",(0,s.jsx)(n.strong,{children:"Cons"}),": Backend-specific query language"]}),"\n",(0,s.jsx)(n.h4,{id:"strategy-2-client-side-filtering",children:"Strategy 2: Client-Side Filtering"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// Fetch all identities, filter in proxy\nasync fn enumerate_generic(filter: &Filter) -> Vec<Identity> {\n    let all_identities = registry_backend.scan_all().await;\n    all_identities.into_iter()\n        .filter(|id| filter.matches(&id.metadata))\n        .collect()\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pros"}),": Backend-agnostic, works with any registry\n",(0,s.jsx)(n.strong,{children:"Cons"}),": Inefficient for large registries"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Recommendation"}),": Use backend-native when available, fallback to client-side."]}),"\n",(0,s.jsx)(n.h3,{id:"multicast-fan-out-algorithm",children:"Multicast Fan-out Algorithm"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"async fn multicast(\n    registry: &RegistryBackend,\n    messaging: &MessagingBackend,\n    request: &MulticastRequest\n) -> Result<MulticastResponse> {\n    // 1. Evaluate filter to find target identities\n    let targets = registry.enumerate(&request.filter).await?;\n\n    // 2. Fan out to messaging backend\n    let delivery_results = match messaging {\n        MessagingBackend::PubSub(pubsub) => {\n            // Parallel publish to each topic\n            futures::future::join_all(\n                targets.iter().map(|identity| {\n                    pubsub.publish(&identity_topic(identity), &request.payload)\n                })\n            ).await\n        }\n        MessagingBackend::Queue(queue) => {\n            // Enqueue to each queue\n            futures::future::join_all(\n                targets.iter().map(|identity| {\n                    queue.enqueue(&identity_queue(identity), &request.payload)\n                })\n            ).await\n        }\n    };\n\n    // 3. Aggregate delivery status\n    Ok(MulticastResponse {\n        target_count: targets.len() as i64,\n        delivered_count: delivery_results.iter().filter(|r| r.is_ok()).count() as i64,\n        statuses: delivery_results.into_iter()\n            .zip(targets.iter())\n            .map(|(result, identity)| DeliveryStatus {\n                identity: identity.identity.clone(),\n                status: match result {\n                    Ok(_) => Status::Delivered,\n                    Err(e) if e.is_timeout() => Status::Timeout,\n                    Err(_) => Status::Failed,\n                },\n                error: result.err().map(|e| e.to_string()),\n            })\n            .collect(),\n    })\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"backend-slot-requirements",children:"Backend Slot Requirements"}),"\n",(0,s.jsx)(n.h3,{id:"slot-1-registry-backend",children:"Slot 1: Registry Backend"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Store identity metadata with query/scan capabilities."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Required Operations"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"set(identity, metadata, ttl)"}),": Store identity with metadata"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"get(identity)"}),": Retrieve metadata for identity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"scan(filter)"}),": Query identities by metadata"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"delete(identity)"}),": Remove identity"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"expire(identity, ttl)"}),": Set TTL"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Backend Options"}),":"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Backend"}),(0,s.jsx)(n.th,{children:"Pros"}),(0,s.jsx)(n.th,{children:"Cons"}),(0,s.jsx)(n.th,{children:"Filter Support"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Redis"})}),(0,s.jsx)(n.td,{children:"Fast, TTL built-in"}),(0,s.jsx)(n.td,{children:"No native JSON filter"}),(0,s.jsx)(n.td,{children:"Lua scripting"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"PostgreSQL"})}),(0,s.jsx)(n.td,{children:"JSONB queries, indexes"}),(0,s.jsx)(n.td,{children:"Slower than Redis"}),(0,s.jsx)(n.td,{children:"Native JSON operators"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"DynamoDB"})}),(0,s.jsx)(n.td,{children:"Scalable, TTL built-in"}),(0,s.jsx)(n.td,{children:"Limited query syntax"}),(0,s.jsx)(n.td,{children:"GSI + filter expressions"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"etcd"})}),(0,s.jsx)(n.td,{children:"Consistent, watch API"}),(0,s.jsx)(n.td,{children:"Small value limit"}),(0,s.jsx)(n.td,{children:"Key prefix only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"MongoDB"})}),(0,s.jsx)(n.td,{children:"Flexible queries"}),(0,s.jsx)(n.td,{children:"Separate deployment"}),(0,s.jsx)(n.td,{children:"Native JSON queries"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Recommendation"}),": ",(0,s.jsx)(n.strong,{children:"PostgreSQL"})," for rich filtering, ",(0,s.jsx)(n.strong,{children:"Redis"})," for speed/simplicity."]}),"\n",(0,s.jsx)(n.h3,{id:"slot-2-messaging-backend",children:"Slot 2: Messaging Backend"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Deliver multicast messages to registered identities."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Required Operations"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"publish(topic, payload)"}),": Publish message to topic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"subscribe(topic)"}),": Subscribe to messages (consumer-side)"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Backend Options"}),":"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Backend"}),(0,s.jsx)(n.th,{children:"Pros"}),(0,s.jsx)(n.th,{children:"Cons"}),(0,s.jsx)(n.th,{children:"Delivery Guarantees"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"NATS"})}),(0,s.jsx)(n.td,{children:"Lightweight, fast"}),(0,s.jsx)(n.td,{children:"At-most-once (core)"}),(0,s.jsx)(n.td,{children:"At-most-once (JetStream: at-least-once)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Redis Pub/Sub"})}),(0,s.jsx)(n.td,{children:"Simple, low latency"}),(0,s.jsx)(n.td,{children:"No persistence"}),(0,s.jsx)(n.td,{children:"At-most-once"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Kafka"})}),(0,s.jsx)(n.td,{children:"Durable, high throughput"}),(0,s.jsx)(n.td,{children:"Complex setup"}),(0,s.jsx)(n.td,{children:"At-least-once"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"RabbitMQ"})}),(0,s.jsx)(n.td,{children:"Mature, flexible"}),(0,s.jsx)(n.td,{children:"Operational overhead"}),(0,s.jsx)(n.td,{children:"At-least-once"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Recommendation"}),": ",(0,s.jsx)(n.strong,{children:"NATS"})," for low-latency ephemeral, ",(0,s.jsx)(n.strong,{children:"Kafka"})," for durable multicast."]}),"\n",(0,s.jsx)(n.h3,{id:"slot-3-durability-backend-optional",children:"Slot 3: Durability Backend (Optional)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Purpose"}),": Persist undelivered messages for offline identities."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Required Operations"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"enqueue(queue, payload)"}),": Add message to queue"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dequeue(queue)"}),": Retrieve next message"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ack(queue, message_id)"}),": Acknowledge delivery"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Backend Options"}),":"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Backend"}),(0,s.jsx)(n.th,{children:"Pros"}),(0,s.jsx)(n.th,{children:"Cons"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Kafka"})}),(0,s.jsx)(n.td,{children:"High throughput, replayable"}),(0,s.jsx)(n.td,{children:"Heavy for simple queues"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"PostgreSQL"})}),(0,s.jsx)(n.td,{children:"ACID transactions, simple"}),(0,s.jsx)(n.td,{children:"Lower throughput"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Redis Streams"})}),(0,s.jsx)(n.td,{children:"Fast, lightweight"}),(0,s.jsx)(n.td,{children:"Limited durability guarantees"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"SQS"})}),(0,s.jsx)(n.td,{children:"Managed, scalable"}),(0,s.jsx)(n.td,{children:"AWS-only, cost"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Recommendation"}),": Use ",(0,s.jsx)(n.strong,{children:"same as messaging backend"})," if possible (Kafka), else ",(0,s.jsx)(n.strong,{children:"PostgreSQL"})," for transactional guarantees."]}),"\n",(0,s.jsx)(n.h2,{id:"configuration-examples",children:"Configuration Examples"}),"\n",(0,s.jsx)(n.h3,{id:"example-1-redis-registry--nats-pubsub-low-latency",children:"Example 1: Redis Registry + NATS Pub/Sub (Low Latency)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'namespaces:\n  - name: presence\n    pattern: multicast-registry\n\n    identity_schema:\n      user_id: string\n      display_name: string\n      status: enum[online, away, busy, offline]\n      current_room: string\n\n    needs:\n      latency: &lt;10ms\n      consistency: eventual\n      durability: ephemeral\n\n    backend_slots:\n      registry:\n        type: redis\n        host: localhost\n        port: 6379\n        ttl_default: 300  # 5 min heartbeat\n\n      messaging:\n        type: nats\n        servers: ["nats://localhost:4222"]\n        delivery: at-most-once\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Characteristics"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Latency"}),": <10ms for register, enumerate, multicast"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistency"}),": Eventual (Redis async replication)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Durability"}),": Ephemeral (lost on server restart)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": Presence, real-time dashboards"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-2-postgresql-registry--kafka-pubsub-durable",children:"Example 2: PostgreSQL Registry + Kafka Pub/Sub (Durable)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'namespaces:\n  - name: iot-devices\n    pattern: multicast-registry\n\n    identity_schema:\n      device_id: string\n      device_type: enum[sensor, actuator, gateway]\n      location: geo_point\n      firmware_version: string\n      battery_level: float\n\n    needs:\n      consistency: strong\n      durability: persistent\n      audit: true\n\n    backend_slots:\n      registry:\n        type: postgres\n        connection: "postgres://localhost:5432/prism"\n        schema: iot_registry\n        indexes:\n          - field: device_type\n          - field: firmware_version\n          - field: location\n            type: gist  # GIS index\n\n      messaging:\n        type: kafka\n        brokers: ["localhost:9092"]\n        topic_prefix: "iot.commands."\n        delivery: at-least-once\n        retention: 7d\n\n      durability:\n        use_messaging: true  # Kafka provides persistence\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Characteristics"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Latency"}),": ~50ms for multicast (Kafka write + fsync)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Consistency"}),": Strong (PostgreSQL ACID)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Durability"}),": Persistent (Kafka retention, Postgres WAL)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Audit"}),": All registrations and multicasts logged"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": IoT device management, compliance-critical systems"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-3-dynamodb-registry--sns-fan-out-aws-native",children:"Example 3: DynamoDB Registry + SNS Fan-out (AWS-Native)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'namespaces:\n  - name: microservices\n    pattern: multicast-registry\n\n    identity_schema:\n      service_name: string\n      instance_id: string\n      version: string\n      endpoint: string\n      health_status: enum[healthy, degraded, unhealthy]\n\n    needs:\n      scale: 10000+ services\n      region: multi-region\n      cloud: aws\n\n    backend_slots:\n      registry:\n        type: dynamodb\n        table: prism-service-registry\n        partition_key: service_name\n        sort_key: instance_id\n        ttl_attribute: expires_at\n        gsi:\n          - name: health-index\n            keys: [health_status, service_name]\n\n      messaging:\n        type: sns\n        topic_prefix: "prism-service-"\n        delivery: at-most-once\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Characteristics"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scale"}),": 10,000+ services, auto-scaling"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Latency"}),": ~20ms (DynamoDB), ~50ms (SNS)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multi-region"}),": DynamoDB Global Tables"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": Large-scale microservice mesh"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"example-4-composed-pattern-postgresql-outbox--kafka",children:"Example 4: Composed Pattern (PostgreSQL Outbox + Kafka)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'namespaces:\n  - name: agents\n    pattern: multicast-registry\n\n    identity_schema:\n      agent_id: string\n      agent_type: string\n      available_resources: object\n      current_tasks: int\n\n    needs:\n      consistency: strong\n      durability: persistent\n      exactly_once: true\n\n    backend_slots:\n      registry:\n        type: postgres\n        connection: "postgres://localhost:5432/prism"\n\n      messaging:\n        type: kafka\n        brokers: ["localhost:9092"]\n\n      durability:\n        use_messaging: true\n\n      composition:\n        pattern: outbox  # Transactional outbox pattern\n        outbox_table: multicast_outbox\n        poll_interval: 100ms\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Characteristics"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Exactly-once semantics"}),": Transactional outbox ensures registry + multicast atomic"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No dual-write problem"}),": Both write to Postgres, relay to Kafka"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use Cases"}),": Financial systems, critical coordination"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"client-api-design",children:"Client API Design"}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"\u26a0\ufe0f NOTE ON CLIENT EXAMPLES"}),": The client API examples below use Python syntax for ",(0,s.jsx)(n.strong,{children:"illustration purposes only"}),". Python in Prism is reserved for ",(0,s.jsx)(n.strong,{children:"tooling"})," (build scripts, validation, deployment automation) and is ",(0,s.jsx)(n.strong,{children:"not used for application components"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["Actual client libraries will be implemented in ",(0,s.jsx)(n.strong,{children:"Go"})," (primary) and ",(0,s.jsx)(n.strong,{children:"Rust"})," (secondary) for production use. These examples demonstrate the intended API ergonomics and semantics that will be replicated in Go/Rust implementations."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"python-client-api-conceptual-example",children:"Python Client API (Conceptual Example)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from prism import Client, Filter\n\nclient = Client(namespace="presence")\n\n# Register identity\nawait client.registry.register(\n    identity="user-alice-session-1",\n    metadata={\n        "user_id": "alice",\n        "display_name": "Alice",\n        "status": "online",\n        "current_room": "engineering"\n    },\n    ttl=300  # 5 minutes\n)\n\n# Enumerate identities\nidentities = await client.registry.enumerate(\n    filter=Filter(current_room="engineering", status="online")\n)\nprint(f"Users in room: {[id.metadata[\'display_name\'] for id in identities]}")\n\n# Multicast to room\nresult = await client.registry.multicast(\n    filter=Filter(current_room="engineering"),\n    message={"type": "chat", "from": "alice", "text": "Hello!"}\n)\nprint(f"Delivered to {result.delivered_count}/{result.target_count} users")\n\n# Unregister\nawait client.registry.unregister(identity="user-alice-session-1")\n'})}),"\n",(0,s.jsx)(n.h3,{id:"go-client-api",children:"Go Client API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'import "github.com/prism/client-go"\n\nfunc main() {\n    client := prism.NewClient("presence")\n\n    // Register\n    err := client.Registry.Register(ctx, prism.RegisterRequest{\n        Identity: "user-bob-session-2",\n        Metadata: map[string]interface{}{\n            "user_id":      "bob",\n            "display_name": "Bob",\n            "status":       "away",\n            "current_room": "engineering",\n        },\n        TTL: 300,\n    })\n\n    // Enumerate\n    identities, err := client.Registry.Enumerate(ctx, prism.EnumerateRequest{\n        Filter: prism.Filter{"current_room": "engineering"},\n    })\n\n    // Multicast\n    result, err := client.Registry.Multicast(ctx, prism.MulticastRequest{\n        Filter: prism.Filter{"status": "online"},\n        Payload: []byte(`{"type": "ping"}`),\n    })\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"rust-client-api",children:"Rust Client API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'use prism::{Client, Filter};\n\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let client = Client::new("microservices").await?;\n\n    // Register\n    client.registry.register(RegisterRequest {\n        identity: "payment-service-1".into(),\n        metadata: json!({\n            "service_name": "payment-service",\n            "version": "2.3.1",\n            "health_status": "healthy",\n        }),\n        ttl: Some(30),\n        ..Default::default()\n    }).await?;\n\n    // Enumerate\n    let services = client.registry.enumerate(EnumerateRequest {\n        filter: Some(Filter::new()\n            .eq("service_name", "payment-service")\n            .eq("health_status", "healthy")),\n        ..Default::default()\n    }).await?;\n\n    // Multicast\n    let result = client.registry.multicast(MulticastRequest {\n        filter: Some(Filter::new().eq("service_name", "*")),\n        payload: serde_json::to_vec(&json!({"type": "config_update"}))?,\n        ..Default::default()\n    }).await?;\n\n    Ok(())\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"schema-definition",children:"Schema Definition"}),"\n",(0,s.jsx)(n.h3,{id:"identity-schema",children:"Identity Schema"}),"\n",(0,s.jsx)(n.p,{children:"Namespaces using multicast-registry pattern MUST define an identity schema:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"identity_schema:\n  # Required fields\n  primary_key: string      # Identity field name\n\n  # Metadata fields (JSON Schema)\n  fields:\n    user_id:\n      type: string\n      required: true\n\n    display_name:\n      type: string\n      max_length: 100\n\n    status:\n      type: enum\n      values: [online, away, busy, offline]\n      default: offline\n\n    current_room:\n      type: string\n      required: false\n      index: true  # Backend should create index\n\n    last_activity:\n      type: timestamp\n      auto: now  # Auto-set on register\n\n    capabilities:\n      type: array\n      items: string\n"})}),"\n",(0,s.jsx)(n.h3,{id:"filter-schema",children:"Filter Schema"}),"\n",(0,s.jsx)(n.p,{children:"Filters follow MongoDB-like query syntax:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"filter_operators:\n  # Equality\n  - eq: Equal\n  - ne: Not equal\n\n  # Comparison\n  - lt: Less than\n  - lte: Less than or equal\n  - gt: Greater than\n  - gte: Greater than or equal\n\n  # String\n  - startswith: String prefix match\n  - endswith: String suffix match\n  - contains: Substring match\n  - regex: Regular expression\n\n  # Array\n  - in: Value in array\n  - contains: Array contains value\n\n  # Logical\n  - and: All conditions match\n  - or: Any condition matches\n  - not: Negate condition\n\n  # Existence\n  - exists: Field exists\n  - type: Field type check\n"})}),"\n",(0,s.jsx)(n.h2,{id:"comparison-to-alternatives",children:"Comparison to Alternatives"}),"\n",(0,s.jsx)(n.h3,{id:"vs-pure-service-discovery-consul-etcd",children:"vs. Pure Service Discovery (Consul, etcd)"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Feature"}),(0,s.jsx)(n.th,{children:"Multicast Registry"}),(0,s.jsx)(n.th,{children:"Service Discovery"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Identity Registration"}),(0,s.jsx)(n.td,{children:"\u2705 First-class"}),(0,s.jsx)(n.td,{children:"\u2705 Primary use case"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Metadata Storage"}),(0,s.jsx)(n.td,{children:"\u2705 Rich JSON"}),(0,s.jsx)(n.td,{children:"\u2705 Key-value"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Enumeration/Query"}),(0,s.jsx)(n.td,{children:"\u2705 Flexible filtering"}),(0,s.jsx)(n.td,{children:"\u26a0\ufe0f Key prefix only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Multicast Messaging"}),(0,s.jsx)(n.td,{children:"\u2705 Built-in"}),(0,s.jsx)(n.td,{children:"\u274c Must integrate pub/sub"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Consistency"}),(0,s.jsx)(n.td,{children:"\u2705 Configurable"}),(0,s.jsx)(n.td,{children:"\u2705 Strong (etcd), Eventual (Consul)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Advantage"})}),(0,s.jsx)(n.td,{children:"Unified API for register+multicast"}),(0,s.jsx)(n.td,{children:"Battle-tested, wide adoption"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"vs-pure-pubsub-kafka-nats",children:"vs. Pure Pub/Sub (Kafka, NATS)"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Feature"}),(0,s.jsx)(n.th,{children:"Multicast Registry"}),(0,s.jsx)(n.th,{children:"Pub/Sub"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Publish/Subscribe"}),(0,s.jsx)(n.td,{children:"\u2705 Multicast operation"}),(0,s.jsx)(n.td,{children:"\u2705 Core functionality"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Identity Registry"}),(0,s.jsx)(n.td,{children:"\u2705 Built-in"}),(0,s.jsx)(n.td,{children:"\u274c Application must maintain"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Metadata Filtering"}),(0,s.jsx)(n.td,{children:"\u2705 Query-based"}),(0,s.jsx)(n.td,{children:"\u274c Topic-based only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Dynamic Subscribers"}),(0,s.jsx)(n.td,{children:"\u2705 Register/unregister"}),(0,s.jsx)(n.td,{children:"\u26a0\ufe0f Topic creation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Advantage"})}),(0,s.jsx)(n.td,{children:"Metadata-aware targeting"}),(0,s.jsx)(n.td,{children:"Simple, high throughput"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"vs-actor-systems-akka-orleans",children:"vs. Actor Systems (Akka, Orleans)"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Feature"}),(0,s.jsx)(n.th,{children:"Multicast Registry"}),(0,s.jsx)(n.th,{children:"Actor Systems"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Identity Management"}),(0,s.jsx)(n.td,{children:"\u2705 Explicit register"}),(0,s.jsx)(n.td,{children:"\u2705 Actor lifecycle"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Multicast"}),(0,s.jsx)(n.td,{children:"\u2705 Filter-based"}),(0,s.jsx)(n.td,{children:"\u26a0\ufe0f Actor group broadcast"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Language"}),(0,s.jsx)(n.td,{children:"\u2705 Polyglot (gRPC)"}),(0,s.jsx)(n.td,{children:"\u274c JVM/.NET only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Learning Curve"}),(0,s.jsx)(n.td,{children:"\u2705 Simple API"}),(0,s.jsx)(n.td,{children:"\u26a0\ufe0f Actor model complexity"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Advantage"})}),(0,s.jsx)(n.td,{children:"No framework lock-in"}),(0,s.jsx)(n.td,{children:"Rich actor model features"})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"vs-message-queues-rabbitmq-sqs",children:"vs. Message Queues (RabbitMQ, SQS)"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Feature"}),(0,s.jsx)(n.th,{children:"Multicast Registry"}),(0,s.jsx)(n.th,{children:"Message Queues"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Queue Management"}),(0,s.jsx)(n.td,{children:"\u2705 Auto-created per identity"}),(0,s.jsx)(n.td,{children:"\u26a0\ufe0f Manual queue creation"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Metadata Filtering"}),(0,s.jsx)(n.td,{children:"\u2705 Dynamic queries"}),(0,s.jsx)(n.td,{children:"\u274c Static routing keys"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"Durability"}),(0,s.jsx)(n.td,{children:"\u2705 Optional"}),(0,s.jsx)(n.td,{children:"\u2705 Built-in"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Advantage"})}),(0,s.jsx)(n.td,{children:"Dynamic targeting"}),(0,s.jsx)(n.td,{children:"Mature queueing semantics"})]})]})]}),"\n",(0,s.jsx)(n.h2,{id:"implementation-phases",children:"Implementation Phases"}),"\n",(0,s.jsx)(n.h3,{id:"phase-1-core-pattern-week-1-2",children:"Phase 1: Core Pattern (Week 1-2)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Deliverables"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Protobuf definitions for Register/Enumerate/Multicast operations"}),"\n",(0,s.jsx)(n.li,{children:"Proxy pattern handler with slot architecture"}),"\n",(0,s.jsx)(n.li,{children:"Redis registry backend implementation"}),"\n",(0,s.jsx)(n.li,{children:"NATS messaging backend implementation"}),"\n",(0,s.jsx)(n.li,{children:"Python client library"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Demo"}),": Presence system with Redis+NATS"]}),"\n",(0,s.jsx)(n.h3,{id:"phase-2-rich-backends-week-3-4",children:"Phase 2: Rich Backends (Week 3-4)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Deliverables"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"PostgreSQL registry backend with JSONB filtering"}),"\n",(0,s.jsx)(n.li,{children:"Kafka messaging backend"}),"\n",(0,s.jsx)(n.li,{children:"Filter expression parser and evaluator"}),"\n",(0,s.jsx)(n.li,{children:"TTL/expiration background worker"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Demo"}),": IoT device registry with PostgreSQL+Kafka"]}),"\n",(0,s.jsx)(n.h3,{id:"phase-3-durability--outbox-week-5-6",children:"Phase 3: Durability & Outbox (Week 5-6)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Deliverables"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Durability slot implementation"}),"\n",(0,s.jsx)(n.li,{children:"Transactional outbox pattern"}),"\n",(0,s.jsx)(n.li,{children:"Exactly-once delivery semantics"}),"\n",(0,s.jsx)(n.li,{children:"Delivery status tracking"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Demo"}),": Agent pool management with exactly-once guarantees"]}),"\n",(0,s.jsx)(n.h3,{id:"phase-4-advanced-features-week-7-8",children:"Phase 4: Advanced Features (Week 7-8)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Deliverables"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"DynamoDB registry backend"}),"\n",(0,s.jsx)(n.li,{children:"SNS messaging backend"}),"\n",(0,s.jsx)(n.li,{children:"Multi-region support"}),"\n",(0,s.jsx)(n.li,{children:"Schema evolution and migration tools"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Demo"}),": Multi-region microservice registry"]}),"\n",(0,s.jsx)(n.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Filter Complexity Limits"}),": Should we limit filter complexity to prevent expensive queries?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Proposal"}),": Max filter depth = 5, max clauses = 20"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reasoning"}),": Prevent DoS via complex filters"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Multicast Ordering"}),": Do multicast messages need ordering guarantees?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Proposal"}),": Best-effort ordering by default, optional strict ordering with Kafka"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reasoning"}),": Ordering is expensive, not needed for many use cases"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Identity Namespace"}),": Should identities be globally unique or per-pattern?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Proposal"}),": Namespace-scoped (same as other patterns)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reasoning"}),": Isolation, multi-tenancy"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Filter Subscription"}),": Should enumerate support watch/subscription for changes?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Proposal"}),": Phase 2 feature - watch API for registry changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reasoning"}),": Powerful but adds complexity"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Backpressure"}),": How to handle slow consumers during multicast?"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Proposal"}),": Async delivery with optional timeout"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reasoning"}),": Don't block fast consumers on slow ones"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Identity Spoofing"}),": Prevent unauthorized identity registration"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mitigation"}),": Require authentication, validate identity ownership"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Metadata Injection"}),": Malicious metadata could exploit filter queries"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mitigation"}),": Schema validation, sanitize filter expressions"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Enumeration Privacy"}),": Prevent leaking sensitive identity metadata"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mitigation"}),": Per-namespace ACLs, filter field permissions"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Multicast Abuse"}),": Prevent spam/DoS via unrestricted multicast"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mitigation"}),": Rate limiting, quota per identity"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TTL Manipulation"}),": Prevent identities from lingering forever"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mitigation"}),": Enforce max TTL, background cleanup"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-patterns-and-documents",children:"Related Patterns and Documents"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/rfc/rfc-014",children:"RFC-014: Layered Data Access Patterns"})," - Base client pattern catalog"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/rfc/rfc-008",children:"RFC-008: Proxy Plugin Architecture"})," - Plugin composition model"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/rfc/rfc-009",children:"RFC-009: Distributed Reliability Patterns"})," - Outbox pattern details"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"/memos/memo-004",children:"MEMO-004: Backend Plugin Implementation Guide"})," - Backend selection criteria"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsx)(n.h3,{id:"academic-papers",children:"Academic Papers"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.info.ucl.ac.be/~pvr/Gul_Agha.pdf",children:'"The Actor Model"'})," - Carl Hewitt et al."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://dl.acm.org/doi/10.1145/1809028.1806634",children:'"Distributed Publish/Subscribe"'})," - ACM Computing Surveys"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"real-world-systems",children:"Real-World Systems"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://www.consul.io/",children:"Consul Service Mesh"})," - Service discovery with key-value store"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://etcd.io/",children:"etcd"})," - Distributed key-value store with watch API"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://doc.akka.io/docs/akka/current/typed/cluster.html",children:"Akka Cluster"})," - Actor-based clustering"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/orleans/",children:"Orleans Virtual Actors"})," - Microsoft's actor framework"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://docs.nats.io/nats-concepts/jetstream",children:"NATS JetStream"})," - Durable streaming layer"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"pattern-implementations",children:"Pattern Implementations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://github.com/Netflix/eureka",children:"Netflix Eureka"})," - Service registry with heartbeat"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/services-networking/service/",children:"Kubernetes Service Discovery"})," - Pod registry + DNS"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"https://aws.amazon.com/app-mesh/",children:"AWS App Mesh"})," - Service mesh with discovery"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"2025-10-09: Initial draft covering pattern definition, backend slots, implementation plan"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(o,{...e})}):o(e)}}}]);