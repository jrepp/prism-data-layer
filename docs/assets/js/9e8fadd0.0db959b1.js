"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[9700],{24494:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"rfc-022","title":"Core Pattern SDK - Build System and Physical Code Layout","description":"Summary","source":"@site/../docs-cms/rfcs/rfc-022-core-plugin-sdk-code-layout.md","sourceDirName":".","slug":"/rfc-022","permalink":"/prism-data-layer/rfc/rfc-022","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/rfc-022-core-plugin-sdk-code-layout.md","tags":[{"inline":true,"label":"pattern","permalink":"/prism-data-layer/rfc/tags/pattern"},{"inline":true,"label":"sdk","permalink":"/prism-data-layer/rfc/tags/sdk"},{"inline":true,"label":"go","permalink":"/prism-data-layer/rfc/tags/go"},{"inline":true,"label":"library","permalink":"/prism-data-layer/rfc/tags/library"},{"inline":true,"label":"architecture","permalink":"/prism-data-layer/rfc/tags/architecture"},{"inline":true,"label":"code-layout","permalink":"/prism-data-layer/rfc/tags/code-layout"},{"inline":true,"label":"build-system","permalink":"/prism-data-layer/rfc/tags/build-system"},{"inline":true,"label":"tooling","permalink":"/prism-data-layer/rfc/tags/tooling"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-09T00:00:00.000Z","doc_uuid":"9b178843-abee-469b-89b8-220119336c92","id":"rfc-022","project_id":"prism-data-layer","status":"Proposed","tags":["pattern","sdk","go","library","architecture","code-layout","build-system","tooling"],"title":"Core Pattern SDK - Build System and Physical Code Layout","updated":"2025-10-09T00:00:00.000Z"},"sidebar":"rfcSidebar","previous":{"title":"POC 1 - Three Minimal Plugins Implementation Plan \u2022 RFC-021","permalink":"/prism-data-layer/rfc/rfc-021"},"next":{"title":"Publish Snapshotter Plugin - Write-Only Event Buffering with Pagination \u2022 RFC-023","permalink":"/prism-data-layer/rfc/rfc-023"}}');var r=t(74848),s=t(28453);const a={author:"Platform Team",created:new Date("2025-10-09T00:00:00.000Z"),doc_uuid:"9b178843-abee-469b-89b8-220119336c92",id:"rfc-022",project_id:"prism-data-layer",status:"Proposed",tags:["pattern","sdk","go","library","architecture","code-layout","build-system","tooling"],title:"Core Pattern SDK - Build System and Physical Code Layout",updated:new Date("2025-10-09T00:00:00.000Z")},o="RFC-022: Core Pattern SDK - Build System and Physical Code Layout",l={},c=[{value:"Summary",id:"summary",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Problem",id:"problem",level:3},{value:"Goals",id:"goals",level:3},{value:"Physical Code Layout",id:"physical-code-layout",level:2},{value:"Repository Structure",id:"repository-structure",level:3},{value:"Package Descriptions",id:"package-descriptions",level:2},{value:"1. <code>auth</code> - Token Validation",id:"1-auth---token-validation",level:3},{value:"2. <code>authz</code> - Policy-Based Authorization",id:"2-authz---policy-based-authorization",level:3},{value:"3. <code>audit</code> - Audit Logging",id:"3-audit---audit-logging",level:3},{value:"4. <code>plugin</code> - Plugin Lifecycle and Server",id:"4-plugin---plugin-lifecycle-and-server",level:3},{value:"5. <code>interfaces</code> - Backend Interface Contracts",id:"5-interfaces---backend-interface-contracts",level:3},{value:"6. <code>storage</code> - Storage Utilities",id:"6-storage---storage-utilities",level:3},{value:"7. <code>observability</code> - Logging, Metrics, Tracing",id:"7-observability---logging-metrics-tracing",level:3},{value:"8. <code>testing</code> - Test Utilities",id:"8-testing---test-utilities",level:3},{value:"9. <code>errors</code> - Standard Error Types",id:"9-errors---standard-error-types",level:3},{value:"Dependency Management",id:"dependency-management",level:2},{value:"External Dependencies (Minimal Set)",id:"external-dependencies-minimal-set",level:3},{value:"Dependency Boundaries",id:"dependency-boundaries",level:3},{value:"Versioning Strategy",id:"versioning-strategy",level:2},{value:"Semantic Versioning",id:"semantic-versioning",level:3},{value:"Version Compatibility",id:"version-compatibility",level:3},{value:"Example Pattern Using SDK",id:"example-pattern-using-sdk",level:2},{value:"Complete MemStore Plugin",id:"complete-memstore-plugin",level:3},{value:"SDK Documentation",id:"sdk-documentation",level:2},{value:"README.md",id:"readmemd",level:3},{value:"godoc Documentation",id:"godoc-documentation",level:3},{value:"Build and Release Automation",id:"build-and-release-automation",level:2},{value:"Makefile",id:"makefile",level:3},{value:"GitHub Actions CI",id:"github-actions-ci",level:3},{value:"GitHub Actions Release",id:"github-actions-release",level:3},{value:"Migration Path",id:"migration-path",level:2},{value:"Phase 1: Extract Core SDK (Week 1)",id:"phase-1-extract-core-sdk-week-1",level:3},{value:"Phase 2: Migrate Existing Plugins (Week 2)",id:"phase-2-migrate-existing-plugins-week-2",level:3},{value:"Phase 3: Documentation and Examples (Week 3)",id:"phase-3-documentation-and-examples-week-3",level:3},{value:"Phase 4: Stability and v1.0.0 (Week 4)",id:"phase-4-stability-and-v100-week-4",level:3},{value:"Benefits",id:"benefits",level:2},{value:"For Plugin Authors",id:"for-plugin-authors",level:3},{value:"For Prism Platform",id:"for-prism-platform",level:3},{value:"For Prism Users",id:"for-prism-users",level:3},{value:"Build System and Tooling",id:"build-system-and-tooling",level:2},{value:"Comprehensive Makefile Structure",id:"comprehensive-makefile-structure",level:3},{value:"Pattern-Specific Makefiles",id:"pattern-specific-makefiles",level:3},{value:"Build Targets Reference",id:"build-targets-reference",level:3},{value:"Compile-Time Validation",id:"compile-time-validation",level:2},{value:"Interface Implementation Checks",id:"interface-implementation-checks",level:3},{value:"Pattern Interface Validation",id:"pattern-interface-validation",level:3},{value:"Validation Script",id:"validation-script",level:3},{value:"Slot Configuration Validation",id:"slot-configuration-validation",level:3},{value:"Linting Configuration",id:"linting-configuration",level:2},{value:"golangci-lint Configuration",id:"golangci-lint-configuration",level:3},{value:"Pre-Commit Hook",id:"pre-commit-hook",level:3},{value:"Installing Hooks",id:"installing-hooks",level:3},{value:"Testing Infrastructure",id:"testing-infrastructure",level:2},{value:"Test Organization",id:"test-organization",level:3},{value:"Test Build Tags",id:"test-build-tags",level:3},{value:"Coverage Requirements",id:"coverage-requirements",level:3},{value:"Testcontainers Integration",id:"testcontainers-integration",level:3},{value:"Benchmark Tests",id:"benchmark-tests",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:3},{value:"Open Questions",id:"open-questions",level:2},{value:"Related Documents",id:"related-documents",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"rfc-022-core-pattern-sdk---build-system-and-physical-code-layout",children:"RFC-022: Core Pattern SDK - Build System and Physical Code Layout"})}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.p,{children:["Define the physical code layout, build system, and tooling infrastructure for the Prism core pattern SDK, making it publishable as a standard Go library (",(0,r.jsx)(n.code,{children:"github.com/prism/pattern-sdk"}),"). This RFC establishes the directory structure, package organization, dependency boundaries, versioning strategy, Makefiles, compile-time validation, linting, and testing infrastructure to enable pattern authors to build sophisticated patterns with a clean, well-organized SDK."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": This RFC focuses on ",(0,r.jsx)(n.strong,{children:"build system and tooling"}),". For pattern architecture and concurrency primitives, see ",(0,r.jsx)(n.a,{href:"/rfc/rfc-025",children:"RFC-025: Pattern SDK Architecture"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Goals"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clean separation"}),": Authentication, authorization, storage interfaces, utilities in separate packages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Go idioms"}),": Follow standard Go project layout conventions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Minimal dependencies"}),": Only essential external libraries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Versioning"}),": Semantic versioning with Go modules"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Discoverability"}),": Clear package names and godoc-friendly structure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Extensibility"}),": Easy to add new interfaces without breaking existing patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Build automation"}),": Makefiles, compile-time validation, linting, testing infrastructure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Developer experience"}),": Fast builds, instant feedback, clear error messages"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,r.jsx)(n.h3,{id:"problem",children:"Problem"}),"\n",(0,r.jsx)(n.p,{children:"Current pattern implementations have scattered code with unclear boundaries:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"No standard SDK structure for pattern authors to follow"}),"\n",(0,r.jsx)(n.li,{children:"Authorization, token validation, and audit logging are reimplemented per pattern"}),"\n",(0,r.jsx)(n.li,{children:"gRPC interceptors, connection management, and lifecycle hooks are duplicated"}),"\n",(0,r.jsx)(n.li,{children:"No clear versioning strategy for SDK evolution"}),"\n",(0,r.jsx)(n.li,{children:"Pattern authors need to figure out dependencies and setup from scratch"}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Build system inconsistencies"}),": No standardized Makefile targets, linting, or testing infrastructure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Manual validation"}),": No compile-time checks for interface implementation or slot requirements"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Slow iteration"}),": Lack of automated tooling slows development"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"goals",children:"Goals"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reusable SDK"}),": Pattern authors import ",(0,r.jsx)(n.code,{children:"github.com/prism/pattern-sdk"})," and get batteries-included functionality"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Defense-in-depth"}),": Authorization layer built into SDK (RFC-019 implementation)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Standard interfaces"}),": Backend interface contracts from protobuf definitions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lifecycle management"}),": Pattern startup, health checks, graceful shutdown (RFC-025)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Observability"}),": Structured logging, metrics, tracing built-in"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing utilities"}),": Helpers for pattern integration tests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Automated builds"}),": Makefile-based build system with parallel builds and caching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Compile-time validation"}),": Interface assertions, type checks, slot validation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Quality gates"}),": Linting, test coverage, pre-commit hooks"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"physical-code-layout",children:"Physical Code Layout"}),"\n",(0,r.jsx)(n.h3,{id:"repository-structure",children:"Repository Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"pattern-sdk/\n\u251c\u2500\u2500 go.mod                      # Module: github.com/prism/pattern-sdk\n\u251c\u2500\u2500 go.sum\n\u251c\u2500\u2500 README.md                   # SDK overview, quick start, patterns\n\u251c\u2500\u2500 LICENSE                     # Apache 2.0\n\u251c\u2500\u2500 Makefile                    # Root Makefile (build, test, lint, proto)\n\u251c\u2500\u2500 .golangci.yml               # Linting configuration\n\u251c\u2500\u2500 .github/\n\u2502   \u2514\u2500\u2500 workflows/\n\u2502       \u251c\u2500\u2500 ci.yml              # Build, test, lint, coverage\n\u2502       \u2514\u2500\u2500 release.yml         # Automated releases with tags\n\u251c\u2500\u2500 .githooks/                  # Git hooks (pre-commit validation)\n\u2502   \u2514\u2500\u2500 pre-commit\n\u251c\u2500\u2500 doc.go                      # Package documentation root\n\u2502\n\u251c\u2500\u2500 auth/                       # Package: github.com/prism/pattern-sdk/auth\n\u2502   \u251c\u2500\u2500 token.go                # Token validation (JWT/OIDC)\n\u2502   \u251c\u2500\u2500 token_test.go\n\u2502   \u251c\u2500\u2500 jwks.go                 # JWKS caching\n\u2502   \u251c\u2500\u2500 jwks_test.go\n\u2502   \u251c\u2500\u2500 claims.go               # Token claims extraction\n\u2502   \u2514\u2500\u2500 doc.go                  # Package documentation\n\u2502\n\u251c\u2500\u2500 authz/                      # Package: github.com/prism/pattern-sdk/authz\n\u2502   \u251c\u2500\u2500 topaz.go                # Topaz client for policy checks\n\u2502   \u251c\u2500\u2500 topaz_test.go\n\u2502   \u251c\u2500\u2500 cache.go                # Decision caching (5s TTL)\n\u2502   \u251c\u2500\u2500 cache_test.go\n\u2502   \u251c\u2500\u2500 policy.go               # Policy decision types\n\u2502   \u2514\u2500\u2500 doc.go                  # Package documentation\n\u2502\n\u251c\u2500\u2500 audit/                      # Package: github.com/prism/pattern-sdk/audit\n\u2502   \u251c\u2500\u2500 logger.go               # Async audit logger\n\u2502   \u251c\u2500\u2500 logger_test.go\n\u2502   \u251c\u2500\u2500 event.go                # Audit event types\n\u2502   \u251c\u2500\u2500 buffer.go               # Buffered event channel\n\u2502   \u2514\u2500\u2500 doc.go                  # Package documentation\n\u2502\n\u251c\u2500\u2500 plugin/                     # Package: github.com/prism/pattern-sdk/plugin\n\u2502   \u251c\u2500\u2500 server.go               # gRPC server setup\n\u2502   \u251c\u2500\u2500 server_test.go\n\u2502   \u251c\u2500\u2500 lifecycle.go            # Startup, health, shutdown hooks\n\u2502   \u251c\u2500\u2500 lifecycle_test.go\n\u2502   \u251c\u2500\u2500 config.go               # Plugin configuration loading\n\u2502   \u251c\u2500\u2500 config_test.go\n\u2502   \u251c\u2500\u2500 interceptor.go          # gRPC interceptors (auth, logging)\n\u2502   \u251c\u2500\u2500 interceptor_test.go\n\u2502   \u2514\u2500\u2500 doc.go                  # Package documentation\n\u2502\n\u251c\u2500\u2500 interfaces/                 # Package: github.com/prism/pattern-sdk/interfaces\n\u2502   \u251c\u2500\u2500 keyvalue.go             # KeyValue interface contracts\n\u2502   \u251c\u2500\u2500 pubsub.go               # PubSub interface contracts\n\u2502   \u251c\u2500\u2500 stream.go               # Stream interface contracts\n\u2502   \u251c\u2500\u2500 queue.go                # Queue interface contracts\n\u2502   \u251c\u2500\u2500 list.go                 # List interface contracts\n\u2502   \u251c\u2500\u2500 set.go                  # Set interface contracts\n\u2502   \u251c\u2500\u2500 sortedset.go            # SortedSet interface contracts\n\u2502   \u251c\u2500\u2500 timeseries.go           # TimeSeries interface contracts\n\u2502   \u251c\u2500\u2500 graph.go                # Graph interface contracts\n\u2502   \u251c\u2500\u2500 document.go             # Document interface contracts\n\u2502   \u2514\u2500\u2500 doc.go                  # Package documentation\n\u2502\n\u251c\u2500\u2500 storage/                    # Package: github.com/prism/pattern-sdk/storage\n\u2502   \u251c\u2500\u2500 connection.go           # Connection pooling helpers\n\u2502   \u251c\u2500\u2500 connection_test.go\n\u2502   \u251c\u2500\u2500 retry.go                # Retry logic with backoff\n\u2502   \u251c\u2500\u2500 retry_test.go\n\u2502   \u251c\u2500\u2500 health.go               # Health check helpers\n\u2502   \u251c\u2500\u2500 health_test.go\n\u2502   \u2514\u2500\u2500 doc.go                  # Package documentation\n\u2502\n\u251c\u2500\u2500 observability/              # Package: github.com/prism/pattern-sdk/observability\n\u2502   \u251c\u2500\u2500 logging.go              # Structured logging (zap wrapper)\n\u2502   \u251c\u2500\u2500 logging_test.go\n\u2502   \u251c\u2500\u2500 metrics.go              # Prometheus metrics helpers\n\u2502   \u251c\u2500\u2500 metrics_test.go\n\u2502   \u251c\u2500\u2500 tracing.go              # OpenTelemetry tracing helpers\n\u2502   \u251c\u2500\u2500 tracing_test.go\n\u2502   \u2514\u2500\u2500 doc.go                  # Package documentation\n\u2502\n\u251c\u2500\u2500 testing/                    # Package: github.com/prism/pattern-sdk/testing\n\u2502   \u251c\u2500\u2500 mock_auth.go            # Mock token validator\n\u2502   \u251c\u2500\u2500 mock_authz.go           # Mock policy checker\n\u2502   \u251c\u2500\u2500 mock_audit.go           # Mock audit logger\n\u2502   \u251c\u2500\u2500 testserver.go           # Test gRPC server helper\n\u2502   \u251c\u2500\u2500 fixtures.go             # Test fixtures (tokens, configs)\n\u2502   \u2514\u2500\u2500 doc.go                  # Package documentation\n\u2502\n\u251c\u2500\u2500 errors/                     # Package: github.com/prism/pattern-sdk/errors\n\u2502   \u251c\u2500\u2500 errors.go               # Standard error types\n\u2502   \u251c\u2500\u2500 grpc.go                 # gRPC status code mapping\n\u2502   \u2514\u2500\u2500 doc.go                  # Package documentation\n\u2502\n\u251c\u2500\u2500 proto/                      # Generated protobuf code\n\u2502   \u251c\u2500\u2500 keyvalue/               # KeyValue interface protos\n\u2502   \u2502   \u251c\u2500\u2500 keyvalue_basic.pb.go\n\u2502   \u2502   \u251c\u2500\u2500 keyvalue_scan.pb.go\n\u2502   \u2502   \u251c\u2500\u2500 keyvalue_ttl.pb.go\n\u2502   \u2502   \u2514\u2500\u2500 ...\n\u2502   \u251c\u2500\u2500 pubsub/                 # PubSub interface protos\n\u2502   \u251c\u2500\u2500 stream/                 # Stream interface protos\n\u2502   \u251c\u2500\u2500 queue/                  # Queue interface protos\n\u2502   \u2514\u2500\u2500 ...                     # Other interfaces\n\u2502\n\u251c\u2500\u2500 patterns/                   # Example plugins (not part of SDK)\n\u2502   \u251c\u2500\u2500 memstore/               # MemStore example\n\u2502   \u2502   \u251c\u2500\u2500 main.go\n\u2502   \u2502   \u251c\u2500\u2500 keyvalue.go\n\u2502   \u2502   \u2514\u2500\u2500 list.go\n\u2502   \u251c\u2500\u2500 redis/                  # Redis example\n\u2502   \u2502   \u251c\u2500\u2500 main.go\n\u2502   \u2502   \u2514\u2500\u2500 client.go\n\u2502   \u2514\u2500\u2500 postgres/               # Postgres example\n\u2502       \u251c\u2500\u2500 main.go\n\u2502       \u2514\u2500\u2500 pool.go\n\u2502\n\u2514\u2500\u2500 tools/                      # Build and generation tools\n    \u251c\u2500\u2500 proto-gen.sh            # Protobuf code generation\n    \u2514\u2500\u2500 release.sh              # Release automation\n"})}),"\n",(0,r.jsx)(n.h2,{id:"package-descriptions",children:"Package Descriptions"}),"\n",(0,r.jsxs)(n.h3,{id:"1-auth---token-validation",children:["1. ",(0,r.jsx)(n.code,{children:"auth"})," - Token Validation"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": JWT/OIDC token validation with JWKS caching"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exported Types"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type TokenValidator interface {\n    Validate(ctx context.Context, token string) (*Claims, error)\n    InvalidateCache()\n}\n\ntype Claims struct {\n    Subject   string\n    Issuer    string\n    Audience  []string\n    ExpiresAt time.Time\n    IssuedAt  time.Time\n    Custom    map[string]interface{}\n}\n\ntype JWKSCache interface {\n    GetKey(kid string) (*rsa.PublicKey, error)\n    Refresh() error\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configuration"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type TokenValidatorConfig struct {\n    JWKSEndpoint    string\n    CacheTTL        time.Duration  // Default: 1 hour\n    AllowedIssuers  []string\n    AllowedAudiences []string\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import "github.com/prism/pattern-sdk/auth"\n\nvalidator, err := auth.NewTokenValidator(&auth.TokenValidatorConfig{\n    JWKSEndpoint: "https://dex.local/keys",\n    CacheTTL:     1 * time.Hour,\n})\n\nclaims, err := validator.Validate(ctx, tokenString)\nfmt.Printf("User: %s\\n", claims.Subject)\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"2-authz---policy-based-authorization",children:["2. ",(0,r.jsx)(n.code,{children:"authz"})," - Policy-Based Authorization"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Topaz integration for policy checks with decision caching"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exported Types"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type PolicyChecker interface {\n    Check(ctx context.Context, req *AuthzRequest) (*Decision, error)\n    InvalidateCache()\n}\n\ntype AuthzRequest struct {\n    Subject  string\n    Action   string\n    Resource string\n    Context  map[string]interface{}\n}\n\ntype Decision struct {\n    Allowed bool\n    Reason  string\n    CachedAt time.Time\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configuration"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type TopazConfig struct {\n    Endpoint     string\n    CacheTTL     time.Duration  // Default: 5 seconds\n    FailOpen     bool           // Default: false (fail-closed)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import "github.com/prism/pattern-sdk/authz"\n\nchecker, err := authz.NewTopazClient(&authz.TopazConfig{\n    Endpoint: "localhost:8282",\n    CacheTTL: 5 * time.Second,\n})\n\ndecision, err := checker.Check(ctx, &authz.AuthzRequest{\n    Subject:  "user:alice",\n    Action:   "read",\n    Resource: "namespace:production",\n})\n\nif !decision.Allowed {\n    return errors.New("access denied")\n}\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"3-audit---audit-logging",children:["3. ",(0,r.jsx)(n.code,{children:"audit"})," - Audit Logging"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Async audit logging with buffered events"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exported Types"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type AuditLogger interface {\n    LogAccess(ctx context.Context, event *AccessEvent) error\n    Flush() error\n    Close() error\n}\n\ntype AccessEvent struct {\n    Timestamp   time.Time\n    Subject     string\n    Action      string\n    Resource    string\n    Outcome     string  // "allow" | "deny"\n    Latency     time.Duration\n    Metadata    map[string]interface{}\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configuration"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'type AuditConfig struct {\n    Destination string  // "stdout" | "file" | "syslog" | "kafka"\n    BufferSize  int     // Default: 1000\n    FlushInterval time.Duration  // Default: 1 second\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import "github.com/prism/pattern-sdk/audit"\n\nlogger, err := audit.NewAuditLogger(&audit.AuditConfig{\n    Destination: "stdout",\n    BufferSize:  1000,\n})\ndefer logger.Close()\n\nlogger.LogAccess(ctx, &audit.AccessEvent{\n    Subject:  "user:alice",\n    Action:   "keyvalue.Set",\n    Resource: "namespace:production/key:user:123",\n    Outcome:  "allow",\n})\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"4-plugin---plugin-lifecycle-and-server",children:["4. ",(0,r.jsx)(n.code,{children:"plugin"})," - Plugin Lifecycle and Server"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": gRPC server setup, lifecycle hooks, interceptors"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exported Types"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type Plugin interface {\n    Name() string\n    Version() string\n    Start(ctx context.Context) error\n    Stop(ctx context.Context) error\n    HealthCheck(ctx context.Context) (*HealthStatus, error)\n}\n\ntype Server struct {\n    Config      *ServerConfig\n    GRPCServer  *grpc.Server\n    Interceptors []grpc.UnaryServerInterceptor\n}\n\ntype ServerConfig struct {\n    ListenAddress string\n    MaxConns      int\n    EnableAuth    bool\n    EnableAuthz   bool\n    EnableAudit   bool\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import "github.com/prism/pattern-sdk/plugin"\n\nserver := plugin.NewServer(&plugin.ServerConfig{\n    ListenAddress: ":50051",\n    EnableAuth:    true,\n    EnableAuthz:   true,\n    EnableAudit:   true,\n})\n\n// Register services\npb.RegisterKeyValueBasicInterfaceServer(server.GRPCServer, myPlugin)\n\n// Start server\nif err := server.Start(); err != nil {\n    log.Fatal(err)\n}\ndefer server.Stop()\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"5-interfaces---backend-interface-contracts",children:["5. ",(0,r.jsx)(n.code,{children:"interfaces"})," - Backend Interface Contracts"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Go interface definitions matching protobuf services"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exported Types"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// KeyValue interfaces\ntype KeyValueBasic interface {\n    Set(ctx context.Context, req *pb.SetRequest) (*pb.SetResponse, error)\n    Get(ctx context.Context, req *pb.GetRequest) (*pb.GetResponse, error)\n    Delete(ctx context.Context, req *pb.DeleteRequest) (*pb.DeleteResponse, error)\n    Exists(ctx context.Context, req *pb.ExistsRequest) (*pb.ExistsResponse, error)\n}\n\ntype KeyValueScan interface {\n    Scan(req *pb.ScanRequest, stream pb.KeyValueScanInterface_ScanServer) error\n    ScanKeys(req *pb.ScanKeysRequest, stream pb.KeyValueScanInterface_ScanKeysServer) error\n    Count(ctx context.Context, req *pb.CountRequest) (*pb.CountResponse, error)\n}\n\ntype KeyValueTTL interface {\n    Expire(ctx context.Context, req *pb.ExpireRequest) (*pb.ExpireResponse, error)\n    GetTTL(ctx context.Context, req *pb.GetTTLRequest) (*pb.GetTTLResponse, error)\n    Persist(ctx context.Context, req *pb.PersistRequest) (*pb.PersistResponse, error)\n}\n\n// PubSub interfaces\ntype PubSubBasic interface {\n    Publish(ctx context.Context, req *pb.PublishRequest) (*pb.PublishResponse, error)\n    Subscribe(req *pb.SubscribeRequest, stream pb.PubSubBasicInterface_SubscribeServer) error\n    Unsubscribe(ctx context.Context, req *pb.UnsubscribeRequest) (*pb.UnsubscribeResponse, error)\n}\n\n// Queue interfaces\ntype QueueBasic interface {\n    Enqueue(ctx context.Context, req *pb.EnqueueRequest) (*pb.EnqueueResponse, error)\n    Dequeue(ctx context.Context, req *pb.DequeueRequest) (*pb.DequeueResponse, error)\n    Peek(ctx context.Context, req *pb.PeekRequest) (*pb.PeekResponse, error)\n}\n\n// ... other interfaces\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage"}),": Plugin implementations satisfy these interfaces:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type MyPlugin struct {\n    // ... fields\n}\n\n// Implement KeyValueBasic interface\nfunc (p *MyPlugin) Set(ctx context.Context, req *pb.SetRequest) (*pb.SetResponse, error) {\n    // Implementation\n}\n"})}),"\n",(0,r.jsxs)(n.h3,{id:"6-storage---storage-utilities",children:["6. ",(0,r.jsx)(n.code,{children:"storage"})," - Storage Utilities"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Connection pooling, retry logic, health checks"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exported Types"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type ConnectionPool interface {\n    Get(ctx context.Context) (Connection, error)\n    Put(conn Connection) error\n    Close() error\n}\n\ntype RetryPolicy struct {\n    MaxAttempts int\n    InitialBackoff time.Duration\n    MaxBackoff time.Duration\n    Multiplier float64\n}\n\nfunc WithRetry(ctx context.Context, policy *RetryPolicy, fn func() error) error\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import "github.com/prism/pattern-sdk/storage"\n\npolicy := &storage.RetryPolicy{\n    MaxAttempts:    3,\n    InitialBackoff: 100 * time.Millisecond,\n    MaxBackoff:     5 * time.Second,\n    Multiplier:     2.0,\n}\n\nerr := storage.WithRetry(ctx, policy, func() error {\n    return db.Exec("INSERT INTO ...")\n})\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"7-observability---logging-metrics-tracing",children:["7. ",(0,r.jsx)(n.code,{children:"observability"})," - Logging, Metrics, Tracing"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Structured logging, Prometheus metrics, OpenTelemetry tracing"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exported Types"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type Logger interface {\n    Info(msg string, fields ...Field)\n    Error(msg string, err error, fields ...Field)\n    Debug(msg string, fields ...Field)\n    With(fields ...Field) Logger\n}\n\ntype MetricsRegistry interface {\n    Counter(name string, labels ...string) Counter\n    Gauge(name string, labels ...string) Gauge\n    Histogram(name string, buckets []float64, labels ...string) Histogram\n}\n\ntype Tracer interface {\n    StartSpan(ctx context.Context, name string) (context.Context, Span)\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import "github.com/prism/pattern-sdk/observability"\n\nlogger := observability.NewLogger(&observability.LogConfig{\n    Level: "info",\n    Format: "json",\n})\n\nlogger.Info("Request received",\n    observability.String("method", "Set"),\n    observability.String("key", req.Key),\n)\n\nmetrics := observability.NewMetrics()\nrequestCounter := metrics.Counter("plugin_requests_total", "method", "status")\nrequestCounter.Inc("Set", "success")\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"8-testing---test-utilities",children:["8. ",(0,r.jsx)(n.code,{children:"testing"})," - Test Utilities"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Mock implementations, test fixtures, test server helpers"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exported Types"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"type MockTokenValidator struct {\n    ValidateFunc func(ctx context.Context, token string) (*auth.Claims, error)\n}\n\ntype MockPolicyChecker struct {\n    CheckFunc func(ctx context.Context, req *authz.AuthzRequest) (*authz.Decision, error)\n}\n\ntype TestServer struct {\n    Server *grpc.Server\n    Port   int\n}\n\nfunc NewTestServer(plugin interface{}) (*TestServer, error)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import "github.com/prism/pattern-sdk/testing"\n\n// Mock token validator for tests\nmockAuth := &testing.MockTokenValidator{\n    ValidateFunc: func(ctx context.Context, token string) (*auth.Claims, error) {\n        return &auth.Claims{Subject: "test-user"}, nil\n    },\n}\n\n// Test server\ntestServer, err := testing.NewTestServer(myPlugin)\ndefer testServer.Stop()\n\nconn, _ := grpc.Dial(fmt.Sprintf("localhost:%d", testServer.Port), grpc.WithInsecure())\nclient := pb.NewKeyValueBasicInterfaceClient(conn)\n'})}),"\n",(0,r.jsxs)(n.h3,{id:"9-errors---standard-error-types",children:["9. ",(0,r.jsx)(n.code,{children:"errors"})," - Standard Error Types"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Standard error types with gRPC status code mapping"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Exported Types"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'var (\n    ErrNotFound        = errors.New("not found")\n    ErrAlreadyExists   = errors.New("already exists")\n    ErrInvalidArgument = errors.New("invalid argument")\n    ErrPermissionDenied = errors.New("permission denied")\n    ErrUnauthenticated = errors.New("unauthenticated")\n    ErrInternal        = errors.New("internal error")\n)\n\nfunc ToGRPCStatus(err error) *status.Status\nfunc FromGRPCStatus(st *status.Status) error\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Usage Example"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import "github.com/prism/pattern-sdk/errors"\n\nif key == "" {\n    return nil, errors.ErrInvalidArgument\n}\n\nif !found {\n    return nil, errors.ErrNotFound\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"dependency-management",children:"Dependency Management"}),"\n",(0,r.jsx)(n.h3,{id:"external-dependencies-minimal-set",children:"External Dependencies (Minimal Set)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// go.mod\nmodule github.com/prism/pattern-sdk\n\ngo 1.21\n\nrequire (\n    // gRPC and protobuf\n    google.golang.org/grpc v1.58.0\n    google.golang.org/protobuf v1.31.0\n\n    // Auth (JWT validation)\n    github.com/golang-jwt/jwt/v5 v5.0.0\n    github.com/lestrrat-go/jwx/v2 v2.0.11\n\n    // Authz (Topaz client)\n    github.com/aserto-dev/go-authorizer v0.20.0\n    github.com/aserto-dev/go-grpc-authz v0.8.0\n\n    // Observability\n    go.uber.org/zap v1.25.0\n    github.com/prometheus/client_golang v1.16.0\n    go.opentelemetry.io/otel v1.16.0\n    go.opentelemetry.io/otel/trace v1.16.0\n)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Rationale"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"gRPC/Protobuf"}),": Core communication protocol"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"JWT libraries"}),": Token validation (JWKS, claims parsing)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Topaz SDK"}),": Aserto's official Go client for policy checks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Zap"}),": High-performance structured logging"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Prometheus"}),": Standard metrics library"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OpenTelemetry"}),": Distributed tracing standard"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"dependency-boundaries",children:"Dependency Boundaries"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      Plugin Implementation                   \u2502\n\u2502                  (Backend-specific code)                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                             \u2502\n                             \u2502 imports\n                             \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    plugin-sdk/plugin                         \u2502\n\u2502              (Server, Lifecycle, Interceptors)               \u2502\n\u2514\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   \u2502                      \u2502                  \u2502\n   \u2502 imports              \u2502 imports          \u2502 imports\n   \u25bc                      \u25bc                  \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   auth   \u2502      \u2502   authz  \u2502      \u2502  audit   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   \u2502                      \u2502                  \u2502\n   \u2502                      \u2502                  \u2502\n   \u25bc                      \u25bc                  \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   External Dependencies                      \u2502\n\u2502       (gRPC, JWT, Topaz, Zap, Prometheus, OTel)             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Rules"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No circular dependencies"}),": Packages must have clear import hierarchy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Minimal external deps"}),": Only add dependencies that provide significant value"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Interface boundaries"}),": Packages export interfaces, not concrete types where possible"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Testing isolation"}),": ",(0,r.jsx)(n.code,{children:"testing"})," package has no dependencies on ",(0,r.jsx)(n.code,{children:"auth"}),", ",(0,r.jsx)(n.code,{children:"authz"}),", ",(0,r.jsx)(n.code,{children:"audit"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"versioning-strategy",children:"Versioning Strategy"}),"\n",(0,r.jsx)(n.h3,{id:"semantic-versioning",children:"Semantic Versioning"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"v0.1.0 - Initial release (POC 1)\nv0.2.0 - Add PubSub interfaces (POC 2)\nv0.3.0 - Add Stream interfaces (POC 3)\nv1.0.0 - Stable API (all core interfaces)\nv1.1.0 - Add new optional interface (backward compatible)\nv2.0.0 - Breaking change (e.g., change interface signature)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Go Modules"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install specific version\ngo get github.com/prism/pattern-sdk@v0.1.0\n\n# Install latest\ngo get github.com/prism/pattern-sdk@latest\n\n# Install pre-release\ngo get github.com/prism/pattern-sdk@v0.2.0-beta.1\n"})}),"\n",(0,r.jsx)(n.h3,{id:"version-compatibility",children:"Version Compatibility"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Backward Compatibility Rules"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Adding interfaces"}),": Non-breaking (plugins can ignore new interfaces)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Adding methods to interfaces"}),": Breaking (requires major version bump)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Adding optional fields to configs"}),": Non-breaking (use pointers for optionality)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Changing function signatures"}),": Breaking (requires major version bump)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Deprecation Policy"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Deprecated: Use NewTokenValidator instead\nfunc NewValidator(cfg *Config) (*Validator, error) {\n    // Old implementation kept for 2 minor versions\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"example-pattern-using-sdk",children:"Example Pattern Using SDK"}),"\n",(0,r.jsx)(n.h3,{id:"complete-memstore-plugin",children:"Complete MemStore Plugin"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// plugins/memstore/main.go\npackage main\n\nimport (\n    "context"\n    "log"\n    "os"\n    "os/signal"\n    "syscall"\n\n    "github.com/prism/pattern-sdk/plugin"\n    "github.com/prism/pattern-sdk/observability"\n    pb "github.com/prism/pattern-sdk/proto/keyvalue"\n)\n\nfunc main() {\n    // Initialize logger\n    logger := observability.NewLogger(&observability.LogConfig{\n        Level:  "info",\n        Format: "json",\n    })\n\n    // Create plugin instance\n    memstore := NewMemStorePlugin(logger)\n\n    // Configure server\n    server := plugin.NewServer(&plugin.ServerConfig{\n        ListenAddress: ":50051",\n        EnableAuth:    true,\n        EnableAuthz:   true,\n        EnableAudit:   true,\n    })\n\n    // Register services\n    pb.RegisterKeyValueBasicInterfaceServer(server.GRPCServer, memstore)\n    pb.RegisterKeyValueTTLInterfaceServer(server.GRPCServer, memstore)\n\n    // Start server\n    if err := server.Start(); err != nil {\n        log.Fatalf("Failed to start server: %v", err)\n    }\n\n    logger.Info("MemStore plugin started", observability.Int("port", 50051))\n\n    // Graceful shutdown\n    sigCh := make(chan os.Signal, 1)\n    signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)\n    <-sigCh\n\n    logger.Info("Shutting down...")\n    server.Stop()\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// plugins/memstore/plugin.go\npackage main\n\nimport (\n    "context"\n    "sync"\n    "time"\n\n    "github.com/prism/pattern-sdk/interfaces"\n    "github.com/prism/pattern-sdk/observability"\n    "github.com/prism/pattern-sdk/errors"\n    pb "github.com/prism/pattern-sdk/proto/keyvalue"\n)\n\ntype MemStorePlugin struct {\n    pb.UnimplementedKeyValueBasicInterfaceServer\n    pb.UnimplementedKeyValueTTLInterfaceServer\n\n    data   sync.Map  // map[string][]byte\n    ttls   sync.Map  // map[string]*time.Timer\n    logger observability.Logger\n}\n\nfunc NewMemStorePlugin(logger observability.Logger) *MemStorePlugin {\n    return &MemStorePlugin{\n        logger: logger,\n    }\n}\n\n// Implement KeyValueBasic interface\nfunc (m *MemStorePlugin) Set(ctx context.Context, req *pb.SetRequest) (*pb.SetResponse, error) {\n    m.logger.Info("Set operation",\n        observability.String("key", req.Key),\n        observability.Int("value_size", len(req.Value)),\n    )\n\n    m.data.Store(req.Key, req.Value)\n\n    if req.TtlSeconds > 0 {\n        m.setTTL(req.Key, time.Duration(req.TtlSeconds)*time.Second)\n    }\n\n    return &pb.SetResponse{Success: true}, nil\n}\n\nfunc (m *MemStorePlugin) Get(ctx context.Context, req *pb.GetRequest) (*pb.GetResponse, error) {\n    value, ok := m.data.Load(req.Key)\n    if !ok {\n        return nil, errors.ErrNotFound\n    }\n\n    return &pb.GetResponse{Value: value.([]byte)}, nil\n}\n\nfunc (m *MemStorePlugin) Delete(ctx context.Context, req *pb.DeleteRequest) (*pb.DeleteResponse, error) {\n    _, found := m.data.LoadAndDelete(req.Key)\n\n    if timer, ok := m.ttls.LoadAndDelete(req.Key); ok {\n        timer.(*time.Timer).Stop()\n    }\n\n    return &pb.DeleteResponse{Found: found}, nil\n}\n\nfunc (m *MemStorePlugin) Exists(ctx context.Context, req *pb.ExistsRequest) (*pb.ExistsResponse, error) {\n    _, ok := m.data.Load(req.Key)\n    return &pb.ExistsResponse{Exists: ok}, nil\n}\n\n// Implement KeyValueTTL interface\nfunc (m *MemStorePlugin) Expire(ctx context.Context, req *pb.ExpireRequest) (*pb.ExpireResponse, error) {\n    m.setTTL(req.Key, time.Duration(req.Seconds)*time.Second)\n    return &pb.ExpireResponse{Success: true}, nil\n}\n\nfunc (m *MemStorePlugin) GetTTL(ctx context.Context, req *pb.GetTTLRequest) (*pb.GetTTLResponse, error) {\n    // Simplified: not tracking remaining TTL\n    return &pb.GetTTLResponse{Seconds: -1}, nil\n}\n\nfunc (m *MemStorePlugin) Persist(ctx context.Context, req *pb.PersistRequest) (*pb.PersistResponse, error) {\n    if timer, ok := m.ttls.LoadAndDelete(req.Key); ok {\n        timer.(*time.Timer).Stop()\n        return &pb.PersistResponse{Success: true}, nil\n    }\n    return &pb.PersistResponse{Success: false}, nil\n}\n\n// Helper methods\nfunc (m *MemStorePlugin) setTTL(key string, duration time.Duration) {\n    timer := time.AfterFunc(duration, func() {\n        m.data.Delete(key)\n        m.ttls.Delete(key)\n    })\n    m.ttls.Store(key, timer)\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"sdk-documentation",children:"SDK Documentation"}),"\n",(0,r.jsx)(n.h3,{id:"readmemd",children:"README.md"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'# Prism Plugin SDK\n\nGo SDK for building Prism backend plugins with batteries-included authorization, audit logging, and observability.\n\n## Installation\n\n    go get github.com/prism/pattern-sdk@latest\n\n## Quick Start\n\n    import (\n        "github.com/prism/pattern-sdk/plugin"\n        pb "github.com/prism/pattern-sdk/proto/keyvalue"\n    )\n\n    func main() {\n        server := plugin.NewServer(&plugin.ServerConfig{\n            ListenAddress: ":50051",\n            EnableAuth:    true,\n        })\n\n        pb.RegisterKeyValueBasicInterfaceServer(server.GRPCServer, myPlugin)\n\n        server.Start()\n    }\n\n## Features\n\n- \u2705 **Authentication**: JWT/OIDC token validation with JWKS caching\n- \u2705 **Authorization**: Topaz policy checks with decision caching\n- \u2705 **Audit Logging**: Async audit logging with buffered events\n- \u2705 **Observability**: Structured logging, Prometheus metrics, OpenTelemetry tracing\n- \u2705 **Testing**: Mock implementations and test utilities\n- \u2705 **Lifecycle**: Health checks, graceful shutdown\n- \u2705 **Storage**: Connection pooling, retry logic\n\n## Documentation\n\n- [API Reference](https://pkg.go.dev/github.com/prism/pattern-sdk)\n- [Examples](./patterns/)\n- [RFC-022: SDK Code Layout](https://jrepp.github.io/prism-data-layer/rfc/rfc-022-core-plugin-sdk-code-layout)\n\n## Examples\n\nSee [patterns/](./patterns/) directory for:\n- MemStore plugin (in-memory KeyValue + List)\n- Redis plugin (KeyValue + PubSub + Stream)\n- Postgres plugin (KeyValue + Queue + TimeSeries)\n\n## Versioning\n\nThis project uses [Semantic Versioning](https://semver.org/):\n- v0.x.x - Pre-1.0 releases (API may change)\n- v1.x.x - Stable API (backward compatible)\n- v2.x.x - Breaking changes\n\n## License\n\nApache 2.0 - See [LICENSE](./LICENSE)\n'})}),"\n",(0,r.jsx)(n.h3,{id:"godoc-documentation",children:"godoc Documentation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Package plugin provides core functionality for building Prism backend plugins.\n//\n// The plugin-sdk enables backend plugin authors to build production-ready\n// plugins with authentication, authorization, audit logging, and observability\n// built-in.\n//\n// Quick Start\n//\n// Import the SDK and create a plugin server:\n//\n//     import "github.com/prism/pattern-sdk/plugin"\n//\n//     server := plugin.NewServer(&plugin.ServerConfig{\n//         ListenAddress: ":50051",\n//         EnableAuth:    true,\n//         EnableAuthz:   true,\n//     })\n//\n// Implement backend interfaces:\n//\n//     type MyPlugin struct {\n//         // fields\n//     }\n//\n//     func (p *MyPlugin) Set(ctx context.Context, req *pb.SetRequest) (*pb.SetResponse, error) {\n//         // implementation\n//     }\n//\n// Register and start:\n//\n//     pb.RegisterKeyValueBasicInterfaceServer(server.GRPCServer, myPlugin)\n//     server.Start()\n//\n// Authorization\n//\n// Enable defense-in-depth authorization with Topaz policy checks:\n//\n//     import "github.com/prism/pattern-sdk/authz"\n//\n//     checker, err := authz.NewTopazClient(&authz.TopazConfig{\n//         Endpoint: "localhost:8282",\n//     })\n//\n// Observability\n//\n// Structured logging and metrics:\n//\n//     import "github.com/prism/pattern-sdk/observability"\n//\n//     logger := observability.NewLogger(&observability.LogConfig{Level: "info"})\n//     logger.Info("Request received", observability.String("method", "Set"))\n//\n// Testing\n//\n// Use mock implementations for unit tests:\n//\n//     import "github.com/prism/pattern-sdk/testing"\n//\n//     mockAuth := &testing.MockTokenValidator{\n//         ValidateFunc: func(ctx, token) (*Claims, error) {\n//             return &Claims{Subject: "test"}, nil\n//         },\n//     }\n//\npackage plugin\n'})}),"\n",(0,r.jsx)(n.h2,{id:"build-and-release-automation",children:"Build and Release Automation"}),"\n",(0,r.jsx)(n.h3,{id:"makefile",children:"Makefile"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:'# Makefile\n.PHONY: all build test lint proto clean release\n\nall: proto test build\n\n# Generate protobuf code\nproto:\n\t@echo "Generating protobuf code..."\n\t./tools/proto-gen.sh\n\n# Build SDK (no binary, just verify compilation)\nbuild:\n\t@echo "Building SDK..."\n\tgo build ./...\n\n# Run tests\ntest:\n\t@echo "Running tests..."\n\tgo test -v -race -cover ./...\n\n# Lint code\nlint:\n\t@echo "Linting..."\n\tgolangci-lint run ./...\n\n# Clean build artifacts\nclean:\n\t@echo "Cleaning..."\n\trm -rf proto/*.pb.go\n\n# Release (tag and push)\nrelease:\n\t@echo "Releasing..."\n\t./tools/release.sh\n'})}),"\n",(0,r.jsx)(n.h3,{id:"github-actions-ci",children:"GitHub Actions CI"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/ci.yml\nname: CI\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: '1.21'\n\n      - name: Install dependencies\n        run: go mod download\n\n      - name: Run tests\n        run: go test -v -race -coverprofile=coverage.out ./...\n\n      - name: Upload coverage\n        uses: codecov/codecov-action@v3\n        with:\n          file: ./coverage.out\n\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: golangci/golangci-lint-action@v3\n        with:\n          version: latest\n"})}),"\n",(0,r.jsx)(n.h3,{id:"github-actions-release",children:"GitHub Actions Release"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/release.yml\nname: Release\n\non:\n  push:\n    tags:\n      - 'v*'\n\njobs:\n  release:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: '1.21'\n\n      - name: Create Release\n        uses: softprops/action-gh-release@v1\n        with:\n          generate_release_notes: true\n"})}),"\n",(0,r.jsx)(n.h2,{id:"migration-path",children:"Migration Path"}),"\n",(0,r.jsx)(n.h3,{id:"phase-1-extract-core-sdk-week-1",children:"Phase 1: Extract Core SDK (Week 1)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create ",(0,r.jsx)(n.code,{children:"github.com/prism/pattern-sdk"})," repository"]}),"\n",(0,r.jsxs)(n.li,{children:["Extract ",(0,r.jsx)(n.code,{children:"auth"}),", ",(0,r.jsx)(n.code,{children:"authz"}),", ",(0,r.jsx)(n.code,{children:"audit"})," packages from RFC-019 patterns"]}),"\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.code,{children:"plugin"})," package with server and lifecycle"]}),"\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.code,{children:"interfaces"})," package with Go interface definitions"]}),"\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.code,{children:"observability"})," package with logging/metrics/tracing"]}),"\n",(0,r.jsx)(n.li,{children:"Write tests achieving >80% coverage"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-2-migrate-existing-plugins-week-2",children:"Phase 2: Migrate Existing Plugins (Week 2)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Update MemStore plugin to use SDK"}),"\n",(0,r.jsx)(n.li,{children:"Update Redis plugin to use SDK (if exists)"}),"\n",(0,r.jsx)(n.li,{children:"Update Postgres plugin to use SDK (if exists)"}),"\n",(0,r.jsx)(n.li,{children:"Verify all plugins work with new SDK"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-3-documentation-and-examples-week-3",children:"Phase 3: Documentation and Examples (Week 3)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Write comprehensive README.md"}),"\n",(0,r.jsx)(n.li,{children:"Add godoc comments to all exported types"}),"\n",(0,r.jsx)(n.li,{children:"Create 3 example plugins (MemStore, Redis, Postgres)"}),"\n",(0,r.jsx)(n.li,{children:"Publish SDK to pkg.go.dev"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-4-stability-and-v100-week-4",children:"Phase 4: Stability and v1.0.0 (Week 4)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Gather feedback from plugin authors"}),"\n",(0,r.jsx)(n.li,{children:"Fix bugs and improve ergonomics"}),"\n",(0,r.jsx)(n.li,{children:"Freeze API for v1.0.0 release"}),"\n",(0,r.jsx)(n.li,{children:"Tag v1.0.0 and announce"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,r.jsx)(n.h3,{id:"for-plugin-authors",children:"For Plugin Authors"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Faster development"}),": Import SDK and focus on backend-specific logic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistent patterns"}),": All plugins use same auth/authz/audit patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Production-ready"}),": Observability, health checks, graceful shutdown built-in"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Easy testing"}),": Mock implementations for unit tests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clear documentation"}),": godoc and patterns for all packages"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"for-prism-platform",children:"For Prism Platform"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Defense-in-depth"}),": All plugins enforce authorization automatically"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audit trail"}),": Consistent audit logging across all backends"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Observability"}),": Standard metrics and logs from all plugins"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Maintainability"}),": SDK changes propagate to all plugins via version bump"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security"}),": Centralized security logic reduces attack surface"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"for-prism-users",children:"For Prism Users"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistent behavior"}),": All backends behave similarly (auth, authz, audit)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reliable plugins"}),": SDK-based plugins follow best practices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Faster bug fixes"}),": SDK bugs fixed once, all plugins benefit"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Feature parity"}),": New SDK features available to all backends"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"build-system-and-tooling",children:"Build System and Tooling"}),"\n",(0,r.jsx)(n.h3,{id:"comprehensive-makefile-structure",children:"Comprehensive Makefile Structure"}),"\n",(0,r.jsx)(n.p,{children:"The pattern SDK uses a hierarchical Makefile system:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:'# pattern-sdk/Makefile\n.PHONY: all build test test-unit test-integration lint proto clean coverage validate install-tools\n\n# Default target\nall: validate test build\n\n# Install development tools\ninstall-tools:\n\t@echo "Installing development tools..."\n\tgo install github.com/golangci/golangci-lint/cmd/golangci-lint@latest\n\tgo install google.golang.org/protobuf/cmd/protoc-gen-go@latest\n\tgo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest\n\n# Generate protobuf code\nproto:\n\t@echo "Generating protobuf code..."\n\t./tools/proto-gen.sh\n\n# Build SDK (verify compilation)\nbuild:\n\t@echo "Building SDK..."\n\t@CGO_ENABLED=0 go build ./...\n\n# Run all tests\ntest: test-unit test-integration\n\n# Unit tests (fast, no external dependencies)\ntest-unit:\n\t@echo "Running unit tests..."\n\t@go test -v -race -short -coverprofile=coverage-unit.out ./...\n\n# Integration tests (requires testcontainers)\ntest-integration:\n\t@echo "Running integration tests..."\n\t@go test -v -race -run Integration -coverprofile=coverage-integration.out ./...\n\n# Lint code\nlint:\n\t@echo "Linting..."\n\t@golangci-lint run ./...\n\n# Coverage report\ncoverage:\n\t@echo "Generating coverage report..."\n\t@go test -v -race -coverprofile=coverage.out -covermode=atomic ./...\n\t@go tool cover -html=coverage.out -o coverage.html\n\t@echo "Coverage report: coverage.html"\n\n# Compile-time validation\nvalidate: validate-interfaces validate-slots\n\nvalidate-interfaces:\n\t@echo "Validating interface implementations..."\n\t@./tools/validate-interfaces.sh\n\nvalidate-slots:\n\t@echo "Validating slot configurations..."\n\t@go run tools/validate-slots/main.go\n\n# Clean build artifacts\nclean:\n\t@echo "Cleaning..."\n\t@rm -rf proto/*.pb.go coverage*.out coverage.html\n\t@go clean -cache -testcache\n\n# Format code\nfmt:\n\t@echo "Formatting code..."\n\t@go fmt ./...\n\t@goimports -w .\n\n# Release (tag and push)\nrelease:\n\t@echo "Releasing..."\n\t@./tools/release.sh\n'})}),"\n",(0,r.jsx)(n.h3,{id:"pattern-specific-makefiles",children:"Pattern-Specific Makefiles"}),"\n",(0,r.jsx)(n.p,{children:"Each pattern has its own Makefile:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:'# patterns/multicast-registry/Makefile\nPATTERN_NAME := multicast-registry\nBINARY_NAME := $(PATTERN_NAME)\n\n.PHONY: all build test lint run clean\n\nall: test build\n\n# Build pattern binary\nbuild:\n\t@echo "Building $(PATTERN_NAME)..."\n\t@CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \\\n\t\t-ldflags="-s -w" \\\n\t\t-o bin/$(BINARY_NAME) \\\n\t\t./cmd/$(PATTERN_NAME)\n\n# Build Docker image\ndocker:\n\t@echo "Building Docker image..."\n\t@docker build -t prism/$(PATTERN_NAME):latest .\n\n# Run tests\ntest:\n\t@echo "Running tests..."\n\t@go test -v -race -cover ./...\n\n# Run linter\nlint:\n\t@echo "Linting..."\n\t@golangci-lint run ./...\n\n# Run pattern locally\nrun: build\n\t@echo "Running $(PATTERN_NAME)..."\n\t@./bin/$(BINARY_NAME) -config config/local.yaml\n\n# Clean build artifacts\nclean:\n\t@echo "Cleaning..."\n\t@rm -rf bin/\n\t@go clean -cache\n'})}),"\n",(0,r.jsx)(n.h3,{id:"build-targets-reference",children:"Build Targets Reference"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Target"}),(0,r.jsx)(n.th,{children:"Description"}),(0,r.jsx)(n.th,{children:"When to Use"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"make all"})}),(0,r.jsx)(n.td,{children:"Validate, test, build"}),(0,r.jsx)(n.td,{children:"Default CI/CD target"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"make build"})}),(0,r.jsx)(n.td,{children:"Compile SDK packages"}),(0,r.jsx)(n.td,{children:"Verify compilation"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"make test"})}),(0,r.jsx)(n.td,{children:"Run all tests"}),(0,r.jsx)(n.td,{children:"Before commit"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"make test-unit"})}),(0,r.jsx)(n.td,{children:"Fast unit tests only"}),(0,r.jsx)(n.td,{children:"During development"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"make test-integration"})}),(0,r.jsx)(n.td,{children:"Slow integration tests"}),(0,r.jsx)(n.td,{children:"Pre-push, CI/CD"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"make lint"})}),(0,r.jsx)(n.td,{children:"Run linters"}),(0,r.jsx)(n.td,{children:"Pre-commit hook"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"make coverage"})}),(0,r.jsx)(n.td,{children:"Generate coverage report"}),(0,r.jsx)(n.td,{children:"Coverage gates"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"make validate"})}),(0,r.jsx)(n.td,{children:"Compile-time checks"}),(0,r.jsx)(n.td,{children:"Pre-commit, CI/CD"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"make proto"})}),(0,r.jsx)(n.td,{children:"Regenerate protobuf"}),(0,r.jsx)(n.td,{children:"After .proto changes"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"make clean"})}),(0,r.jsx)(n.td,{children:"Remove artifacts"}),(0,r.jsx)(n.td,{children:"Clean slate rebuild"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"make fmt"})}),(0,r.jsx)(n.td,{children:"Format code"}),(0,r.jsx)(n.td,{children:"Auto-fix style"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"compile-time-validation",children:"Compile-Time Validation"}),"\n",(0,r.jsx)(n.h3,{id:"interface-implementation-checks",children:"Interface Implementation Checks"}),"\n",(0,r.jsx)(n.p,{children:"Use Go's compile-time type assertions to verify interface implementation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// interfaces/assertions.go\npackage interfaces\n\n// Compile-time assertions for KeyValue interfaces\nvar (\n    _ KeyValueBasic          = (*assertKeyValueBasic)(nil)\n    _ KeyValueScan           = (*assertKeyValueScan)(nil)\n    _ KeyValueTTL            = (*assertKeyValueTTL)(nil)\n    _ KeyValueTransactional  = (*assertKeyValueTransactional)(nil)\n    _ KeyValueBatch          = (*assertKeyValueBatch)(nil)\n)\n\n// Assertion types (never instantiated)\ntype assertKeyValueBasic struct{}\ntype assertKeyValueScan struct{}\ntype assertKeyValueTTL struct{}\ntype assertKeyValueTransactional struct{}\ntype assertKeyValueBatch struct{}\n\n// Methods must exist or compilation fails\nfunc (a *assertKeyValueBasic) Set(ctx context.Context, req *pb.SetRequest) (*pb.SetResponse, error) {\n    panic("assertion type")\n}\n\nfunc (a *assertKeyValueBasic) Get(ctx context.Context, req *pb.GetRequest) (*pb.GetResponse, error) {\n    panic("assertion type")\n}\n\n// ... other methods\n'})}),"\n",(0,r.jsx)(n.h3,{id:"pattern-interface-validation",children:"Pattern Interface Validation"}),"\n",(0,r.jsx)(n.p,{children:"Patterns can validate interface implementation at compile time:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// patterns/multicast-registry/pattern.go\npackage multicast_registry\n\nimport (\n    "github.com/prism/pattern-sdk/interfaces"\n    "github.com/prism/pattern-sdk/lifecycle"\n)\n\n// Compile-time assertions\nvar (\n    _ lifecycle.Pattern = (*Pattern)(nil)  // Implements Pattern interface\n    _ interfaces.KeyValueScanDriver = (*registryBackend)(nil)  // Registry backend\n    _ interfaces.PubSubDriver = (*messagingBackend)(nil)  // Messaging backend\n)\n\ntype Pattern struct {\n    // ... fields\n}\n\n// Pattern interface methods\nfunc (p *Pattern) Name() string { return "multicast-registry" }\nfunc (p *Pattern) Initialize(ctx context.Context, config *lifecycle.Config, backends map[string]interface{}) error { /* ... */ }\nfunc (p *Pattern) Start(ctx context.Context) error { /* ... */ }\nfunc (p *Pattern) Shutdown(ctx context.Context) error { /* ... */ }\nfunc (p *Pattern) HealthCheck(ctx context.Context) error { /* ... */ }\n'})}),"\n",(0,r.jsx)(n.h3,{id:"validation-script",children:"Validation Script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/usr/bin/env bash\n# tools/validate-interfaces.sh\n# Validates all interface implementations compile successfully\n\nset -euo pipefail\n\necho "Validating interface implementations..."\n\n# Compile interfaces package\nif ! go build -o /dev/null ./interfaces/...; then\n    echo "\u274c Interface validation failed"\n    exit 1\nfi\n\n# Check all patterns compile\nfor pattern_dir in patterns/*/; do\n    pattern_name=$(basename "$pattern_dir")\n    echo "  Checking pattern: $pattern_name"\n\n    if ! (cd "$pattern_dir" && go build -o /dev/null ./...); then\n        echo "  \u274c Pattern $pattern_name failed compilation"\n        exit 1\n    fi\n\n    echo "  \u2713 Pattern $pattern_name OK"\ndone\n\necho "\u2705 All interface validations passed"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"slot-configuration-validation",children:"Slot Configuration Validation"}),"\n",(0,r.jsx)(n.p,{children:"Validate pattern slot configurations at build time:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// tools/validate-slots/main.go\npackage main\n\nimport (\n    "fmt"\n    "os"\n    "path/filepath"\n\n    "gopkg.in/yaml.v3"\n)\n\ntype SlotConfig struct {\n    Name               string   `yaml:"name"`\n    RequiredInterfaces []string `yaml:"required_interfaces"`\n    Optional           bool     `yaml:"optional"`\n}\n\ntype PatternConfig struct {\n    Name  string       `yaml:"name"`\n    Slots []SlotConfig `yaml:"slots"`\n}\n\nfunc main() {\n    // Load all pattern configs\n    matches, _ := filepath.Glob("patterns/*/pattern.yaml")\n\n    for _, configPath := range matches {\n        data, _ := os.ReadFile(configPath)\n\n        var config PatternConfig\n        if err := yaml.Unmarshal(data, &config); err != nil {\n            fmt.Printf("\u274c Invalid YAML: %s\n", configPath)\n            os.Exit(1)\n        }\n\n        // Validate slots\n        for _, slot := range config.Slots {\n            if len(slot.RequiredInterfaces) == 0 && !slot.Optional {\n                fmt.Printf("\u274c Pattern %s: Required slot %s has no interfaces\n",\n                    config.Name, slot.Name)\n                os.Exit(1)\n            }\n        }\n\n        fmt.Printf("\u2713 Pattern %s validated\n", config.Name)\n    }\n\n    fmt.Println("\u2705 All slot configurations valid")\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"linting-configuration",children:"Linting Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"golangci-lint-configuration",children:"golangci-lint Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .golangci.yml\nlinters-settings:\n  errcheck:\n    check-type-assertions: true\n    check-blank: true\n\n  govet:\n    enable-all: true\n\n  gocyclo:\n    min-complexity: 15\n\n  goconst:\n    min-len: 3\n    min-occurrences: 3\n\n  misspell:\n    locale: US\n\n  lll:\n    line-length: 120\n\n  gofmt:\n    simplify: true\n\n  goimports:\n    local-prefixes: github.com/prism/pattern-sdk\n\nlinters:\n  enable:\n    - errcheck      # Unchecked errors\n    - gosimple      # Simplify code\n    - govet         # Vet examines Go source code\n    - ineffassign   # Unused assignments\n    - staticcheck   # Static analysis\n    - typecheck     # Type checker\n    - unused        # Unused constants, variables, functions\n    - gofmt         # Formatting\n    - goimports     # Import organization\n    - misspell      # Spelling\n    - goconst       # Repeated strings\n    - gocyclo       # Cyclomatic complexity\n    - lll           # Line length\n    - dupl          # Duplicate code detection\n    - gosec         # Security issues\n    - revive        # Fast, configurable linter\n\n  disable:\n    - varcheck      # Deprecated\n    - structcheck   # Deprecated\n    - deadcode      # Deprecated\n\nissues:\n  exclude-rules:\n    # Exclude some linters from test files\n    - path: _test\\.go\n      linters:\n        - gocyclo\n        - errcheck\n        - dupl\n        - gosec\n\n    # Exclude generated files\n    - path: \\.pb\\.go$\n      linters:\n        - all\n\n  max-issues-per-linter: 0\n  max-same-issues: 0\n\nrun:\n  timeout: 5m\n  tests: true\n  skip-dirs:\n    - proto\n    - vendor\n"})}),"\n",(0,r.jsx)(n.h3,{id:"pre-commit-hook",children:"Pre-Commit Hook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'#!/usr/bin/env bash\n# .githooks/pre-commit\n# Runs linting and validation before commit\n\nset -e\n\necho "\ud83d\udd0d Running pre-commit checks..."\n\n# 1. Format check\necho "  Checking formatting..."\nif ! make fmt > /dev/null 2>&1; then\n    echo "  \u274c Code formatting required"\n    echo "  Run: make fmt"\n    exit 1\nfi\n\n# 2. Lint\necho "  Running linters..."\nif ! make lint > /dev/null 2>&1; then\n    echo "  \u274c Linting failed"\n    echo "  Run: make lint"\n    exit 1\nfi\n\n# 3. Validation\necho "  Validating interfaces..."\nif ! make validate > /dev/null 2>&1; then\n    echo "  \u274c Validation failed"\n    echo "  Run: make validate"\n    exit 1\nfi\n\n# 4. Unit tests\necho "  Running unit tests..."\nif ! make test-unit > /dev/null 2>&1; then\n    echo "  \u274c Tests failed"\n    echo "  Run: make test-unit"\n    exit 1\nfi\n\necho "\u2705 Pre-commit checks passed"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"installing-hooks",children:"Installing Hooks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Install hooks\ngit config core.hooksPath .githooks\nchmod +x .githooks/pre-commit\n\n# Or copy to .git/hooks\ncp .githooks/pre-commit .git/hooks/pre-commit\nchmod +x .git/hooks/pre-commit\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-infrastructure",children:"Testing Infrastructure"}),"\n",(0,r.jsx)(n.h3,{id:"test-organization",children:"Test Organization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"pattern-sdk/\n\u251c\u2500\u2500 auth/\n\u2502   \u251c\u2500\u2500 token.go\n\u2502   \u251c\u2500\u2500 token_test.go           # Unit tests\n\u2502   \u2514\u2500\u2500 token_integration_test.go  # Integration tests (build tag)\n\u2502\n\u251c\u2500\u2500 patterns/\n\u2502   \u251c\u2500\u2500 multicast-registry/\n\u2502   \u2502   \u251c\u2500\u2500 pattern.go\n\u2502   \u2502   \u251c\u2500\u2500 pattern_test.go     # Unit tests\n\u2502   \u2502   \u2514\u2500\u2500 integration_test.go # Integration tests\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 session-store/\n\u2502       \u251c\u2500\u2500 pattern.go\n\u2502       \u251c\u2500\u2500 pattern_test.go\n\u2502       \u2514\u2500\u2500 integration_test.go\n\u2502\n\u2514\u2500\u2500 testing/\n    \u251c\u2500\u2500 fixtures.go              # Test fixtures\n    \u251c\u2500\u2500 containers.go            # Testcontainers helpers\n    \u2514\u2500\u2500 mock_*.go                # Mock implementations\n"})}),"\n",(0,r.jsx)(n.h3,{id:"test-build-tags",children:"Test Build Tags"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// +build integration\n\npackage multicast_registry_test\n\nimport (\n    "context"\n    "testing"\n\n    "github.com/testcontainers/testcontainers-go"\n)\n\nfunc TestMulticastRegistryIntegration(t *testing.T) {\n    if testing.Short() {\n        t.Skip("Skipping integration test in short mode")\n    }\n\n    // Setup testcontainers...\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"coverage-requirements",children:"Coverage Requirements"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:'# Makefile - Coverage gates\nCOVERAGE_THRESHOLD := 80\n\ntest-coverage:\n\t@echo "Running tests with coverage..."\n\t@go test -v -race -coverprofile=coverage.out -covermode=atomic ./...\n\t@go tool cover -func=coverage.out -o coverage.txt\n\t@COVERAGE=$$(grep total coverage.txt | awk \'{print $$3}\' | sed \'s/%//\'); \\\n\tif [ $$(echo "$$COVERAGE < $(COVERAGE_THRESHOLD)" | bc) -eq 1 ]; then \\\n\t\techo "\u274c Coverage $$COVERAGE% is below threshold $(COVERAGE_THRESHOLD)%"; \\\n\t\texit 1; \\\n\tfi\n\t@echo "\u2705 Coverage: $$(grep total coverage.txt | awk \'{print $$3}\')"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"testcontainers-integration",children:"Testcontainers Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// testing/containers.go\npackage testing\n\nimport (\n    "context"\n    "time"\n\n    "github.com/testcontainers/testcontainers-go"\n    "github.com/testcontainers/testcontainers-go/wait"\n)\n\n// RedisContainer starts a Redis testcontainer\nfunc RedisContainer(ctx context.Context) (testcontainers.Container, string, error) {\n    req := testcontainers.ContainerRequest{\n        Image:        "redis:7-alpine",\n        ExposedPorts: []string{"6379/tcp"},\n        WaitingFor: wait.ForLog("Ready to accept connections").\n            WithStartupTimeout(30 * time.Second),\n    }\n\n    container, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest{\n        ContainerRequest: req,\n        Started:          true,\n    })\n    if err != nil {\n        return nil, "", err\n    }\n\n    host, _ := container.Host(ctx)\n    port, _ := container.MappedPort(ctx, "6379")\n    endpoint := host + ":" + port.Port()\n\n    return container, endpoint, nil\n}\n\n// Usage in tests:\nfunc TestWithRedis(t *testing.T) {\n    ctx := context.Background()\n    container, endpoint, err := testing.RedisContainer(ctx)\n    require.NoError(t, err)\n    defer container.Terminate(ctx)\n\n    // Test using Redis at endpoint...\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"benchmark-tests",children:"Benchmark Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// patterns/multicast-registry/benchmark_test.go\npackage multicast_registry_test\n\nimport (\n    "context"\n    "testing"\n)\n\nfunc BenchmarkPublishMulticast_10Subscribers(b *testing.B) {\n    pattern := setupPattern(b, 10)\n    event := createTestEvent()\n\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        pattern.PublishMulticast(context.Background(), event)\n    }\n}\n\nfunc BenchmarkPublishMulticast_100Subscribers(b *testing.B) {\n    pattern := setupPattern(b, 100)\n    event := createTestEvent()\n\n    b.ResetTimer()\n    for i := 0; i < b.N; i++ {\n        pattern.PublishMulticast(context.Background(), event)\n    }\n}\n\n// Run benchmarks:\n// go test -bench=. -benchmem ./patterns/multicast-registry/\n'})}),"\n",(0,r.jsx)(n.h3,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/ci.yml (extended)\nname: CI\n\non:\n  push:\n    branches: [main]\n  pull_request:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: '1.21'\n          cache: true\n\n      - name: Install tools\n        run: make install-tools\n\n      - name: Validate interfaces\n        run: make validate\n\n      - name: Lint\n        run: make lint\n\n      - name: Unit tests\n        run: make test-unit\n\n      - name: Integration tests\n        run: make test-integration\n\n      - name: Coverage gate\n        run: make test-coverage\n\n      - name: Upload coverage\n        uses: codecov/codecov-action@v4\n        with:\n          file: ./coverage.out\n          fail_ci_if_error: true\n\n  build:\n    runs-on: ubuntu-latest\n    needs: test\n\n    steps:\n      - uses: actions/checkout@v4\n\n      - uses: actions/setup-go@v5\n        with:\n          go-version: '1.21'\n\n      - name: Build SDK\n        run: make build\n\n      - name: Build patterns\n        run: |\n          for pattern in patterns/*/; do\n            echo \"Building $(basename $pattern)...\"\n            (cd $pattern && make build)\n          done\n"})}),"\n",(0,r.jsx)(n.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Should SDK include connection pool implementations for common backends (Redis, Postgres, Kafka)?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Proposal"}),": Yes, add ",(0,r.jsx)(n.code,{children:"storage/redis"}),", ",(0,r.jsx)(n.code,{children:"storage/postgres"}),", ",(0,r.jsx)(n.code,{children:"storage/kafka"})," sub-packages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trade-off"}),": More dependencies vs easier plugin authoring"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Should SDK enforce interface implementation at compile time?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Proposal"}),": Yes, use interface assertions in ",(0,r.jsx)(n.code,{children:"interfaces"})," package"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Example"}),": ",(0,r.jsx)(n.code,{children:"var _ interfaces.KeyValueBasic = (*MyPlugin)(nil)"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Should SDK provide default implementations for optional interfaces?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Proposal"}),': Yes, provide "no-op" implementations that return ',(0,r.jsx)(n.code,{children:"ErrNotImplemented"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Benefit"}),": Plugins can embed defaults and override only what they support"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"How to handle SDK version mismatches between proxy and plugins?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Proposal"}),": Include SDK version in plugin metadata, proxy checks compatibility"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enforcement"}),": Proxy refuses to load plugins with incompatible SDK versions"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/rfc/rfc-019-plugin-sdk-authorization-layer",children:"RFC-019: Plugin SDK Authorization Layer"})," - Authorization implementation"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/rfc/rfc-008-proxy-plugin-architecture",children:"RFC-008: Proxy Plugin Architecture"})," - Plugin system overview"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/memos/memo-006-backend-interface-decomposition-schema-registry",children:"MEMO-006: Backend Interface Decomposition"})," - Interface design principles"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/rfc/rfc-021-poc1-keyvalue-memstore-implementation",children:"RFC-021: POC 1 Implementation Plan"})," - MemStore plugin example"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2025-10-09: Initial RFC defining SDK physical code layout and package structure"}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(96540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);