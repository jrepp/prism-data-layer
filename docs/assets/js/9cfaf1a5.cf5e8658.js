"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[32189],{28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}},70364:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"adr-032","title":"Object Storage Pattern with MinIO","description":"Context","source":"@site/../docs-cms/adr/adr-032-object-storage-pattern.md","sourceDirName":".","slug":"/adr-032","permalink":"/prism-data-layer/adr/adr-032","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-032-object-storage-pattern.md","tags":[{"inline":true,"label":"object-storage","permalink":"/prism-data-layer/adr/tags/object-storage"},{"inline":true,"label":"minio","permalink":"/prism-data-layer/adr/tags/minio"},{"inline":true,"label":"s3","permalink":"/prism-data-layer/adr/tags/s-3"},{"inline":true,"label":"blobs","permalink":"/prism-data-layer/adr/tags/blobs"},{"inline":true,"label":"local-testing","permalink":"/prism-data-layer/adr/tags/local-testing"}],"version":"current","frontMatter":{"date":"2025-10-08T00:00:00.000Z","deciders":"System Architecture Team","doc_uuid":"c39bb86d-e628-4d94-b8a1-b27910833b8d","id":"adr-032","project_id":"prism-data-layer","sidebar_label":"ADR-032 Object Storage","status":"Accepted","tags":["object-storage","minio","s3","blobs","local-testing"],"title":"Object Storage Pattern with MinIO"},"sidebar":"adrSidebar","previous":{"title":"ADR-031 TTL Defaults","permalink":"/prism-data-layer/adr/adr-031"},"next":{"title":"Capability API for Prism Instance Queries \u2022 ADR-033","permalink":"/prism-data-layer/adr/adr-033"}}');var i=t(74848),r=t(28453);const l={date:new Date("2025-10-08T00:00:00.000Z"),deciders:"System Architecture Team",doc_uuid:"c39bb86d-e628-4d94-b8a1-b27910833b8d",id:"adr-032",project_id:"prism-data-layer",sidebar_label:"ADR-032 Object Storage",status:"Accepted",tags:["object-storage","minio","s3","blobs","local-testing"],title:"Object Storage Pattern with MinIO"},a="ADR-032: Object Storage Pattern with MinIO",c={},o=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Principles",id:"principles",level:3},{value:"Object Storage Pattern",id:"object-storage-pattern",level:2},{value:"Use Cases",id:"use-cases",level:3},{value:"Data Access Pattern: Object Store",id:"data-access-pattern-object-store",level:3},{value:"MinIO for Local Development",id:"minio-for-local-development",level:2},{value:"Why MinIO?",id:"why-minio",level:3},{value:"Local Docker Setup",id:"local-docker-setup",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Backend Implementations",id:"backend-implementations",level:2},{value:"MinIO Backend (Rust)",id:"minio-backend-rust",level:3},{value:"S3 Backend Adapter",id:"s3-backend-adapter",level:3},{value:"Lifecycle Management (Integration with ADR-031)",id:"lifecycle-management-integration-with-adr-031",level:2},{value:"MinIO Lifecycle Policy",id:"minio-lifecycle-policy",level:3},{value:"Setting Lifecycle Policies via Admin CLI",id:"setting-lifecycle-policies-via-admin-cli",level:3},{value:"Client SDK Examples",id:"client-sdk-examples",level:2},{value:"Python SDK",id:"python-sdk",level:3},{value:"Go SDK",id:"go-sdk",level:3},{value:"Testing Strategy",id:"testing-strategy",level:2},{value:"Local Testing with MinIO",id:"local-testing-with-minio",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Streaming for Large Files",id:"streaming-for-large-files",level:3},{value:"Performance Targets",id:"performance-targets",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Access Control",id:"access-control",level:3},{value:"Presigned URL Security",id:"presigned-url-security",level:3},{value:"Migration Path",id:"migration-path",level:2},{value:"Phase 1: MinIO Integration (Week 1-2)",id:"phase-1-minio-integration-week-1-2",level:3},{value:"Phase 2: Advanced Features (Week 3-4)",id:"phase-2-advanced-features-week-3-4",level:3},{value:"Phase 3: Client SDKs (Week 5-6)",id:"phase-3-client-sdks-week-5-6",level:3},{value:"Phase 4: Production Backends (Week 7-8)",id:"phase-4-production-backends-week-7-8",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:2},{value:"Alternative 1: Database Blob Storage",id:"alternative-1-database-blob-storage",level:3},{value:"Alternative 2: Filesystem Storage",id:"alternative-2-filesystem-storage",level:3},{value:"Alternative 3: Cloud-Only (No Local Testing)",id:"alternative-3-cloud-only-no-local-testing",level:3},{value:"Related ADRs",id:"related-adrs",level:2},{value:"References",id:"references",level:2},{value:"Appendix: Object Storage Decision Tree",id:"appendix-object-storage-decision-tree",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"adr-032-object-storage-pattern-with-minio",children:"ADR-032: Object Storage Pattern with MinIO"})}),"\n",(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsx)(n.p,{children:"Modern applications frequently need to store and retrieve unstructured data (blobs): uploaded files, images, videos, artifacts, backups, ML models, and large payloads. Traditional databases are poorly suited for blob storage due to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Size Constraints"}),": Binary data bloats database storage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Large blobs slow down queries and backups"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cost"}),": Database storage is expensive compared to object storage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Access Patterns"}),": Blobs need streaming, range requests, CDN integration"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["While cloud providers offer S3, Azure Blob Storage, and GCS, ",(0,i.jsx)(n.strong,{children:"local development and testing"})," requires a compatible local implementation. MinIO provides S3-compatible object storage that runs locally, enabling:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Realistic Testing"}),": S3-compatible API without cloud dependencies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cost-Free Development"}),": No cloud storage charges during development"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Offline Development"}),": Work without internet connectivity"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CI/CD Integration"}),": Ephemeral MinIO in test pipelines"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"We will adopt Object Storage as a first-class data access pattern in Prism, using MinIO for local development and testing, with S3-compatible APIs for production deployments."})}),"\n",(0,i.jsx)(n.h3,{id:"principles",children:"Principles"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"S3-Compatible API"}),": Use S3 as the de facto standard"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MinIO for Local"}),": Default to MinIO for local testing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cloud-Agnostic"}),": Support AWS S3, GCS, Azure Blob via adapters"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Streaming Support"}),": Handle large files efficiently"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lifecycle Policies"}),": Automatic expiration and tiering (see ADR-031)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Presigned URLs"}),": Secure temporary access for direct uploads/downloads"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"object-storage-pattern",children:"Object Storage Pattern"}),"\n",(0,i.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Use Case"}),(0,i.jsx)(n.th,{children:"Pattern"}),(0,i.jsx)(n.th,{children:"Example"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"File Uploads"})}),(0,i.jsx)(n.td,{children:"User-generated"}),(0,i.jsx)(n.td,{children:"Profile pictures, document attachments"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Build Artifacts"})}),(0,i.jsx)(n.td,{children:"CI/CD outputs"}),(0,i.jsx)(n.td,{children:"Docker images, compiled binaries"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"ML Models"})}),(0,i.jsx)(n.td,{children:"Model serving"}),(0,i.jsx)(n.td,{children:"Trained models, checkpoints"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Backups"})}),(0,i.jsx)(n.td,{children:"Data archives"}),(0,i.jsx)(n.td,{children:"Database backups, snapshots"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Large Payloads"})}),(0,i.jsx)(n.td,{children:"Offloaded data"}),(0,i.jsx)(n.td,{children:"JSON/XML > 1MB, avoiding message queues"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Media Storage"})}),(0,i.jsx)(n.td,{children:"Video/Audio"}),(0,i.jsx)(n.td,{children:"Streaming media, podcast episodes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Log Archives"})}),(0,i.jsx)(n.td,{children:"Compliance"}),(0,i.jsx)(n.td,{children:"Long-term log storage"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Static Assets"})}),(0,i.jsx)(n.td,{children:"CDN integration"}),(0,i.jsx)(n.td,{children:"Website images, CSS/JS bundles"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"data-access-pattern-object-store",children:"Data Access Pattern: Object Store"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.objectstore;\n\n// Object Storage Service\nservice ObjectStoreService {\n  // Upload object\n  rpc PutObject(stream PutObjectRequest) returns (PutObjectResponse);\n\n  // Download object\n  rpc GetObject(GetObjectRequest) returns (stream GetObjectResponse);\n\n  // Delete object\n  rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse);\n\n  // List objects in bucket/prefix\n  rpc ListObjects(ListObjectsRequest) returns (ListObjectsResponse);\n\n  // Get object metadata\n  rpc HeadObject(HeadObjectRequest) returns (HeadObjectResponse);\n\n  // Generate presigned URL for direct access\n  rpc GetPresignedURL(PresignedURLRequest) returns (PresignedURLResponse);\n\n  // Copy object\n  rpc CopyObject(CopyObjectRequest) returns (CopyObjectResponse);\n}\n\n// Upload request (streaming for large files)\nmessage PutObjectRequest {\n  string namespace = 1;\n  string bucket = 2;\n  string key = 3;\n\n  // Metadata\n  map<string, string> metadata = 4;\n  string content_type = 5;\n\n  // Lifecycle (see ADR-031)\n  optional int64 ttl_seconds = 6;\n\n  // Data chunk\n  bytes chunk = 7;\n}\n\nmessage PutObjectResponse {\n  string object_id = 1;\n  string etag = 2;\n  int64 size_bytes = 3;\n  string version_id = 4;  // If versioning enabled\n}\n\n// Download request\nmessage GetObjectRequest {\n  string namespace = 1;\n  string bucket = 2;\n  string key = 3;\n\n  // Range request (for partial downloads)\n  optional int64 range_start = 4;\n  optional int64 range_end = 5;\n}\n\nmessage GetObjectResponse {\n  // Metadata\n  string content_type = 1;\n  int64 size_bytes = 2;\n  map<string, string> metadata = 3;\n  string etag = 4;\n\n  // Data chunk\n  bytes chunk = 5;\n}\n\n// Delete request\nmessage DeleteObjectRequest {\n  string namespace = 1;\n  string bucket = 2;\n  string key = 3;\n}\n\nmessage DeleteObjectResponse {\n  bool deleted = 1;\n}\n\n// List request\nmessage ListObjectsRequest {\n  string namespace = 1;\n  string bucket = 2;\n  string prefix = 3;\n  int32 max_results = 4;\n  string continuation_token = 5;\n}\n\nmessage ListObjectsResponse {\n  repeated ObjectMetadata objects = 1;\n  string continuation_token = 2;\n  bool is_truncated = 3;\n}\n\nmessage ObjectMetadata {\n  string key = 1;\n  int64 size_bytes = 2;\n  string etag = 3;\n  int64 last_modified = 4;  // Unix timestamp\n  string content_type = 5;\n}\n\n// Presigned URL request\nmessage PresignedURLRequest {\n  string namespace = 1;\n  string bucket = 2;\n  string key = 3;\n  string method = 4;  // GET, PUT, DELETE\n  int64 expires_in_seconds = 5;  // Default 3600 (1 hour)\n}\n\nmessage PresignedURLResponse {\n  string url = 1;\n  int64 expires_at = 2;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"minio-for-local-development",children:"MinIO for Local Development"}),"\n",(0,i.jsx)(n.h3,{id:"why-minio",children:"Why MinIO?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"S3-Compatible"}),": Drop-in replacement for AWS S3 API"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lightweight"}),": Runs in Docker with minimal resources"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Open Source"}),": Apache License 2.0, free for all use"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Feature-Rich"}),": Versioning, encryption, lifecycle policies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Easy Setup"}),": Single Docker command to run locally"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"local-docker-setup",children:"Local Docker Setup"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Start MinIO in Docker\ndocker run -d \\\n  -p 9000:9000 \\\n  -p 9001:9001 \\\n  --name prism-minio \\\n  -e "MINIO_ROOT_USER=prism" \\\n  -e "MINIO_ROOT_PASSWORD=prismpassword" \\\n  -v /tmp/minio-data:/data \\\n  minio/minio server /data --console-address ":9001"\n\n# Create bucket\ndocker exec prism-minio mc alias set local http://localhost:9000 prism prismpassword\ndocker exec prism-minio mc mb local/prism-objects\n'})}),"\n",(0,i.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Namespace configuration for object storage\nnamespaces:\n  - name: user-uploads\n    backend: minio\n    pattern: objectstore\n    config:\n      endpoint: "localhost:9000"\n      access_key: "prism"\n      secret_key: "prismpassword"\n      bucket: "prism-objects"\n      use_ssl: false  # Local dev\n      default_ttl_seconds: 7776000  # 90 days\n\n  - name: build-artifacts\n    backend: s3\n    pattern: objectstore\n    config:\n      endpoint: "s3.amazonaws.com"\n      region: "us-east-1"\n      bucket: "prism-builds"\n      use_ssl: true\n      default_ttl_seconds: 2592000  # 30 days\n'})}),"\n",(0,i.jsx)(n.h2,{id:"backend-implementations",children:"Backend Implementations"}),"\n",(0,i.jsx)(n.h3,{id:"minio-backend-rust",children:"MinIO Backend (Rust)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'use aws_sdk_s3::{Client, Config, Credentials, Endpoint};\nuse tokio::io::AsyncReadExt;\n\npub struct MinIOBackend {\n    client: Client,\n    bucket: String,\n    default_ttl: Option<Duration>,\n}\n\nimpl MinIOBackend {\n    pub async fn new(config: &NamespaceConfig) -> Result<Self> {\n        let credentials = Credentials::new(\n            &config.access_key,\n            &config.secret_key,\n            None,\n            None,\n            "prism-minio",\n        );\n\n        let endpoint = Endpoint::immutable(\n            format!("http://{}", config.endpoint).parse()?,\n        );\n\n        let s3_config = Config::builder()\n            .credentials_provider(credentials)\n            .endpoint_resolver(endpoint)\n            .region(Region::new("us-east-1"))  // MinIO doesn\'t care\n            .build();\n\n        let client = Client::from_conf(s3_config);\n\n        Ok(Self {\n            client,\n            bucket: config.bucket.clone(),\n            default_ttl: config.default_ttl,\n        })\n    }\n\n    pub async fn put_object(\n        &self,\n        key: &str,\n        data: impl AsyncRead + Send,\n        content_type: Option<String>,\n        ttl: Option<Duration>,\n    ) -> Result<PutObjectOutput> {\n        let mut builder = self\n            .client\n            .put_object()\n            .bucket(&self.bucket)\n            .key(key)\n            .body(ByteStream::from(data));\n\n        if let Some(ct) = content_type {\n            builder = builder.content_type(ct);\n        }\n\n        // Apply TTL via tagging (lifecycle policy handles expiration)\n        if let Some(ttl) = ttl.or(self.default_ttl) {\n            let expires_at = Utc::now() + chrono::Duration::from_std(ttl)?;\n            builder = builder.tagging(&format!("ttl={}", expires_at.timestamp()));\n        }\n\n        builder.send().await.map_err(Into::into)\n    }\n\n    pub async fn get_object(&self, key: &str) -> Result<GetObjectOutput> {\n        self.client\n            .get_object()\n            .bucket(&self.bucket)\n            .key(key)\n            .send()\n            .await\n            .map_err(Into::into)\n    }\n\n    pub async fn presigned_url(\n        &self,\n        key: &str,\n        method: &str,\n        expires_in: Duration,\n    ) -> Result<String> {\n        let presigning_config = PresigningConfig::expires_in(expires_in)?;\n\n        let url = match method {\n            "GET" => {\n                self.client\n                    .get_object()\n                    .bucket(&self.bucket)\n                    .key(key)\n                    .presigned(presigning_config)\n                    .await?\n            }\n            "PUT" => {\n                self.client\n                    .put_object()\n                    .bucket(&self.bucket)\n                    .key(key)\n                    .presigned(presigning_config)\n                    .await?\n            }\n            _ => return Err("Unsupported method".into()),\n        };\n\n        Ok(url.uri().to_string())\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"s3-backend-adapter",children:"S3 Backend Adapter"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Same implementation as MinIO, different endpoint/config\npub struct S3Backend {\n    inner: MinIOBackend,  // Reuse MinIO implementation\n}\n\nimpl S3Backend {\n    pub async fn new(config: &NamespaceConfig) -> Result<Self> {\n        // Override endpoint for AWS S3\n        let mut s3_config = config.clone();\n        s3_config.endpoint = format!("s3.{}.amazonaws.com", config.region);\n        s3_config.use_ssl = true;\n\n        Ok(Self {\n            inner: MinIOBackend::new(&s3_config).await?,\n        })\n    }\n\n    // Delegate all operations to MinIO backend\n    pub async fn put_object(&self, /* ... */) -> Result<PutObjectOutput> {\n        self.inner.put_object(/* ... */).await\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"lifecycle-management-integration-with-adr-031",children:"Lifecycle Management (Integration with ADR-031)"}),"\n",(0,i.jsx)(n.h3,{id:"minio-lifecycle-policy",children:"MinIO Lifecycle Policy"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "Rules": [\n    {\n      "ID": "expire-after-ttl",\n      "Status": "Enabled",\n      "Filter": {\n        "Tag": {\n          "Key": "ttl",\n          "Value": "*"\n        }\n      },\n      "Expiration": {\n        "Days": 1  // Check daily for expired objects\n      }\n    },\n    {\n      "ID": "default-90-day-expiration",\n      "Status": "Enabled",\n      "Filter": {\n        "Prefix": "tmp/"\n      },\n      "Expiration": {\n        "Days": 90\n      }\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"setting-lifecycle-policies-via-admin-cli",children:"Setting Lifecycle Policies via Admin CLI"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Set lifecycle policy on bucket\nprism objectstore set-lifecycle user-uploads --policy lifecycle.json\n\n# View current lifecycle policy\nprism objectstore get-lifecycle user-uploads\n\n# List objects expiring soon\nprism objectstore list user-uploads --expiring-within 7d\n"})}),"\n",(0,i.jsx)(n.h2,{id:"client-sdk-examples",children:"Client SDK Examples"}),"\n",(0,i.jsx)(n.h3,{id:"python-sdk",children:"Python SDK"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from prism_sdk import PrismClient\n\nclient = PrismClient(namespace="user-uploads", pattern="objectstore")\n\n# Upload file\nwith open("profile.jpg", "rb") as f:\n    response = client.put_object(\n        bucket="prism-objects",\n        key="users/123/profile.jpg",\n        data=f,\n        content_type="image/jpeg",\n        ttl_seconds=86400 * 90,  # 90 days\n    )\n    print(f"Uploaded: {response.object_id}, ETag: {response.etag}")\n\n# Download file\nwith client.get_object(bucket="prism-objects", key="users/123/profile.jpg") as obj:\n    with open("downloaded.jpg", "wb") as f:\n        for chunk in obj.stream():\n            f.write(chunk)\n\n# Generate presigned URL (for direct browser upload)\nurl = client.get_presigned_url(\n    bucket="prism-objects",\n    key="users/123/upload.jpg",\n    method="PUT",\n    expires_in_seconds=3600,  # 1 hour\n)\nprint(f"Upload to: {url}")\n\n# List objects\nobjects = client.list_objects(bucket="prism-objects", prefix="users/123/")\nfor obj in objects:\n    print(f"{obj.key}: {obj.size_bytes} bytes, {obj.last_modified}")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"go-sdk",children:"Go SDK"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'client := prism.NewClient("user-uploads", prism.WithPattern("objectstore"))\n\n// Upload file\nfile, _ := os.Open("profile.jpg")\ndefer file.Close()\n\nresp, err := client.PutObject(ctx, &prism.PutObjectRequest{\n    Bucket:      "prism-objects",\n    Key:         "users/123/profile.jpg",\n    Data:        file,\n    ContentType: "image/jpeg",\n    TTLSeconds:  90 * 24 * 3600,\n})\n\n// Download file\nobj, err := client.GetObject(ctx, &prism.GetObjectRequest{\n    Bucket: "prism-objects",\n    Key:    "users/123/profile.jpg",\n})\ndefer obj.Body.Close()\n\noutput, _ := os.Create("downloaded.jpg")\ndefer output.Close()\nio.Copy(output, obj.Body)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,i.jsx)(n.h3,{id:"local-testing-with-minio",children:"Local Testing with MinIO"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.test.yml\nversion: \'3.8\'\nservices:\n  minio:\n    image: minio/minio:latest\n    ports:\n      - "9000:9000"\n      - "9001:9001"\n    environment:\n      MINIO_ROOT_USER: prism-test\n      MINIO_ROOT_PASSWORD: prism-test-password\n    command: server /data --console-address ":9001"\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]\n      interval: 5s\n      timeout: 3s\n      retries: 3\n\n  prism-proxy:\n    build: ./proxy\n    ports:\n      - "50051:50051"\n    depends_on:\n      minio:\n        condition: service_healthy\n    environment:\n      PRISM_OBJECTSTORE_ENDPOINT: "minio:9000"\n      PRISM_OBJECTSTORE_ACCESS_KEY: "prism-test"\n      PRISM_OBJECTSTORE_SECRET_KEY: "prism-test-password"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#[tokio::test]\nasync fn test_object_storage_lifecycle() {\n    let client = PrismTestClient::new("user-uploads").await;\n\n    // Upload\n    let data = b"Hello, MinIO!";\n    let response = client\n        .put_object("test.txt", data, Some("text/plain"), None)\n        .await\n        .unwrap();\n    assert!(!response.etag.is_empty());\n\n    // Download\n    let downloaded = client.get_object("test.txt").await.unwrap();\n    assert_eq!(downloaded.content, data);\n\n    // List\n    let objects = client.list_objects("", 10).await.unwrap();\n    assert_eq!(objects.len(), 1);\n    assert_eq!(objects[0].key, "test.txt");\n\n    // Delete\n    client.delete_object("test.txt").await.unwrap();\n\n    // Verify deleted\n    let result = client.get_object("test.txt").await;\n    assert!(result.is_err());\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"streaming-for-large-files",children:"Streaming for Large Files"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Stream upload (avoid loading entire file into memory)\npub async fn put_object_stream(\n    &self,\n    key: &str,\n    mut stream: impl Stream<Item = Result<Bytes>> + Send + Unpin,\n) -> Result<PutObjectOutput> {\n    let body = ByteStream::new(SdkBody::from_body_0_4(Body::wrap_stream(stream)));\n\n    self.client\n        .put_object()\n        .bucket(&self.bucket)\n        .key(key)\n        .body(body)\n        .send()\n        .await\n        .map_err(Into::into)\n}\n\n// Stream download (for large files, range requests)\npub async fn get_object_range(\n    &self,\n    key: &str,\n    start: u64,\n    end: u64,\n) -> Result<ByteStream> {\n    let range = format!("bytes={}-{}", start, end);\n\n    let output = self\n        .client\n        .get_object()\n        .bucket(&self.bucket)\n        .key(key)\n        .range(range)\n        .send()\n        .await?;\n\n    Ok(output.body)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"performance-targets",children:"Performance Targets"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operation"}),(0,i.jsx)(n.th,{children:"Target Latency"}),(0,i.jsx)(n.th,{children:"Throughput"}),(0,i.jsx)(n.th,{children:"Notes"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Put (1MB)"})}),(0,i.jsx)(n.td,{children:"< 100ms"}),(0,i.jsx)(n.td,{children:"100 MB/s"}),(0,i.jsx)(n.td,{children:"Single stream"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Get (1MB)"})}),(0,i.jsx)(n.td,{children:"< 50ms"}),(0,i.jsx)(n.td,{children:"200 MB/s"}),(0,i.jsx)(n.td,{children:"Cached reads"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"List (1000)"})}),(0,i.jsx)(n.td,{children:"< 200ms"}),(0,i.jsx)(n.td,{children:"5000 items/s"}),(0,i.jsx)(n.td,{children:"Paginated"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Presigned"})}),(0,i.jsx)(n.td,{children:"< 10ms"}),(0,i.jsx)(n.td,{children:"1000 req/s"}),(0,i.jsx)(n.td,{children:"No data transfer"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Delete"})}),(0,i.jsx)(n.td,{children:"< 50ms"}),(0,i.jsx)(n.td,{children:"500 req/s"}),(0,i.jsx)(n.td,{children:"Async backend deletion"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"access-control",children:"Access Control"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Namespace Isolation"}),": Each namespace has separate credentials"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Presigned URLs"}),": Time-limited, scoped to specific operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Encryption at Rest"}),": MinIO supports server-side encryption"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Encryption in Transit"}),": TLS for production deployments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Audit Logging"}),": All operations logged with user/namespace context"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"presigned-url-security",children:"Presigned URL Security"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Limit presigned URL validity\nconst MAX_PRESIGNED_EXPIRY: Duration = Duration::from_secs(3600); // 1 hour\n\npub async fn get_presigned_url(\n    &self,\n    key: &str,\n    method: &str,\n    expires_in: Duration,\n) -> Result<String> {\n    if expires_in > MAX_PRESIGNED_EXPIRY {\n        return Err("Presigned URL expiry too long".into());\n    }\n\n    // Generate URL with limited scope\n    self.backend.presigned_url(key, method, expires_in).await\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"migration-path",children:"Migration Path"}),"\n",(0,i.jsx)(n.h3,{id:"phase-1-minio-integration-week-1-2",children:"Phase 1: MinIO Integration (Week 1-2)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Docker Compose"}),": Add MinIO to local development stack"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rust Backend"}),": Implement MinIO backend using aws-sdk-s3"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Protobuf Service"}),": Define ObjectStoreService"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Basic Operations"}),": Put, Get, Delete, List"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-2-advanced-features-week-3-4",children:"Phase 2: Advanced Features (Week 3-4)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Streaming"}),": Large file uploads/downloads"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Presigned URLs"}),": Direct client access"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lifecycle Policies"}),": TTL integration (ADR-031)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Range Requests"}),": Partial downloads"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-3-client-sdks-week-5-6",children:"Phase 3: Client SDKs (Week 5-6)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Python SDK"}),": Object storage client"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Go SDK"}),": Object storage client"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Integration Tests"}),": Full lifecycle tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation"}),": API reference, examples"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-4-production-backends-week-7-8",children:"Phase 4: Production Backends (Week 7-8)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AWS S3 Adapter"}),": Production backend"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"GCS Adapter"}),": Google Cloud Storage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Azure Blob Adapter"}),": Azure support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-Backend"}),": Namespace routing"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,i.jsx)(n.h3,{id:"alternative-1-database-blob-storage",children:"Alternative 1: Database Blob Storage"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Approach"}),": Store blobs in PostgreSQL bytea columns."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Rejected because"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Poor performance for large files"}),"\n",(0,i.jsx)(n.li,{children:"Database backups become massive"}),"\n",(0,i.jsx)(n.li,{children:"No streaming support"}),"\n",(0,i.jsx)(n.li,{children:"Expensive storage costs"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"alternative-2-filesystem-storage",children:"Alternative 2: Filesystem Storage"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Approach"}),": Store files directly on disk, use file paths."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Rejected because"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Not distributed (single server dependency)"}),"\n",(0,i.jsx)(n.li,{children:"No replication or durability guarantees"}),"\n",(0,i.jsx)(n.li,{children:"Hard to scale horizontally"}),"\n",(0,i.jsx)(n.li,{children:"Complex cleanup and lifecycle management"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"alternative-3-cloud-only-no-local-testing",children:"Alternative 3: Cloud-Only (No Local Testing)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Approach"}),": Always use S3/GCS, even in development."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Rejected because"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Requires internet connectivity"}),"\n",(0,i.jsx)(n.li,{children:"Incurs cloud costs during development"}),"\n",(0,i.jsx)(n.li,{children:"Slower test execution"}),"\n",(0,i.jsx)(n.li,{children:"Harder to reproduce issues locally"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-adrs",children:"Related ADRs"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ADR-031: TTL Defaults for Client Data (lifecycle policies)"}),"\n",(0,i.jsx)(n.li,{children:"ADR-010: Redis Integration (for metadata caching)"}),"\n",(0,i.jsx)(n.li,{children:"ADR-015: PostgreSQL Integration (for object metadata table)"}),"\n",(0,i.jsx)(n.li,{children:"ADR-020: ClickHouse Integration (for access logs analytics)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://min.io/docs/minio/linux/index.html",children:"MinIO Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html",children:"AWS S3 API Reference"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.aws.amazon.com/AmazonS3/latest/userguide/PresignedUrlUploadObject.html",children:"S3 Presigned URLs"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://min.io/docs/minio/linux/administration/object-management/lifecycle-management.html",children:"MinIO Lifecycle Management"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/awslabs/aws-sdk-rust",children:"aws-sdk-rust"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"appendix-object-storage-decision-tree",children:"Appendix: Object Storage Decision Tree"}),"\n",(0,i.jsx)(n.p,{children:"Do you need to store binary data > 1MB?\n\u251c\u2500 Yes \u2192 Object Storage (this ADR)\n\u2514\u2500 No\n\u251c\u2500 Structured data? \u2192 KeyValue (PostgreSQL)\n\u2514\u2500 Small JSON/text? \u2192 Cache (Redis)"}),"\n",(0,i.jsx)(n.p,{children:"What's the access pattern?\n\u251c\u2500 Infrequent, large files \u2192 S3 (production), MinIO (local)\n\u251c\u2500 Frequent, small files \u2192 Redis + Object Storage\n\u2514\u2500 Streaming media \u2192 Object Storage + CDN"}),"\n",(0,i.jsx)(n.p,{children:"What's the lifecycle?\n\u251c\u2500 Temporary (< 7 days) \u2192 Object Storage with short TTL\n\u251c\u2500 Medium-term (7-90 days) \u2192 Object Storage with default TTL\n\u2514\u2500 Permanent \u2192 Object Storage with infinite TTL (explicit opt-in)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n---\n\n**Status**: Accepted\n**Next Steps**:\n1. Add MinIO to Docker Compose local stack\n2. Implement MinIO backend in Rust proxy\n3. Generate ObjectStoreService gRPC stubs\n4. Write integration tests with ephemeral MinIO\n5. Document object storage pattern in client SDK guides\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);