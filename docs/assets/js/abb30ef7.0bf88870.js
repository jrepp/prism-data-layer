"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[8128],{22655:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"rfc-028","title":"prism-probe - CLI Client for Testing and Debugging","description":"Summary","source":"@site/../docs-cms/rfcs/RFC-028-prism-probe-cli-client.md","sourceDirName":".","slug":"/rfc-028","permalink":"/prism-data-layer/rfc/rfc-028","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/RFC-028-prism-probe-cli-client.md","tags":[{"inline":true,"label":"cli","permalink":"/prism-data-layer/rfc/tags/cli"},{"inline":true,"label":"testing","permalink":"/prism-data-layer/rfc/tags/testing"},{"inline":true,"label":"debugging","permalink":"/prism-data-layer/rfc/tags/debugging"},{"inline":true,"label":"client","permalink":"/prism-data-layer/rfc/tags/client"}],"version":"current","frontMatter":{"author":"Claude","created":"2025-10-11T00:00:00.000Z","doc_uuid":"b3ce4713-fb50-4820-bd57-519b44551bc2","id":"rfc-028","project_id":"prism-data-layer","status":"Proposed","tags":["cli","testing","debugging","client"],"title":"prism-probe - CLI Client for Testing and Debugging","updated":"2025-10-11T00:00:00.000Z"},"sidebar":"rfcSidebar","previous":{"title":"Namespace Configuration and Client Request Flow \u2022 RFC-027","permalink":"/prism-data-layer/rfc/rfc-027"},"next":{"title":"Load Testing Framework Evaluation and Strategy \u2022 RFC-029","permalink":"/prism-data-layer/rfc/rfc-029"}}');var i=t(74848),r=t(28453);const a={author:"Claude",created:new Date("2025-10-11T00:00:00.000Z"),doc_uuid:"b3ce4713-fb50-4820-bd57-519b44551bc2",id:"rfc-028",project_id:"prism-data-layer",status:"Proposed",tags:["cli","testing","debugging","client"],title:"prism-probe - CLI Client for Testing and Debugging",updated:new Date("2025-10-11T00:00:00.000Z")},l="RFC-028: prism-probe - CLI Client for Testing and Debugging",o={},c=[{value:"Summary",id:"summary",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Current Pain Points",id:"current-pain-points",level:3},{value:"Goals",id:"goals",level:3},{value:"Design",id:"design",level:2},{value:"Command Structure",id:"command-structure",level:3},{value:"Pattern-Specific Commands",id:"pattern-specific-commands",level:3},{value:"KeyValue Pattern",id:"keyvalue-pattern",level:4},{value:"PubSub Pattern",id:"pubsub-pattern",level:4},{value:"Multicast Registry Pattern",id:"multicast-registry-pattern",level:4},{value:"Scenario Command",id:"scenario-command",level:3},{value:"Load Command",id:"load-command",level:3},{value:"Inspect Command",id:"inspect-command",level:3},{value:"Validate Command",id:"validate-command",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Technology Stack",id:"technology-stack",level:3},{value:"Directory Structure",id:"directory-structure",level:3},{value:"Example Implementation: KeyValue Set",id:"example-implementation-keyvalue-set",level:3},{value:"Example Scenario: User Session Flow",id:"example-scenario-user-session-flow",level:3},{value:"Examples",id:"examples",level:2},{value:"Example 1: Quick KeyValue Test",id:"example-1-quick-keyvalue-test",level:3},{value:"Example 2: Multicast Registry Test",id:"example-2-multicast-registry-test",level:3},{value:"Example 3: Load Test",id:"example-3-load-test",level:3},{value:"Example 4: CI/CD Validation",id:"example-4-cicd-validation",level:3},{value:"Benefits",id:"benefits",level:2},{value:"Open Questions",id:"open-questions",level:2},{value:"Recommendations",id:"recommendations",level:2},{value:"Related",id:"related",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rfc-028-prism-probe---cli-client-for-testing-and-debugging",children:"RFC-028: prism-probe - CLI Client for Testing and Debugging"})}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"prism-probe"})," is a command-line tool for testing, debugging, and interacting with Prism data access patterns. It provides flexible test scenarios, data generation, and pattern validation without writing code."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Name rationale"}),': "probe" is short, memorable, and clearly indicates testing/inspection functionality. Similar to ',(0,i.jsx)(n.code,{children:"kubectl"}),", ",(0,i.jsx)(n.code,{children:"redis-cli"}),", ",(0,i.jsx)(n.code,{children:"psql"})," - single-purpose debugging tools."]}),"\n",(0,i.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"User request:"}),' "we should create a new client command line ',(0,i.jsx)(n.code,{children:"client"}),' that gives us some flexible client test scenarios that can be run on the command line against the proxy"']}),"\n",(0,i.jsx)(n.h3,{id:"current-pain-points",children:"Current Pain Points"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No Quick Testing"}),": Testing patterns requires writing Go/Rust/Python code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Manual Setup"}),": Each test scenario needs boilerplate (connection, auth, cleanup)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No Load Testing"}),": No easy way to generate load against patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Debugging is Hard"}),": Can't easily inspect pattern state or message flow"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No Validation"}),": Can't verify pattern configuration before deploying"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"goals",children:"Goals"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Zero Code Testing"}),": Test patterns from command line without programming"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scenario Library"}),": Pre-built test scenarios for common use cases"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load Generation"}),": Built-in load testing with configurable profiles"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Debugging Tools"}),": Inspect state, trace messages, validate configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scriptable"}),": Composable commands for CI/CD and automation"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"design",children:"Design"}),"\n",(0,i.jsx)(n.h3,{id:"command-structure",children:"Command Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"prism-probe [global-options] <command> [command-options]\n\nCommands:\n  keyvalue    Test KeyValue pattern operations\n  pubsub      Test PubSub pattern operations\n  multicast   Test Multicast Registry pattern operations\n  queue       Test Queue pattern operations\n  timeseries  Test TimeSeries pattern operations\n\n  scenario    Run predefined test scenarios\n  load        Generate load with configurable profiles\n  inspect     Inspect pattern state and configuration\n  validate    Validate pattern configuration before deployment\n\nGlobal Options:\n  --proxy <url>       Proxy address (default: localhost:50051)\n  --auth <token>      Authentication token (default: $PRISM_TOKEN)\n  --namespace <ns>    Target namespace (default: default)\n  --pattern <name>    Pattern name\n  --format <fmt>      Output format: json|yaml|table (default: table)\n  --verbose           Enable verbose logging\n  --trace             Enable gRPC tracing\n"})}),"\n",(0,i.jsx)(n.h3,{id:"pattern-specific-commands",children:"Pattern-Specific Commands"}),"\n",(0,i.jsx)(n.h4,{id:"keyvalue-pattern",children:"KeyValue Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Set a key\nprism-probe keyvalue set --pattern user-cache --key user:123 --value \'{"name":"Alice"}\'\n\n# Get a key\nprism-probe keyvalue get --pattern user-cache --key user:123\n\n# Set with TTL\nprism-probe keyvalue set --pattern session-store --key session:abc --value \'{}\' --ttl 3600\n\n# Delete a key\nprism-probe keyvalue delete --pattern user-cache --key user:123\n\n# Batch operations\nprism-probe keyvalue mset --pattern user-cache --file users.json\nprism-probe keyvalue mget --pattern user-cache --keys user:1,user:2,user:3\n\n# Scan keys\nprism-probe keyvalue scan --pattern user-cache --prefix "user:" --limit 100\n'})}),"\n",(0,i.jsx)(n.h4,{id:"pubsub-pattern",children:"PubSub Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Publish a message\nprism-probe pubsub publish --pattern events --topic user.created --message \'{"user_id":"123"}\'\n\n# Subscribe to topic (blocks, prints messages)\nprism-probe pubsub subscribe --pattern events --topic "user.*"\n\n# Subscribe with filter\nprism-probe pubsub subscribe --pattern events --topic "user.*" --filter \'{"status":"active"}\'\n\n# Publish from file\nprism-probe pubsub publish --pattern events --topic orders.new --file order.json\n\n# Publish multiple messages\nprism-probe pubsub publish-batch --pattern events --topic test --count 100 --rate 10/sec\n'})}),"\n",(0,i.jsx)(n.h4,{id:"multicast-registry-pattern",children:"Multicast Registry Pattern"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Register identity with metadata\nprism-probe multicast register --pattern devices \\\n  --identity device-1 \\\n  --metadata \'{"status":"online","region":"us-west"}\' \\\n  --ttl 300\n\n# Enumerate identities with filter\nprism-probe multicast enumerate --pattern devices \\\n  --filter \'{"status":"online"}\'\n\n# Multicast message to filtered identities\nprism-probe multicast publish --pattern devices \\\n  --filter \'{"status":"online","region":"us-west"}\' \\\n  --message "firmware-update-v2"\n\n# Unregister identity\nprism-probe multicast unregister --pattern devices --identity device-1\n\n# Subscribe as consumer (blocks, prints multicasted messages)\nprism-probe multicast subscribe --pattern devices --identity device-1\n'})}),"\n",(0,i.jsx)(n.h3,{id:"scenario-command",children:"Scenario Command"}),"\n",(0,i.jsx)(n.p,{children:"Pre-built test scenarios for common patterns:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# List available scenarios\nprism-probe scenario list\n\n# Run a scenario\nprism-probe scenario run --name user-session-flow --pattern user-cache\n\n# Run with custom parameters\nprism-probe scenario run --name user-session-flow \\\n  --pattern user-cache \\\n  --params \'{"users":100,"duration":"5m"}\'\n\n# Available scenarios:\nprism-probe scenario list\n\nNAME                    PATTERN             DESCRIPTION\nuser-session-flow       keyvalue            Simulates user login/logout with session caching\nevent-fanout            pubsub              Publishes events, verifies all subscribers receive\ndevice-registration     multicast-registry  Registers devices, multicasts commands, measures latency\norder-processing        queue               Produces orders, consumes with workers, tracks completion\nmetrics-ingestion       timeseries          Writes time-series data, queries aggregations\n'})}),"\n",(0,i.jsx)(n.h3,{id:"load-command",children:"Load Command"}),"\n",(0,i.jsx)(n.p,{children:"Generate load with configurable profiles:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Constant rate load test\nprism-probe load run --pattern user-cache \\\n  --operation keyvalue.set \\\n  --rate 1000/sec \\\n  --duration 60s\n\n# Ramp-up profile (0 \u2192 5000 RPS over 2 minutes)\nprism-probe load run --pattern events \\\n  --operation pubsub.publish \\\n  --profile ramp-up \\\n  --start-rate 0 \\\n  --end-rate 5000/sec \\\n  --ramp-duration 2m \\\n  --steady-duration 5m\n\n# Spike profile (baseline \u2192 spike \u2192 baseline)\nprism-probe load run --pattern devices \\\n  --operation multicast.register \\\n  --profile spike \\\n  --baseline-rate 100/sec \\\n  --spike-rate 10000/sec \\\n  --spike-duration 30s\n\n# Custom profile from file\nprism-probe load run --pattern orders \\\n  --operation queue.enqueue \\\n  --profile-file load-profile.yaml\n\n# Example profile file (load-profile.yaml):\nphases:\n  - name: warmup\n    rate: 100/sec\n    duration: 1m\n\n  - name: ramp-up\n    start_rate: 100/sec\n    end_rate: 5000/sec\n    duration: 5m\n\n  - name: steady\n    rate: 5000/sec\n    duration: 10m\n\n  - name: ramp-down\n    start_rate: 5000/sec\n    end_rate: 0/sec\n    duration: 2m\n"})}),"\n",(0,i.jsx)(n.h3,{id:"inspect-command",children:"Inspect Command"}),"\n",(0,i.jsx)(n.p,{children:"Debugging and observability:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Inspect pattern configuration\nprism-probe inspect config --pattern user-cache\n\n# Inspect pattern state (backend-specific)\nprism-probe inspect state --pattern devices \\\n  --backend registry \\\n  --query \'{"status":"online"}\'\n\n# Trace a request (follows request through proxy \u2192 plugin \u2192 backend)\nprism-probe inspect trace --pattern events \\\n  --operation pubsub.publish \\\n  --payload \'{"test":true}\'\n\n# Show pattern metrics\nprism-probe inspect metrics --pattern user-cache\n\n# Show backend health\nprism-probe inspect health --pattern user-cache --backend redis\n'})}),"\n",(0,i.jsx)(n.h3,{id:"validate-command",children:"Validate Command"}),"\n",(0,i.jsx)(n.p,{children:"Pre-deployment validation:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Validate pattern configuration file\nprism-probe validate config --file pattern.yaml\n\n# Validate backend connectivity\nprism-probe validate backend --pattern user-cache\n\n# Validate schema (if message_schema is configured)\nprism-probe validate schema --pattern devices --message-file event.json\n\n# Validate load test plan\nprism-probe validate load-profile --file load-profile.yaml\n"})}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Language"}),": Go (same as patterns, easy distribution as single binary)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CLI Framework"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/spf13/cobra",children:"cobra"})," + ",(0,i.jsx)(n.a,{href:"https://github.com/spf13/viper",children:"viper"})," (industry standard)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"gRPC Client"}),": Use generated client from ",(0,i.jsx)(n.code,{children:"proto/"})," definitions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Output Formatting"}),": ",(0,i.jsx)(n.a,{href:"https://github.com/olekukonko/tablewriter",children:"tablewriter"})," for tables, stdlib ",(0,i.jsx)(n.code,{children:"encoding/json"})," for JSON/YAML"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"cli/prism-probe/\n\u251c\u2500\u2500 cmd/\n\u2502   \u251c\u2500\u2500 root.go              # Root command, global flags\n\u2502   \u251c\u2500\u2500 keyvalue.go          # keyvalue subcommands\n\u2502   \u251c\u2500\u2500 pubsub.go            # pubsub subcommands\n\u2502   \u251c\u2500\u2500 multicast.go         # multicast subcommands\n\u2502   \u251c\u2500\u2500 queue.go             # queue subcommands\n\u2502   \u251c\u2500\u2500 timeseries.go        # timeseries subcommands\n\u2502   \u251c\u2500\u2500 scenario.go          # scenario subcommands\n\u2502   \u251c\u2500\u2500 load.go              # load subcommands\n\u2502   \u251c\u2500\u2500 inspect.go           # inspect subcommands\n\u2502   \u2514\u2500\u2500 validate.go          # validate subcommands\n\u251c\u2500\u2500 pkg/\n\u2502   \u251c\u2500\u2500 client/              # gRPC client wrappers\n\u2502   \u251c\u2500\u2500 scenarios/           # Pre-built test scenarios\n\u2502   \u251c\u2500\u2500 load/                # Load generation engine\n\u2502   \u251c\u2500\u2500 format/              # Output formatters (table, JSON, YAML)\n\u2502   \u2514\u2500\u2500 trace/               # Request tracing utilities\n\u251c\u2500\u2500 examples/                # Example configuration files\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 go.mod\n\u2514\u2500\u2500 README.md\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-implementation-keyvalue-set",children:"Example Implementation: KeyValue Set"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// cmd/keyvalue.go\npackage cmd\n\nimport (\n\t"context"\n\t"fmt"\n\t"time"\n\n\t"github.com/spf13/cobra"\n\t"github.com/prism/cli/prism-probe/pkg/client"\n)\n\nvar keyvalueSetCmd = &cobra.Command{\n\tUse:   "set",\n\tShort: "Set a key-value pair",\n\tRunE: func(cmd *cobra.Command, args []string) error {\n\t\t// Parse flags\n\t\tpattern, _ := cmd.Flags().GetString("pattern")\n\t\tkey, _ := cmd.Flags().GetString("key")\n\t\tvalue, _ := cmd.Flags().GetString("value")\n\t\tttl, _ := cmd.Flags().GetDuration("ttl")\n\n\t\t// Create client\n\t\tc, err := client.NewProxyClient(\n\t\t\tglobalFlags.ProxyURL,\n\t\t\tglobalFlags.Namespace,\n\t\t\tglobalFlags.AuthToken,\n\t\t)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf("failed to connect: %w", err)\n\t\t}\n\t\tdefer c.Close()\n\n\t\t// Execute operation\n\t\tctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)\n\t\tdefer cancel()\n\n\t\terr = c.KeyValue().Set(ctx, pattern, key, []byte(value), ttl)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf("set failed: %w", err)\n\t\t}\n\n\t\t// Output result\n\t\tif globalFlags.Format == "json" {\n\t\t\tfmt.Printf(`{"status":"ok","key":"%s"}\\n`, key)\n\t\t} else {\n\t\t\tfmt.Printf("\u2713 Set %s = %s\\n", key, value)\n\t\t}\n\n\t\treturn nil\n\t},\n}\n\nfunc init() {\n\tkeyvalueCmd.AddCommand(keyvalueSetCmd)\n\n\tkeyvalueSetCmd.Flags().String("pattern", "", "Pattern name (required)")\n\tkeyvalueSetCmd.MarkFlagRequired("pattern")\n\n\tkeyvalueSetCmd.Flags().String("key", "", "Key to set (required)")\n\tkeyvalueSetCmd.MarkFlagRequired("key")\n\n\tkeyvalueSetCmd.Flags().String("value", "", "Value to set (required)")\n\tkeyvalueSetCmd.MarkFlagRequired("value")\n\n\tkeyvalueSetCmd.Flags().Duration("ttl", 0, "TTL duration (e.g., 3600s, 1h, 0 for no expiration)")\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-scenario-user-session-flow",children:"Example Scenario: User Session Flow"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// pkg/scenarios/user_session_flow.go\npackage scenarios\n\nimport (\n\t"context"\n\t"fmt"\n\t"time"\n\t"math/rand"\n)\n\ntype UserSessionFlow struct {\n\tPattern string\n\tUsers   int\n\tDuration time.Duration\n}\n\nfunc (s *UserSessionFlow) Run(ctx context.Context, client *ProxyClient) error {\n\tfmt.Printf("Running user session flow scenario\\n")\n\tfmt.Printf("  Pattern: %s\\n", s.Pattern)\n\tfmt.Printf("  Users: %d\\n", s.Users)\n\tfmt.Printf("  Duration: %s\\n", s.Duration)\n\n\tstart := time.Now()\n\toperations := 0\n\n\tfor time.Since(start) < s.Duration {\n\t\t// Randomly pick a user\n\t\tuserID := rand.Intn(s.Users)\n\t\tkey := fmt.Sprintf("session:%d", userID)\n\n\t\t// 70% login, 20% access, 10% logout\n\t\taction := rand.Float64()\n\n\t\tif action < 0.7 {\n\t\t\t// Login: create session\n\t\t\tsession := fmt.Sprintf(`{"user_id":%d,"logged_in_at":%d}`, userID, time.Now().Unix())\n\t\t\terr := client.KeyValue().Set(ctx, s.Pattern, key, []byte(session), 1*time.Hour)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf("login failed: %w", err)\n\t\t\t}\n\t\t\toperations++\n\t\t} else if action < 0.9 {\n\t\t\t// Access: read session\n\t\t\t_, err := client.KeyValue().Get(ctx, s.Pattern, key)\n\t\t\tif err != nil && err != ErrNotFound {\n\t\t\t\treturn fmt.Errorf("access failed: %w", err)\n\t\t\t}\n\t\t\toperations++\n\t\t} else {\n\t\t\t// Logout: delete session\n\t\t\terr := client.KeyValue().Delete(ctx, s.Pattern, key)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf("logout failed: %w", err)\n\t\t\t}\n\t\t\toperations++\n\t\t}\n\n\t\t// Rate limiting: ~100 ops/sec per user\n\t\ttime.Sleep(time.Duration(s.Users) * 10 * time.Millisecond)\n\t}\n\n\telapsed := time.Since(start)\n\topsPerSec := float64(operations) / elapsed.Seconds()\n\n\tfmt.Printf("\\nScenario complete:\\n")\n\tfmt.Printf("  Operations: %d\\n", operations)\n\tfmt.Printf("  Duration: %s\\n", elapsed)\n\tfmt.Printf("  Rate: %.2f ops/sec\\n", opsPerSec)\n\n\treturn nil\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(n.h3,{id:"example-1-quick-keyvalue-test",children:"Example 1: Quick KeyValue Test"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Set a value\n$ prism-probe keyvalue set --pattern user-cache --key user:alice --value \'{"name":"Alice","age":30}\'\n\u2713 Set user:alice = {"name":"Alice","age":30}\n\n# Get the value\n$ prism-probe keyvalue get --pattern user-cache --key user:alice\nKEY         VALUE\nuser:alice  {"name":"Alice","age":30}\n\n# Delete the value\n$ prism-probe keyvalue delete --pattern user-cache --key user:alice\n\u2713 Deleted user:alice\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-2-multicast-registry-test",children:"Example 2: Multicast Registry Test"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Register 3 devices\n$ prism-probe multicast register --pattern iot \\\n  --identity device-1 \\\n  --metadata \'{"status":"online","region":"us-west"}\'\n\u2713 Registered device-1\n\n$ prism-probe multicast register --pattern iot \\\n  --identity device-2 \\\n  --metadata \'{"status":"offline","region":"us-west"}\'\n\u2713 Registered device-2\n\n$ prism-probe multicast register --pattern iot \\\n  --identity device-3 \\\n  --metadata \'{"status":"online","region":"eu-west"}\'\n\u2713 Registered device-3\n\n# Enumerate online devices\n$ prism-probe multicast enumerate --pattern iot \\\n  --filter \'{"status":"online"}\'\n\nIDENTITY    STATUS    REGION     REGISTERED_AT\ndevice-1    online    us-west    2025-10-11T10:30:00Z\ndevice-3    online    eu-west    2025-10-11T10:30:15Z\n\n# Multicast to online devices in us-west\n$ prism-probe multicast publish --pattern iot \\\n  --filter \'{"status":"online","region":"us-west"}\' \\\n  --message "firmware-update-v2"\n\n\u2713 Multicasted to 1 identities (delivered: 1, failed: 0)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"example-3-load-test",children:"Example 3: Load Test"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Run 5-minute load test with ramp-up\n$ prism-probe load run --pattern user-cache \\\n  --operation keyvalue.set \\\n  --profile ramp-up \\\n  --start-rate 0 \\\n  --end-rate 5000/sec \\\n  --ramp-duration 2m \\\n  --steady-duration 3m\n\nLoad Test: keyvalue.set on pattern user-cache\nProfile: ramp-up (0 \u2192 5000/sec over 2m, steady 3m)\n\n[====================] 100% | 5m0s | 750,000 ops | 2,500/sec | Latency: p50=2.1ms p95=8.3ms p99=15.2ms\n\nResults:\n  Total Operations: 750,000\n  Success Rate: 99.98%\n  Throughput: 2,500 ops/sec\n  Latency:\n    p50: 2.1ms\n    p95: 8.3ms\n    p99: 15.2ms\n    p999: 23.1ms\n  Errors: 150 (0.02%)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"example-4-cicd-validation",children:"Example 4: CI/CD Validation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# In CI pipeline: validate pattern before deployment\n$ prism-probe validate config --file deploy/patterns/user-cache.yaml\n\u2713 Syntax valid\n\u2713 Schema valid\n\u2713 Backend configuration valid\n\n$ prism-probe validate backend --pattern user-cache\n\u2713 Redis connection successful (localhost:6379)\n\u2713 Read/write test passed\n\u2713 Latency within threshold (p99 < 10ms)\n\n$ echo "Pattern validated, proceeding with deployment"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rapid Prototyping"}),": Test patterns in seconds without writing code"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load Testing"}),": Built-in load generation with realistic profiles"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Debugging"}),": Inspect state, trace requests, validate configuration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CI/CD Integration"}),": Automated validation before deployment"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Documentation"}),": Commands serve as executable documentation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-Platform"}),": Single binary for Linux/macOS/Windows"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Auth Integration"}),": How to handle different auth methods (mTLS, OAuth2, API keys)?"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schema Awareness"}),": Should probe auto-generate message payloads from schemas?"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Distributed Load"}),": Support distributed load generation across multiple machines?"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"UI Mode"}),": Add interactive TUI (terminal UI) mode with live dashboards?"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"recommendations",children:"Recommendations"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"POC 4 (Week 2)"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Implement basic commands: ",(0,i.jsx)(n.code,{children:"keyvalue"}),", ",(0,i.jsx)(n.code,{children:"multicast"}),", ",(0,i.jsx)(n.code,{children:"inspect config"})]}),"\n",(0,i.jsx)(n.li,{children:"Single binary for macOS (development target)"}),"\n",(0,i.jsx)(n.li,{children:"JSON/table output formats"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"POC 5 (Week 3)"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Add ",(0,i.jsx)(n.code,{children:"scenario"})," and ",(0,i.jsx)(n.code,{children:"load"})," commands"]}),"\n",(0,i.jsx)(n.li,{children:"Implement 3 pre-built scenarios"}),"\n",(0,i.jsx)(n.li,{children:"Load testing with ramp-up profiles"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Production"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All pattern types supported"}),"\n",(0,i.jsx)(n.li,{children:"Distributed load testing"}),"\n",(0,i.jsx)(n.li,{children:"Interactive TUI mode with live metrics"}),"\n",(0,i.jsx)(n.li,{children:"CI/CD integration examples"}),"\n",(0,i.jsx)(n.li,{children:"Cross-platform builds (Linux, macOS, Windows, Docker)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related",children:"Related"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/rfc/rfc-017",children:"RFC-017: Multicast Registry Pattern"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/memos/memo-008",children:"MEMO-008: Message Schema Configuration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/adr/adr-040",children:"ADR-040: CLI-First Tooling"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);