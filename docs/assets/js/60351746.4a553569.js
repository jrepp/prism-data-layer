"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[4719],{215:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"admin-api-grpc","title":"ADR-027: Admin API via gRPC","description":"Context","source":"@site/../docs-cms/adr/027-admin-api-grpc.md","sourceDirName":".","slug":"/admin-api-grpc","permalink":"/prism-data-layer/adr/admin-api-grpc","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/027-admin-api-grpc.md","tags":[{"inline":true,"label":"admin","permalink":"/prism-data-layer/adr/tags/admin"},{"inline":true,"label":"grpc","permalink":"/prism-data-layer/adr/tags/grpc"},{"inline":true,"label":"api-design","permalink":"/prism-data-layer/adr/tags/api-design"},{"inline":true,"label":"operations","permalink":"/prism-data-layer/adr/tags/operations"}],"version":"current","sidebarPosition":27,"frontMatter":{"title":"ADR-027: Admin API via gRPC","status":"Accepted","date":"2025-10-07T00:00:00.000Z","deciders":"Core Team","tags":["admin","grpc","api-design","operations"]},"sidebar":"adrSidebar","previous":{"title":"ADR-026: Distroless Base Images for Container Components","permalink":"/prism-data-layer/adr/distroless-container-images"},"next":{"title":"ADR-028: Admin UI with FastAPI and gRPC-Web","permalink":"/prism-data-layer/adr/admin-ui-fastapi-grpc-web"}}');var t=s(4848),a=s(8453);const r={title:"ADR-027: Admin API via gRPC",status:"Accepted",date:new Date("2025-10-07T00:00:00.000Z"),deciders:"Core Team",tags:["admin","grpc","api-design","operations"]},o=void 0,l={},c=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why Separate Admin Service",id:"why-separate-admin-service",level:3},{value:"Admin Service Definition",id:"admin-service-definition",level:3},{value:"Configuration Management",id:"configuration-management",level:3},{value:"Session Management",id:"session-management",level:3},{value:"Namespace Management",id:"namespace-management",level:3},{value:"Backend Health",id:"backend-health",level:3},{value:"Operational Commands",id:"operational-commands",level:3},{value:"Audit Logging",id:"audit-logging",level:3},{value:"Authentication",id:"authentication",level:3},{value:"Authorization",id:"authorization",level:3},{value:"Deployment",id:"deployment",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Server Setup",id:"server-setup",level:3},{value:"Admin Client",id:"admin-client",level:3},{value:"Audit Logging",id:"audit-logging-1",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,t.jsx)(n.p,{children:"Prism requires administrative capabilities for:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Managing named client configurations"}),"\n",(0,t.jsx)(n.li,{children:"Monitoring active sessions"}),"\n",(0,t.jsx)(n.li,{children:"Viewing backend health and metrics"}),"\n",(0,t.jsx)(n.li,{children:"Managing namespaces and permissions"}),"\n",(0,t.jsx)(n.li,{children:"Operational tasks (drain, maintenance mode, etc.)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Separate from data plane (different authorization)"}),"\n",(0,t.jsx)(n.li,{children:"gRPC for consistency with data layer"}),"\n",(0,t.jsx)(n.li,{children:"Strong typing and versioning"}),"\n",(0,t.jsx)(n.li,{children:"Audit logging for all admin operations"}),"\n",(0,t.jsx)(n.li,{children:"RBAC for admin operations"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,t.jsxs)(n.p,{children:["Implement ",(0,t.jsx)(n.strong,{children:"AdminService via gRPC"})," as separate service from data plane:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Separate gRPC service"}),": ",(0,t.jsx)(n.code,{children:"prism.admin.v1.AdminService"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Admin-only port"}),": Run on separate port (8981) from data plane (8980)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enhanced auth"}),": Require admin credentials (separate from user sessions)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Comprehensive audit"}),": Log all admin operations with actor identity"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Versioned API"}),": Follow same versioning strategy as data plane"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,t.jsx)(n.h3,{id:"why-separate-admin-service",children:"Why Separate Admin Service"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Security isolation:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Different port prevents accidental data plane access"}),"\n",(0,t.jsx)(n.li,{children:"Separate authentication/authorization"}),"\n",(0,t.jsx)(n.li,{children:"Can be firewalled differently (internal-only)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Operational clarity:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Clear separation of concerns"}),"\n",(0,t.jsx)(n.li,{children:"Different SLAs (admin can be slower)"}),"\n",(0,t.jsx)(n.li,{children:"Independent scaling"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Evolution independence:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Admin API evolves separately from data API"}),"\n",(0,t.jsx)(n.li,{children:"Breaking changes don't affect data plane"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"admin-service-definition",children:"Admin Service Definition"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.admin.v1;\n\nimport "google/protobuf/timestamp.proto";\nimport "google/protobuf/empty.proto";\nimport "prism/config/v1/client_config.proto";\n\nservice AdminService {\n  // Configuration Management\n  rpc ListConfigs(ListConfigsRequest) returns (ListConfigsResponse);\n  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);\n  rpc CreateConfig(CreateConfigRequest) returns (CreateConfigResponse);\n  rpc UpdateConfig(UpdateConfigRequest) returns (UpdateConfigResponse);\n  rpc DeleteConfig(DeleteConfigRequest) returns (DeleteConfigResponse);\n\n  // Session Management\n  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse);\n  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);\n  rpc TerminateSession(TerminateSessionRequest) returns (TerminateSessionResponse);\n\n  // Namespace Management\n  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse);\n  rpc CreateNamespace(CreateNamespaceRequest) returns (CreateNamespaceResponse);\n  rpc UpdateNamespace(UpdateNamespaceRequest) returns (UpdateNamespaceResponse);\n  rpc DeleteNamespace(DeleteNamespaceRequest) returns (DeleteNamespaceResponse);\n\n  // Backend Health\n  rpc GetBackendStatus(GetBackendStatusRequest) returns (GetBackendStatusResponse);\n  rpc ListBackends(ListBackendsRequest) returns (ListBackendsResponse);\n\n  // Operational\n  rpc SetMaintenanceMode(SetMaintenanceModeRequest) returns (SetMaintenanceModeResponse);\n  rpc DrainConnections(DrainConnectionsRequest) returns (DrainConnectionsResponse);\n  rpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);\n\n  // Audit\n  rpc GetAuditLog(GetAuditLogRequest) returns (stream AuditLogEntry);\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"message ListConfigsRequest {\n  optional string namespace = 1;\n  optional prism.config.v1.AccessPattern pattern = 2;\n  int32 page_size = 3;\n  optional string page_token = 4;\n}\n\nmessage ListConfigsResponse {\n  repeated prism.config.v1.ClientConfig configs = 1;\n  optional string next_page_token = 2;\n  int32 total_count = 3;\n}\n\nmessage CreateConfigRequest {\n  prism.config.v1.ClientConfig config = 1;\n  bool overwrite = 2;\n}\n\nmessage CreateConfigResponse {\n  prism.config.v1.ClientConfig config = 1;\n  google.protobuf.Timestamp created_at = 2;\n}\n\nmessage UpdateConfigRequest {\n  string name = 1;\n  prism.config.v1.ClientConfig config = 2;\n}\n\nmessage UpdateConfigResponse {\n  prism.config.v1.ClientConfig config = 1;\n  google.protobuf.Timestamp updated_at = 2;\n}\n\nmessage DeleteConfigRequest {\n  string name = 1;\n}\n\nmessage DeleteConfigResponse {\n  bool success = 1;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"session-management",children:"Session Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"message ListSessionsRequest {\n  optional string namespace = 1;\n  optional SessionStatus status = 2;\n  int32 page_size = 3;\n  optional string page_token = 4;\n}\n\nmessage ListSessionsResponse {\n  repeated SessionInfo sessions = 1;\n  optional string next_page_token = 2;\n  int32 total_count = 3;\n}\n\nmessage SessionInfo {\n  string session_id = 1;\n  string session_token = 2;\n  string client_id = 3;\n  string namespace = 4;\n  SessionStatus status = 5;\n  google.protobuf.Timestamp created_at = 6;\n  google.protobuf.Timestamp expires_at = 7;\n  google.protobuf.Timestamp last_activity = 8;\n  SessionMetrics metrics = 9;\n}\n\nenum SessionStatus {\n  SESSION_STATUS_UNSPECIFIED = 0;\n  SESSION_STATUS_ACTIVE = 1;\n  SESSION_STATUS_IDLE = 2;\n  SESSION_STATUS_EXPIRING = 3;\n  SESSION_STATUS_TERMINATED = 4;\n}\n\nmessage SessionMetrics {\n  int64 requests_total = 1;\n  int64 bytes_sent = 2;\n  int64 bytes_received = 3;\n  int32 active_streams = 4;\n  google.protobuf.Timestamp last_request = 5;\n}\n\nmessage TerminateSessionRequest {\n  string session_id = 1;\n  bool force = 2;\n  string reason = 3;\n}\n\nmessage TerminateSessionResponse {\n  bool success = 1;\n  int32 pending_operations = 2;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"namespace-management",children:"Namespace Management"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"message ListNamespacesRequest {\n  int32 page_size = 1;\n  optional string page_token = 2;\n}\n\nmessage ListNamespacesResponse {\n  repeated NamespaceInfo namespaces = 1;\n  optional string next_page_token = 2;\n}\n\nmessage NamespaceInfo {\n  string name = 1;\n  string description = 2;\n  google.protobuf.Timestamp created_at = 3;\n  NamespaceStatus status = 4;\n  NamespaceQuota quota = 5;\n  NamespaceMetrics metrics = 6;\n}\n\nenum NamespaceStatus {\n  NAMESPACE_STATUS_UNSPECIFIED = 0;\n  NAMESPACE_STATUS_ACTIVE = 1;\n  NAMESPACE_STATUS_READ_ONLY = 2;\n  NAMESPACE_STATUS_SUSPENDED = 3;\n}\n\nmessage NamespaceQuota {\n  int64 max_sessions = 1;\n  int64 max_storage_bytes = 2;\n  int64 max_rps = 3;\n}\n\nmessage NamespaceMetrics {\n  int64 active_sessions = 1;\n  int64 storage_bytes_used = 2;\n  int64 requests_per_second = 3;\n}\n\nmessage CreateNamespaceRequest {\n  string name = 1;\n  string description = 2;\n  optional NamespaceQuota quota = 3;\n}\n\nmessage CreateNamespaceResponse {\n  NamespaceInfo namespace = 1;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"backend-health",children:"Backend Health"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:'message GetBackendStatusRequest {\n  string backend_type = 1;  // "postgres", "kafka", etc.\n}\n\nmessage GetBackendStatusResponse {\n  string backend_type = 1;\n  BackendHealth health = 2;\n  repeated BackendInstance instances = 3;\n}\n\nmessage BackendHealth {\n  HealthStatus status = 1;\n  string message = 2;\n  google.protobuf.Timestamp last_check = 3;\n\n  enum HealthStatus {\n    HEALTH_STATUS_UNSPECIFIED = 0;\n    HEALTH_STATUS_HEALTHY = 1;\n    HEALTH_STATUS_DEGRADED = 2;\n    HEALTH_STATUS_UNHEALTHY = 3;\n  }\n}\n\nmessage BackendInstance {\n  string id = 1;\n  string endpoint = 2;\n  BackendHealth health = 3;\n  BackendMetrics metrics = 4;\n}\n\nmessage BackendMetrics {\n  int32 active_connections = 1;\n  int32 pool_size = 2;\n  int32 idle_connections = 3;\n  double cpu_percent = 4;\n  double memory_percent = 5;\n  int64 requests_per_second = 6;\n  double avg_latency_ms = 7;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"operational-commands",children:"Operational Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"message SetMaintenanceModeRequest {\n  bool enabled = 1;\n  optional string message = 2;\n  optional google.protobuf.Timestamp scheduled_end = 3;\n}\n\nmessage SetMaintenanceModeResponse {\n  bool success = 1;\n  MaintenanceStatus status = 2;\n}\n\nmessage MaintenanceStatus {\n  bool enabled = 1;\n  optional string message = 2;\n  optional google.protobuf.Timestamp started_at = 3;\n  optional google.protobuf.Timestamp ends_at = 4;\n  int32 active_sessions = 5;\n}\n\nmessage DrainConnectionsRequest {\n  optional string namespace = 1;\n  optional google.protobuf.Duration timeout = 2;\n}\n\nmessage DrainConnectionsResponse {\n  int32 drained_count = 1;\n  int32 remaining_count = 2;\n  bool complete = 3;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"audit-logging",children:"Audit Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:'message GetAuditLogRequest {\n  optional string namespace = 1;\n  optional string actor = 2;\n  optional string operation = 3;\n  optional google.protobuf.Timestamp start_time = 4;\n  optional google.protobuf.Timestamp end_time = 5;\n  int32 limit = 6;\n}\n\nmessage AuditLogEntry {\n  string id = 1;\n  google.protobuf.Timestamp timestamp = 2;\n  string actor = 3;  // Admin user who performed action\n  string operation = 4;  // "CreateConfig", "TerminateSession", etc.\n  string resource = 5;  // Resource affected\n  string namespace = 6;\n  map<string, string> metadata = 7;\n  bool success = 8;\n  optional string error = 9;\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"authentication",children:"Authentication"}),"\n",(0,t.jsx)(n.p,{children:"Admin API requires separate authentication:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:'// Metadata in all admin requests\nmetadata {\n  "x-admin-token": "admin-abc123",\n  "x-admin-user": "alice@example.com"\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Authentication methods:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Admin API keys (long-lived, rotatable)"}),"\n",(0,t.jsx)(n.li,{children:"OAuth2 with admin scope"}),"\n",(0,t.jsx)(n.li,{children:"mTLS with admin certificate"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"authorization",children:"Authorization"}),"\n",(0,t.jsx)(n.p,{children:"Role-based access control:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"roles:\n  admin:\n    - config:*\n    - session:*\n    - namespace:*\n    - backend:read\n    - operational:*\n    - audit:read\n\n  operator:\n    - config:read\n    - session:read\n    - session:terminate\n    - backend:read\n    - operational:maintenance\n    - audit:read\n\n  viewer:\n    - config:read\n    - session:read\n    - backend:read\n    - audit:read\n"})}),"\n",(0,t.jsx)(n.h3,{id:"deployment",children:"Deployment"}),"\n",(0,t.jsx)(n.p,{children:"Admin API runs on separate port:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.yml\nservices:\n  prism-proxy:\n    image: prism/proxy:latest\n    ports:\n      - "8980:8980"  # Data plane\n      - "8981:8981"  # Admin API\n      - "9090:9090"  # Metrics\n    environment:\n      PRISM_DATA_PORT: 8980\n      PRISM_ADMIN_PORT: 8981\n'})}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Firewall rules:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"8980: Public (data plane)"}),"\n",(0,t.jsx)(n.li,{children:"8981: Internal only (admin API)"}),"\n",(0,t.jsx)(n.li,{children:"9090: Metrics (internal/monitoring)"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"REST API for admin"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pros: Simpler, HTTP-friendly, easier debugging"}),"\n",(0,t.jsx)(n.li,{children:"Cons: Inconsistent with data plane, no streaming, manual typing"}),"\n",(0,t.jsx)(n.li,{children:"Rejected: Want consistency with gRPC data layer"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Combined admin/data service"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pros: Simpler deployment, single port"}),"\n",(0,t.jsx)(n.li,{children:"Cons: Security risk, hard to separate, version skew"}),"\n",(0,t.jsx)(n.li,{children:"Rejected: Security isolation critical"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Admin commands in data plane"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pros: No separate service"}),"\n",(0,t.jsx)(n.li,{children:"Cons: Auth complexity, unclear boundaries"}),"\n",(0,t.jsx)(n.li,{children:"Rejected: Violates separation of concerns"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,t.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Security"}),": Separate port and auth for admin operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type safety"}),": gRPC/protobuf for admin operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Audit trail"}),": All admin actions logged"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Consistency"}),": Same patterns as data plane"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Evolution"}),": Admin API versions independently"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Complexity"}),": Another service to manage"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Port management"}),": Two ports to configure/firewall"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Client tooling"}),": Need admin client libraries"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Learning curve"}),": Admins must use gRPC tools"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Firewall rules"}),": Must configure internal-only access"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,t.jsx)(n.h3,{id:"server-setup",children:"Server Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'// proxy/src/main.rs\n#[tokio::main]\nasync fn main() -> Result<()> {\n    // Data plane\n    let data_addr = "0.0.0.0:8980".parse()?;\n    let data_server = Server::builder()\n        .add_service(SessionServiceServer::new(session_svc))\n        .add_service(QueueServiceServer::new(queue_svc))\n        .serve(data_addr);\n\n    // Admin plane\n    let admin_addr = "0.0.0.0:8981".parse()?;\n    let admin_server = Server::builder()\n        .add_service(AdminServiceServer::new(admin_svc))\n        .serve(admin_addr);\n\n    // Run both servers\n    tokio::try_join!(data_server, admin_server)?;\n\n    Ok(())\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"admin-client",children:"Admin Client"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'// tools/cmd/prism-admin/main.go\nconn, err := grpc.Dial(\n    "localhost:8981",\n    grpc.WithTransportCredentials(creds),\n)\n\nclient := admin.NewAdminServiceClient(conn)\n\n// List sessions\nresp, err := client.ListSessions(ctx, &admin.ListSessionsRequest{\n    Namespace: "production",\n    Status: admin.SessionStatus_SESSION_STATUS_ACTIVE,\n})\n\nfor _, session := range resp.Sessions {\n    fmt.Printf("Session: %s Client: %s\\n", session.SessionId, session.ClientId)\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"audit-logging-1",children:"Audit Logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'impl AdminService {\n    async fn create_config(&self, req: CreateConfigRequest) -> Result<CreateConfigResponse> {\n        let actor = self.get_admin_user_from_metadata()?;\n\n        // Perform operation\n        let result = self.config_store.create(req.config).await;\n\n        // Audit log\n        self.audit_logger.log(AuditLogEntry {\n            actor: actor.email,\n            operation: "CreateConfig".to_string(),\n            resource: format!("config:{}", req.config.name),\n            namespace: req.config.namespace,\n            success: result.is_ok(),\n            error: result.as_ref().err().map(|e| e.to_string()),\n            ..Default::default()\n        }).await;\n\n        result\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ADR-023: gRPC-First Interface Design"}),"\n",(0,t.jsx)(n.li,{children:"ADR-024: Layered Interface Hierarchy"}),"\n",(0,t.jsx)(n.li,{children:"RFC-002: Data Layer Interface Specification"}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://grpc.io/docs/guides/auth/",children:"gRPC Authentication"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"2025-10-07: Initial draft and acceptance"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>o});var i=s(6540);const t={},a=i.createContext(t);function r(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);