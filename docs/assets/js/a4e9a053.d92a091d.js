"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[25209],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}},52640:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rfc-023","title":"Publish Snapshotter Plugin - Write-Only Event Buffering with Pagination","description":"Summary","source":"@site/../docs-cms/rfcs/rfc-023-publish-snapshotter-plugin.md","sourceDirName":".","slug":"/rfc-023","permalink":"/prism-data-layer/rfc/rfc-023","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/rfc-023-publish-snapshotter-plugin.md","tags":[{"inline":true,"label":"plugin","permalink":"/prism-data-layer/rfc/tags/plugin"},{"inline":true,"label":"snapshotter","permalink":"/prism-data-layer/rfc/tags/snapshotter"},{"inline":true,"label":"streaming","permalink":"/prism-data-layer/rfc/tags/streaming"},{"inline":true,"label":"pagination","permalink":"/prism-data-layer/rfc/tags/pagination"},{"inline":true,"label":"object-storage","permalink":"/prism-data-layer/rfc/tags/object-storage"},{"inline":true,"label":"write-only","permalink":"/prism-data-layer/rfc/tags/write-only"},{"inline":true,"label":"buffering","permalink":"/prism-data-layer/rfc/tags/buffering"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-09T00:00:00.000Z","doc_uuid":"6b98adc6-65e5-4d25-ae1d-dbc54473da2d","id":"rfc-023","project_id":"prism-data-layer","status":"Proposed","tags":["plugin","snapshotter","streaming","pagination","object-storage","write-only","buffering"],"title":"Publish Snapshotter Plugin - Write-Only Event Buffering with Pagination","updated":"2025-10-09T00:00:00.000Z"},"sidebar":"rfcSidebar","previous":{"title":"Core Pattern SDK - Build System and Physical Code Layout \u2022 RFC-022","permalink":"/prism-data-layer/rfc/rfc-022"},"next":{"title":"Distributed Session Store Pattern - Cross-Region Session Management \u2022 RFC-024","permalink":"/prism-data-layer/rfc/rfc-024"}}');var i=s(74848),r=s(28453);const a={author:"Platform Team",created:new Date("2025-10-09T00:00:00.000Z"),doc_uuid:"6b98adc6-65e5-4d25-ae1d-dbc54473da2d",id:"rfc-023",project_id:"prism-data-layer",status:"Proposed",tags:["plugin","snapshotter","streaming","pagination","object-storage","write-only","buffering"],title:"Publish Snapshotter Plugin - Write-Only Event Buffering with Pagination",updated:new Date("2025-10-09T00:00:00.000Z")},l="RFC-023: Publish Snapshotter Plugin - Write-Only Event Buffering with Pagination",o={},c=[{value:"Summary",id:"summary",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Problem",id:"problem",level:3},{value:"Goals",id:"goals",level:3},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Component Diagram",id:"component-diagram",level:3},{value:"Backend Interface Decomposition",id:"backend-interface-decomposition",level:2},{value:"Slot 1: Storage Backend",id:"slot-1-storage-backend",level:3},{value:"Slot 2: Index Backend",id:"slot-2-index-backend",level:3},{value:"Snapshotter Plugin API",id:"snapshotter-plugin-api",level:2},{value:"PubSub Interface (Write-Only)",id:"pubsub-interface-write-only",level:3},{value:"Snapshotter Configuration",id:"snapshotter-configuration",level:3},{value:"Page Format Specifications",id:"page-format-specifications",level:2},{value:"Protobuf Page Format",id:"protobuf-page-format",level:3},{value:"NDJSON Page Format",id:"ndjson-page-format",level:3},{value:"Page Lifecycle",id:"page-lifecycle",level:2},{value:"1. Event Buffering",id:"1-event-buffering",level:3},{value:"2. Page Flush",id:"2-page-flush",level:3},{value:"3. Index Publishing",id:"3-index-publishing",level:3},{value:"Session Disconnect Handling",id:"session-disconnect-handling",level:2},{value:"Query and Replay",id:"query-and-replay",level:2},{value:"Query Index by Writer",id:"query-index-by-writer",level:3},{value:"Replay Events from Pages",id:"replay-events-from-pages",level:3},{value:"Implementation Examples",id:"implementation-examples",level:2},{value:"MemStore + Local Filesystem (Development)",id:"memstore--local-filesystem-development",level:3},{value:"MinIO + Redis (Production)",id:"minio--redis-production",level:3},{value:"S3 + ClickHouse (Large Scale)",id:"s3--clickhouse-large-scale",level:3},{value:"Performance Characteristics",id:"performance-characteristics",level:2},{value:"Buffer Memory Usage",id:"buffer-memory-usage",level:3},{value:"Page Write Throughput",id:"page-write-throughput",level:3},{value:"Storage Growth",id:"storage-growth",level:3},{value:"Comparison to Alternatives",id:"comparison-to-alternatives",level:2},{value:"vs. Standard PubSub",id:"vs-standard-pubsub",level:3},{value:"vs. Event Sourcing",id:"vs-event-sourcing",level:3},{value:"vs. Database CDC",id:"vs-database-cdc",level:3},{value:"Operational Considerations",id:"operational-considerations",level:2},{value:"Monitoring Metrics",id:"monitoring-metrics",level:3},{value:"Health Checks",id:"health-checks",level:3},{value:"Failure Recovery",id:"failure-recovery",level:3},{value:"Related Backend Interfaces",id:"related-backend-interfaces",level:2},{value:"New Interface: <code>storage_object</code>",id:"new-interface-storage_object",level:3},{value:"Existing Interfaces Used",id:"existing-interfaces-used",level:3},{value:"Open Questions",id:"open-questions",level:2},{value:"Related Documents",id:"related-documents",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rfc-023-publish-snapshotter-plugin---write-only-event-buffering-with-pagination",children:"RFC-023: Publish Snapshotter Plugin - Write-Only Event Buffering with Pagination"})}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.p,{children:["Define a ",(0,i.jsx)(n.strong,{children:"publish snapshotter plugin"})," that provides write-only event capture with intelligent buffering, pagination, and durable storage. The snapshotter buffers N events for a writer, commits pages when size/time thresholds are reached, and publishes page metadata to an index. Supports multiple storage backends (object storage, local files) and serialization formats (protobuf, NDJSON). Session disconnects trigger safe page writes with no data loss."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Features"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Write-only API"}),": Satisfies PubSub publish interface only (no subscription)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Intelligent buffering"}),": Buffer N events per writer with configurable thresholds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Page-based commits"}),": Write pages when size/time limits reached"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Durable storage"}),": Object storage (S3, MinIO) or local filesystem"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Index publishing"}),": Side channel publishes page metadata for discovery"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session safety"}),": Disconnects flush buffered pages automatically"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Format flexibility"}),": Protobuf or NDJSON serialization"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsx)(n.h3,{id:"problem",children:"Problem"}),"\n",(0,i.jsx)(n.p,{children:"Current streaming patterns require:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Continuous consumers"}),": Data lost if no consumer is actively reading"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complex buffering"}),": Application-level buffering adds complexity"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No replay"}),": Historical event replay requires separate CDC/WAL patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session fragility"}),": Connection drops lose buffered events"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use Cases Requiring Snapshotter"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Audit logging"}),": Write-only event capture with guaranteed durability"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event archival"}),": Store events for later analysis without active consumers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data lake ingestion"}),": Buffer events and write large files to S3/MinIO"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session recording"}),": Capture user activity across sessions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Metrics collection"}),": Buffer high-volume metrics and batch write"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Change capture"}),": Snapshot database changes to object storage"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"goals",children:"Goals"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Durability"}),": Zero data loss even on session disconnect or plugin crash"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Efficiency"}),": Write large pages (MB-scale) instead of tiny messages"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Discoverability"}),": Index tracks all pages for query/replay"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flexibility"}),": Support multiple storage backends and formats"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simplicity"}),": Single pattern handles buffering, pagination, and indexing"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,i.jsx)(n.h3,{id:"component-diagram",children:"Component Diagram"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Snapshotter Architecture                     \u2502\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Client (Writer)                                         \u2502  \u2502\n\u2502  \u2502  - Publishes events via PubSub API                       \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                   \u2502                                             \u2502\n\u2502                   \u2502 gRPC (PubSubBasicInterface)                 \u2502\n\u2502                   \u25bc                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502  Snapshotter Plugin                                      \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502\n\u2502  \u2502  \u2502  Event Buffer (per writer)                         \u2502  \u2502  \u2502\n\u2502  \u2502  \u2502  - Buffer N events (default: 1000)                 \u2502  \u2502  \u2502\n\u2502  \u2502  \u2502  - Track size (bytes) and age (duration)           \u2502  \u2502  \u2502\n\u2502  \u2502  \u2502  - Flush on: size limit, time limit, disconnect    \u2502  \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502\n\u2502  \u2502  \u2502  Page Writer                                       \u2502  \u2502  \u2502\n\u2502  \u2502  \u2502  - Serialize to protobuf or NDJSON                 \u2502  \u2502  \u2502\n\u2502  \u2502  \u2502  - Compress with gzip/zstd (optional)              \u2502  \u2502  \u2502\n\u2502  \u2502  \u2502  - Write to storage backend                        \u2502  \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502  \u2502\n\u2502  \u2502  \u2502  Index Publisher                                   \u2502  \u2502  \u2502\n\u2502  \u2502  \u2502  - Publish page metadata (key, size, event count)  \u2502  \u2502  \u2502\n\u2502  \u2502  \u2502  - Enable discovery and replay                     \u2502  \u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                    \u2502                    \u2502                       \u2502\n\u2502        Storage Slot\u2502                    \u2502Index Slot             \u2502\n\u2502                    \u25bc                    \u25bc                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502\n\u2502  \u2502  Storage Backend     \u2502   \u2502  Index Backend       \u2502           \u2502\n\u2502  \u2502  - S3/MinIO          \u2502   \u2502  - KeyValue (Redis)  \u2502           \u2502\n\u2502  \u2502  - Local filesystem  \u2502   \u2502  - TimeSeries (DB)   \u2502           \u2502\n\u2502  \u2502  - Azure Blob        \u2502   \u2502  - Search (Elastic)  \u2502           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"backend-interface-decomposition",children:"Backend Interface Decomposition"}),"\n",(0,i.jsxs)(n.p,{children:["Following MEMO-006 principles, the snapshotter uses ",(0,i.jsx)(n.strong,{children:"two backend slots"}),":"]}),"\n",(0,i.jsx)(n.h3,{id:"slot-1-storage-backend",children:"Slot 1: Storage Backend"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Durable page storage (object storage or files)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Required Interface"}),": ",(0,i.jsx)(n.code,{children:"storage_object"})," (new interface)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'// proto/interfaces/storage_object.proto\nsyntax = "proto3";\npackage prism.interfaces.storage;\n\n// Object storage operations (S3-like)\nservice StorageObjectInterface {\n  rpc PutObject(PutObjectRequest) returns (PutObjectResponse);\n  rpc GetObject(GetObjectRequest) returns (stream GetObjectResponse);\n  rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse);\n  rpc ListObjects(ListObjectsRequest) returns (stream ObjectMetadata);\n  rpc HeadObject(HeadObjectRequest) returns (ObjectMetadata);\n}\n\nmessage PutObjectRequest {\n  string bucket = 1;        // Bucket/container name\n  string key = 2;           // Object key (path)\n  bytes data = 3;           // Object data (chunked for large objects)\n  string content_type = 4;  // MIME type (e.g., "application/protobuf")\n  map<string, string> metadata = 5;  // User metadata\n  bool is_final_chunk = 6;  // True for last chunk in multipart\n}\n\nmessage PutObjectResponse {\n  string etag = 1;          // ETag for verification\n  int64 size = 2;           // Total object size\n  string version_id = 3;    // Version ID (if versioning enabled)\n}\n\nmessage GetObjectRequest {\n  string bucket = 1;\n  string key = 2;\n  int64 offset = 3;         // Byte offset (for range reads)\n  int64 limit = 4;          // Bytes to read (0 = all)\n}\n\nmessage GetObjectResponse {\n  bytes data = 1;           // Chunked data\n  bool is_final_chunk = 2;\n}\n\nmessage DeleteObjectRequest {\n  string bucket = 1;\n  string key = 2;\n  string version_id = 3;    // Optional version to delete\n}\n\nmessage DeleteObjectResponse {\n  bool deleted = 1;\n}\n\nmessage ListObjectsRequest {\n  string bucket = 1;\n  string prefix = 2;        // Key prefix filter\n  int32 max_keys = 3;       // Max results (0 = all)\n  string continuation_token = 4;  // Pagination token\n}\n\nmessage ObjectMetadata {\n  string key = 1;\n  int64 size = 2;\n  int64 last_modified = 3;  // Unix timestamp\n  string etag = 4;\n  string content_type = 5;\n  map<string, string> metadata = 6;\n}\n\nmessage HeadObjectRequest {\n  string bucket = 1;\n  string key = 2;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsxs)(n.strong,{children:["Backends implementing ",(0,i.jsx)(n.code,{children:"storage_object"})]}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"S3 (AWS)"}),"\n",(0,i.jsx)(n.li,{children:"MinIO (self-hosted S3-compatible)"}),"\n",(0,i.jsx)(n.li,{children:"Azure Blob Storage"}),"\n",(0,i.jsx)(n.li,{children:"Google Cloud Storage"}),"\n",(0,i.jsx)(n.li,{children:"Local filesystem (file:// protocol)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"slot-2-index-backend",children:"Slot 2: Index Backend"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Track page metadata for discovery and replay"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Required Interfaces"}),": ",(0,i.jsx)(n.code,{children:"keyvalue_basic"})," OR ",(0,i.jsx)(n.code,{children:"timeseries_basic"})," OR ",(0,i.jsx)(n.code,{children:"document_query"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Option 1: KeyValue-based index"})," (simple, fast lookups)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'index:\n  backend: redis\n  interface: keyvalue_basic\n  key_pattern: "snapshot:{writer_id}:{timestamp}:{sequence}"\n  value: JSON metadata (page key, size, event count, start/end times)\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Option 2: TimeSeries-based index"})," (time-range queries)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"index:\n  backend: clickhouse\n  interface: timeseries_basic\n  schema:\n    - writer_id: string\n    - page_key: string\n    - page_size: int64\n    - event_count: int64\n    - start_time: timestamp\n    - end_time: timestamp\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Option 3: Document-based index"})," (rich querying)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"index:\n  backend: elasticsearch\n  interface: document_query\n  document:\n    writer_id: string\n    page_key: string\n    page_size: int64\n    event_count: int64\n    start_time: timestamp\n    end_time: timestamp\n    content_type: string\n    compression: string\n"})}),"\n",(0,i.jsx)(n.h2,{id:"snapshotter-plugin-api",children:"Snapshotter Plugin API"}),"\n",(0,i.jsx)(n.h3,{id:"pubsub-interface-write-only",children:"PubSub Interface (Write-Only)"}),"\n",(0,i.jsxs)(n.p,{children:["The snapshotter implements ",(0,i.jsx)(n.strong,{children:"only"})," the ",(0,i.jsx)(n.code,{children:"Publish"})," method from ",(0,i.jsx)(n.code,{children:"PubSubBasicInterface"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"// Implements subset of proto/interfaces/pubsub_basic.proto\nservice PubSubBasicInterface {\n  rpc Publish(PublishRequest) returns (PublishResponse);\n  // Subscribe NOT implemented (snapshotter is write-only)\n}\n\nmessage PublishRequest {\n  string topic = 1;         // Writer identifier (session ID, user ID, etc.)\n  bytes payload = 2;        // Event data\n  map<string, string> attributes = 3;  // Event metadata\n}\n\nmessage PublishResponse {\n  string message_id = 1;    // Unique message ID within buffer\n  int64 sequence = 2;       // Sequence number in current page\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"snapshotter-configuration",children:"Snapshotter Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Configuration for snapshotter plugin\nplugin: snapshotter\nversion: v1.0.0\n\n# Buffering configuration\nbuffer:\n  max_events: 1000          # Flush after N events\n  max_size_bytes: 10485760  # Flush after 10MB\n  max_age_seconds: 300      # Flush after 5 minutes\n  flush_on_disconnect: true # Flush buffer on session close\n\n# Page configuration\npage:\n  format: protobuf          # "protobuf" or "ndjson"\n  compression: gzip         # "none", "gzip", "zstd"\n  target_size_mb: 10        # Target page size (soft limit)\n  include_metadata: true    # Include event metadata in page\n\n# Storage slot configuration\nstorage:\n  backend: minio\n  interface: storage_object\n  config:\n    endpoint: "minio:9000"\n    bucket: "event-snapshots"\n    access_key: "${MINIO_ACCESS_KEY}"\n    secret_key: "${MINIO_SECRET_KEY}"\n    key_template: "snapshots/{year}/{month}/{day}/{writer_id}/{timestamp}_{sequence}.pb.gz"\n    # Local filesystem alternative:\n    # backend: filesystem\n    # path: "/var/lib/prism/snapshots"\n\n# Index slot configuration\nindex:\n  backend: redis\n  interface: keyvalue_basic\n  config:\n    connection: "redis://localhost:6379/0"\n    key_prefix: "snapshot:"\n    ttl_days: 90            # Index entries expire after 90 days\n    # Optional: publish to multiple indexes\n    secondary:\n      - backend: elasticsearch\n        interface: document_query\n        index: "event-snapshots"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"page-format-specifications",children:"Page Format Specifications"}),"\n",(0,i.jsx)(n.h3,{id:"protobuf-page-format",children:"Protobuf Page Format"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'// proto/snapshotter/page.proto\nsyntax = "proto3";\npackage prism.snapshotter;\n\nmessage EventPage {\n  PageMetadata metadata = 1;\n  repeated Event events = 2;\n}\n\nmessage PageMetadata {\n  string writer_id = 1;         // Writer identifier\n  int64 page_sequence = 2;      // Page sequence number for this writer\n  int64 start_time = 3;         // Unix timestamp of first event\n  int64 end_time = 4;           // Unix timestamp of last event\n  int64 event_count = 5;        // Number of events in page\n  int64 page_size_bytes = 6;    // Uncompressed page size\n  string format_version = 7;    // Schema version (e.g., "v1")\n  string compression = 8;       // "none", "gzip", "zstd"\n  map<string, string> tags = 9; // User-defined tags\n}\n\nmessage Event {\n  string event_id = 1;          // Unique event ID\n  int64 timestamp = 2;          // Event timestamp\n  bytes payload = 3;            // Event data\n  map<string, string> attributes = 4;  // Event metadata\n  int64 sequence = 5;           // Sequence within page\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"ndjson-page-format",children:"NDJSON Page Format"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// Each line is a JSON object\n{"metadata":{"writer_id":"user-123","page_sequence":42,"start_time":1696800000,"end_time":1696800300,"event_count":1000,"page_size_bytes":1048576,"format_version":"v1","compression":"gzip","tags":{"environment":"production","region":"us-west-2"}}}\n{"event_id":"evt-001","timestamp":1696800000,"payload":"base64-encoded-data","attributes":{"type":"user.login"},"sequence":0}\n{"event_id":"evt-002","timestamp":1696800001,"payload":"base64-encoded-data","attributes":{"type":"user.click"},"sequence":1}\n...\n{"event_id":"evt-1000","timestamp":1696800300,"payload":"base64-encoded-data","attributes":{"type":"user.logout"},"sequence":999}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NDJSON Benefits"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Human-readable for debugging"}),"\n",(0,i.jsx)(n.li,{children:"Line-by-line streaming processing"}),"\n",(0,i.jsx)(n.li,{children:"Works with standard Unix tools (grep, awk, jq)"}),"\n",(0,i.jsx)(n.li,{children:"No schema required"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Protobuf Benefits"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Smaller file sizes (30-50% vs NDJSON)"}),"\n",(0,i.jsx)(n.li,{children:"Faster serialization/deserialization"}),"\n",(0,i.jsx)(n.li,{children:"Schema evolution with backward compatibility"}),"\n",(0,i.jsx)(n.li,{children:"Binary safety (no encoding issues)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"page-lifecycle",children:"Page Lifecycle"}),"\n",(0,i.jsx)(n.h3,{id:"1-event-buffering",children:"1. Event Buffering"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Writer publishes event\n    \u2193\nBuffer event in memory\n    \u2193\nCheck flush conditions:\n  - max_events reached?\n  - max_size_bytes reached?\n  - max_age_seconds exceeded?\n  - session disconnect?\n    \u2193\nIf YES \u2192 Flush page\nIf NO \u2192 Await next event\n"})}),"\n",(0,i.jsx)(n.h3,{id:"2-page-flush",children:"2. Page Flush"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Flush triggered\n    \u2193\nSerialize events to format (protobuf/NDJSON)\n    \u2193\nCompress with gzip/zstd (optional)\n    \u2193\nGenerate page key from template:\n  snapshots/2025/10/09/user-123/1696800000_42.pb.gz\n    \u2193\nWrite to storage backend (PutObject)\n    \u2193\nPublish page metadata to index\n    \u2193\nClear buffer\n"})}),"\n",(0,i.jsx)(n.h3,{id:"3-index-publishing",children:"3. Index Publishing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'Page written successfully\n    \u2193\nGenerate index entry:\n  key: snapshot:user-123:1696800000:42\n  value: {\n    "page_key": "snapshots/2025/10/09/user-123/1696800000_42.pb.gz",\n    "writer_id": "user-123",\n    "page_sequence": 42,\n    "start_time": 1696800000,\n    "end_time": 1696800300,\n    "event_count": 1000,\n    "page_size_bytes": 1048576,\n    "storage_size_bytes": 524288,  // Compressed size\n    "format": "protobuf",\n    "compression": "gzip"\n  }\n    \u2193\nPublish to index backend (KeyValue.Set or TimeSeries.Insert)\n    \u2193\nIndex entry available for query\n'})}),"\n",(0,i.jsx)(n.h2,{id:"session-disconnect-handling",children:"Session Disconnect Handling"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Critical Requirement"}),": No data loss on disconnect."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Pseudo-code for session disconnect\nfunc (s *Snapshotter) OnSessionClose(writerID string) error {\n    // Get writer\'s buffer\n    buffer := s.getBuffer(writerID)\n\n    // Flush buffer even if small\n    if buffer.Len() > 0 {\n        page := s.serializePage(buffer)\n        pageKey := s.generatePageKey(writerID, buffer.StartTime, buffer.Sequence)\n\n        // Write to storage (blocking, no timeout)\n        if err := s.storage.PutObject(pageKey, page); err != nil {\n            // CRITICAL: Log error and retry until success\n            s.logger.Error("Failed to flush page on disconnect, retrying...", err)\n            return s.retryPutObject(pageKey, page, maxRetries)\n        }\n\n        // Publish index entry\n        s.publishIndexEntry(pageKey, buffer.Metadata())\n\n        // Clear buffer\n        buffer.Clear()\n    }\n\n    return nil\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Guarantees"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flush before disconnect"}),": Buffer flushed synchronously before session closes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Retry on failure"}),": Storage writes retry until success (with backoff)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Index eventual consistency"}),": Index updated best-effort (can lag storage)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"query-and-replay",children:"Query and Replay"}),"\n",(0,i.jsx)(n.h3,{id:"query-index-by-writer",children:"Query Index by Writer"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Using Redis KeyValue backend\nredis-cli KEYS \"snapshot:user-123:*\"\n\n# Using TimeSeries backend (ClickHouse)\nSELECT page_key, event_count, start_time, end_time\nFROM event_snapshots\nWHERE writer_id = 'user-123'\n  AND start_time >= unix_timestamp('2025-10-01')\n  AND end_time <= unix_timestamp('2025-10-31')\nORDER BY start_time ASC\n"})}),"\n",(0,i.jsx)(n.h3,{id:"replay-events-from-pages",children:"Replay Events from Pages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Python replay example\nimport boto3\nimport gzip\nfrom prism_pb2 import EventPage\n\ns3 = boto3.client('s3')\n\ndef replay_writer_events(writer_id, start_time, end_time):\n    # Query index for page keys\n    page_keys = query_index(writer_id, start_time, end_time)\n\n    for page_key in page_keys:\n        # Download page from S3\n        obj = s3.get_object(Bucket='event-snapshots', Key=page_key)\n        compressed_data = obj['Body'].read()\n\n        # Decompress\n        data = gzip.decompress(compressed_data)\n\n        # Deserialize\n        page = EventPage()\n        page.ParseFromString(data)\n\n        # Process events\n        for event in page.events:\n            yield {\n                'event_id': event.event_id,\n                'timestamp': event.timestamp,\n                'payload': event.payload,\n                'attributes': dict(event.attributes)\n            }\n\n# Replay all events for user-123 in October 2025\nfor event in replay_writer_events('user-123', 1727740800, 1730419200):\n    print(f\"Event {event['event_id']} at {event['timestamp']}\")\n"})}),"\n",(0,i.jsx)(n.h2,{id:"implementation-examples",children:"Implementation Examples"}),"\n",(0,i.jsx)(n.h3,{id:"memstore--local-filesystem-development",children:"MemStore + Local Filesystem (Development)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'plugin: snapshotter\nbuffer:\n  max_events: 100\n  max_size_bytes: 1048576  # 1MB\n  max_age_seconds: 60\n\npage:\n  format: ndjson\n  compression: none\n\nstorage:\n  backend: filesystem\n  interface: storage_object\n  config:\n    base_path: "/tmp/prism-snapshots"\n    key_template: "{writer_id}/{date}/{sequence}.ndjson"\n\nindex:\n  backend: memstore\n  interface: keyvalue_basic\n  config:\n    connection: "mem://local"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"minio--redis-production",children:"MinIO + Redis (Production)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'plugin: snapshotter\nbuffer:\n  max_events: 10000\n  max_size_bytes: 10485760  # 10MB\n  max_age_seconds: 300\n\npage:\n  format: protobuf\n  compression: gzip\n\nstorage:\n  backend: minio\n  interface: storage_object\n  config:\n    endpoint: "minio.prod.internal:9000"\n    bucket: "event-snapshots"\n    access_key_env: "MINIO_ACCESS_KEY"\n    secret_key_env: "MINIO_SECRET_KEY"\n    key_template: "snapshots/{year}/{month}/{day}/{writer_id}/{timestamp}_{sequence}.pb.gz"\n    enable_versioning: true\n\nindex:\n  backend: redis\n  interface: keyvalue_basic\n  config:\n    connection: "redis://redis.prod.internal:6379/0"\n    key_prefix: "snapshot:"\n    ttl_days: 90\n    cluster_mode: true\n'})}),"\n",(0,i.jsx)(n.h3,{id:"s3--clickhouse-large-scale",children:"S3 + ClickHouse (Large Scale)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'plugin: snapshotter\nbuffer:\n  max_events: 50000\n  max_size_bytes: 52428800  # 50MB\n  max_age_seconds: 600\n\npage:\n  format: protobuf\n  compression: zstd\n  target_size_mb: 50\n\nstorage:\n  backend: s3\n  interface: storage_object\n  config:\n    region: "us-west-2"\n    bucket: "company-event-snapshots"\n    key_template: "events/{year}/{month}/{day}/{writer_id}/{timestamp}_{sequence}.pb.zst"\n    storage_class: "INTELLIGENT_TIERING"\n\nindex:\n  backend: clickhouse\n  interface: timeseries_basic\n  config:\n    connection: "clickhouse://clickhouse.prod.internal:9000/events"\n    table: "event_snapshots"\n    partitioning: "toYYYYMM(start_time)"\n'})}),"\n",(0,i.jsx)(n.h2,{id:"performance-characteristics",children:"Performance Characteristics"}),"\n",(0,i.jsx)(n.h3,{id:"buffer-memory-usage",children:"Buffer Memory Usage"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Memory per writer = max_events \xd7 avg_event_size + overhead\n\nExample with 10,000 events \xd7 1KB each:\n  Buffer size: ~10MB per active writer\n  With 1,000 concurrent writers: ~10GB RAM\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Optimization"}),": Implement buffer eviction policy (LRU) if writer count exceeds memory limits."]}),"\n",(0,i.jsx)(n.h3,{id:"page-write-throughput",children:"Page Write Throughput"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Events/sec per writer = max_events / max_age_seconds\nPage writes/sec = concurrent_writers \xd7 (1 / max_age_seconds)\n\nExample:\n  10,000 events per page\n  300 second max age\n  1,000 concurrent writers\n\n  Events/sec: 10,000 / 300 = 33 events/sec per writer\n  Page writes/sec: 1,000 / 300 = 3.3 pages/sec = ~200 pages/min\n"})}),"\n",(0,i.jsx)(n.h3,{id:"storage-growth",children:"Storage Growth"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Daily storage = events_per_day \xd7 avg_event_size \xd7 (1 - compression_ratio)\n\nExample with 1B events/day \xd7 1KB each \xd7 50% compression:\n  Raw: 1TB/day\n  Compressed: 500GB/day\n  Monthly: 15TB\n  Yearly: 180TB\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cost Optimization"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use S3 Intelligent Tiering (auto-moves to cheaper tiers)"}),"\n",(0,i.jsx)(n.li,{children:"Set lifecycle policies (delete after 90 days, archive to Glacier)"}),"\n",(0,i.jsx)(n.li,{children:"Implement page compaction (merge small pages periodically)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"comparison-to-alternatives",children:"Comparison to Alternatives"}),"\n",(0,i.jsx)(n.h3,{id:"vs-standard-pubsub",children:"vs. Standard PubSub"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"Snapshotter"}),(0,i.jsx)(n.th,{children:"Standard PubSub"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Durability"})}),(0,i.jsx)(n.td,{children:"Guaranteed (written to storage)"}),(0,i.jsx)(n.td,{children:"Best-effort (lost if no consumer)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Replay"})}),(0,i.jsx)(n.td,{children:"Full replay from storage"}),(0,i.jsx)(n.td,{children:"Limited (depends on retention)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Buffering"})}),(0,i.jsx)(n.td,{children:"Intelligent page-based"}),(0,i.jsx)(n.td,{children:"Fixed message queue"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Storage cost"})}),(0,i.jsx)(n.td,{children:"Object storage (cheap)"}),(0,i.jsx)(n.td,{children:"Message broker (expensive)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Latency"})}),(0,i.jsx)(n.td,{children:"Higher (buffered writes)"}),(0,i.jsx)(n.td,{children:"Lower (immediate delivery)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Consumer coupling"})}),(0,i.jsx)(n.td,{children:"Decoupled (no active consumer needed)"}),(0,i.jsx)(n.td,{children:"Coupled (requires active subscriber)"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use Snapshotter When"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Durability > latency"}),"\n",(0,i.jsx)(n.li,{children:"Events may need replay months later"}),"\n",(0,i.jsx)(n.li,{children:"No active consumer at write time"}),"\n",(0,i.jsx)(n.li,{children:"Cost-sensitive (object storage cheaper than Kafka/Redis)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"vs-event-sourcing",children:"vs. Event Sourcing"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"Snapshotter"}),(0,i.jsx)(n.th,{children:"Event Sourcing"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Purpose"})}),(0,i.jsx)(n.td,{children:"Event capture and archival"}),(0,i.jsx)(n.td,{children:"Event-driven state management"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Replay"})}),(0,i.jsx)(n.td,{children:"Full event replay"}),(0,i.jsx)(n.td,{children:"Rebuild state from events"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"State"})}),(0,i.jsx)(n.td,{children:"Stateless (no aggregates)"}),(0,i.jsx)(n.td,{children:"Stateful (aggregates, projections)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Complexity"})}),(0,i.jsx)(n.td,{children:"Simple (write pages)"}),(0,i.jsx)(n.td,{children:"Complex (CQRS, projections)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Query"})}),(0,i.jsx)(n.td,{children:"Index-based"}),(0,i.jsx)(n.td,{children:"Projection-based"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use Snapshotter When"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Don't need event sourcing complexity"}),"\n",(0,i.jsx)(n.li,{children:"Just want durable event log"}),"\n",(0,i.jsx)(n.li,{children:"Replay is occasional, not continuous"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"vs-database-cdc",children:"vs. Database CDC"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"Snapshotter"}),(0,i.jsx)(n.th,{children:"CDC (Debezium)"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Source"})}),(0,i.jsx)(n.td,{children:"Application events"}),(0,i.jsx)(n.td,{children:"Database changes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Coupling"})}),(0,i.jsx)(n.td,{children:"Decoupled from DB"}),(0,i.jsx)(n.td,{children:"Tightly coupled to DB"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Format"})}),(0,i.jsx)(n.td,{children:"Flexible (protobuf/NDJSON)"}),(0,i.jsx)(n.td,{children:"Database-specific"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Schema"})}),(0,i.jsx)(n.td,{children:"User-defined"}),(0,i.jsx)(n.td,{children:"Database schema"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Performance"})}),(0,i.jsx)(n.td,{children:"No DB overhead"}),(0,i.jsx)(n.td,{children:"Reads WAL/binlog"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use Snapshotter When"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Events come from application, not database"}),"\n",(0,i.jsx)(n.li,{children:"Want control over format and schema"}),"\n",(0,i.jsx)(n.li,{children:"Don't want database-specific tooling"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"operational-considerations",children:"Operational Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"monitoring-metrics",children:"Monitoring Metrics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Prometheus metrics\nsnapshotter_buffer_size_bytes{writer_id}      # Current buffer size per writer\nsnapshotter_buffer_event_count{writer_id}     # Events in buffer per writer\nsnapshotter_buffer_age_seconds{writer_id}     # Age of oldest event in buffer\nsnapshotter_page_writes_total                 # Total pages written\nsnapshotter_page_write_duration_seconds       # Time to write page\nsnapshotter_page_size_bytes                   # Page sizes (histogram)\nsnapshotter_index_publish_errors_total        # Index publish failures\nsnapshotter_storage_errors_total              # Storage backend errors\nsnapshotter_session_disconnects_total         # Disconnect-triggered flushes\n"})}),"\n",(0,i.jsx)(n.h3,{id:"health-checks",children:"Health Checks"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Check buffer health\nGET /health/buffers\nResponse: {\n  "active_writers": 1234,\n  "total_buffered_events": 5432100,\n  "total_buffer_size_bytes": 5368709120,\n  "oldest_buffer_age_seconds": 250,\n  "writers_exceeding_age_limit": 12\n}\n\n# Check storage backend\nGET /health/storage\nResponse: {\n  "backend": "minio",\n  "status": "healthy",\n  "last_write_success": "2025-10-09T14:23:15Z",\n  "write_success_rate": 0.9995,\n  "avg_write_latency_ms": 45\n}\n\n# Check index backend\nGET /health/index\nResponse: {\n  "backend": "redis",\n  "status": "healthy",\n  "last_publish_success": "2025-10-09T14:23:15Z",\n  "publish_success_rate": 0.999,\n  "index_entry_count": 45678\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"failure-recovery",children:"Failure Recovery"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Buffer Loss Prevention"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Periodic checkpoints"}),": Write buffer state to disk every 60 seconds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Crash recovery"}),": Reload buffers from checkpoint on restart"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"WAL option"}),": Optional write-ahead log for zero data loss (with performance cost)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Storage Backend Failure"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Retry with backoff"}),": Exponential backoff up to 5 minutes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dead letter queue"}),": Move failed pages to DLQ after max retries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Alert on failure"}),": Page writes to monitoring/alerting"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Index Backend Failure"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Best-effort"}),": Index publish failures don't block page writes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Retry queue"}),": Failed index publishes queued for retry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reconciliation job"}),": Periodic job scans storage and rebuilds missing index entries"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-backend-interfaces",children:"Related Backend Interfaces"}),"\n",(0,i.jsxs)(n.h3,{id:"new-interface-storage_object",children:["New Interface: ",(0,i.jsx)(n.code,{children:"storage_object"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Add to MEMO-006 interface catalog"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Backend interfaces\nStorageObject (5 operations):\n  - storage_object.proto - Object storage (PutObject, GetObject, DeleteObject, ListObjects, HeadObject)\n\n# Backends implementing storage_object\n- S3 (AWS)\n- MinIO\n- Azure Blob Storage\n- Google Cloud Storage\n- Local filesystem\n"})}),"\n",(0,i.jsx)(n.h3,{id:"existing-interfaces-used",children:"Existing Interfaces Used"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Index Slot Options"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyvalue_basic"})," - Simple key-value lookups (Redis, DynamoDB)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"timeseries_basic"})," - Time-range queries (ClickHouse, TimescaleDB)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"document_query"})," - Rich querying (Elasticsearch, MongoDB)"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Should snapshotter support batch publish API?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proposal"}),": Add ",(0,i.jsx)(n.code,{children:"BatchPublish"})," RPC for bulk event submission"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trade-off"}),": More efficient but more complex client code"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Should page compaction be automatic or manual?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proposal"}),": Optional background job merges small pages (<1MB) into larger pages"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Benefit"}),": Reduces object count, improves replay performance"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Should index be updated synchronously or asynchronously?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proposal"}),": Async by default (don't block page write), sync option for critical use cases"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Trade-off"}),": Async has eventual consistency delay"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Should snapshotter support multi-region replication?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proposal"}),": Optional cross-region page replication (S3 cross-region replication)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use case"}),": Disaster recovery, compliance requirements"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Should page format support schema evolution?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proposal"}),": Protobuf with schema registry (Confluent Schema Registry compatible)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Benefit"}),": Track schema versions, enable backward/forward compatibility"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-008",children:"RFC-008: Proxy Plugin Architecture"})," - Plugin system overview"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/memos/memo-006",children:"MEMO-006: Backend Interface Decomposition"})," - Interface design principles"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-009",children:"RFC-009: Distributed Reliability Patterns"})," - Related patterns (Event Sourcing, CDC)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-014",children:"RFC-014: Layered Data Access Patterns"})," - PubSub pattern spec"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2025-10-09: Initial RFC defining snapshotter plugin with interface decomposition, storage/index slots, and format options"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);