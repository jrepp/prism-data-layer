"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[34018],{1442:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rfc-013","title":"Neptune Graph Backend Implementation","description":"Note Graph Database Backend Support for the architectural decision and comparison of graph databases.","source":"@site/../docs-cms/rfcs/rfc-013-neptune-graph-backend.md","sourceDirName":".","slug":"/rfc-013","permalink":"/prism-data-layer/rfc/rfc-013","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/rfc-013-neptune-graph-backend.md","tags":[{"inline":true,"label":"backend","permalink":"/prism-data-layer/rfc/tags/backend"},{"inline":true,"label":"graph","permalink":"/prism-data-layer/rfc/tags/graph"},{"inline":true,"label":"neptune","permalink":"/prism-data-layer/rfc/tags/neptune"},{"inline":true,"label":"aws","permalink":"/prism-data-layer/rfc/tags/aws"},{"inline":true,"label":"plugin","permalink":"/prism-data-layer/rfc/tags/plugin"},{"inline":true,"label":"implementation","permalink":"/prism-data-layer/rfc/tags/implementation"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-09T00:00:00.000Z","doc_uuid":"8faa29ea-cf12-4b91-91f8-a586c79bd642","id":"rfc-013","project_id":"prism-data-layer","status":"Draft","tags":["backend","graph","neptune","aws","plugin","implementation"],"title":"Neptune Graph Backend Implementation","updated":"2025-10-09T00:00:00.000Z"},"sidebar":"rfcSidebar","previous":{"title":"Prism Network Gateway (prism-netgw) - Multi-Region Control Plane \u2022 RFC-012","permalink":"/prism-data-layer/rfc/rfc-012"},"next":{"title":"Layered Data Access Patterns \u2022 RFC-014","permalink":"/prism-data-layer/rfc/rfc-014"}}');var s=r(74848),i=r(28453);const a={author:"Platform Team",created:new Date("2025-10-09T00:00:00.000Z"),doc_uuid:"8faa29ea-cf12-4b91-91f8-a586c79bd642",id:"rfc-013",project_id:"prism-data-layer",status:"Draft",tags:["backend","graph","neptune","aws","plugin","implementation"],title:"Neptune Graph Backend Implementation",updated:new Date("2025-10-09T00:00:00.000Z")},l="RFC-013: Neptune Graph Backend Implementation",o={},c=[{value:"Abstract",id:"abstract",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why Neptune?",id:"why-neptune",level:3},{value:"When to Use Neptune Backend",id:"when-to-use-neptune-backend",level:3},{value:"Graph Data Abstraction Layer",id:"graph-data-abstraction-layer",level:2},{value:"Core Operations",id:"core-operations",level:3},{value:"Example: Social Graph Queries",id:"example-social-graph-queries",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Plugin Architecture",id:"plugin-architecture",level:3},{value:"IAM Authentication",id:"iam-authentication",level:3},{value:"Bulk Import",id:"bulk-import",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Read Replicas",id:"read-replicas",level:3},{value:"Query Optimization",id:"query-optimization",level:3},{value:"Cost Optimization",id:"cost-optimization",level:2},{value:"Monitoring",id:"monitoring",level:2},{value:"CloudWatch Metrics",id:"cloudwatch-metrics",level:3},{value:"Query Profiling",id:"query-profiling",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"rfc-013-neptune-graph-backend-implementation",children:"RFC-013: Neptune Graph Backend Implementation"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Note"}),": This RFC provides implementation details for AWS Neptune as the first graph database backend. See ",(0,s.jsx)(n.a,{href:"/adr/adr-041",children:"ADR-041: Graph Database Backend Support"})," for the architectural decision and comparison of graph databases."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,s.jsx)(n.p,{children:"This RFC specifies the implementation details for the AWS Neptune graph backend plugin, including:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Gremlin API integration"}),"\n",(0,s.jsx)(n.li,{children:"IAM authentication"}),"\n",(0,s.jsx)(n.li,{children:"Bulk import/export"}),"\n",(0,s.jsx)(n.li,{children:"Performance optimization"}),"\n",(0,s.jsx)(n.li,{children:"Cost considerations"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Neptune was chosen as the first graph database implementation based on the comparison rubric in ADR-041."}),"\n",(0,s.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,s.jsx)(n.p,{children:"Prism's graph database support (ADR-041) requires a concrete implementation. AWS Neptune was selected for the initial implementation due to:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Fully managed service (zero operational burden)"}),"\n",(0,s.jsx)(n.li,{children:"AWS ecosystem integration"}),"\n",(0,s.jsx)(n.li,{children:"Multi-model support (Gremlin + SPARQL)"}),"\n",(0,s.jsx)(n.li,{children:"Enterprise-grade reliability"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This RFC focuses on applications that need to model and query highly connected data such as:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Social Networks"}),": User relationships, friend connections, followers"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Knowledge Graphs"}),": Entity relationships, semantic networks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Recommendation Systems"}),": Item-item relationships, collaborative filtering"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fraud Detection"}),": Transaction networks, entity linkage"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dependency Graphs"}),": Service dependencies, package relationships"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"AWS Neptune"})," is a managed graph database service that supports:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Property Graph Model"}),": Gremlin (Apache TinkerPop)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"RDF Graph Model"}),": SPARQL"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ACID Transactions"}),": Strong consistency guarantees"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"High Availability"}),": Multi-AZ deployments with automatic failover"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Read Replicas"}),": Up to 15 read replicas for query scaling"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,s.jsxs)(n.p,{children:["Implement a ",(0,s.jsx)(n.strong,{children:"Neptune Graph Backend Plugin"})," for Prism that provides:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Graph Data Abstraction Layer"}),": Unified API for graph operations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Gremlin Support"}),": Primary query interface (property graph model)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"SPARQL Support"}),": Optional for RDF/semantic web use cases"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Transaction Management"}),": ACID transactions for graph mutations"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Bulk Import/Export"}),": Efficient data loading and backup"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AWS Integration"}),": IAM authentication, VPC networking, CloudWatch metrics"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,s.jsx)(n.h3,{id:"why-neptune",children:"Why Neptune?"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Fully managed (no operational burden)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 AWS native (easy integration with other AWS services)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 High performance (optimized for graph traversals)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Multi-model (property graph + RDF)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 ACID transactions (strong consistency)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Read replicas (horizontal scaling)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Backup/restore (automated)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u274c AWS vendor lock-in"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Higher cost than self-managed Neo4j"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Limited customization"}),"\n",(0,s.jsx)(n.li,{children:"\u274c No embedded mode (cloud-only)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Alternatives Considered"}),":"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Database"}),(0,s.jsx)(n.th,{children:"Pros"}),(0,s.jsx)(n.th,{children:"Cons"}),(0,s.jsx)(n.th,{children:"Verdict"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Neo4j"})}),(0,s.jsx)(n.td,{children:"Rich query language (Cypher), large community, self-hostable"}),(0,s.jsx)(n.td,{children:"Requires operational expertise, licensing costs for Enterprise"}),(0,s.jsx)(n.td,{children:"\u274c Rejected: Higher ops burden"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"JanusGraph"})}),(0,s.jsx)(n.td,{children:"Open source, multi-backend, Gremlin-compatible"}),(0,s.jsx)(n.td,{children:"Complex to operate, slower than Neptune"}),(0,s.jsx)(n.td,{children:"\u274c Rejected: Operational complexity"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"ArangoDB"})}),(0,s.jsx)(n.td,{children:"Multi-model (graph + document), open source"}),(0,s.jsx)(n.td,{children:"Smaller community, less mature graph features"}),(0,s.jsx)(n.td,{children:"\u274c Rejected: Less specialized"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"DGraph"})}),(0,s.jsx)(n.td,{children:"GraphQL-native, open source, fast"}),(0,s.jsx)(n.td,{children:"Smaller ecosystem, less AWS integration"}),(0,s.jsx)(n.td,{children:"\u274c Rejected: Less mature"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Neptune"})}),(0,s.jsx)(n.td,{children:"Managed, AWS-native, Gremlin + SPARQL, ACID"}),(0,s.jsx)(n.td,{children:"AWS lock-in, cost"}),(0,s.jsxs)(n.td,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Accepted"}),": Best for AWS deployments"]})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"when-to-use-neptune-backend",children:"When to Use Neptune Backend"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Use Neptune for"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Social graph queries (friends, followers, connections)"}),"\n",(0,s.jsx)(n.li,{children:"Recommendation systems (item-item similarity)"}),"\n",(0,s.jsx)(n.li,{children:"Knowledge graphs (entity relationships)"}),"\n",(0,s.jsx)(n.li,{children:"Fraud detection (network analysis)"}),"\n",(0,s.jsx)(n.li,{children:"Dependency resolution (package graphs, service graphs)"}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Don't use Neptune for"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Simple key-value lookups (use Redis or DynamoDB)"}),"\n",(0,s.jsx)(n.li,{children:"Time-series data (use ClickHouse or TimescaleDB)"}),"\n",(0,s.jsx)(n.li,{children:"Document storage (use MongoDB or Postgres JSONB)"}),"\n",(0,s.jsx)(n.li,{children:"Full-text search (use Elasticsearch)"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"graph-data-abstraction-layer",children:"Graph Data Abstraction Layer"}),"\n",(0,s.jsx)(n.h3,{id:"core-operations",children:"Core Operations"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.graph.v1;\n\nservice GraphService {\n  // Vertex operations\n  rpc CreateVertex(CreateVertexRequest) returns (CreateVertexResponse);\n  rpc GetVertex(GetVertexRequest) returns (GetVertexResponse);\n  rpc UpdateVertex(UpdateVertexRequest) returns (UpdateVertexResponse);\n  rpc DeleteVertex(DeleteVertexRequest) returns (DeleteVertexResponse);\n\n  // Edge operations\n  rpc CreateEdge(CreateEdgeRequest) returns (CreateEdgeResponse);\n  rpc GetEdge(GetEdgeRequest) returns (GetEdgeResponse);\n  rpc DeleteEdge(DeleteEdgeRequest) returns (DeleteEdgeResponse);\n\n  // Traversal operations\n  rpc Traverse(TraverseRequest) returns (TraverseResponse);\n  rpc ShortestPath(ShortestPathRequest) returns (ShortestPathResponse);\n  rpc PageRank(PageRankRequest) returns (PageRankResponse);\n\n  // Bulk operations\n  rpc BatchCreateVertices(BatchCreateVerticesRequest) returns (BatchCreateVerticesResponse);\n  rpc BatchCreateEdges(BatchCreateEdgesRequest) returns (BatchCreateEdgesResponse);\n\n  // Query operations\n  rpc ExecuteGremlin(ExecuteGremlinRequest) returns (ExecuteGremlinResponse);\n  rpc ExecuteSPARQL(ExecuteSPARQLRequest) returns (ExecuteSPARQLResponse);\n}\n\nmessage Vertex {\n  string id = 1;\n  string label = 2;  // Vertex type (e.g., "User", "Product")\n  map<string, PropertyValue> properties = 3;\n}\n\nmessage Edge {\n  string id = 1;\n  string label = 2;  // Edge type (e.g., "FOLLOWS", "PURCHASED")\n  string from_vertex_id = 3;\n  string to_vertex_id = 4;\n  map<string, PropertyValue> properties = 5;\n}\n\nmessage PropertyValue {\n  oneof value {\n    string string_value = 1;\n    int64 int_value = 2;\n    double double_value = 3;\n    bool bool_value = 4;\n    bytes bytes_value = 5;\n  }\n}\n\nmessage TraverseRequest {\n  string start_vertex_id = 1;\n  repeated TraversalStep steps = 2;\n  int32 max_depth = 3;\n  int32 limit = 4;\n}\n\nmessage TraversalStep {\n  enum Direction {\n    OUT = 0;   // Outgoing edges\n    IN = 1;    // Incoming edges\n    BOTH = 2;  // Both directions\n  }\n\n  Direction direction = 1;\n  repeated string edge_labels = 2;  // Filter by edge type\n  map<string, PropertyValue> filters = 3;  // Property filters\n}\n\nmessage TraverseResponse {\n  repeated Vertex vertices = 1;\n  repeated Edge edges = 2;\n  repeated Path paths = 3;\n}\n\nmessage Path {\n  repeated string vertex_ids = 1;\n  repeated string edge_ids = 2;\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"example-social-graph-queries",children:"Example: Social Graph Queries"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"1. Find Friends of Friends"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gremlin",children:"// Gremlin query\ng.V('user:alice').out('FOLLOWS').out('FOLLOWS').dedup().limit(10)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-protobuf",children:'// Prism API equivalent\nTraverseRequest {\n  start_vertex_id: "user:alice"\n  steps: [\n    TraversalStep { direction: OUT, edge_labels: ["FOLLOWS"] },\n    TraversalStep { direction: OUT, edge_labels: ["FOLLOWS"] }\n  ]\n  max_depth: 2\n  limit: 10\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"2. Shortest Path"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gremlin",children:"// Find shortest path from Alice to Bob\ng.V('user:alice').repeat(out().simplePath()).until(hasId('user:bob')).path().limit(1)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-protobuf",children:'// Prism API equivalent\nShortestPathRequest {\n  start_vertex_id: "user:alice"\n  end_vertex_id: "user:bob"\n  max_hops: 6  // Six degrees of separation\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"3. PageRank for Recommendations"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gremlin",children:"// Compute PageRank to find influential users\ng.V().pageRank().by('pagerank').order().by('pagerank', desc).limit(10)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-protobuf",children:'// Prism API equivalent\nPageRankRequest {\n  vertex_label: "User"\n  iterations: 20\n  damping_factor: 0.85\n  limit: 10\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,s.jsx)(n.h3,{id:"plugin-architecture",children:"Plugin Architecture"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'// plugins/backends/neptune/plugin.go\npackage neptune\n\nimport (\n    "context"\n    "github.com/aws/aws-sdk-go-v2/aws"\n    "github.com/aws/aws-sdk-go-v2/service/neptune"\n    "github.com/apache/tinkerpop/gremlin-go/driver"\n)\n\ntype NeptunePlugin struct {\n    config    *NeptuneConfig\n    client    *neptune.Client\n    gremlin   *driver.DriverRemoteConnection\n    namespace string\n}\n\ntype NeptuneConfig struct {\n    ClusterEndpoint string // e.g., "my-cluster.cluster-abc.us-east-1.neptune.amazonaws.com"\n    Port            int    // 8182 for Gremlin, 8181 for SPARQL\n    IAMAuth         bool   // Use IAM database authentication\n    Region          string\n}\n\nfunc (p *NeptunePlugin) CreateVertex(ctx context.Context, req *CreateVertexRequest) (*CreateVertexResponse, error) {\n    // Build Gremlin query\n    query := fmt.Sprintf("g.addV(\'%s\').property(id, \'%s\')", req.Label, req.Id)\n    for key, value := range req.Properties {\n        query += fmt.Sprintf(".property(\'%s\', %v)", key, value)\n    }\n\n    // Execute via Gremlin driver\n    result, err := p.gremlin.SubmitWithBindings(query, nil)\n    if err != nil {\n        return nil, fmt.Errorf("failed to create vertex: %w", err)\n    }\n\n    return &CreateVertexResponse{Vertex: parseVertex(result)}, nil\n}\n\nfunc (p *NeptunePlugin) CreateEdge(ctx context.Context, req *CreateEdgeRequest) (*CreateEdgeResponse, error) {\n    // Gremlin query: g.V(\'from\').addE(\'label\').to(V(\'to\'))\n    query := fmt.Sprintf(\n        "g.V(\'%s\').addE(\'%s\').to(g.V(\'%s\')).property(id, \'%s\')",\n        req.FromVertexId, req.Label, req.ToVertexId, req.Id,\n    )\n\n    for key, value := range req.Properties {\n        query += fmt.Sprintf(".property(\'%s\', %v)", key, value)\n    }\n\n    result, err := p.gremlin.SubmitWithBindings(query, nil)\n    if err != nil {\n        return nil, fmt.Errorf("failed to create edge: %w", err)\n    }\n\n    return &CreateEdgeResponse{Edge: parseEdge(result)}, nil\n}\n\nfunc (p *NeptunePlugin) Traverse(ctx context.Context, req *TraverseRequest) (*TraverseResponse, error) {\n    // Build Gremlin traversal\n    query := fmt.Sprintf("g.V(\'%s\')", req.StartVertexId)\n\n    for _, step := range req.Steps {\n        switch step.Direction {\n        case Direction_OUT:\n            query += ".out()"\n        case Direction_IN:\n            query += ".in()"\n        case Direction_BOTH:\n            query += ".both()"\n        }\n\n        if len(step.EdgeLabels) > 0 {\n            labels := strings.Join(step.EdgeLabels, "\', \'")\n            query += fmt.Sprintf("(\'%s\')", labels)\n        }\n    }\n\n    query += fmt.Sprintf(".dedup().limit(%d)", req.Limit)\n\n    result, err := p.gremlin.SubmitWithBindings(query, nil)\n    if err != nil {\n        return nil, fmt.Errorf("failed to traverse: %w", err)\n    }\n\n    return parseTraversalResult(result), nil\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"iam-authentication",children:"IAM Authentication"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'func (p *NeptunePlugin) authenticateWithIAM(ctx context.Context) error {\n    cfg, err := config.LoadDefaultConfig(ctx, config.WithRegion(p.config.Region))\n    if err != nil {\n        return fmt.Errorf("failed to load AWS config: %w", err)\n    }\n\n    // Generate pre-signed URL for IAM auth\n    credentials, err := cfg.Credentials.Retrieve(ctx)\n    if err != nil {\n        return fmt.Errorf("failed to retrieve credentials: %w", err)\n    }\n\n    // Connect to Neptune with IAM signature\n    p.gremlin, err = driver.NewDriverRemoteConnection(\n        p.config.ClusterEndpoint+":"+strconv.Itoa(p.config.Port),\n        func(settings *driver.Settings) {\n            settings.AuthInfo = &driver.AuthInfo{\n                AccessKey: credentials.AccessKeyID,\n                SecretKey: credentials.SecretAccessKey,\n                SessionToken: credentials.SessionToken,\n            }\n        },\n    )\n\n    return err\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"bulk-import",children:"Bulk Import"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Neptune Bulk Loader"})," for large datasets:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-go",children:'func (p *NeptunePlugin) BulkImport(ctx context.Context, s3Path string) error {\n    // Use Neptune Bulk Loader API\n    input := &neptune.StartLoaderJobInput{\n        ClusterIdentifier: &p.config.ClusterIdentifier,\n        Source:            aws.String(s3Path),  // s3://bucket/data.csv\n        Format:            aws.String("csv"),   // or "gremlinJson", "ntriples", "rdfxml"\n        IAMRoleArn:        aws.String(p.config.LoaderRoleARN),\n        ParallelismLevel:  aws.Int32(4),  // Parallel load streams\n    }\n\n    result, err := p.client.StartLoaderJob(ctx, input)\n    if err != nil {\n        return fmt.Errorf("failed to start bulk load: %w", err)\n    }\n\n    // Poll for completion\n    return p.waitForLoaderJob(ctx, *result.LoadId)\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"CSV Format"})," for bulk load:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csv",children:"~id,~label,name:String,age:Int\nuser:1,User,Alice,30\nuser:2,User,Bob,25\n\n~id,~label,~from,~to,since:Date\nfollows:1,FOLLOWS,user:1,user:2,2023-01-15\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsx)(n.h3,{id:"read-replicas",children:"Read Replicas"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# Use read replicas for query-heavy workloads\nneptune_config:\n  cluster_endpoint: my-cluster.cluster-abc.us-east-1.neptune.amazonaws.com  # Writer\n  reader_endpoint: my-cluster.cluster-ro-abc.us-east-1.neptune.amazonaws.com  # Readers\n\n  # Route read-only queries to replicas\n  routing:\n    write_operations: [CreateVertex, CreateEdge, UpdateVertex, DeleteVertex, DeleteEdge]\n    read_operations: [GetVertex, GetEdge, Traverse, ShortestPath, PageRank]\n"})}),"\n",(0,s.jsx)(n.h3,{id:"query-optimization",children:"Query Optimization"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"1. Use indexes for frequent lookups"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gremlin",children:"// Bad: Full scan\ng.V().has('email', 'alice@example.com')\n\n// Good: Use vertex ID\ng.V('user:alice@example.com')\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"2. Limit traversal depth"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gremlin",children:"// Bad: Unbounded traversal\ng.V('user:alice').repeat(out('FOLLOWS')).until(has('name', 'target'))\n\n// Good: Limit depth\ng.V('user:alice').repeat(out('FOLLOWS')).times(3).has('name', 'target')\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"3. Use projection to reduce data transfer"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gremlin",children:"// Bad: Return full vertex\ng.V().hasLabel('User')\n\n// Good: Project only needed fields\ng.V().hasLabel('User').valueMap('name', 'email')\n"})}),"\n",(0,s.jsx)(n.h2,{id:"cost-optimization",children:"Cost Optimization"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Neptune Pricing"})," (us-east-1, as of 2025):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Instances"}),": $0.348/hr for db.r5.large (2 vCPUs, 16 GB RAM)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Storage"}),": $0.10/GB-month"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"I/O"}),": $0.20 per 1M requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Backup"}),": $0.021/GB-month"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Optimization Strategies"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use read replicas"})," instead of scaling up writer instance"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enable caching"})," in Prism proxy to reduce Neptune queries"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Batch writes"})," to reduce I/O charges"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Use bulk loader"})," for large imports (faster + cheaper)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Right-size instances"})," based on workload"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Example Cost"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Writer"}),": db.r5.large \xd7 1 = $250/month"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Readers"}),": db.r5.large \xd7 2 = $500/month"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Storage"}),": 100 GB \xd7 $0.10 = $10/month"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"I/O"}),": 10M requests \xd7 $0.20 = $2/month"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Total"}),": ~$762/month for 3-node cluster with 100 GB data"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"monitoring",children:"Monitoring"}),"\n",(0,s.jsx)(n.h3,{id:"cloudwatch-metrics",children:"CloudWatch Metrics"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"metrics:\n  - neptune_cluster_cpu_utilization        # CPU usage\n  - neptune_cluster_storage_used           # Storage consumption\n  - neptune_cluster_main_request_latency   # Query latency\n  - neptune_cluster_engine_uptime          # Uptime\n  - neptune_cluster_backup_retention_period # Backup age\n\nalerts:\n  - metric: neptune_cluster_cpu_utilization\n    threshold: 80\n    action: scale_up_instance\n\n  - metric: neptune_cluster_storage_used\n    threshold: 90\n    action: notify_ops_team\n"})}),"\n",(0,s.jsx)(n.h3,{id:"query-profiling",children:"Query Profiling"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gremlin",children:"// Enable profiling for slow queries\ng.V().has('email', 'alice@example.com').profile()\n"})}),"\n",(0,s.jsxs)(n.h1,{id:"example-outputstep------------------------------------count--traversers--time-ms",children:[(0,s.jsx)(n.strong,{children:"Example output"}),":\nStep                                    Count  Traversers  Time (ms)"]}),"\n",(0,s.jsx)(n.p,{children:"NeptuneGraphStep(vertex,[email.eq(alice)])  1      1           2.345"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n## Testing Strategy\n\n### Unit Tests\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"func TestCreateVertex(t *testing.T) {\nplugin := setupNeptunePlugin(t)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'req := &CreateVertexRequest{\n    Id:    "user:test1",\n    Label: "User",\n    Properties: map[string]*PropertyValue{\n        "name": {Value: &PropertyValue_StringValue{StringValue: "Test User"}},\n    },\n}\n\nresp, err := plugin.CreateVertex(context.Background(), req)\nrequire.NoError(t, err)\nassert.Equal(t, "user:test1", resp.Vertex.Id)\n'})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### Integration Tests\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"func TestGraphTraversal(t *testing.T) {\nplugin := setupRealNeptune(t)  // Connect to test Neptune cluster"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// Create test graph: A -> B -> C\ncreateVertex(plugin, "A", "User")\ncreateVertex(plugin, "B", "User")\ncreateVertex(plugin, "C", "User")\ncreateEdge(plugin, "A", "B", "FOLLOWS")\ncreateEdge(plugin, "B", "C", "FOLLOWS")\n\n// Traverse: A -> FOLLOWS -> FOLLOWS -> C\nreq := &TraverseRequest{\n    StartVertexId: "A",\n    Steps: []*TraversalStep{\n        {Direction: Direction_OUT, EdgeLabels: []string{"FOLLOWS"}},\n        {Direction: Direction_OUT, EdgeLabels: []string{"FOLLOWS"}},\n    },\n    Limit: 10,\n}\n\nresp, err := plugin.Traverse(context.Background(), req)\nrequire.NoError(t, err)\nassert.Contains(t, resp.Vertices, vertexWithId("C"))\n'})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n## Migration Path\n\n### Phase 1: Basic Operations (Week 1)\n- Implement CreateVertex, GetVertex, CreateEdge\n- IAM authentication\n- Basic Gremlin query execution\n\n### Phase 2: Traversals (Week 2)\n- Implement Traverse, ShortestPath\n- Add query optimization\n- Read replica support\n\n### Phase 3: Bulk Operations (Week 3)\n- Bulk import/export\n- Batch creates\n- Backup/restore integration\n\n### Phase 4: Advanced (Future)\n- SPARQL support\n- Graph algorithms (PageRank, community detection)\n- Custom indexes\n\n## Security Considerations\n\n### 1. IAM Authentication\n- Use IAM database authentication (no passwords in config)\n- Rotate credentials automatically via AWS credentials provider\n\n### 2. VPC Isolation\n- Deploy Neptune in private subnet\n- Only Prism proxy can access (no public endpoint)\n\n### 3. Encryption\n- Enable encryption at rest (KMS)\n- Enable encryption in transit (TLS)\n\n### 4. Audit Logging\n- Enable Neptune audit logs to CloudWatch\n- Log all mutations (create, update, delete)\n\n## Consequences\n\n### Positive\n- \u2705 Fully managed (no operational burden)\n- \u2705 High performance for graph queries\n- \u2705 ACID transactions for data integrity\n- \u2705 Read replicas for scalability\n- \u2705 AWS ecosystem integration\n\n### Negative\n- \u274c AWS vendor lock-in\n- \u274c Higher cost than self-hosted solutions\n- \u274c Limited to AWS regions\n- \u274c Gremlin learning curve for developers\n\n### Neutral\n- \ud83d\udd04 Two query languages (Gremlin + SPARQL) adds complexity but flexibility\n- \ud83d\udd04 Requires graph data modeling (different from relational/document stores)\n\n## References\n\n- [AWS Neptune Documentation](https://docs.aws.amazon.com/neptune/)\n- [Apache TinkerPop (Gremlin)](https://tinkerpop.apache.org/)\n- [Gremlin Query Language](https://tinkerpop.apache.org/docs/current/reference/#traversal)\n- [Neptune Bulk Loader](https://docs.aws.amazon.com/neptune/latest/userguide/bulk-load.html)\n- ADR-005: Backend Plugin Architecture\n- ADR-025: Container Plugin Model\n\n## Revision History\n\n- 2025-10-09: Initial proposal for Neptune graph backend plugin\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var t=r(96540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);