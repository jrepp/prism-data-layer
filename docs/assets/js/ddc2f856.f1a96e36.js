"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[9359],{28453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>l});var i=r(96540);const s={},a=i.createContext(s);function t(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(a.Provider,{value:n},e.children)}},84555:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>o,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"adr-044","title":"TinkerPop/Gremlin Generic Plugin","description":"Context","source":"@site/../docs-cms/adr/adr-044-tinkerpop-gremlin-plugin.md","sourceDirName":".","slug":"/adr-044","permalink":"/prism-data-layer/adr/adr-044","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-044-tinkerpop-gremlin-plugin.md","tags":[{"inline":true,"label":"backend","permalink":"/prism-data-layer/adr/tags/backend"},{"inline":true,"label":"graph","permalink":"/prism-data-layer/adr/tags/graph"},{"inline":true,"label":"plugin","permalink":"/prism-data-layer/adr/tags/plugin"},{"inline":true,"label":"gremlin","permalink":"/prism-data-layer/adr/tags/gremlin"},{"inline":true,"label":"tinkerpop","permalink":"/prism-data-layer/adr/tags/tinkerpop"}],"version":"current","frontMatter":{"date":"2025-10-09T00:00:00.000Z","deciders":"Platform Team","doc_uuid":"a8087fcc-a065-4bae-abe3-daf98be8c29b","id":"adr-044","project_id":"prism-data-layer","status":"Accepted","tags":["backend","graph","plugin","gremlin","tinkerpop"],"title":"TinkerPop/Gremlin Generic Plugin"},"sidebar":"adrSidebar","previous":{"title":"Plugin Capability Discovery System \u2022 ADR-043","permalink":"/prism-data-layer/adr/adr-043"},"next":{"title":"prismctl Stack Management Subcommand \u2022 ADR-045","permalink":"/prism-data-layer/adr/adr-045"}}');var s=r(74848),a=r(28453);const t={date:new Date("2025-10-09T00:00:00.000Z"),deciders:"Platform Team",doc_uuid:"a8087fcc-a065-4bae-abe3-daf98be8c29b",id:"adr-044",project_id:"prism-data-layer",status:"Accepted",tags:["backend","graph","plugin","gremlin","tinkerpop"],title:"TinkerPop/Gremlin Generic Plugin"},l=void 0,c={},d=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Plugin Hierarchy",id:"plugin-hierarchy",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"RFC-013"})," specifies Neptune-specific implementation, but ",(0,s.jsx)(n.strong,{children:"Gremlin is a standard query language"})," (Apache TinkerPop) supported by multiple graph databases:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Database"}),(0,s.jsx)(n.th,{children:"Gremlin Support"}),(0,s.jsx)(n.th,{children:"Native Query Language"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"AWS Neptune"})}),(0,s.jsx)(n.td,{children:"\u2705 Yes"}),(0,s.jsx)(n.td,{children:"Gremlin + SPARQL"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"JanusGraph"})}),(0,s.jsx)(n.td,{children:"\u2705 Yes (reference impl)"}),(0,s.jsx)(n.td,{children:"Gremlin only"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Azure Cosmos DB"})}),(0,s.jsx)(n.td,{children:"\u2705 Yes (Gremlin API)"}),(0,s.jsx)(n.td,{children:"Gremlin + SQL"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"Neo4j"})}),(0,s.jsx)(n.td,{children:"\u26a0\ufe0f Via plugin"}),(0,s.jsx)(n.td,{children:"Cypher (native)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"ArangoDB"})}),(0,s.jsx)(n.td,{children:"\u26a0\ufe0f Via adapter"}),(0,s.jsx)(n.td,{children:"AQL (native)"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.strong,{children:"TinkerGraph"})}),(0,s.jsx)(n.td,{children:"\u2705 Yes (in-memory)"}),(0,s.jsx)(n.td,{children:"Gremlin only"})]})]})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Problem"}),": Neptune plugin is tightly coupled to AWS-specific features (IAM auth, VPC, CloudWatch). We want a ",(0,s.jsx)(n.strong,{children:"generic Gremlin plugin"})," that can connect to any TinkerPop-compatible backend."]}),"\n",(0,s.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,s.jsxs)(n.p,{children:["Create a ",(0,s.jsx)(n.strong,{children:"generic TinkerPop/Gremlin plugin"})," that:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Connects to any Gremlin Server"})," (TinkerPop standard)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Declares capabilities"})," based on backend (ADR-043)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Provides Neptune plugin"})," as specialized subclass"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Enables community backends"})," (JanusGraph, Cosmos DB, etc.)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"plugin-hierarchy",children:"Plugin Hierarchy"}),"\n",(0,s.jsx)(n.p,{children:"prism-graph-plugin (generic)\n\u251c\u2500\u2500 gremlin-core/          # Generic Gremlin client\n\u2502   \u251c\u2500\u2500 connection.go      # WebSocket connection pool\n\u2502   \u251c\u2500\u2500 query.go           # Gremlin query builder\n\u2502   \u2514\u2500\u2500 capabilities.go    # Capability detection\n\u251c\u2500\u2500 plugins/\n\u2502   \u251c\u2500\u2500 neptune/           # AWS Neptune (specialized)\n\u2502   \u2502   \u251c\u2500\u2500 iam_auth.go\n\u2502   \u2502   \u251c\u2500\u2500 vpc_config.go\n\u2502   \u2502   \u2514\u2500\u2500 cloudwatch.go\n\u2502   \u251c\u2500\u2500 janusgraph/        # JanusGraph (generic)\n\u2502   \u251c\u2500\u2500 cosmos/            # Azure Cosmos DB Gremlin API\n\u2502   \u2514\u2500\u2500 tinkergraph/       # In-memory (for testing)\n\u2514\u2500\u2500 proto/\n\u2514\u2500\u2500 graph.proto        # Unified graph API"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n## Generic Gremlin Plugin Architecture\n\n### Configuration\n\n"})}),"\n",(0,s.jsx)(n.h1,{id:"generic-gremlin-server-connection",children:"Generic Gremlin Server connection"}),"\n",(0,s.jsx)(n.p,{children:'graph_backend:\ntype: gremlin\nconfig:\nhost: gremlin-server.example.com\nport: 8182\nuse_tls: true\nauth:\nmethod: basic  # or "iam", "none"\nusername: admin\npassword: ${GREMLIN_PASSWORD}\nconnection_pool:\nmin_connections: 2\nmax_connections: 20\ncapabilities:\nauto_detect: true  # Query server for capabilities'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### Neptune-Specific Configuration\n\n"})}),"\n",(0,s.jsx)(n.h1,{id:"neptune-inherits-from-gremlin-adds-aws-specific",children:"Neptune (inherits from gremlin, adds AWS-specific)"}),"\n",(0,s.jsx)(n.p,{children:"graph_backend:\ntype: neptune\nconfig:\ncluster_endpoint: my-cluster.cluster-abc.us-east-1.neptune.amazonaws.com\nport: 8182\nregion: us-east-1\nauth:\nmethod: iam\nrole_arn: arn:aws:iam::123456789:role/NeptuneAccess\nvpc:\nsecurity_groups: [sg-123456]\nsubnets: [subnet-abc, subnet-def]\ncloudwatch:\nmetrics_enabled: true\nlog_group: /aws/neptune/my-cluster"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n## Capability Detection\n\nGeneric plugin **auto-detects** backend capabilities:\n\n"})}),"\n",(0,s.jsx)(n.p,{children:'// gremlin-core/capabilities.go\nfunc (c *GremlinClient) DetectCapabilities() (*PluginCapabilities, error) {\ncaps := &PluginCapabilities{\nPluginName:    "gremlin",\nPluginVersion: "1.0.0",\nAbstractions: []DataAbstraction{\nDataAbstraction_DATA_ABSTRACTION_GRAPH,\n},\n}'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// Query server features\nfeatures, err := c.queryServerFeatures()\nif err != nil {\n    return nil, err\n}\n\n// Gremlin is always supported (it\'s the native protocol)\ncaps.Features = &BackendFeatures{\n    Queries: &QueryCapabilities{\n        GraphQueryLanguages: []string{"gremlin"},\n    },\n}\n\n// Detect transaction support\nif features.SupportsTransactions {\n    caps.Features.Transactions = &TransactionCapabilities{\n        SupportsTransactions: true,\n        SupportsAcid:         features.SupportsACID,\n    }\n}\n\n// Detect consistency levels\ncaps.Features.ConsistencyLevels = detectConsistencyLevels(features)\n\n// Detect graph algorithms\nif features.SupportsGraphAlgorithms {\n    caps.Features.Queries.SupportsGraphAlgorithms = true\n    caps.Features.Queries.SupportedAlgorithms = queryAvailableAlgorithms(c)\n}\n\nreturn caps, nil\n'})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.p,{children:"func (c *GremlinClient) queryServerFeatures() (*ServerFeatures, error) {\n// TinkerPop doesn't have a standard capabilities API,\n// so we probe with test queries\nfeatures := &ServerFeatures{}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// Test transaction support\n_, err := c.Submit("g.tx().open()")\nfeatures.SupportsTransactions = (err == nil)\n\n// Test SPARQL (Neptune-specific)\n_, err = c.Submit("SELECT ?s ?p ?o WHERE { ?s ?p ?o } LIMIT 1")\nfeatures.SupportsSPARQL = (err == nil)\n\n// Test graph algorithms (JanusGraph, Neptune)\n_, err = c.Submit("g.V().pageRank()")\nfeatures.SupportsGraphAlgorithms = (err == nil)\n\nreturn features, nil\n'})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### Backend-Specific Specialization\n\nNeptune plugin **extends** generic plugin with AWS features:\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"// plugins/neptune/plugin.go\ntype NeptunePlugin struct {\n*gremlin.GenericGremlinPlugin  // Embed generic plugin\niamAuth    *IAMAuth\ncloudWatch *CloudWatchClient\n}"}),"\n",(0,s.jsx)(n.p,{children:"func (p *NeptunePlugin) GetCapabilities() (*PluginCapabilities, error) {\n// Start with generic Gremlin capabilities\ncaps, err := p.GenericGremlinPlugin.GetCapabilities()\nif err != nil {\nreturn nil, err\n}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// Add Neptune-specific features\ncaps.PluginName = "neptune"\ncaps.BackendTypes = []string{"neptune"}\n\n// Neptune always supports SPARQL\ncaps.Features.Queries.GraphQueryLanguages = append(\n    caps.Features.Queries.GraphQueryLanguages,\n    "sparql",\n)\n\n// Neptune always has read replicas\ncaps.Features.Scaling = &ScalingFeatures{\n    SupportsReadReplicas: true,\n    MaxReadReplicas:      15,\n}\n\n// Neptune-specific performance profile\ncaps.Performance = &PerformanceProfile{\n    TypicalReadLatencyP50Us:  3000,  // 3ms\n    TypicalWriteLatencyP50Us: 8000,  // 8ms\n    MaxReadsPerSecond:        50000,\n    MaxWritesPerSecond:       25000,\n}\n\nreturn caps, nil\n'})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n## Example: Multi-Backend Support\n\nApplication uses **same Gremlin API** across different backends:\n\n### Development: TinkerGraph (in-memory)\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"namespace: user-graph-dev\nbackend:\ntype: tinkergraph\nconfig:\nauto_detect: true"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Detected Capabilities**:\n- Gremlin: \u2705\n- Transactions: \u274c (in-memory only)\n- ACID: \u274c\n- Persistence: \u274c\n- Read Replicas: \u274c\n\n### Staging: JanusGraph (self-hosted)\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"namespace: user-graph-staging\nbackend:\ntype: janusgraph\nconfig:\nhost: janusgraph.staging.internal\nport: 8182\nauth:\nmethod: basic\nusername: prism\npassword: ${JANUS_PASSWORD}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Detected Capabilities**:\n- Gremlin: \u2705\n- Transactions: \u2705\n- ACID: \u26a0\ufe0f Eventual consistency (Cassandra backend)\n- Persistence: \u2705\n- Read Replicas: \u2705 (via Cassandra replication)\n\n### Production: Neptune (AWS)\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"namespace: user-graph-prod\nbackend:\ntype: neptune\nconfig:\ncluster_endpoint: prod-cluster.cluster-xyz.us-east-1.neptune.amazonaws.com\nregion: us-east-1\nauth:\nmethod: iam"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Detected Capabilities**:\n- Gremlin: \u2705\n- SPARQL: \u2705 (Neptune-specific)\n- Transactions: \u2705\n- ACID: \u2705\n- Persistence: \u2705\n- Read Replicas: \u2705 (up to 15)\n\n## Client Code (Backend-Agnostic)\n\nApplication code is **identical** across all backends:\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"// Same code works with TinkerGraph, JanusGraph, Neptune\nclient := prism.NewGraphClient(namespace)"}),"\n",(0,s.jsxs)(n.p,{children:['// Create vertices\nalice := client.AddVertex("User", map[string]interface{}{\n"name":  "Alice",\n"email": "',(0,s.jsx)(n.a,{href:"mailto:alice@example.com",children:"alice@example.com"}),'",\n})']}),"\n",(0,s.jsxs)(n.p,{children:['bob := client.AddVertex("User", map[string]interface{}{\n"name":  "Bob",\n"email": "',(0,s.jsx)(n.a,{href:"mailto:bob@example.com",children:"bob@example.com"}),'",\n})']}),"\n",(0,s.jsx)(n.p,{children:'// Create edge\nclient.AddEdge("FOLLOWS", alice.ID, bob.ID, map[string]interface{}{\n"since": "2025-01-01",\n})'}),"\n",(0,s.jsx)(n.p,{children:"// Query: Find friends of friends\nresult, err := client.Gremlin(\n\"g.V('user:alice').out('FOLLOWS').out('FOLLOWS').dedup().limit(10)\",\n)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n**Backend selection** is configuration-driven, not code-driven.\n\n## Capability-Based Query Validation\n\nPrism **validates queries** against backend capabilities:\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"func (p *Proxy) ExecuteGremlinQuery(\nnamespace string,\nquery string,\n) (*GraphResult, error) {\n// Get plugin for namespace\nplugin, err := p.getPlugin(namespace)\nif err != nil {\nreturn nil, err\n}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// Get capabilities\ncaps, err := plugin.GetCapabilities()\nif err != nil {\n    return nil, err\n}\n\n// Validate: Does backend support Gremlin?\nif !slices.Contains(caps.Features.Queries.GraphQueryLanguages, "gremlin") {\n    return nil, fmt.Errorf(\n        "backend %s does not support Gremlin queries",\n        plugin.Name(),\n    )\n}\n\n// Check for unsupported features in query\nif err := validateQueryFeatures(query, caps); err != nil {\n    return nil, fmt.Errorf("unsupported query feature: %w", err)\n}\n\n// Execute query\nreturn plugin.ExecuteGremlin(query)\n'})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.p,{children:'func validateQueryFeatures(query string, caps *PluginCapabilities) error {\n// Example: Check for graph algorithms\nif strings.Contains(query, ".pageRank()") {\nif !caps.Features.Queries.SupportsGraphAlgorithms {\nreturn fmt.Errorf(\n"backend does not support graph algorithms like pageRank()",\n)\n}\n}'}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// Example: Check for SPARQL (Neptune-specific)\nif strings.HasPrefix(query, "SELECT") {\n    if !slices.Contains(caps.Features.Queries.GraphQueryLanguages, "sparql") {\n        return fmt.Errorf(\n            "backend does not support SPARQL queries",\n        )\n    }\n}\n\nreturn nil\n'})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n## Benefits of Generic Plugin\n\n### 1. **Development Flexibility**\n\nStart with in-memory TinkerGraph, move to production Neptune:\n\n"})}),"\n",(0,s.jsx)(n.h1,{id:"development-local",children:"Development (local)"}),"\n",(0,s.jsx)(n.p,{children:"prismctl namespace create user-graph-dev --backend tinkergraph"}),"\n",(0,s.jsx)(n.h1,{id:"staging-self-hosted",children:"Staging (self-hosted)"}),"\n",(0,s.jsx)(n.p,{children:"prismctl namespace create user-graph-staging --backend janusgraph"}),"\n",(0,s.jsx)(n.h1,{id:"production-aws",children:"Production (AWS)"}),"\n",(0,s.jsx)(n.p,{children:"prismctl namespace create user-graph-prod --backend neptune"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### 2. **Cost Optimization**\n\nUse cheaper backends for non-critical workloads:\n\n"})}),"\n",(0,s.jsx)(n.h1,{id:"expensive-neptune-acid-replicas-managed",children:"Expensive: Neptune (ACID, replicas, managed)"}),"\n",(0,s.jsx)(n.p,{children:"production_graph:\nbackend: neptune\ncost: ~$750/month"}),"\n",(0,s.jsx)(n.h1,{id:"moderate-janusgraph-self-hosted-cassandra",children:"Moderate: JanusGraph (self-hosted, Cassandra)"}),"\n",(0,s.jsx)(n.p,{children:"staging_graph:\nbackend: janusgraph\ncost: ~$200/month (EC2 + Cassandra)"}),"\n",(0,s.jsx)(n.h1,{id:"cheap-tinkergraph-in-memory-ephemeral",children:"Cheap: TinkerGraph (in-memory, ephemeral)"}),"\n",(0,s.jsx)(n.p,{children:"dev_graph:\nbackend: tinkergraph\ncost: $0 (local)"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n### 3. **Vendor Independence**\n\nNot locked into AWS:\n\n- **AWS**: Neptune\n- **Azure**: Cosmos DB Gremlin API\n- **GCP**: Use JanusGraph on GKE\n- **On-Prem**: JanusGraph or Neo4j (via adapter)\n\n### 4. **Testing Simplified**\n\nIntegration tests use TinkerGraph (no external dependencies):\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"func TestGraphTraversal(t *testing.T) {\n// Fast, deterministic, no setup required\nplugin := NewTinkerGraphPlugin()"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'// Create test graph\nplugin.AddVertex("A", "User", nil)\nplugin.AddVertex("B", "User", nil)\nplugin.AddEdge("follows-1", "FOLLOWS", "A", "B", nil)\n\n// Test traversal\nresult, err := plugin.Gremlin("g.V(\'A\').out(\'FOLLOWS\')")\nrequire.NoError(t, err)\nassert.Len(t, result.Vertices, 1)\nassert.Equal(t, "B", result.Vertices[0].Id)\n'})}),"\n",(0,s.jsx)(n.p,{children:"}"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"\n## Community Ecosystem\n\nGeneric plugin enables **community-contributed backends**:\n\nprism-plugins/\n\u251c\u2500\u2500 official/\n\u2502   \u251c\u2500\u2500 neptune/           # AWS Neptune (official)\n\u2502   \u251c\u2500\u2500 janusgraph/        # JanusGraph (official)\n\u2502   \u2514\u2500\u2500 tinkergraph/       # In-memory testing (official)\n\u251c\u2500\u2500 community/\n\u2502   \u251c\u2500\u2500 cosmosdb/          # Azure Cosmos DB (community)\n\u2502   \u251c\u2500\u2500 neo4j-gremlin/     # Neo4j via Gremlin plugin (community)\n\u2502   \u2514\u2500\u2500 arangodb-gremlin/  # ArangoDB via adapter (community)\n"})}),"\n",(0,s.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,s.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Gremlin works across backends"})," (Neptune, JanusGraph, Cosmos DB)"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Development \u2192 Production"})," transition seamless"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Cost-optimized"})," backend selection per environment"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Vendor independence"})," (not locked to AWS)"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Community ecosystem"})," for niche backends"]}),"\n",(0,s.jsxs)(n.li,{children:["\u2705 ",(0,s.jsx)(n.strong,{children:"Testing simplified"})," with in-memory TinkerGraph"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\u274c ",(0,s.jsx)(n.strong,{children:"Capability detection"})," not standardized (must probe)"]}),"\n",(0,s.jsxs)(n.li,{children:["\u274c ",(0,s.jsx)(n.strong,{children:"Feature parity"})," varies across backends"]}),"\n",(0,s.jsxs)(n.li,{children:["\u274c ",(0,s.jsx)(n.strong,{children:"Backend-specific optimizations"})," harder to leverage"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,s.jsx)(n.strong,{children:"Abstraction overhead"}),": Generic plugin is slightly slower"]}),"\n",(0,s.jsxs)(n.li,{children:["\ud83d\udd04 ",(0,s.jsx)(n.strong,{children:"Capability evolution"}),": Must update detection logic"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://tinkerpop.apache.org/",children:"Apache TinkerPop"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://tinkerpop.apache.org/docs/current/reference/#graph-traversal-steps",children:"Gremlin Query Language"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://janusgraph.org/",children:"JanusGraph"})}),"\n",(0,s.jsx)(n.li,{children:"ADR-041: Graph Database Backend Support"}),"\n",(0,s.jsx)(n.li,{children:"ADR-043: Plugin Capability Discovery System"}),"\n",(0,s.jsx)(n.li,{children:"RFC-013: Neptune Graph Backend Implementation"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"2025-10-09: Initial ADR for generic TinkerPop/Gremlin plugin"}),"\n"]})]})}function o(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);