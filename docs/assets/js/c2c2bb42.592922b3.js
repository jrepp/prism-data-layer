"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[66181],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(96540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}},49605:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"netflix-index","title":"Netflix Data Gateway Reference","description":"This section contains research and learnings from Netflix\'s Data Gateway architecture, which serves as inspiration for the Prism data access layer.","source":"@site/../docs-cms/netflix/index.md","sourceDirName":".","slug":"/","permalink":"/prism-data-layer/netflix/","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/netflix/index.md","tags":[{"inline":true,"label":"netflix","permalink":"/prism-data-layer/netflix/tags/netflix"},{"inline":true,"label":"data-gateway","permalink":"/prism-data-layer/netflix/tags/data-gateway"},{"inline":true,"label":"reference","permalink":"/prism-data-layer/netflix/tags/reference"},{"inline":true,"label":"architecture","permalink":"/prism-data-layer/netflix/tags/architecture"}],"version":"current","sidebarPosition":0,"frontMatter":{"id":"netflix-index","title":"Netflix Data Gateway Reference","sidebar_label":"Overview","sidebar_position":0,"tags":["netflix","data-gateway","reference","architecture"]},"sidebar":"netflixSidebar","next":{"title":"Summary","permalink":"/prism-data-layer/netflix/netflix-summary"}}');var r=i(74848),t=i(28453);const a={id:"netflix-index",title:"Netflix Data Gateway Reference",sidebar_label:"Overview",sidebar_position:0,tags:["netflix","data-gateway","reference","architecture"]},l="Netflix Data Gateway Reference",c={},d=[{value:"What is Netflix&#39;s Data Gateway?",id:"what-is-netflixs-data-gateway",level:2},{value:"Why This Matters for Prism",id:"why-this-matters-for-prism",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Data Abstractions",id:"data-abstractions",level:3},{value:"Scale &amp; Performance",id:"scale--performance",level:3},{value:"Migration Patterns",id:"migration-patterns",level:3},{value:"Key Learnings",id:"key-learnings",level:2},{value:"1. <strong>Abstraction Simplifies Scale</strong>",id:"1-abstraction-simplifies-scale",level:3},{value:"2. <strong>Prioritize Reliability</strong>",id:"2-prioritize-reliability",level:3},{value:"3. <strong>Data Management is Critical</strong>",id:"3-data-management-is-critical",level:3},{value:"4. <strong>Sharding for Isolation</strong>",id:"4-sharding-for-isolation",level:3},{value:"Reference Materials",id:"reference-materials",level:2},{value:"PDF References",id:"pdf-references",level:3},{value:"How Prism Uses These Learnings",id:"how-prism-uses-these-learnings",level:2}];function o(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"netflix-data-gateway-reference",children:"Netflix Data Gateway Reference"})}),"\n",(0,r.jsx)(n.p,{children:"This section contains research and learnings from Netflix's Data Gateway architecture, which serves as inspiration for the Prism data access layer."}),"\n",(0,r.jsx)(n.h2,{id:"what-is-netflixs-data-gateway",children:"What is Netflix's Data Gateway?"}),"\n",(0,r.jsxs)(n.p,{children:["Netflix's Data Gateway is a battle-tested platform that provides ",(0,r.jsx)(n.strong,{children:"data abstraction layers"})," to simplify and scale data access across thousands of microservices. It decouples application logic from database implementations, enabling:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Unified APIs"})," for diverse data stores (Cassandra, EVCache, DynamoDB, etc.)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Operational resilience"})," through circuit breaking, load shedding, and failover"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Zero-downtime migrations"})," via shadow traffic and dual-write patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Massive scale"}),": 8M+ QPS, 3,500+ use cases, petabytes of data"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"why-this-matters-for-prism",children:"Why This Matters for Prism"}),"\n",(0,r.jsx)(n.p,{children:"Prism adopts many of Netflix's proven patterns while improving on performance and operational simplicity:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Aspect"}),(0,r.jsx)(n.th,{children:"Netflix Approach"}),(0,r.jsx)(n.th,{children:"Prism Enhancement"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Proxy Layer"})}),(0,r.jsx)(n.td,{children:"JVM-based gateway"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Rust-based"})," for 10-100x performance"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Configuration"})}),(0,r.jsx)(n.td,{children:"Runtime deployment configs"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Client-originated"})," requirements (apps declare needs)"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Testing"})}),(0,r.jsx)(n.td,{children:"Production-validated"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Local-first"})," with sqlite, local kafka"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Deployment"})}),(0,r.jsx)(n.td,{children:"Kubernetes-native"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Flexible"}),": bare metal, VMs, or containers"]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"data-abstractions",children:"Data Abstractions"}),"\n",(0,r.jsx)(n.p,{children:"Netflix built multiple abstraction layers on their Data Gateway platform:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/netflix/netflix-abstractions",children:"Key-Value"})}),": Primary abstraction for 400+ use cases"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TimeSeries"}),": Handles 10M writes/sec for event tracking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Distributed Counter"}),": Scalable counting with tunable accuracy"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/netflix/netflix-write-ahead-log",children:"Write-Ahead Log (WAL)"})}),": Durable, ordered mutation delivery"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"scale--performance",children:"Scale & Performance"}),"\n",(0,r.jsx)(n.p,{children:"Netflix's Data Gateway operates at massive scale:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"8 million queries per second"})," (key-value abstraction)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"10 million writes per second"})," (time-series data)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"3,500+ use cases"})," across the organization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Petabyte-scale"})," storage with low-latency retrieval"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/netflix/netflix-scale",children:"Read more about scale metrics \u2192"})})}),"\n",(0,r.jsx)(n.h3,{id:"migration-patterns",children:"Migration Patterns"}),"\n",(0,r.jsx)(n.p,{children:"Netflix's approach to zero-downtime migrations:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/netflix/netflix-dual-write-migration",children:"Dual-Write Pattern"})}),": Write to old and new datastores simultaneously"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Shadow Traffic"}),": Validate new systems with production load"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Phased Cutover"}),": Gradual migration with rollback capability"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/netflix/netflix-data-evolve-migration",children:"Schema Evolution"})}),": Automated compatibility checking"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"key-learnings",children:"Key Learnings"}),"\n",(0,r.jsxs)(n.h3,{id:"1-abstraction-simplifies-scale",children:["1. ",(0,r.jsx)(n.strong,{children:"Abstraction Simplifies Scale"})]}),"\n",(0,r.jsx)(n.p,{children:"Managing database API complexity becomes unmanageable as services scale. A robust data abstraction layer:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Shields applications from database breaking changes"}),"\n",(0,r.jsx)(n.li,{children:"Provides user-friendly gRPC/HTTP APIs tailored to access patterns"}),"\n",(0,r.jsx)(n.li,{children:"Enables backend changes without application code changes"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"2-prioritize-reliability",children:["2. ",(0,r.jsx)(n.strong,{children:"Prioritize Reliability"})]}),"\n",(0,r.jsx)(n.p,{children:"Building for redundancy and resilience:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Circuit breaking and back-pressure prevent cascading failures"}),"\n",(0,r.jsx)(n.li,{children:"Automated load shedding protects backends during traffic spikes"}),"\n",(0,r.jsx)(n.li,{children:"Rigorous capacity planning prevents resource exhaustion"}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"3-data-management-is-critical",children:["3. ",(0,r.jsx)(n.strong,{children:"Data Management is Critical"})]}),"\n",(0,r.jsx)(n.p,{children:"Proactive data lifecycle management:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TTL and cleanup"})," should be designed in from day one"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cost monitoring"}),": Every byte has a cost"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tiering strategies"}),": Move cold data to cost-effective storage"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"4-sharding-for-isolation",children:["4. ",(0,r.jsx)(n.strong,{children:"Sharding for Isolation"})]}),"\n",(0,r.jsx)(n.p,{children:"Product/feature sharding prevents noisy neighbor problems:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dedicated proxy instances per product or SLA tier"}),"\n",(0,r.jsx)(n.li,{children:"Independent scaling and capacity planning"}),"\n",(0,r.jsx)(n.li,{children:"Clear ownership and blast radius containment"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/netflix/netflix-summary",children:"Read full lessons learned \u2192"})})}),"\n",(0,r.jsx)(n.h2,{id:"reference-materials",children:"Reference Materials"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/netflix/netflix-key-use-cases",children:"Netflix Data Gateway Use Cases"})}),": Real-world applications"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/netflix/netflix-scale",children:"Scale Metrics"})}),": Performance and throughput numbers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/netflix/netflix-abstractions",children:"Data Abstractions"})}),": Counter, WAL, and other patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/netflix/netflix-dual-write-migration",children:"Migration Strategies"})}),": Dual-write and shadow traffic"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Video Transcripts"}),": Conference talks on data abstractions (see sidebar)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"pdf-references",children:"PDF References"}),"\n",(0,r.jsxs)(n.p,{children:["Original blog posts and articles are archived in the ",(0,r.jsx)(n.code,{children:"references/"})," directory:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Data Gateway platform overview"}),"\n",(0,r.jsx)(n.li,{children:"Key-Value abstraction deep dive"}),"\n",(0,r.jsx)(n.li,{children:"Time-series architecture"}),"\n",(0,r.jsx)(n.li,{children:"Real-time data processing"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"how-prism-uses-these-learnings",children:"How Prism Uses These Learnings"}),"\n",(0,r.jsx)(n.p,{children:"Prism incorporates Netflix's battle-tested patterns:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Abstractions"})," (ADR-026): KeyValue, TimeSeries, Graph, Entity patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Client Configuration"})," (ADR-001): Apps declare requirements, Prism provisions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backend Plugins"})," (RFC-008): Clean abstraction for adding new backends"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Shadow Traffic"})," (ADR-031): Zero-downtime migrations like Netflix"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sharding Strategy"})," (ADR-034): Product/feature isolation"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["See our ",(0,r.jsx)(n.a,{href:"/prism-data-layer/adr",children:"ADRs"})," and ",(0,r.jsx)(n.a,{href:"/prism-data-layer/rfc",children:"RFCs"})," for implementation details."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": This documentation is derived from Netflix's public blog posts, conference talks, and open-source contributions. All credit goes to Netflix for pioneering these patterns at scale."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}}}]);