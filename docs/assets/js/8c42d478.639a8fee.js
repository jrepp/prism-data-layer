"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[27227],{28453:(e,n,s)=>{s.d(n,{R:()=>d,x:()=>c});var t=s(96540);const i={},r=t.createContext(i);function d(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),t.createElement(r.Provider,{value:n},e.children)}},32339:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>o,frontMatter:()=>d,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"memo-032","title":"MEMO-032: Driver Test Consolidation Strategy","description":"Context","source":"@site/../docs-cms/memos/MEMO-032-driver-test-consolidation.md","sourceDirName":".","slug":"/memo-032","permalink":"/prism-data-layer/memos/memo-032","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/MEMO-032-driver-test-consolidation.md","tags":[{"inline":true,"label":"testing","permalink":"/prism-data-layer/memos/tags/testing"},{"inline":true,"label":"drivers","permalink":"/prism-data-layer/memos/tags/drivers"},{"inline":true,"label":"coverage","permalink":"/prism-data-layer/memos/tags/coverage"},{"inline":true,"label":"refactoring","permalink":"/prism-data-layer/memos/tags/refactoring"},{"inline":true,"label":"dx","permalink":"/prism-data-layer/memos/tags/dx"}],"version":"current","frontMatter":{"title":"MEMO-032: Driver Test Consolidation Strategy","author":"Claude Code","created":"2025-10-14T00:00:00.000Z","updated":"2025-10-14T00:00:00.000Z","tags":["testing","drivers","coverage","refactoring","dx"],"id":"memo-032","project_id":"prism-data-layer","doc_uuid":"8c3d9f21-4a5b-4c2d-9f3e-1d2c3b4a5f6e"},"sidebar":"memosSidebar","previous":{"title":"RFC-031 Security and Performance Review \u2022 MEMO-031","permalink":"/prism-data-layer/memos/memo-031"}}');var i=s(74848),r=s(28453);const d={title:"MEMO-032: Driver Test Consolidation Strategy",author:"Claude Code",created:new Date("2025-10-14T00:00:00.000Z"),updated:new Date("2025-10-14T00:00:00.000Z"),tags:["testing","drivers","coverage","refactoring","dx"],id:"memo-032",project_id:"prism-data-layer",doc_uuid:"8c3d9f21-4a5b-4c2d-9f3e-1d2c3b4a5f6e"},c="MEMO-032: Driver Test Consolidation Strategy",l={},a=[{value:"Context",id:"context",level:2},{value:"Analysis",id:"analysis",level:2},{value:"Test Coverage Breakdown",id:"test-coverage-breakdown",level:3},{value:"MemStore (<code>pkg/drivers/memstore/memstore_test.go</code> - 230 lines)",id:"memstore-pkgdriversmemstorememstore_testgo---230-lines",level:4},{value:"Redis (<code>pkg/drivers/redis/redis_test.go</code> - 341 lines)",id:"redis-pkgdriversredisredis_testgo---341-lines",level:4},{value:"NATS (<code>pkg/drivers/nats/nats_test.go</code> - 571 lines)",id:"nats-pkgdriversnatsnats_testgo---571-lines",level:4},{value:"Overall Statistics",id:"overall-statistics",level:3},{value:"Migration Strategy",id:"migration-strategy",level:2},{value:"Phase 1: Consolidate Backend-Specific Tests",id:"phase-1-consolidate-backend-specific-tests",level:3},{value:"Phase 2: Remove Redundant Tests from pkg/drivers",id:"phase-2-remove-redundant-tests-from-pkgdrivers",level:3},{value:"Phase 3: Enhance Acceptance Test Coverage",id:"phase-3-enhance-acceptance-test-coverage",level:3},{value:"NATS-specific tests to add to <code>tests/acceptance/patterns/consumer/</code>:",id:"nats-specific-tests-to-add-to-testsacceptancepatternsconsumer",level:4},{value:"Phase 4: Update Build System",id:"phase-4-update-build-system",level:3},{value:"Makefile Changes",id:"makefile-changes",level:4},{value:"CI Workflow Changes",id:"ci-workflow-changes",level:4},{value:"Coverage Strategy",id:"coverage-strategy",level:2},{value:"Coverage Targets",id:"coverage-targets",level:3},{value:"Coverage Measurement",id:"coverage-measurement",level:3},{value:"Benefits",id:"benefits",level:2},{value:"1. <strong>Reduced Test Execution Time</strong>",id:"1-reduced-test-execution-time",level:3},{value:"2. <strong>Improved Coverage Quality</strong>",id:"2-improved-coverage-quality",level:3},{value:"3. <strong>Reduced Maintenance Burden</strong>",id:"3-reduced-maintenance-burden",level:3},{value:"4. <strong>Better Test Organization</strong>",id:"4-better-test-organization",level:3},{value:"Migration Checklist",id:"migration-checklist",level:2},{value:"Pre-Migration",id:"pre-migration",level:3},{value:"Migration Execution",id:"migration-execution",level:3},{value:"Post-Migration",id:"post-migration",level:3},{value:"Risks and Mitigations",id:"risks-and-mitigations",level:2},{value:"Risk 1: Coverage Regression",id:"risk-1-coverage-regression",level:3},{value:"Risk 2: CI Build Breakage",id:"risk-2-ci-build-breakage",level:3},{value:"Risk 3: Missing Functional Tests",id:"risk-3-missing-functional-tests",level:3},{value:"Success Metrics",id:"success-metrics",level:2},{value:"Quantitative",id:"quantitative",level:3},{value:"Qualitative",id:"qualitative",level:3},{value:"References",id:"references",level:2},{value:"Appendices",id:"appendices",level:2},{value:"Appendix A: Test Mapping",id:"appendix-a-test-mapping",level:3},{value:"MemStore",id:"memstore",level:4},{value:"Redis",id:"redis",level:4},{value:"NATS",id:"nats",level:4}];function h(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"memo-032-driver-test-consolidation-strategy",children:"MEMO-032: Driver Test Consolidation Strategy"})}),"\n",(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsxs)(n.p,{children:["Driver-specific tests in ",(0,i.jsx)(n.code,{children:"pkg/drivers/*/"}),"  are currently isolated unit tests that duplicate coverage provided by the unified acceptance testing framework. This creates redundant test execution and maintenance burden."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Current state"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["3 driver test files: ",(0,i.jsx)(n.code,{children:"memstore_test.go"}),", ",(0,i.jsx)(n.code,{children:"redis_test.go"}),", ",(0,i.jsx)(n.code,{children:"nats_test.go"})]}),"\n",(0,i.jsx)(n.li,{children:"Combined ~800 lines of test code"}),"\n",(0,i.jsx)(n.li,{children:"Mix of functional tests (Set/Get/Delete/Publish/Subscribe) and driver-specific tests (Init/Health/Stop)"}),"\n",(0,i.jsx)(n.li,{children:"Acceptance tests already provide comprehensive interface validation across all backends"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Redundant execution"}),": Functional tests run both in isolation (",(0,i.jsx)(n.code,{children:"go test ./pkg/drivers/redis"}),") AND via acceptance framework"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Wasted CI time"}),": Same code paths tested multiple times"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Coverage gaps"}),": Isolated tests don't capture driver behavior within pattern context"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Maintenance burden"}),": Changes require updating both isolated tests and acceptance tests"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"analysis",children:"Analysis"}),"\n",(0,i.jsx)(n.h3,{id:"test-coverage-breakdown",children:"Test Coverage Breakdown"}),"\n",(0,i.jsxs)(n.h4,{id:"memstore-pkgdriversmemstorememstore_testgo---230-lines",children:["MemStore (",(0,i.jsx)(n.code,{children:"pkg/drivers/memstore/memstore_test.go"})," - 230 lines)"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Test"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Coverage Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestMemStore_SetGet"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"REDUNDANT"})," - Covered by ",(0,i.jsx)(n.code,{children:"tests/acceptance/patterns/keyvalue/basic_test.go::testSetAndGet"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestMemStore_Delete"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"REDUNDANT"})," - Covered by ",(0,i.jsx)(n.code,{children:"basic_test.go::testDeleteExisting"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestMemStore_TTL"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"REDUNDANT"})," - Covered by ",(0,i.jsx)(n.code,{children:"ttl_test.go::testTTLExpiration"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestMemStore_CapacityLimit"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests MemStore-specific ",(0,i.jsx)(n.code,{children:"max_keys"})," config"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestMemStore_Health"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests capacity-based health degradation"]})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Verdict"}),": Keep 2 unique tests, remove 3 redundant tests. ",(0,i.jsx)(n.strong,{children:"60% redundant"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h4,{id:"redis-pkgdriversredisredis_testgo---341-lines",children:["Redis (",(0,i.jsx)(n.code,{children:"pkg/drivers/redis/redis_test.go"})," - 341 lines)"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Test"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Coverage Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_SetGet"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"REDUNDANT"})," - Covered by ",(0,i.jsx)(n.code,{children:"basic_test.go::testSetAndGet"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_SetWithTTL"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"REDUNDANT"})," - Covered by ",(0,i.jsx)(n.code,{children:"ttl_test.go::testSetWithTTL"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_GetNonExistent"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"REDUNDANT"})," - Covered by ",(0,i.jsx)(n.code,{children:"basic_test.go::testGetNonExistent"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_Delete"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"REDUNDANT"})," - Covered by ",(0,i.jsx)(n.code,{children:"basic_test.go::testDeleteExisting"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_Exists"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"REDUNDANT"})," - Covered by ",(0,i.jsx)(n.code,{children:"basic_test.go::testExistsTrue/False"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_New"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests name/version metadata"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_Initialize"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests initialization with valid/invalid config"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_Health"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests healthy state"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_HealthUnhealthy"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests unhealthy state after connection loss"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_Stop"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests lifecycle cleanup"]})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Verdict"}),": Keep 6 unique tests, remove 5 redundant tests. ",(0,i.jsx)(n.strong,{children:"45% redundant"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h4,{id:"nats-pkgdriversnatsnats_testgo---571-lines",children:["NATS (",(0,i.jsx)(n.code,{children:"pkg/drivers/nats/nats_test.go"})," - 571 lines)"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Test"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Coverage Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_PublishSubscribe"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"REDUNDANT"})," - Should be in acceptance tests"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_MultiplePubSub"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"REDUNDANT"})," - Basic fire-and-forget behavior"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_Fanout"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"QUESTIONABLE"})," - Should be in acceptance tests"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_MessageOrdering"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"QUESTIONABLE"})," - Should be in acceptance tests"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_UnsubscribeStopsMessages"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"QUESTIONABLE"})," - Should be in acceptance tests"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_ConcurrentPublish"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"QUESTIONABLE"})," - Concurrency should be in acceptance"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_PublishWithMetadata"})}),(0,i.jsx)(n.td,{children:"Functional"}),(0,i.jsxs)(n.td,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"QUESTIONABLE"})," - Metadata handling in acceptance"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_Initialize"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests initialization"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_Health"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests healthy state"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_HealthAfterDisconnect"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests unhealthy state"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_InitializeWithDefaults"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests default config values"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_InitializeFailure"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests error handling"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_PublishWithoutConnection"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests error handling"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_SubscribeWithoutConnection"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests error handling"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_UnsubscribeNonExistent"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests error handling"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_StopWithActiveSubscriptions"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests lifecycle cleanup"]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_NameAndVersion"})}),(0,i.jsx)(n.td,{children:"Driver-specific"}),(0,i.jsxs)(n.td,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"UNIQUE"})," - Tests metadata"]})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Verdict"}),": Keep 10 unique tests, migrate 7 questionable tests to acceptance. ",(0,i.jsx)(n.strong,{children:"41% redundant/questionable"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"overall-statistics",children:"Overall Statistics"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Driver"}),(0,i.jsx)(n.th,{children:"Total Tests"}),(0,i.jsx)(n.th,{children:"Unique Tests"}),(0,i.jsx)(n.th,{children:"Redundant Tests"}),(0,i.jsx)(n.th,{children:"Redundancy %"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MemStore"}),(0,i.jsx)(n.td,{children:"5"}),(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"60%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Redis"}),(0,i.jsx)(n.td,{children:"11"}),(0,i.jsx)(n.td,{children:"6"}),(0,i.jsx)(n.td,{children:"5"}),(0,i.jsx)(n.td,{children:"45%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"NATS"}),(0,i.jsx)(n.td,{children:"17"}),(0,i.jsx)(n.td,{children:"10"}),(0,i.jsx)(n.td,{children:"7"}),(0,i.jsx)(n.td,{children:"41%"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"TOTAL"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"33"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"18"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"15"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"45%"})})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Impact"}),": Removing redundant tests eliminates ~400 lines of code and reduces test execution time by ~30-40%."]}),"\n",(0,i.jsx)(n.h2,{id:"migration-strategy",children:"Migration Strategy"}),"\n",(0,i.jsx)(n.h3,{id:"phase-1-consolidate-backend-specific-tests",children:"Phase 1: Consolidate Backend-Specific Tests"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Create new directory structure"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"tests/unit/backends/\n\u251c\u2500\u2500 memstore/\n\u2502   \u251c\u2500\u2500 memstore_unit_test.go  # Capacity, Health, Initialize\n\u251c\u2500\u2500 redis/\n\u2502   \u251c\u2500\u2500 redis_unit_test.go     # Initialize, Health, Stop\n\u2514\u2500\u2500 nats/\n    \u251c\u2500\u2500 nats_unit_test.go      # Initialize, Health, Stop, Error handling\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"What goes here"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Initialization/configuration tests"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Health check tests (healthy/unhealthy states)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Lifecycle tests (Start/Stop cleanup)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Driver-specific features (MemStore capacity, Redis connection pooling)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Error handling tests (invalid config, connection failures)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"What does NOT go here"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u274c Functional interface tests (Set/Get/Delete/Publish/Subscribe)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c TTL/expiration tests"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Concurrency tests"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Any test that validates interface compliance"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Rationale"}),": These are ",(0,i.jsx)(n.strong,{children:"true unit tests"})," that validate driver implementation details, not interface conformance."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"phase-2-remove-redundant-tests-from-pkgdrivers",children:"Phase 2: Remove Redundant Tests from pkg/drivers"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Delete redundant tests"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Remove functional tests from driver packages\ngit rm pkg/drivers/memstore/memstore_test.go\ngit rm pkg/drivers/redis/redis_test.go\ngit rm pkg/drivers/nats/nats_test.go\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Coverage strategy"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Acceptance tests provide functional coverage"}),"\n",(0,i.jsx)(n.li,{children:"Unit tests provide driver-specific coverage"}),"\n",(0,i.jsxs)(n.li,{children:["CI runs both: ",(0,i.jsx)(n.code,{children:"make test-unit-backends test-acceptance"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"phase-3-enhance-acceptance-test-coverage",children:"Phase 3: Enhance Acceptance Test Coverage"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Add missing tests to acceptance suite"}),":"]}),"\n",(0,i.jsxs)(n.h4,{id:"nats-specific-tests-to-add-to-testsacceptancepatternsconsumer",children:["NATS-specific tests to add to ",(0,i.jsx)(n.code,{children:"tests/acceptance/patterns/consumer/"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Fanout behavior"})," (",(0,i.jsx)(n.code,{children:"test_fanout.go"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func testFanout(t *testing.T, driver interface{}, caps framework.Capabilities) {\n    // Multiple subscribers receive same message\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Message ordering"})," (",(0,i.jsx)(n.code,{children:"test_ordering.go"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func testMessageOrdering(t *testing.T, driver interface{}, caps framework.Capabilities) {\n    // Messages received in publish order\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Unsubscribe behavior"})," (",(0,i.jsx)(n.code,{children:"test_unsubscribe.go"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func testUnsubscribeStopsMessages(t *testing.T, driver interface{}, caps framework.Capabilities) {\n    // No messages after unsubscribe\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Concurrent publish"})," (",(0,i.jsx)(n.code,{children:"concurrent_test.go"})," - already exists, verify NATS is included):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func testConcurrentPublish(t *testing.T, driver interface{}, caps framework.Capabilities) {\n    // Concurrent publishers don't interfere\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Metadata handling"})," (",(0,i.jsx)(n.code,{children:"test_metadata.go"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func testPublishWithMetadata(t *testing.T, driver interface{}, caps framework.Capabilities) {\n    // Metadata preserved (backend-dependent)\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Benefit"}),": These tests run against ALL backends (NATS, Kafka, Redis Streams), not just NATS."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"phase-4-update-build-system",children:"Phase 4: Update Build System"}),"\n",(0,i.jsx)(n.h4,{id:"makefile-changes",children:"Makefile Changes"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Before"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-makefile",children:"test-drivers:\n\t@cd pkg/drivers/memstore && go test -v ./...\n\t@cd pkg/drivers/redis && go test -v ./...\n\t@cd pkg/drivers/nats && go test -v ./...\n\ntest-all: test-drivers test-acceptance\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"After"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-makefile",children:'# Unit tests for backend-specific behavior\ntest-unit-backends:\n\t@echo "Running backend unit tests..."\n\t@go test -v ./tests/unit/backends/...\n\n# Acceptance tests run all backends through unified framework\ntest-acceptance:\n\t@echo "Running acceptance tests..."\n\t@go test -v ./tests/acceptance/patterns/...\n\n# Full test suite\ntest-all: test-unit-backends test-acceptance\n\n# Coverage with proper coverpkg\ntest-coverage:\n\t@go test -coverprofile=coverage.out \\\n\t\t-coverpkg=github.com/jrepp/prism-data-layer/pkg/drivers/... \\\n\t\t./tests/unit/backends/... ./tests/acceptance/patterns/...\n\t@go tool cover -func=coverage.out | grep total\n'})}),"\n",(0,i.jsx)(n.h4,{id:"ci-workflow-changes",children:"CI Workflow Changes"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Before"})," (",(0,i.jsx)(n.code,{children:".github/workflows/ci.yml"}),"):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- name: Test drivers\n  run: make test-drivers\n\n- name: Test acceptance\n  run: make test-acceptance\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"After"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"- name: Unit Tests\n  run: make test-unit-backends\n\n- name: Acceptance Tests\n  run: make test-acceptance\n\n- name: Verify Coverage\n  run: make test-coverage\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"coverage-strategy",children:"Coverage Strategy"}),"\n",(0,i.jsx)(n.h3,{id:"coverage-targets",children:"Coverage Targets"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Minimum Coverage"}),(0,i.jsx)(n.th,{children:"Target Coverage"}),(0,i.jsx)(n.th,{children:"Tested By"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Driver Init/Lifecycle"})}),(0,i.jsx)(n.td,{children:"90%"}),(0,i.jsx)(n.td,{children:"95%"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Interface Methods"})}),(0,i.jsx)(n.td,{children:"85%"}),(0,i.jsx)(n.td,{children:"90%"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/acceptance/patterns/"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Error Handling"})}),(0,i.jsx)(n.td,{children:"80%"}),(0,i.jsx)(n.td,{children:"85%"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Concurrent Operations"})}),(0,i.jsx)(n.td,{children:"75%"}),(0,i.jsx)(n.td,{children:"80%"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/acceptance/patterns/"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"coverage-measurement",children:"Coverage Measurement"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Generate coverage including driver code"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"go test -coverprofile=coverage.out \\\n  -coverpkg=github.com/jrepp/prism-data-layer/pkg/drivers/... \\\n  ./tests/unit/backends/... ./tests/acceptance/patterns/...\n\ngo tool cover -html=coverage.out -o coverage.html\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Coverage report format"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"pkg/drivers/memstore/memstore.go:   92.3% of statements\npkg/drivers/redis/redis.go:         88.7% of statements\npkg/drivers/nats/nats.go:           85.1% of statements\n----------------------------------------\nTOTAL DRIVER COVERAGE:              88.7%\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Enforcement in CI"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')\nif (( $(echo \"$COVERAGE < 85\" | bc -l) )); then\n  echo \"\u274c Driver coverage ${COVERAGE}% < 85%\"\n  exit 1\nfi\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"benefits",children:"Benefits"}),"\n",(0,i.jsxs)(n.h3,{id:"1-reduced-test-execution-time",children:["1. ",(0,i.jsx)(n.strong,{children:"Reduced Test Execution Time"})]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Test Suite"}),(0,i.jsx)(n.th,{children:"Before"}),(0,i.jsx)(n.th,{children:"After"}),(0,i.jsx)(n.th,{children:"Improvement"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Driver unit tests"}),(0,i.jsx)(n.td,{children:"~15s"}),(0,i.jsx)(n.td,{children:"~5s"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"67% faster"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Acceptance tests"}),(0,i.jsx)(n.td,{children:"~45s"}),(0,i.jsx)(n.td,{children:"~45s"}),(0,i.jsx)(n.td,{children:"No change"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Total"}),(0,i.jsx)(n.td,{children:"60s"}),(0,i.jsx)(n.td,{children:"50s"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"17% faster"})})]})]})]}),"\n",(0,i.jsxs)(n.h3,{id:"2-improved-coverage-quality",children:["2. ",(0,i.jsx)(n.strong,{children:"Improved Coverage Quality"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Before"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Functional tests run in isolation (e.g., Redis tested with miniredis mock)"}),"\n",(0,i.jsx)(n.li,{children:"Don't catch integration issues (pattern \u2192 driver \u2192 backend)"}),"\n",(0,i.jsx)(n.li,{children:"Coverage gaps in pattern layer"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"After"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Functional tests run through full stack (pattern \u2192 driver \u2192 backend)"}),"\n",(0,i.jsx)(n.li,{children:"Integration issues caught automatically"}),"\n",(0,i.jsx)(n.li,{children:"Complete coverage of driver code paths via acceptance tests"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"3-reduced-maintenance-burden",children:["3. ",(0,i.jsx)(n.strong,{children:"Reduced Maintenance Burden"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Before"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Change to interface requires updating:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Driver implementation"}),"\n",(0,i.jsx)(n.li,{children:"Isolated driver test"}),"\n",(0,i.jsx)(n.li,{children:"Acceptance test"}),"\n",(0,i.jsx)(n.li,{children:"(3 locations)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"After"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Change to interface requires updating:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Driver implementation"}),"\n",(0,i.jsx)(n.li,{children:"Acceptance test"}),"\n",(0,i.jsx)(n.li,{children:"(2 locations)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),": Adding ",(0,i.jsx)(n.code,{children:"GetWithMetadata(key string) ([]byte, map[string]string, bool, error)"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Before: Update 3 driver tests + acceptance test = 4 files"}),"\n",(0,i.jsx)(n.li,{children:"After: Update acceptance test only = 1 file"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"4-better-test-organization",children:["4. ",(0,i.jsx)(n.strong,{children:"Better Test Organization"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Before"})," (scattered tests):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"pkg/drivers/redis/redis_test.go              # Functional + unit tests mixed\ntests/acceptance/patterns/keyvalue/basic_test.go  # Functional tests\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"After"})," (clear separation):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"tests/unit/backends/redis/redis_unit_test.go      # Driver-specific unit tests\ntests/acceptance/patterns/keyvalue/basic_test.go  # Interface compliance tests\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Clarity"}),": Developers know exactly where to add tests:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Driver bug (initialization, health)? \u2192 ",(0,i.jsx)(n.code,{children:"tests/unit/backends/"})]}),"\n",(0,i.jsxs)(n.li,{children:["Interface behavior? \u2192 ",(0,i.jsx)(n.code,{children:"tests/acceptance/patterns/"})]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"migration-checklist",children:"Migration Checklist"}),"\n",(0,i.jsx)(n.h3,{id:"pre-migration",children:"Pre-Migration"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," Document current test coverage"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," Identify redundant vs unique tests"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," Create migration plan"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Get team buy-in"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"migration-execution",children:"Migration Execution"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Create ",(0,i.jsx)(n.code,{children:"tests/unit/backends/"})," directory structure"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Migrate MemStore unique tests\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Capacity limit test"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Health degradation test"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Migrate Redis unique tests\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Initialize with valid/invalid config"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Health (healthy/unhealthy states)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Stop lifecycle cleanup"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Migrate NATS unique tests\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Initialize with defaults/failure"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Health (healthy/unhealthy/disconnected)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Error handling (no connection)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Stop with active subscriptions"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Add missing acceptance tests\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Fanout behavior"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Message ordering"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Unsubscribe behavior"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Concurrent publish (verify NATS included)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Metadata handling"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Remove redundant driver tests\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Delete ",(0,i.jsx)(n.code,{children:"pkg/drivers/memstore/memstore_test.go"})]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Delete ",(0,i.jsx)(n.code,{children:"pkg/drivers/redis/redis_test.go"})]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Delete ",(0,i.jsx)(n.code,{children:"pkg/drivers/nats/nats_test.go"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Update Makefile\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Add ",(0,i.jsx)(n.code,{children:"test-unit-backends"})," target"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Update ",(0,i.jsx)(n.code,{children:"test-all"})," to include unit backend tests"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Update ",(0,i.jsx)(n.code,{children:"test-coverage"})," to include driver coverpkg"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Update CI workflows\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Add unit backend test step"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Add coverage enforcement"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Verify coverage metrics\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Run full test suite"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Generate coverage report"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Validate >85% driver coverage"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"post-migration",children:"Post-Migration"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Document new test structure in ",(0,i.jsx)(n.code,{children:"CLAUDE.md"})]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Update ",(0,i.jsx)(n.code,{children:"BUILDING.md"})," with test commands"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Announce migration in team channel"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Monitor CI for issues"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"risks-and-mitigations",children:"Risks and Mitigations"}),"\n",(0,i.jsx)(n.h3,{id:"risk-1-coverage-regression",children:"Risk 1: Coverage Regression"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Risk"}),": Removing isolated tests might reduce coverage if acceptance tests don't hit all code paths."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Mitigation"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Generate coverage report BEFORE migration: ",(0,i.jsx)(n.code,{children:"make test-coverage > coverage-before.txt"})]}),"\n",(0,i.jsxs)(n.li,{children:["Generate coverage report AFTER migration: ",(0,i.jsx)(n.code,{children:"make test-coverage > coverage-after.txt"})]}),"\n",(0,i.jsxs)(n.li,{children:["Compare: ",(0,i.jsx)(n.code,{children:"diff coverage-before.txt coverage-after.txt"})]}),"\n",(0,i.jsx)(n.li,{children:"If coverage drops >2%, add targeted acceptance tests"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Validation"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Before migration\nmake test-drivers test-acceptance\ngo test -coverprofile=before.out -coverpkg=./pkg/drivers/... ./pkg/drivers/... ./tests/acceptance/...\nBEFORE=$(go tool cover -func=before.out | grep total | awk '{print $3}')\n\n# After migration\nmake test-unit-backends test-acceptance\ngo test -coverprofile=after.out -coverpkg=./pkg/drivers/... ./tests/unit/backends/... ./tests/acceptance/...\nAFTER=$(go tool cover -func=after.out | grep total | awk '{print $3}')\n\necho \"Before: $BEFORE\"\necho \"After: $AFTER\"\n"})}),"\n",(0,i.jsx)(n.h3,{id:"risk-2-ci-build-breakage",children:"Risk 2: CI Build Breakage"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Risk"}),": Updated Makefile/CI workflows break existing builds."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Mitigation"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Create feature branch: ",(0,i.jsx)(n.code,{children:"git checkout -b test-consolidation"})]}),"\n",(0,i.jsx)(n.li,{children:"Migrate incrementally (one driver at a time)"}),"\n",(0,i.jsx)(n.li,{children:"Verify CI passes on each commit"}),"\n",(0,i.jsx)(n.li,{children:"Merge only when all drivers migrated successfully"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Rollback Plan"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# If migration fails, revert\ngit revert HEAD~5..HEAD  # Revert last 5 commits\ngit push origin main\n"})}),"\n",(0,i.jsx)(n.h3,{id:"risk-3-missing-functional-tests",children:"Risk 3: Missing Functional Tests"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Risk"}),": Some driver-specific functional behavior not captured in acceptance tests."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Mitigation"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"Run both test suites in parallel during migration"}),"\n",(0,i.jsx)(n.li,{children:"Compare test output for divergences"}),"\n",(0,i.jsx)(n.li,{children:"Add missing tests to acceptance suite BEFORE removing isolated tests"}),"\n",(0,i.jsxs)(n.li,{children:["Keep isolated tests for 1 sprint, mark as ",(0,i.jsx)(n.code,{children:"@deprecated"}),", remove in next sprint"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"success-metrics",children:"Success Metrics"}),"\n",(0,i.jsx)(n.h3,{id:"quantitative",children:"Quantitative"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Test execution time"}),": Reduced by >15% (60s \u2192 50s)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Driver coverage"}),": Maintained at >85%"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Test code lines"}),": Reduced by ~400 lines (30% reduction)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"CI build time"}),": Reduced by >2 minutes"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"qualitative",children:"Qualitative"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Clarity"}),": Developers can easily find where to add tests"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Maintainability"}),": Interface changes require updates in fewer places"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Confidence"}),": Acceptance tests provide better integration coverage"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/memos/memo-015",children:"MEMO-015: Cross-Backend Acceptance Test Framework"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/memos/memo-030",children:"MEMO-030: Pattern-Based Test Migration"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/rfc/rfc-015",children:"RFC-015: Plugin Acceptance Test Framework"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/jrepp/prism-data-layer/blob/main/CLAUDE.md#test-driven-development-tdd-workflow",children:"CLAUDE.md: Test-Driven Development Workflow"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"appendices",children:"Appendices"}),"\n",(0,i.jsx)(n.h3,{id:"appendix-a-test-mapping",children:"Appendix A: Test Mapping"}),"\n",(0,i.jsx)(n.p,{children:"Complete mapping of current tests to new locations:"}),"\n",(0,i.jsx)(n.h4,{id:"memstore",children:"MemStore"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Current Test"}),(0,i.jsx)(n.th,{children:"New Location"}),(0,i.jsx)(n.th,{children:"Rationale"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestMemStore_SetGet"})}),(0,i.jsx)(n.td,{children:"DELETE"}),(0,i.jsxs)(n.td,{children:["Covered by ",(0,i.jsx)(n.code,{children:"tests/acceptance/patterns/keyvalue/basic_test.go::testSetAndGet"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestMemStore_Delete"})}),(0,i.jsx)(n.td,{children:"DELETE"}),(0,i.jsxs)(n.td,{children:["Covered by ",(0,i.jsx)(n.code,{children:"basic_test.go::testDeleteExisting"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestMemStore_TTL"})}),(0,i.jsx)(n.td,{children:"DELETE"}),(0,i.jsxs)(n.td,{children:["Covered by ",(0,i.jsx)(n.code,{children:"ttl_test.go::testTTLExpiration"})]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestMemStore_CapacityLimit"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/memstore/memstore_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Unique MemStore feature"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestMemStore_Health"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/memstore/memstore_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Unique health degradation"})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"redis",children:"Redis"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Current Test"}),(0,i.jsx)(n.th,{children:"New Location"}),(0,i.jsx)(n.th,{children:"Rationale"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_New"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/redis/redis_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Metadata validation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_Initialize"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/redis/redis_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Config validation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_SetGet"})}),(0,i.jsx)(n.td,{children:"DELETE"}),(0,i.jsx)(n.td,{children:"Covered by acceptance tests"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_SetWithTTL"})}),(0,i.jsx)(n.td,{children:"DELETE"}),(0,i.jsx)(n.td,{children:"Covered by acceptance tests"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_GetNonExistent"})}),(0,i.jsx)(n.td,{children:"DELETE"}),(0,i.jsx)(n.td,{children:"Covered by acceptance tests"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_Delete"})}),(0,i.jsx)(n.td,{children:"DELETE"}),(0,i.jsx)(n.td,{children:"Covered by acceptance tests"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_Exists"})}),(0,i.jsx)(n.td,{children:"DELETE"}),(0,i.jsx)(n.td,{children:"Covered by acceptance tests"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_Health"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/redis/redis_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Health check validation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_HealthUnhealthy"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/redis/redis_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Unhealthy state"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisPattern_Stop"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/redis/redis_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Lifecycle cleanup"})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"nats",children:"NATS"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Current Test"}),(0,i.jsx)(n.th,{children:"New Location"}),(0,i.jsx)(n.th,{children:"Rationale"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_Initialize"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/nats/nats_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Config validation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_InitializeWithDefaults"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/nats/nats_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Default config"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_InitializeFailure"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/nats/nats_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Error handling"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_NameAndVersion"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/nats/nats_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Metadata validation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_Health"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/nats/nats_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Health check"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_HealthAfterDisconnect"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/nats/nats_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Unhealthy state"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_UnsubscribeNonExistent"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/nats/nats_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Error handling"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_PublishWithoutConnection"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/nats/nats_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Error handling"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_SubscribeWithoutConnection"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/nats/nats_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Error handling"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_StopWithActiveSubscriptions"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"tests/unit/backends/nats/nats_unit_test.go"})}),(0,i.jsx)(n.td,{children:"Lifecycle cleanup"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_PublishSubscribe"})}),(0,i.jsx)(n.td,{children:"DELETE"}),(0,i.jsx)(n.td,{children:"Covered by acceptance tests"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_MultiplePubSub"})}),(0,i.jsx)(n.td,{children:"DELETE"}),(0,i.jsx)(n.td,{children:"Covered by acceptance tests"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_Fanout"})}),(0,i.jsxs)(n.td,{children:["MIGRATE to ",(0,i.jsx)(n.code,{children:"tests/acceptance/patterns/consumer/fanout_test.go"})]}),(0,i.jsx)(n.td,{children:"Should test all backends"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_MessageOrdering"})}),(0,i.jsxs)(n.td,{children:["MIGRATE to ",(0,i.jsx)(n.code,{children:"tests/acceptance/patterns/consumer/ordering_test.go"})]}),(0,i.jsx)(n.td,{children:"Should test all backends"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_UnsubscribeStopsMessages"})}),(0,i.jsxs)(n.td,{children:["MIGRATE to ",(0,i.jsx)(n.code,{children:"tests/acceptance/patterns/consumer/unsubscribe_test.go"})]}),(0,i.jsx)(n.td,{children:"Should test all backends"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_ConcurrentPublish"})}),(0,i.jsxs)(n.td,{children:["VERIFY in ",(0,i.jsx)(n.code,{children:"tests/acceptance/patterns/consumer/concurrent_test.go"})]}),(0,i.jsx)(n.td,{children:"Should include NATS"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestNATSPattern_PublishWithMetadata"})}),(0,i.jsxs)(n.td,{children:["MIGRATE to ",(0,i.jsx)(n.code,{children:"tests/acceptance/patterns/consumer/metadata_test.go"})]}),(0,i.jsx)(n.td,{children:"Should test all backends"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Last updated: 2025-10-14"})})]})}function o(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}}}]);