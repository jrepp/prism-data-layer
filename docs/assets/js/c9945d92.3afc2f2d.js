"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[62406],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var t=s(96540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}},92608:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>a});const t=JSON.parse('{"id":"rfc-021","title":"POC 1 - Three Minimal Plugins Implementation Plan","description":"Summary","source":"@site/../docs-cms/rfcs/rfc-021-poc1-three-plugins-implementation.md","sourceDirName":".","slug":"/rfc-021","permalink":"/prism-data-layer/rfc/rfc-021","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/rfc-021-poc1-three-plugins-implementation.md","tags":[{"inline":true,"label":"poc","permalink":"/prism-data-layer/rfc/tags/poc"},{"inline":true,"label":"implementation","permalink":"/prism-data-layer/rfc/tags/implementation"},{"inline":true,"label":"plugins","permalink":"/prism-data-layer/rfc/tags/plugins"},{"inline":true,"label":"walking-skeleton","permalink":"/prism-data-layer/rfc/tags/walking-skeleton"},{"inline":true,"label":"tdd","permalink":"/prism-data-layer/rfc/tags/tdd"},{"inline":true,"label":"code-coverage","permalink":"/prism-data-layer/rfc/tags/code-coverage"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-09T00:00:00.000Z","doc_uuid":"3492f803-68ea-4631-bcd9-7198d3294bff","id":"rfc-021","project_id":"prism-data-layer","status":"Proposed","tags":["poc","implementation","plugins","walking-skeleton","tdd","code-coverage"],"title":"POC 1 - Three Minimal Plugins Implementation Plan","updated":"2025-10-09T00:00:00.000Z"},"sidebar":"rfcSidebar","previous":{"title":"Streaming HTTP Listener - API-Specific Adapter Pattern \u2022 RFC-020","permalink":"/prism-data-layer/rfc/rfc-020"},"next":{"title":"Core Pattern SDK - Build System and Physical Code Layout \u2022 RFC-022","permalink":"/prism-data-layer/rfc/rfc-022"}}');var i=s(74848),r=s(28453);const l={author:"Platform Team",created:new Date("2025-10-09T00:00:00.000Z"),doc_uuid:"3492f803-68ea-4631-bcd9-7198d3294bff",id:"rfc-021",project_id:"prism-data-layer",status:"Proposed",tags:["poc","implementation","plugins","walking-skeleton","tdd","code-coverage"],title:"POC 1 - Three Minimal Plugins Implementation Plan",updated:new Date("2025-10-09T00:00:00.000Z")},c="RFC-021: POC 1 - Three Minimal Plugins Implementation Plan",o={},a=[{value:"Summary",id:"summary",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Problem",id:"problem",level:3},{value:"Goals",id:"goals",level:3},{value:"Objective: Walking Skeleton with TDD",id:"objective-walking-skeleton-with-tdd",level:2},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Component Diagram",id:"component-diagram",level:3},{value:"Technology Stack",id:"technology-stack",level:3},{value:"Three Plugin Division",id:"three-plugin-division",level:2},{value:"Plugin 1: MemStore (In-Memory)",id:"plugin-1-memstore-in-memory",level:3},{value:"Plugin 2: Redis (External In-Memory)",id:"plugin-2-redis-external-in-memory",level:3},{value:"Plugin 3: Kafka (Streaming)",id:"plugin-3-kafka-streaming",level:3},{value:"Plugin Lifecycle",id:"plugin-lifecycle",level:2},{value:"Mermaid Diagram",id:"mermaid-diagram",level:3},{value:"Lifecycle Phases Explained",id:"lifecycle-phases-explained",level:3},{value:"Work Streams",id:"work-streams",level:2},{value:"Work Stream 1: Protobuf Schema and Code Generation",id:"work-stream-1-protobuf-schema-and-code-generation",level:3},{value:"Tasks",id:"tasks",level:4},{value:"Work Stream 2: Core Pattern SDK Skeleton",id:"work-stream-2-core-pattern-sdk-skeleton",level:3},{value:"Tasks",id:"tasks-1",level:4},{value:"Work Stream 3: Rust Proxy Implementation",id:"work-stream-3-rust-proxy-implementation",level:3},{value:"Tasks",id:"tasks-2",level:4},{value:"Work Stream 4: MemStore Plugin Implementation",id:"work-stream-4-memstore-plugin-implementation",level:3},{value:"Tasks",id:"tasks-3",level:4},{value:"Work Stream 5: Redis Plugin Implementation",id:"work-stream-5-redis-plugin-implementation",level:3},{value:"Tasks",id:"tasks-4",level:4},{value:"Work Stream 6: Kafka Plugin Implementation",id:"work-stream-6-kafka-plugin-implementation",level:3},{value:"Tasks",id:"tasks-5",level:4},{value:"Work Stream 7: Load Testing Tool",id:"work-stream-7-load-testing-tool",level:3},{value:"Tasks",id:"tasks-6",level:4},{value:"Work Stream 8: Build Optimization",id:"work-stream-8-build-optimization",level:3},{value:"Tasks",id:"tasks-7",level:4},{value:"Timeline and Dependencies",id:"timeline-and-dependencies",level:2},{value:"Gantt Chart",id:"gantt-chart",level:3},{value:"Day-by-Day Plan with TDD Focus",id:"day-by-day-plan-with-tdd-focus",level:3},{value:"Success Criteria",id:"success-criteria",level:2},{value:"Functional Requirements",id:"functional-requirements",level:3},{value:"Code Coverage Requirements",id:"code-coverage-requirements",level:3},{value:"Non-Functional Requirements",id:"non-functional-requirements",level:3},{value:"Deliverables Checklist",id:"deliverables-checklist",level:3},{value:"TDD Workflow Summary",id:"tdd-workflow-summary",level:2},{value:"Development Cycle (Per Feature)",id:"development-cycle-per-feature",level:3},{value:"Coverage Reporting in CI",id:"coverage-reporting-in-ci",level:3},{value:"Related Documents",id:"related-documents",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",feature:"feature",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rfc-021-poc-1---three-minimal-plugins-implementation-plan",children:"RFC-021: POC 1 - Three Minimal Plugins Implementation Plan"})}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.p,{children:["Detailed implementation plan for POC 1: ",(0,i.jsx)(n.strong,{children:"Three Minimal Plugins (Walking Skeleton)"}),". This RFC provides actionable work streams for building the thinnest end-to-end slice demonstrating proxy \u2192 plugin \u2192 backend architecture. POC 1 focuses on ",(0,i.jsx)(n.strong,{children:"minimal, focused plugins"})," (3 total), ",(0,i.jsx)(n.strong,{children:"plugin SDK skeleton"}),", ",(0,i.jsx)(n.strong,{children:"optimized builds"})," (statically linked executables), and ",(0,i.jsx)(n.strong,{children:"load testing"})," to validate performance."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Changes from Previous Scope"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"No Admin API"}),": Use ",(0,i.jsx)(n.code,{children:"prismctl"})," CLI instead"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"No Python client library"}),": Focus on backend infrastructure"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Core Pattern SDK skeleton"}),": Reusable Go library from RFC-022"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"3 minimal patterns"}),": MemStore, Redis, Kafka (each focused on specific interfaces)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Load testing tool"}),": Go CLI for parallel load generation"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Optimized builds"}),": Static linking, minimal Docker images (<10MB)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"TDD workflow"}),": Code coverage tracked from day one (target: 80%+)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Timeline"}),": 2 weeks (10 working days)\n",(0,i.jsx)(n.strong,{children:"Team Size"}),": 2-3 engineers\n",(0,i.jsx)(n.strong,{children:"Approach"}),": Walking Skeleton with TDD - build thinnest end-to-end slice, measure coverage, iterate"]}),"\n",(0,i.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsx)(n.h3,{id:"problem",children:"Problem"}),"\n",(0,i.jsx)(n.p,{children:"RFC-018 provides a high-level POC strategy, but POC 1 needs:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimal patterns"}),": Original plan had complex MemStore pattern; need 3 focused patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pattern SDK foundation"}),": Reusable library for pattern authors"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Build optimization"}),": Small Docker images for fast iteration"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Load testing"}),": Validate performance claims early"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TDD discipline"}),": Code coverage metrics from day one"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"goals",children:"Goals"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prove Architecture"}),": Demonstrate proxy \u2192 plugin \u2192 backend \u2192 load tester flow"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimal Focus"}),": Each plugin implements only what's needed (no extra features)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SDK Foundation"}),": Build reusable plugin SDK skeleton from RFC-022"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance Validation"}),": Load testing tool to measure throughput/latency"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Quality Gates"}),": 80%+ code coverage, all tests passing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast Iteration"}),": Optimized builds, Go module caching, parallel testing"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"objective-walking-skeleton-with-tdd",children:"Objective: Walking Skeleton with TDD"}),"\n",(0,i.jsxs)(n.p,{children:["Build the ",(0,i.jsx)(n.strong,{children:"thinnest possible end-to-end slice"})," demonstrating:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Rust proxy receiving gRPC client requests"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 3 Go patterns: MemStore (in-memory), Redis (external), Kafka (streaming)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Core Pattern SDK skeleton (auth, observability stubs, lifecycle)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Load testing tool (Go CLI) generating parallel requests"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Optimized builds (static linking, <10MB Docker images)"}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"TDD workflow"}),": Write tests first, achieve 80%+ coverage"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:'What "Walking Skeleton" Means'}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implements minimal interfaces per plugin (no extra features)"}),"\n",(0,i.jsx)(n.li,{children:"No authentication enforcement (SDK stubs only)"}),"\n",(0,i.jsx)(n.li,{children:"Basic observability (structured logging, no metrics yet)"}),"\n",(0,i.jsx)(n.li,{children:'Single namespace ("default")'}),"\n",(0,i.jsxs)(n.li,{children:["Focus: ",(0,i.jsx)(n.strong,{children:"prove the architecture works with measurable performance"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:'What "TDD-Driven" Means'}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Write interface tests BEFORE implementation"}),"\n",(0,i.jsx)(n.li,{children:"Run tests in CI on every commit"}),"\n",(0,i.jsx)(n.li,{children:"Track code coverage (target: 80%+ per component)"}),"\n",(0,i.jsx)(n.li,{children:"Fail builds if coverage drops"}),"\n",(0,i.jsx)(n.li,{children:"Use coverage reports to identify untested paths"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,i.jsx)(n.h3,{id:"component-diagram",children:"Component Diagram"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        POC 1 Architecture                         \u2502\n\u2502                                                                   \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Load Testing Tool (prism-load) - Go CLI                    \u2502 \u2502\n\u2502  \u2502  - Parallel gRPC requests                                   \u2502 \u2502\n\u2502  \u2502  - Configurable concurrency, duration, RPS                  \u2502 \u2502\n\u2502  \u2502  - Reports latency P50/P99, throughput, errors              \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                   \u2502                                               \u2502\n\u2502                   \u2502 gRPC (KeyValueService, PubSubService, etc.)   \u2502\n\u2502                   \u25bc                                               \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Rust Proxy (proxy/)                                        \u2502 \u2502\n\u2502  \u2502  - gRPC server on :8980                                     \u2502 \u2502\n\u2502  \u2502  - Load plugin from config                                  \u2502 \u2502\n\u2502  \u2502  - Forward requests to plugins                              \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502      \u2502                 \u2502                  \u2502                       \u2502\n\u2502      \u2502 gRPC            \u2502 gRPC             \u2502 gRPC                  \u2502\n\u2502      \u25bc                 \u25bc                  \u25bc                       \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502\n\u2502  \u2502  MemStore  \u2502   \u2502   Redis    \u2502   \u2502     Kafka     \u2502            \u2502\n\u2502  \u2502   Plugin   \u2502   \u2502   Plugin   \u2502   \u2502    Plugin     \u2502            \u2502\n\u2502  \u2502            \u2502   \u2502            \u2502   \u2502               \u2502            \u2502\n\u2502  \u2502 Built with \u2502   \u2502 Built with \u2502   \u2502  Built with   \u2502            \u2502\n\u2502  \u2502 Pattern SDK\u2502   \u2502 Pattern SDK\u2502   \u2502  Pattern SDK  \u2502            \u2502\n\u2502  \u2502            \u2502   \u2502            \u2502   \u2502               \u2502            \u2502\n\u2502  \u2502 Implements:\u2502   \u2502 Implements:\u2502   \u2502  Implements:  \u2502            \u2502\n\u2502  \u2502 - keyvalue \u2502   \u2502 - keyvalue \u2502   \u2502  - pubsub     \u2502            \u2502\n\u2502  \u2502   _basic   \u2502   \u2502   _basic   \u2502   \u2502    _basic     \u2502            \u2502\n\u2502  \u2502 - keyvalue \u2502   \u2502 - keyvalue \u2502   \u2502  - stream     \u2502            \u2502\n\u2502  \u2502   _ttl     \u2502   \u2502   _scan    \u2502   \u2502    _basic     \u2502            \u2502\n\u2502  \u2502 - list     \u2502   \u2502 - keyvalue \u2502   \u2502               \u2502            \u2502\n\u2502  \u2502   _basic   \u2502   \u2502   _ttl     \u2502   \u2502               \u2502            \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n\u2502                         \u2502                    \u2502                   \u2502\n\u2502                         \u25bc                    \u25bc                   \u2502\n\u2502                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510             \u2502\n\u2502                   \u2502   Redis   \u2502        \u2502  Kafka   \u2502             \u2502\n\u2502                   \u2502  (Docker) \u2502        \u2502 (Docker) \u2502             \u2502\n\u2502                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"technology-stack",children:"Technology Stack"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Language"}),(0,i.jsx)(n.th,{children:"Framework/Library"}),(0,i.jsx)(n.th,{children:"Protocol"}),(0,i.jsx)(n.th,{children:"Image Size Target"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Proxy"}),(0,i.jsx)(n.td,{children:"Rust"}),(0,i.jsx)(n.td,{children:"tokio, tonic (gRPC)"}),(0,i.jsx)(n.td,{children:"gRPC"}),(0,i.jsx)(n.td,{children:"<5MB (static)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Pattern SDK"}),(0,i.jsx)(n.td,{children:"Go"}),(0,i.jsx)(n.td,{children:"google.golang.org/grpc"}),(0,i.jsx)(n.td,{children:"Library"}),(0,i.jsx)(n.td,{children:"N/A (library)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MemStore Pattern"}),(0,i.jsx)(n.td,{children:"Go"}),(0,i.jsx)(n.td,{children:"Pattern SDK"}),(0,i.jsx)(n.td,{children:"gRPC"}),(0,i.jsx)(n.td,{children:"<3MB (static)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Redis Pattern"}),(0,i.jsx)(n.td,{children:"Go"}),(0,i.jsx)(n.td,{children:"Pattern SDK, go-redis"}),(0,i.jsx)(n.td,{children:"gRPC"}),(0,i.jsx)(n.td,{children:"<5MB (static)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Kafka Pattern"}),(0,i.jsx)(n.td,{children:"Go"}),(0,i.jsx)(n.td,{children:"Pattern SDK, sarama"}),(0,i.jsx)(n.td,{children:"gRPC"}),(0,i.jsx)(n.td,{children:"<8MB (static)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Load Tester"}),(0,i.jsx)(n.td,{children:"Go"}),(0,i.jsx)(n.td,{children:"google.golang.org/grpc"}),(0,i.jsx)(n.td,{children:"gRPC"}),(0,i.jsx)(n.td,{children:"<3MB (static)"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"three-plugin-division",children:"Three Plugin Division"}),"\n",(0,i.jsx)(n.h3,{id:"plugin-1-memstore-in-memory",children:"Plugin 1: MemStore (In-Memory)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Focus"}),": Fastest possible implementation with no external dependencies"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Interfaces Implemented"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyvalue_basic"})," - Set, Get, Delete, Exists"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyvalue_ttl"})," - Expire, GetTTL, Persist"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"list_basic"})," - PushLeft, PushRight, PopLeft, PopRight, Length"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Backend"}),": Go ",(0,i.jsx)(n.code,{children:"sync.Map"})," + slices (in-process)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why This Plugin"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Zero dependencies (no Docker, no network)"}),"\n",(0,i.jsx)(n.li,{children:"Ideal for unit tests and local development"}),"\n",(0,i.jsx)(n.li,{children:"Proves plugin SDK integration"}),"\n",(0,i.jsx)(n.li,{children:"Baseline performance measurement (nanosecond latency)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Code Organization"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"plugins/memstore/\n\u251c\u2500\u2500 go.mod                  # Module: github.com/prism/plugins/memstore\n\u251c\u2500\u2500 main.go                 # Entry point (uses SDK)\n\u251c\u2500\u2500 storage/\n\u2502   \u251c\u2500\u2500 keyvalue.go         # sync.Map implementation\n\u2502   \u251c\u2500\u2500 keyvalue_test.go    # &gt;80% coverage\n\u2502   \u251c\u2500\u2500 list.go             # Slice implementation\n\u2502   \u2514\u2500\u2500 list_test.go        # &gt;80% coverage\n\u251c\u2500\u2500 Dockerfile              # Multi-stage build, static binary\n\u2514\u2500\u2500 Makefile                # Build, test, coverage targets\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Coverage Target"}),": 85%+ (simplest plugin, should have highest coverage)"]}),"\n",(0,i.jsx)(n.h3,{id:"plugin-2-redis-external-in-memory",children:"Plugin 2: Redis (External In-Memory)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Focus"}),": External backend integration, testing connection pooling and error handling"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Interfaces Implemented"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyvalue_basic"})," - Set, Get, Delete, Exists"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyvalue_scan"})," - Scan, ScanKeys, Count"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyvalue_ttl"})," - Expire, GetTTL, Persist"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Backend"}),": Redis 7.2 (Docker testcontainer)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why This Plugin"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests external backend connectivity"}),"\n",(0,i.jsx)(n.li,{children:"Validates SDK connection pooling utilities"}),"\n",(0,i.jsx)(n.li,{children:"Proves retry logic and error handling"}),"\n",(0,i.jsx)(n.li,{children:"Realistic latency characteristics (microseconds)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Code Organization"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"plugins/redis/\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 client/\n\u2502   \u251c\u2500\u2500 pool.go             # Connection pool using SDK\n\u2502   \u251c\u2500\u2500 pool_test.go\n\u2502   \u251c\u2500\u2500 keyvalue.go         # Redis commands\n\u2502   \u2514\u2500\u2500 keyvalue_test.go\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 Makefile\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Coverage Target"}),": 80%+ (includes integration tests with testcontainers)"]}),"\n",(0,i.jsx)(n.h3,{id:"plugin-3-kafka-streaming",children:"Plugin 3: Kafka (Streaming)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Focus"}),": Streaming interfaces, producer/consumer patterns"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Interfaces Implemented"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pubsub_basic"})," - Publish, Subscribe, Unsubscribe"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"stream_basic"})," - Append, Read, Trim"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Backend"}),": Kafka 3.6 (Docker testcontainer)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Why This Plugin"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Tests streaming semantics (vs request/response)"}),"\n",(0,i.jsx)(n.li,{children:"Validates SDK streaming helpers"}),"\n",(0,i.jsx)(n.li,{children:"Proves pub/sub pattern implementation"}),"\n",(0,i.jsx)(n.li,{children:"Different latency profile (milliseconds)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Code Organization"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"plugins/kafka/\n\u251c\u2500\u2500 go.mod\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 producer/\n\u2502   \u251c\u2500\u2500 writer.go           # Kafka producer using SDK\n\u2502   \u251c\u2500\u2500 writer_test.go\n\u2502   \u2514\u2500\u2500 buffer.go           # Async buffering\n\u251c\u2500\u2500 consumer/\n\u2502   \u251c\u2500\u2500 reader.go           # Kafka consumer using SDK\n\u2502   \u2514\u2500\u2500 reader_test.go\n\u251c\u2500\u2500 Dockerfile\n\u2514\u2500\u2500 Makefile\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Coverage Target"}),": 80%+ (streaming patterns are complex, focus on critical paths)"]}),"\n",(0,i.jsx)(n.h2,{id:"plugin-lifecycle",children:"Plugin Lifecycle"}),"\n",(0,i.jsx)(n.h3,{id:"mermaid-diagram",children:"Mermaid Diagram"}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Proxy\n    participant Plugin as Plugin (MemStore/Redis/Kafka)\n    participant Backend as Backend (sync.Map/Redis/Kafka)\n    participant LoadTest as Load Tester\n\n    Note over Proxy: 1. Startup Phase\n    Proxy->>Plugin: Start plugin process\n    Plugin->>Plugin: Initialize SDK (auth, obs, lifecycle)\n    Plugin->>Backend: Connect to backend\n    Backend--\x3e>Plugin: Connection established\n    Plugin--\x3e>Proxy: Register gRPC services\n    Plugin--\x3e>Proxy: Health check OK\n\n    Note over Proxy: 2. Request Handling Phase\n    LoadTest->>Proxy: gRPC request (Set key)\n    Proxy->>Plugin: Forward request\n    Plugin->>Plugin: SDK auth stub (no-op for POC 1)\n    Plugin->>Plugin: SDK observability (log request)\n    Plugin->>Backend: Execute operation\n    Backend--\x3e>Plugin: Result\n    Plugin->>Plugin: SDK observability (log response)\n    Plugin--\x3e>Proxy: Return response\n    Proxy--\x3e>LoadTest: Response\n\n    Note over Proxy: 3. Health Check Phase\n    Proxy->>Plugin: Health check\n    Plugin->>Backend: Backend health check\n    Backend--\x3e>Plugin: Status OK\n    Plugin--\x3e>Proxy: Healthy\n\n    Note over Proxy: 4. Shutdown Phase\n    Proxy->>Plugin: SIGTERM\n    Plugin->>Plugin: SDK graceful shutdown\n    Plugin->>Backend: Close connections\n    Backend--\x3e>Plugin: Connections closed\n    Plugin--\x3e>Proxy: Shutdown complete"}),"\n",(0,i.jsx)(n.h3,{id:"lifecycle-phases-explained",children:"Lifecycle Phases Explained"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"1. Startup"})," (Target: <100ms per plugin)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Plugin process starts (statically linked binary)"}),"\n",(0,i.jsx)(n.li,{children:"SDK initializes: auth stubs, observability, lifecycle hooks"}),"\n",(0,i.jsx)(n.li,{children:"Backend connection established (with retry logic)"}),"\n",(0,i.jsx)(n.li,{children:"gRPC services registered"}),"\n",(0,i.jsx)(n.li,{children:"Health check endpoint responds"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"2. Request Handling"})," (Target: <1ms proxy \u2192 plugin latency)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Proxy forwards request to plugin via gRPC"}),"\n",(0,i.jsx)(n.li,{children:"SDK auth stub validates (no-op for POC 1, returns OK)"}),"\n",(0,i.jsx)(n.li,{children:"SDK observability logs request details"}),"\n",(0,i.jsx)(n.li,{children:"Plugin executes backend operation"}),"\n",(0,i.jsx)(n.li,{children:"SDK observability logs response details"}),"\n",(0,i.jsx)(n.li,{children:"Result returned to proxy"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"3. Health Checks"})," (Target: <10ms)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Periodic health checks from proxy"}),"\n",(0,i.jsx)(n.li,{children:"Plugin checks backend connection"}),"\n",(0,i.jsx)(n.li,{children:"Returns healthy/unhealthy status"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"4. Shutdown"})," (Target: <1s graceful shutdown)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"SIGTERM received"}),"\n",(0,i.jsx)(n.li,{children:"SDK graceful shutdown handler triggered"}),"\n",(0,i.jsx)(n.li,{children:"In-flight requests completed"}),"\n",(0,i.jsx)(n.li,{children:"Backend connections closed"}),"\n",(0,i.jsx)(n.li,{children:"Process exits cleanly"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"work-streams",children:"Work Streams"}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-1-protobuf-schema-and-code-generation",children:"Work Stream 1: Protobuf Schema and Code Generation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 1 day\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": None (can start immediately)"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 1.1: Define KeyValue protobuf interfaces"})," (2 hours)"]}),"\n",(0,i.jsx)(n.p,{children:"Interfaces needed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyvalue_basic.proto"})," - Set, Get, Delete, Exists"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyvalue_scan.proto"})," - Scan, ScanKeys, Count"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyvalue_ttl.proto"})," - Expire, GetTTL, Persist"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 1.2: Define PubSub and Stream interfaces"})," (2 hours)"]}),"\n",(0,i.jsx)(n.p,{children:"Interfaces needed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"pubsub_basic.proto"})," - Publish, Subscribe, Unsubscribe"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"stream_basic.proto"})," - Append, Read, Trim"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 1.3: Define List interface"})," (1 hour)"]}),"\n",(0,i.jsx)(n.p,{children:"Interfaces needed:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"list_basic.proto"})," - PushLeft, PushRight, PopLeft, PopRight, Length"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 1.4: Create Makefile for proto generation"})," (2 hours)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-makefile",children:'# Makefile (root)\n.PHONY: proto proto-rust proto-go clean-proto\n\nproto: proto-rust proto-go\n\nproto-rust:\n\t@echo "Generating Rust protobuf code..."\n\tprotoc --rust_out=proto/rust/ --tonic_out=proto/rust/ \\\n\t\tproto/interfaces/**/*.proto\n\nproto-go:\n\t@echo "Generating Go protobuf code..."\n\tprotoc --go_out=proto/go/ --go-grpc_out=proto/go/ \\\n\t\t--go_opt=paths=source_relative \\\n\t\t--go-grpc_opt=paths=source_relative \\\n\t\tproto/interfaces/**/*.proto\n\nclean-proto:\n\trm -rf proto/rust/*.rs proto/go/*.go\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 1.5: Setup Go module caching"})," (1 hour)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-makefile",children:"# Enable Go module caching in monorepo\nexport GOMODCACHE=$(shell pwd)/.gomodcache\nexport GOCACHE=$(shell pwd)/.gocache\n\n# Ensure cache directories exist\ncache-dirs:\n\tmkdir -p .gomodcache .gocache\n\n# All Go builds depend on cache directories\ngo-build: cache-dirs proto-go\n\tcd plugins/memstore && go build -o bin/memstore main.go\n\tcd plugins/redis && go build -o bin/redis main.go\n\tcd plugins/kafka && go build -o bin/kafka main.go\n\tcd tools/prism-load && go build -o bin/prism-load main.go\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," All protobuf files compile without errors"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Rust and Go code generated"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Makefile targets work"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Go module cache shared across plugins"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"make proto"})," runs in <10 seconds"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TDD Checkpoint"}),": N/A (protobuf generation, no tests needed)"]}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-2-core-pattern-sdk-skeleton",children:"Work Stream 2: Core Pattern SDK Skeleton"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer (Go expert)\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 2 days\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": Task 1.4 (protobuf generation)"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks-1",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 2.1: Create SDK package structure"})," (half day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"plugins/core/\n\u251c\u2500\u2500 go.mod                  # Module: github.com/prism/plugins/core\n\u251c\u2500\u2500 auth/\n\u2502   \u251c\u2500\u2500 stub.go             # Auth stub (always returns OK)\n\u2502   \u2514\u2500\u2500 stub_test.go\n\u251c\u2500\u2500 observability/\n\u2502   \u251c\u2500\u2500 logger.go           # Structured logging (zap)\n\u2502   \u2514\u2500\u2500 logger_test.go\n\u251c\u2500\u2500 lifecycle/\n\u2502   \u251c\u2500\u2500 hooks.go            # Startup/shutdown hooks\n\u2502   \u2514\u2500\u2500 hooks_test.go\n\u251c\u2500\u2500 server/\n\u2502   \u251c\u2500\u2500 grpc.go             # gRPC server setup\n\u2502   \u2514\u2500\u2500 grpc_test.go\n\u2514\u2500\u2500 storage/\n    \u251c\u2500\u2500 retry.go            # Retry logic with backoff\n    \u2514\u2500\u2500 retry_test.go\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 2.2: Implement auth stub"})," (1 hour + 30 min tests)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// plugins/core/auth/stub.go\npackage auth\n\nimport "context"\n\n// StubValidator always returns OK (no-op for POC 1)\ntype StubValidator struct{}\n\nfunc NewStubValidator() *StubValidator {\n    return &StubValidator{}\n}\n\nfunc (v *StubValidator) Validate(ctx context.Context, token string) error {\n    // POC 1: Always succeed\n    return nil\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TDD Approach"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Write test first: ",(0,i.jsx)(n.code,{children:"TestStubValidator_AlwaysSucceeds"})]}),"\n",(0,i.jsx)(n.li,{children:"Run test (should fail with no implementation)"}),"\n",(0,i.jsxs)(n.li,{children:["Implement ",(0,i.jsx)(n.code,{children:"StubValidator"})]}),"\n",(0,i.jsx)(n.li,{children:"Run test (should pass)"}),"\n",(0,i.jsxs)(n.li,{children:["Check coverage: ",(0,i.jsx)(n.code,{children:"go test -cover"})," (target: 100% for stubs)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 2.3: Implement observability logger"})," (2 hours + 1 hour tests)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// plugins/core/observability/logger.go\npackage observability\n\nimport "go.uber.org/zap"\n\nfunc NewLogger(level string) (*zap.Logger, error) {\n    cfg := zap.NewProductionConfig()\n    cfg.Level = zap.NewAtomicLevelAt(parseLevel(level))\n    return cfg.Build()\n}\n\nfunc parseLevel(level string) zapcore.Level {\n    switch level {\n    case "debug":\n        return zapcore.DebugLevel\n    case "info":\n        return zapcore.InfoLevel\n    case "warn":\n        return zapcore.WarnLevel\n    case "error":\n        return zapcore.ErrorLevel\n    default:\n        return zapcore.InfoLevel\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TDD Approach"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Write tests first:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"TestNewLogger_DefaultLevel"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"TestNewLogger_DebugLevel"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"TestParseLevel_AllLevels"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Run tests (should fail)"}),"\n",(0,i.jsx)(n.li,{children:"Implement logger functions"}),"\n",(0,i.jsx)(n.li,{children:"Run tests (should pass)"}),"\n",(0,i.jsx)(n.li,{children:"Check coverage: target 85%+"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 2.4: Implement lifecycle hooks"})," (2 hours + 1 hour tests)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// plugins/core/lifecycle/hooks.go\npackage lifecycle\n\nimport (\n    "context"\n    "os"\n    "os/signal"\n    "syscall"\n)\n\ntype Lifecycle struct {\n    onStartup  func(context.Context) error\n    onShutdown func(context.Context) error\n}\n\nfunc New() *Lifecycle {\n    return &Lifecycle{}\n}\n\nfunc (l *Lifecycle) OnStartup(fn func(context.Context) error) {\n    l.onStartup = fn\n}\n\nfunc (l *Lifecycle) OnShutdown(fn func(context.Context) error) {\n    l.onShutdown = fn\n}\n\nfunc (l *Lifecycle) Start(ctx context.Context) error {\n    if l.onStartup != nil {\n        if err := l.onStartup(ctx); err != nil {\n            return err\n        }\n    }\n    return nil\n}\n\nfunc (l *Lifecycle) WaitForShutdown(ctx context.Context) error {\n    sigCh := make(chan os.Signal, 1)\n    signal.Notify(sigCh, syscall.SIGINT, syscall.SIGTERM)\n    <-sigCh\n\n    if l.onShutdown != nil {\n        return l.onShutdown(ctx)\n    }\n    return nil\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TDD Approach"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Write tests first:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"TestLifecycle_StartupHook"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"TestLifecycle_ShutdownHook"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"TestLifecycle_NoHooks"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Run tests (should fail)"}),"\n",(0,i.jsx)(n.li,{children:"Implement lifecycle functions"}),"\n",(0,i.jsx)(n.li,{children:"Run tests (should pass)"}),"\n",(0,i.jsx)(n.li,{children:"Check coverage: target 90%+"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 2.5: Implement retry logic"})," (1 hour + 30 min tests)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// plugins/core/storage/retry.go\npackage storage\n\nimport (\n    "context"\n    "time"\n)\n\ntype RetryPolicy struct {\n    MaxAttempts    int\n    InitialBackoff time.Duration\n    MaxBackoff     time.Duration\n    Multiplier     float64\n}\n\nfunc WithRetry(ctx context.Context, policy *RetryPolicy, fn func() error) error {\n    var err error\n    backoff := policy.InitialBackoff\n\n    for attempt := 0; attempt < policy.MaxAttempts; attempt++ {\n        err = fn()\n        if err == nil {\n            return nil\n        }\n\n        if attempt < policy.MaxAttempts-1 {\n            time.Sleep(backoff)\n            backoff = time.Duration(float64(backoff) * policy.Multiplier)\n            if backoff > policy.MaxBackoff {\n                backoff = policy.MaxBackoff\n            }\n        }\n    }\n\n    return err\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TDD Approach"}),":"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Write tests first:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"TestWithRetry_Success"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"TestWithRetry_FailAfterMaxAttempts"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.code,{children:"TestWithRetry_BackoffProgression"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Run tests (should fail)"}),"\n",(0,i.jsx)(n.li,{children:"Implement retry logic"}),"\n",(0,i.jsx)(n.li,{children:"Run tests (should pass)"}),"\n",(0,i.jsx)(n.li,{children:"Check coverage: target 95%+"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," SDK package compiles"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," All SDK tests pass"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Code coverage >85% per package"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Coverage report generated: ",(0,i.jsx)(n.code,{children:"make coverage-sdk"})]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," No external dependencies (except zap, grpc)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Coverage Tracking"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-makefile",children:"# plugins/core/Makefile\ncoverage-sdk:\n\tgo test -coverprofile=coverage.out ./...\n\tgo tool cover -html=coverage.out -o coverage.html\n\tgo tool cover -func=coverage.out | grep total | awk '{print \"SDK Coverage: \" $$3}'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-3-rust-proxy-implementation",children:"Work Stream 3: Rust Proxy Implementation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer (Rust experience required)\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 3 days\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": Task 1.4 (protobuf generation)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": TDD for Rust proxy deferred - focus on Go plugins first. Basic integration tests only."]}),"\n",(0,i.jsx)(n.h4,{id:"tasks-2",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 3.1: Setup Rust project with minimal config"})," (1 day)\n",(0,i.jsx)(n.strong,{children:"Task 3.2: Implement gRPC forwarding"})," (1 day)\n",(0,i.jsx)(n.strong,{children:"Task 3.3: Add plugin discovery from config"})," (1 day)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Proxy starts on :8980"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Forwards requests to plugins"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Loads config from YAML"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Integration test: proxy \u2192 memstore Set/Get"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TDD Checkpoint"}),": Basic integration test only (not full unit test coverage for POC 1)"]}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-4-memstore-plugin-implementation",children:"Work Stream 4: MemStore Plugin Implementation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer (Go + TDD)\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 2 days\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": Work Stream 2 (SDK skeleton)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TDD Workflow"}),": Write interface tests FIRST, then implement"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks-3",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 4.1: Write KeyValue interface tests"})," (half day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// plugins/memstore/storage/keyvalue_test.go\npackage storage\n\nimport (\n    "testing"\n    "time"\n)\n\nfunc TestKeyValueStore_SetGet(t *testing.T) {\n    store := NewKeyValueStore()\n\n    err := store.Set("key1", []byte("value1"), 0)\n    if err != nil {\n        t.Fatalf("Set failed: %v", err)\n    }\n\n    value, found := store.Get("key1")\n    if !found {\n        t.Fatal("Key not found")\n    }\n    if string(value) != "value1" {\n        t.Errorf("Expected value1, got %s", value)\n    }\n}\n\nfunc TestKeyValueStore_TTL(t *testing.T) {\n    store := NewKeyValueStore()\n\n    err := store.Set("expires", []byte("soon"), 1) // 1 second TTL\n    if err != nil {\n        t.Fatalf("Set failed: %v", err)\n    }\n\n    // Should exist initially\n    _, found := store.Get("expires")\n    if !found {\n        t.Fatal("Key should exist immediately")\n    }\n\n    // Wait for expiration\n    time.Sleep(1200 * time.Millisecond)\n\n    // Should not exist after TTL\n    _, found = store.Get("expires")\n    if found {\n        t.Fatal("Key should be expired")\n    }\n}\n\nfunc TestKeyValueStore_Delete(t *testing.T) {\n    store := NewKeyValueStore()\n\n    store.Set("delete-me", []byte("data"), 0)\n\n    found := store.Delete("delete-me")\n    if !found {\n        t.Fatal("Delete should find key")\n    }\n\n    _, found = store.Get("delete-me")\n    if found {\n        t.Fatal("Key should be deleted")\n    }\n}\n\n// ... more tests for Exists, concurrent access, etc.\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 4.2: Implement KeyValue storage"})," (half day)"]}),"\n",(0,i.jsx)(n.p,{children:"Now implement to make tests pass:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// plugins/memstore/storage/keyvalue.go\npackage storage\n\nimport (\n    "sync"\n    "time"\n)\n\ntype KeyValueStore struct {\n    data sync.Map\n    ttls sync.Map\n}\n\nfunc NewKeyValueStore() *KeyValueStore {\n    return &KeyValueStore{}\n}\n\nfunc (kv *KeyValueStore) Set(key string, value []byte, ttlSeconds int64) error {\n    kv.data.Store(key, value)\n\n    if ttlSeconds > 0 {\n        kv.setTTL(key, time.Duration(ttlSeconds)*time.Second)\n    }\n\n    return nil\n}\n\nfunc (kv *KeyValueStore) Get(key string) ([]byte, bool) {\n    value, ok := kv.data.Load(key)\n    if !ok {\n        return nil, false\n    }\n    return value.([]byte), true\n}\n\nfunc (kv *KeyValueStore) Delete(key string) bool {\n    _, ok := kv.data.LoadAndDelete(key)\n    if timer, found := kv.ttls.LoadAndDelete(key); found {\n        timer.(*time.Timer).Stop()\n    }\n    return ok\n}\n\nfunc (kv *KeyValueStore) setTTL(key string, duration time.Duration) {\n    timer := time.AfterFunc(duration, func() {\n        kv.Delete(key)\n    })\n    kv.ttls.Store(key, timer)\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 4.3: Write List interface tests"})," (half day)\n",(0,i.jsx)(n.strong,{children:"Task 4.4: Implement List storage"})," (half day)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 4.5: Write gRPC server tests"})," (half day)\n",(0,i.jsx)(n.strong,{children:"Task 4.6: Implement gRPC server"})," (half day)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," All tests pass"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Code coverage >85%"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Race detector clean: ",(0,i.jsx)(n.code,{children:"go test -race"})]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Benchmark tests show <1\xb5s latency"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Coverage report: ",(0,i.jsx)(n.code,{children:"make coverage-memstore"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Coverage Tracking"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-makefile",children:"# plugins/memstore/Makefile\ntest:\n\tgo test -v -race ./...\n\ncoverage:\n\tgo test -coverprofile=coverage.out ./...\n\tgo tool cover -html=coverage.out -o coverage.html\n\tgo tool cover -func=coverage.out | grep total\n\nbenchmark:\n\tgo test -bench=. -benchmem ./...\n"})}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-5-redis-plugin-implementation",children:"Work Stream 5: Redis Plugin Implementation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer (Go + TDD)\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 2 days\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": Work Stream 2 (SDK skeleton)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TDD Workflow"}),": Write integration tests with testcontainers FIRST"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks-4",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 5.1: Write Redis integration tests"})," (1 day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// plugins/redis/client/keyvalue_test.go\npackage client\n\nimport (\n    "context"\n    "testing"\n\n    "github.com/testcontainers/testcontainers-go"\n    "github.com/testcontainers/testcontainers-go/wait"\n)\n\nfunc TestRedisClient_SetGet(t *testing.T) {\n    ctx := context.Background()\n\n    // Start Redis testcontainer\n    req := testcontainers.ContainerRequest{\n        Image:        "redis:7.2-alpine",\n        ExposedPorts: []string{"6379/tcp"},\n        WaitStrategy: wait.ForLog("Ready to accept connections"),\n    }\n    redis, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest{\n        ContainerRequest: req,\n        Started:          true,\n    })\n    if err != nil {\n        t.Fatalf("Failed to start Redis: %v", err)\n    }\n    defer redis.Terminate(ctx)\n\n    endpoint, _ := redis.Endpoint(ctx, "")\n\n    // Create client\n    client, err := NewRedisClient(endpoint)\n    if err != nil {\n        t.Fatalf("Failed to create client: %v", err)\n    }\n    defer client.Close()\n\n    // Test Set/Get\n    err = client.Set("key1", []byte("value1"), 0)\n    if err != nil {\n        t.Fatalf("Set failed: %v", err)\n    }\n\n    value, found, err := client.Get("key1")\n    if err != nil {\n        t.Fatalf("Get failed: %v", err)\n    }\n    if !found {\n        t.Fatal("Key not found")\n    }\n    if string(value) != "value1" {\n        t.Errorf("Expected value1, got %s", value)\n    }\n}\n\n// ... more integration tests\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 5.2: Implement Redis client"})," (1 day)"]}),"\n",(0,i.jsx)(n.p,{children:"Implement to make integration tests pass."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," All integration tests pass"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Code coverage >80%"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Connection pool works correctly"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Retry logic tested with connection failures"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Coverage report: ",(0,i.jsx)(n.code,{children:"make coverage-redis"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-6-kafka-plugin-implementation",children:"Work Stream 6: Kafka Plugin Implementation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer (Go + TDD)\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 2 days\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": Work Stream 2 (SDK skeleton)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TDD Workflow"}),": Write integration tests with testcontainers FIRST"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks-5",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 6.1: Write Kafka integration tests"})," (1 day)\n",(0,i.jsx)(n.strong,{children:"Task 6.2: Implement Kafka producer/consumer"})," (1 day)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," All integration tests pass"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Code coverage >80%"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Pub/sub semantics work correctly"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Stream append/read tested"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Coverage report: ",(0,i.jsx)(n.code,{children:"make coverage-kafka"})]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-7-load-testing-tool",children:"Work Stream 7: Load Testing Tool"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer (Go + performance)\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 1 day\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": Work Stream 3 (proxy running)"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks-6",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 7.1: Create prism-load CLI"})," (1 day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// tools/prism-load/main.go\npackage main\n\nimport (\n    "context"\n    "flag"\n    "fmt"\n    "sync"\n    "time"\n\n    "google.golang.org/grpc"\n    pb "github.com/prism/proto/go"\n)\n\ntype Config struct {\n    ProxyAddress string\n    Concurrency  int\n    Duration     time.Duration\n    RPS          int\n    Operation    string // "set" | "get" | "scan"\n}\n\nfunc main() {\n    cfg := parseFlags()\n\n    conn, err := grpc.Dial(cfg.ProxyAddress, grpc.WithInsecure())\n    if err != nil {\n        panic(err)\n    }\n    defer conn.Close()\n\n    client := pb.NewKeyValueBasicInterfaceClient(conn)\n\n    runLoadTest(client, cfg)\n}\n\nfunc runLoadTest(client pb.KeyValueBasicInterfaceClient, cfg *Config) {\n    ctx := context.Background()\n    var wg sync.WaitGroup\n\n    results := &Results{}\n\n    for i := 0; i < cfg.Concurrency; i++ {\n        wg.Add(1)\n        go func(workerID int) {\n            defer wg.Done()\n            runWorker(ctx, client, workerID, cfg, results)\n        }(i)\n    }\n\n    wg.Wait()\n\n    printResults(results)\n}\n\nfunc runWorker(ctx context.Context, client pb.KeyValueBasicInterfaceClient, id int, cfg *Config, results *Results) {\n    start := time.Now()\n    count := 0\n\n    for time.Since(start) < cfg.Duration {\n        reqStart := time.Now()\n\n        switch cfg.Operation {\n        case "set":\n            _, err := client.Set(ctx, &pb.SetRequest{\n                Namespace: "default",\n                Key:       fmt.Sprintf("key-%d-%d", id, count),\n                Value:     []byte("test-value"),\n            })\n            if err != nil {\n                results.RecordError()\n            }\n        case "get":\n            _, err := client.Get(ctx, &pb.GetRequest{\n                Namespace: "default",\n                Key:       fmt.Sprintf("key-%d-%d", id, count%1000),\n            })\n            if err != nil {\n                // Expected for non-existent keys\n            }\n        }\n\n        latency := time.Since(reqStart)\n        results.RecordLatency(latency)\n\n        count++\n\n        // Rate limiting\n        if cfg.RPS > 0 {\n            sleepDuration := time.Second/time.Duration(cfg.RPS) - latency\n            if sleepDuration > 0 {\n                time.Sleep(sleepDuration)\n            }\n        }\n    }\n}\n\ntype Results struct {\n    mu        sync.Mutex\n    latencies []time.Duration\n    errors    int\n}\n\nfunc (r *Results) RecordLatency(d time.Duration) {\n    r.mu.Lock()\n    defer r.mu.Unlock()\n    r.latencies = append(r.latencies, d)\n}\n\nfunc (r *Results) RecordError() {\n    r.mu.Lock()\n    defer r.mu.Unlock()\n    r.errors++\n}\n\nfunc printResults(r *Results) {\n    r.mu.Lock()\n    defer r.mu.Unlock()\n\n    sort.Slice(r.latencies, func(i, j int) bool {\n        return r.latencies[i] < r.latencies[j]\n    })\n\n    total := len(r.latencies)\n    p50 := r.latencies[total*50/100]\n    p99 := r.latencies[total*99/100]\n\n    fmt.Printf("Total requests: %d\\n", total)\n    fmt.Printf("Errors: %d\\n", r.errors)\n    fmt.Printf("Latency P50: %v\\n", p50)\n    fmt.Printf("Latency P99: %v\\n", p99)\n    fmt.Printf("Throughput: %.2f req/s\\n", float64(total)/float64(time.Duration(total)*p50)*float64(time.Second))\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"prism-load --proxy=localhost:8980 \\\n           --concurrency=100 \\\n           --duration=30s \\\n           --operation=set \\\n           --rps=10000\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," CLI compiles to <3MB binary"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Supports configurable concurrency"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Reports P50/P99 latency"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Reports throughput (req/s)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Reports error rate"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"TDD Checkpoint"}),": Integration test only (CLI tool, not unit tested)"]}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-8-build-optimization",children:"Work Stream 8: Build Optimization"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer (DevOps)\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 1 day\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": Work Streams 4, 5, 6 complete"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks-7",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 8.1: Create static build Dockerfiles"})," (4 hours)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-dockerfile",children:'# plugins/memstore/Dockerfile\nFROM golang:1.21-alpine AS builder\n\nWORKDIR /build\n\n# Copy go.mod and download dependencies (cached layer)\nCOPY go.mod go.sum ./\nRUN go mod download\n\n# Copy source code\nCOPY . .\n\n# Build statically linked binary\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \\\n    -ldflags=\'-w -s -extldflags "-static"\' \\\n    -o memstore main.go\n\n# Final stage: scratch (no OS, just binary)\nFROM scratch\n\nCOPY --from=builder /build/memstore /memstore\n\nENTRYPOINT ["/memstore"]\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 8.2: Measure and document image sizes"})," (2 hours)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Build all plugins\nmake build-plugins\n\n# Check sizes\ndocker images | grep prism\n\n# Expected results:\n# prism/memstore:latest    2.8MB\n# prism/redis:latest       4.9MB\n# prism/kafka:latest       7.8MB\n# prism/proxy:latest       4.2MB\n# prism/prism-load:latest  2.5MB\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 8.3: Create Makefile for optimized builds"})," (2 hours)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-makefile",children:'# Makefile (root)\n.PHONY: build-plugins build-proxy build-load test-all coverage-all\n\nbuild-plugins: cache-dirs proto-go\n\tdocker build -t prism/memstore:latest -f plugins/memstore/Dockerfile plugins/memstore\n\tdocker build -t prism/redis:latest -f plugins/redis/Dockerfile plugins/redis\n\tdocker build -t prism/kafka:latest -f plugins/kafka/Dockerfile plugins/kafka\n\nbuild-proxy: proto-rust\n\tdocker build -t prism/proxy:latest -f proxy/Dockerfile proxy\n\nbuild-load: cache-dirs proto-go\n\tdocker build -t prism/prism-load:latest -f tools/prism-load/Dockerfile tools/prism-load\n\ntest-all:\n\tcd plugins/core && go test -v -race ./...\n\tcd plugins/memstore && go test -v -race ./...\n\tcd plugins/redis && go test -v -race ./...\n\tcd plugins/kafka && go test -v -race ./...\n\ncoverage-all:\n\t@echo "=== Core SDK Coverage ==="\n\tcd plugins/core && go test -coverprofile=coverage.out ./... && \\\n\t\tgo tool cover -func=coverage.out | grep total\n\t@echo "=== MemStore Coverage ==="\n\tcd plugins/memstore && go test -coverprofile=coverage.out ./... && \\\n\t\tgo tool cover -func=coverage.out | grep total\n\t@echo "=== Redis Coverage ==="\n\tcd plugins/redis && go test -coverprofile=coverage.out ./... && \\\n\t\tgo tool cover -func=coverage.out | grep total\n\t@echo "=== Kafka Coverage ==="\n\tcd plugins/kafka && go test -coverprofile=coverage.out ./... && \\\n\t\tgo tool cover -func=coverage.out | grep total\n\n# Invoke cargo to build proxy\nbuild-proxy-native:\n\tcd proxy && cargo build --release\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," All plugins build to <10MB"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," MemStore <3MB"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Proxy <5MB"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," prism-load <3MB"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Makefile targets work"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Docker builds use module cache"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"timeline-and-dependencies",children:"Timeline and Dependencies"}),"\n",(0,i.jsx)(n.h3,{id:"gantt-chart",children:"Gantt Chart"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Day 1    2    3    4    5    6    7    8    9    10\n     \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\nWS1  \u2588\u2588\u2588\u2588                                           Protobuf (1 day)\n        \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>\n        \u2502\nWS2     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                   SDK Skeleton (2 days)\n        \u2502       \u2502\n        \u2502       \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>\n        \u2502       \u2502\nWS3     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                               Rust Proxy (3 days)\n        \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>\n        \u2502               \u2502\nWS4     \u2502   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2502                          MemStore (2 days, TDD)\n        \u2502               \u2502\nWS5     \u2502   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2502                          Redis (2 days, TDD)\n        \u2502               \u2502\nWS6     \u2502   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588    \u2502                          Kafka (2 days, TDD)\n        \u2502               \u2502\n        \u2502               \u251c\u2500\u2500\u2500\u2500>\n        \u2502               \u2502    \u2502\nWS7     \u2502               \u2502\u2588\u2588\u2588\u2588\u2502                      Load Tester (1 day)\n        \u2502               \u2502    \u2502\n        \u2502               \u2502    \u251c\u2500\u2500\u2500\u2500>\n        \u2502               \u2502         \u2502\nWS8     \u2502               \u2502         \u2502\u2588\u2588\u2588\u2588             Build Optimization (1 day)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"day-by-day-plan-with-tdd-focus",children:"Day-by-Day Plan with TDD Focus"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Day 1"}),": Protobuf + SDK Setup"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Morning: Define all protobuf interfaces"}),"\n",(0,i.jsx)(n.li,{children:"Afternoon: Generate code, setup Go module caching"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TDD"}),": N/A (proto generation)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Day 2"}),": SDK Development (TDD-driven)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Morning: Write SDK stub tests \u2192 implement stubs"}),"\n",(0,i.jsx)(n.li,{children:"Afternoon: Write SDK lifecycle tests \u2192 implement lifecycle"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TDD"}),": Achieve 85%+ SDK coverage"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Days 3-4"}),": Plugin Development (TDD-driven, parallel)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"MemStore: Write tests \u2192 implement storage"}),"\n",(0,i.jsx)(n.li,{children:"Redis: Write integration tests \u2192 implement client"}),"\n",(0,i.jsx)(n.li,{children:"Kafka: Write integration tests \u2192 implement producer/consumer"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TDD"}),": Achieve 80%+ coverage per plugin"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Day 5"}),": Proxy Development"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Morning: Setup Rust project"}),"\n",(0,i.jsx)(n.li,{children:"Afternoon: Implement forwarding logic"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TDD"}),": Basic integration test only"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Day 6"}),": Integration Testing"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Morning: End-to-end tests (proxy \u2192 plugins)"}),"\n",(0,i.jsx)(n.li,{children:"Afternoon: Load testing tool implementation"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"TDD"}),": Run full test suite, check coverage"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Days 7-8"}),": Load Testing and Performance Validation"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Run load tests against all 3 plugins"}),"\n",(0,i.jsx)(n.li,{children:"Measure latency P50/P99, throughput"}),"\n",(0,i.jsx)(n.li,{children:"Identify bottlenecks"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Days 9-10"}),": Build Optimization and Documentation"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Optimize Docker builds (static linking)"}),"\n",(0,i.jsx)(n.li,{children:"Measure image sizes"}),"\n",(0,i.jsx)(n.li,{children:"Document coverage results"}),"\n",(0,i.jsx)(n.li,{children:"Final testing"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"success-criteria",children:"Success Criteria"}),"\n",(0,i.jsx)(n.h3,{id:"functional-requirements",children:"Functional Requirements"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Requirement"}),(0,i.jsx)(n.th,{children:"Test"}),(0,i.jsx)(n.th,{children:"Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MemStore Set/Get works"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestKeyValueStore_SetGet"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MemStore TTL expiration"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestKeyValueStore_TTL"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Redis Set/Get works"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisClient_SetGet"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Redis Scan works"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestRedisClient_Scan"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Kafka Publish/Subscribe"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"TestKafkaProducer_Publish"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Proxy forwards to plugins"}),(0,i.jsx)(n.td,{children:"Integration test"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Load tester generates load"}),(0,i.jsx)(n.td,{children:"Manual test"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"code-coverage-requirements",children:"Code Coverage Requirements"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Coverage Target"}),(0,i.jsx)(n.th,{children:"Actual"}),(0,i.jsx)(n.th,{children:"Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Core SDK"}),(0,i.jsx)(n.td,{children:"85%+"}),(0,i.jsx)(n.td,{children:"TBD"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MemStore Plugin"}),(0,i.jsx)(n.td,{children:"85%+"}),(0,i.jsx)(n.td,{children:"TBD"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Redis Plugin"}),(0,i.jsx)(n.td,{children:"80%+"}),(0,i.jsx)(n.td,{children:"TBD"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Kafka Plugin"}),(0,i.jsx)(n.td,{children:"80%+"}),(0,i.jsx)(n.td,{children:"TBD"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Proxy"}),(0,i.jsx)(n.td,{children:"N/A (Rust, basic tests)"}),(0,i.jsx)(n.td,{children:"N/A"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Coverage Enforcement"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/ci.yml\n- name: Check coverage\n  run: |\n    make coverage-all\n    # Fail if any component < target\n    cd plugins/core && go test -coverprofile=coverage.out ./...\n    COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')\n    if (( $(echo \"$COVERAGE < 85\" | bc -l) )); then\n      echo \"Core SDK coverage ${COVERAGE}% < 85%\"\n      exit 1\n    fi\n"})}),"\n",(0,i.jsx)(n.h3,{id:"non-functional-requirements",children:"Non-Functional Requirements"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Requirement"}),(0,i.jsx)(n.th,{children:"Target"}),(0,i.jsx)(n.th,{children:"Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MemStore latency P99"}),(0,i.jsx)(n.td,{children:"<1ms"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Redis latency P99"}),(0,i.jsx)(n.td,{children:"<5ms"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Kafka latency P99"}),(0,i.jsx)(n.td,{children:"<10ms"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MemStore image size"}),(0,i.jsx)(n.td,{children:"<3MB"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Redis image size"}),(0,i.jsx)(n.td,{children:"<5MB"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Kafka image size"}),(0,i.jsx)(n.td,{children:"<8MB"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Load tester throughput"}),(0,i.jsx)(n.td,{children:">10k req/s"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"All tests pass"}),(0,i.jsx)(n.td,{children:"100%"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"deliverables-checklist",children:"Deliverables Checklist"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Protobuf interfaces defined and code generated"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Core Pattern SDK skeleton with 85%+ coverage"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," MemStore pattern with 85%+ coverage"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Redis pattern with 80%+ coverage"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Kafka pattern with 80%+ coverage"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Rust proxy with basic integration tests"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Load testing tool (prism-load)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Optimized Docker builds (<10MB per pattern)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Makefile with proto, build, test, coverage targets"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," CI/CD with coverage enforcement"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Performance benchmark results documented"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"tdd-workflow-summary",children:"TDD Workflow Summary"}),"\n",(0,i.jsx)(n.h3,{id:"development-cycle-per-feature",children:"Development Cycle (Per Feature)"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Write Test First"})," (Red Phase)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Define test case for new feature"}),"\n",(0,i.jsx)(n.li,{children:"Run test (should fail - no implementation yet)"}),"\n",(0,i.jsxs)(n.li,{children:['Commit: "Add failing test for ',(0,i.jsx)(n.feature,{children:'"'})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Implement Minimal Code"})," (Green Phase)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Write simplest code to make test pass"}),"\n",(0,i.jsx)(n.li,{children:"Run test (should pass)"}),"\n",(0,i.jsxs)(n.li,{children:['Commit: "Implement ',(0,i.jsx)(n.feature,{children:' to pass tests"'})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Refactor"})," (Refactor Phase)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Improve code quality"}),"\n",(0,i.jsx)(n.li,{children:"Run tests (should still pass)"}),"\n",(0,i.jsxs)(n.li,{children:['Commit: "Refactor ',(0,i.jsx)(n.feature,{children:' for clarity"'})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Check Coverage"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Run ",(0,i.jsx)(n.code,{children:"make coverage-<component>"})]}),"\n",(0,i.jsx)(n.li,{children:"Ensure coverage meets target"}),"\n",(0,i.jsx)(n.li,{children:"Add tests if coverage gaps found"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Commit Coverage Report"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Include coverage percentage in commit message"}),"\n",(0,i.jsx)(n.li,{children:'Example: "Implement KeyValue storage (coverage: 87%)"'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"coverage-reporting-in-ci",children:"Coverage Reporting in CI"}),"\n",(0,i.jsx)(n.p,{children:"Every PR must include coverage report:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-markdown",children:"## Coverage Report\n\n| Component | Coverage | Change |\n|-----------|----------|--------|\n| Core SDK | 87.3% | +2.1% |\n| MemStore | 89.1% | +3.4% |\n| Redis | 82.5% | +1.8% |\n\nAll components meet target coverage (80%+).\n"})}),"\n",(0,i.jsx)(n.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-018",children:"RFC-018: POC Implementation Strategy"})," - Overall POC roadmap"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-022",children:"RFC-022: Core Pattern SDK Code Layout"})," - SDK structure and build system"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-015",children:"RFC-015: Plugin Acceptance Test Framework"})," - Interface-based testing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/memos/memo-006",children:"MEMO-006: Backend Interface Decomposition"})," - Interface design"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:'2025-10-11: Updated terminology from "Plugin SDK" to "Pattern SDK" for consistency with RFC-022'}),"\n",(0,i.jsx)(n.li,{children:"2025-10-09: Complete rewrite based on user feedback - 3 minimal patterns, SDK skeleton, load tester, optimized builds, TDD workflow"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);