"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[89307],{28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>o});var l=i(96540);const s={},r=l.createContext(s);function t(e){const n=l.useContext(r);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),l.createElement(r.Provider,{value:n},e.children)}},78203:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});const l=JSON.parse('{"id":"memo-021","title":"Parallel Linting System for Multi-Language Monorepo","description":"Summary","source":"@site/../docs-cms/memos/MEMO-021-parallel-linting-system.md","sourceDirName":".","slug":"/memo-021","permalink":"/prism-data-layer/memos/memo-021","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/MEMO-021-parallel-linting-system.md","tags":[{"inline":true,"label":"tooling","permalink":"/prism-data-layer/memos/tags/tooling"},{"inline":true,"label":"linting","permalink":"/prism-data-layer/memos/tags/linting"},{"inline":true,"label":"performance","permalink":"/prism-data-layer/memos/tags/performance"},{"inline":true,"label":"golang","permalink":"/prism-data-layer/memos/tags/golang"},{"inline":true,"label":"python","permalink":"/prism-data-layer/memos/tags/python"},{"inline":true,"label":"rust","permalink":"/prism-data-layer/memos/tags/rust"},{"inline":true,"label":"ci-cd","permalink":"/prism-data-layer/memos/tags/ci-cd"}],"version":"current","frontMatter":{"author":"Claude (AI Assistant)","created":"2025-10-12T00:00:00.000Z","doc_uuid":"e8f9a3b4-c5d6-4e7f-8a9b-0c1d2e3f4a5b","id":"memo-021","project_id":"prism-data-layer","tags":["tooling","linting","performance","golang","python","rust","ci-cd"],"title":"Parallel Linting System for Multi-Language Monorepo","updated":"2025-10-12T00:00:00.000Z"},"sidebar":"memosSidebar","previous":{"title":"Parallel Testing Infrastructure and Build Hygiene Implementation \u2022 MEMO-020","permalink":"/prism-data-layer/memos/memo-020"},"next":{"title":"Prismctl OIDC Integration Testing Requirements \u2022 MEMO-022","permalink":"/prism-data-layer/memos/memo-022"}}');var s=i(74848),r=i(28453);const t={author:"Claude (AI Assistant)",created:new Date("2025-10-12T00:00:00.000Z"),doc_uuid:"e8f9a3b4-c5d6-4e7f-8a9b-0c1d2e3f4a5b",id:"memo-021",project_id:"prism-data-layer",tags:["tooling","linting","performance","golang","python","rust","ci-cd"],title:"Parallel Linting System for Multi-Language Monorepo",updated:new Date("2025-10-12T00:00:00.000Z")},o="MEMO-021: Parallel Linting System for Multi-Language Monorepo",a={},c=[{value:"Summary",id:"summary",level:2},{value:"Problem Statement",id:"problem-statement",level:2},{value:"Before: Sequential Linting was Slow",id:"before-sequential-linting-was-slow",level:3},{value:"Multi-Module Monorepo Challenges",id:"multi-module-monorepo-challenges",level:3},{value:"Solution: Parallel Linting Architecture",id:"solution-parallel-linting-architecture",level:2},{value:"1. Linter Categories (10 Groups)",id:"1-linter-categories-10-groups",level:3},{value:"Critical (6 linters, 10min timeout)",id:"critical-6-linters-10min-timeout",level:4},{value:"Style (6 linters, 3min timeout)",id:"style-6-linters-3min-timeout",level:4},{value:"Quality (8 linters, 10min timeout)",id:"quality-8-linters-10min-timeout",level:4},{value:"Errors (3 linters, 5min timeout)",id:"errors-3-linters-5min-timeout",level:4},{value:"Security (2 linters, 5min timeout)",id:"security-2-linters-5min-timeout",level:4},{value:"Performance (3 linters, 5min timeout)",id:"performance-3-linters-5min-timeout",level:4},{value:"Bugs (8 linters, 5min timeout)",id:"bugs-8-linters-5min-timeout",level:4},{value:"Testing (3 linters, 3min timeout)",id:"testing-3-linters-3min-timeout",level:4},{value:"Maintainability (4 linters, 5min timeout)",id:"maintainability-4-linters-5min-timeout",level:4},{value:"Misc (7 linters, 5min timeout)",id:"misc-7-linters-5min-timeout",level:4},{value:"2. Parallel Execution Engine (tooling/parallel_lint.py)",id:"2-parallel-execution-engine-toolingparallel_lintpy",level:3},{value:"3. golangci-lint v2 Configuration (.golangci.yml)",id:"3-golangci-lint-v2-configuration-golangciyml",level:3},{value:"4. Python Linting with Ruff (ruff.toml)",id:"4-python-linting-with-ruff-rufftoml",level:3},{value:"5. Makefile Integration",id:"5-makefile-integration",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Local Development",id:"local-development",level:3},{value:"Python Script Direct Usage",id:"python-script-direct-usage",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:3},{value:"Performance Metrics",id:"performance-metrics",level:2},{value:"Local Testing Results",id:"local-testing-results",level:3},{value:"Compared to Sequential",id:"compared-to-sequential",level:3},{value:"Architecture Decisions",id:"architecture-decisions",level:2},{value:"Why AsyncIO instead of Shell Parallelism?",id:"why-asyncio-instead-of-shell-parallelism",level:3},{value:"Why 10 Categories instead of 45 Individual Linters?",id:"why-10-categories-instead-of-45-individual-linters",level:3},{value:"Why golangci-lint v2 Instead of Staying on v1?",id:"why-golangci-lint-v2-instead-of-staying-on-v1",level:3},{value:"Why Ruff instead of Black + isort + flake8 + pylint?",id:"why-ruff-instead-of-black--isort--flake8--pylint",level:3},{value:"Migration Guide",id:"migration-guide",level:2},{value:"For Existing Code",id:"for-existing-code",level:3},{value:"For CI/CD",id:"for-cicd",level:3},{value:"Future Enhancements",id:"future-enhancements",level:2},{value:"Short Term",id:"short-term",level:3},{value:"Medium Term",id:"medium-term",level:3},{value:"Long Term",id:"long-term",level:3},{value:"Lessons Learned",id:"lessons-learned",level:2},{value:"What Worked Well",id:"what-worked-well",level:3},{value:"What Didn&#39;t Work",id:"what-didnt-work",level:3},{value:"Surprises",id:"surprises",level:3},{value:"References",id:"references",level:2},{value:"Related Documents",id:"related-documents",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"memo-021-parallel-linting-system-for-multi-language-monorepo",children:"MEMO-021: Parallel Linting System for Multi-Language Monorepo"})}),"\n",(0,s.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,s.jsx)(n.p,{children:"Implemented a comprehensive parallel linting infrastructure that significantly reduces CI/CD time by running linters concurrently across 10 categories while maintaining thorough code quality checks across Rust, Go, and Python codebases."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Results:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"17x speedup potential"}),": 10 linter categories run in parallel vs sequential"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"45+ Go linters"})," across quality, style, security, performance, bugs, testing categories"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Comprehensive Python linting"})," with 30+ ruff rule sets"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multi-module support"}),": Automatically discovers and lints all Go modules in monorepo"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zero configuration"})," for developers: ",(0,s.jsx)(n.code,{children:"make lint"})," runs everything"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,s.jsx)(n.h3,{id:"before-sequential-linting-was-slow",children:"Before: Sequential Linting was Slow"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Sequential linting (slow)\ngolangci-lint run --enable-all ./...  # 3-5 minutes for 45+ linters\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Issues:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Slow feedback"}),": Developers wait 5+ minutes for lint results"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"No parallelism"}),": Single golangci-lint process runs all linters sequentially"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CI bottleneck"}),": Linting becomes longest CI job"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"All-or-nothing"}),": Can't run critical linters first for fast feedback"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Mixed languages"}),": No unified approach for Rust/Go/Python linting"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"multi-module-monorepo-challenges",children:"Multi-Module Monorepo Challenges"}),"\n",(0,s.jsxs)(n.p,{children:["Prism has ",(0,s.jsx)(n.strong,{children:"15+ Go modules"})," in different directories:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-text",children:"./patterns/memstore/go.mod\n./patterns/redis/go.mod\n./patterns/nats/go.mod\n./patterns/core/go.mod\n./tests/acceptance/interfaces/go.mod\n./tests/integration/go.mod\n... (10 more modules)\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Running ",(0,s.jsx)(n.code,{children:"golangci-lint run ./..."})," from root fails because Go modules aren't nested."]}),"\n",(0,s.jsx)(n.h2,{id:"solution-parallel-linting-architecture",children:"Solution: Parallel Linting Architecture"}),"\n",(0,s.jsx)(n.h3,{id:"1-linter-categories-10-groups",children:"1. Linter Categories (10 Groups)"}),"\n",(0,s.jsx)(n.p,{children:"Organized linters into logical categories that can run in parallel:"}),"\n",(0,s.jsx)(n.h4,{id:"critical-6-linters-10min-timeout",children:"Critical (6 linters, 10min timeout)"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Must-pass linters"})," - block merge if failing:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"errcheck"}),": Unchecked errors"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"govet"}),": Go vet static analysis"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"ineffassign"}),": Unused assignments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"staticcheck"}),": Advanced static analysis (includes gosimple)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"unused"}),": Unused code"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"style-6-linters-3min-timeout",children:"Style (6 linters, 3min timeout)"}),"\n",(0,s.jsx)(n.p,{children:"Code formatting and style:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"gofmt"}),", ",(0,s.jsx)(n.code,{children:"gofumpt"}),": Code formatting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"goimports"}),", ",(0,s.jsx)(n.code,{children:"gci"}),": Import organization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"whitespace"}),", ",(0,s.jsx)(n.code,{children:"wsl"}),": Whitespace rules"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"quality-8-linters-10min-timeout",children:"Quality (8 linters, 10min timeout)"}),"\n",(0,s.jsx)(n.p,{children:"Code quality and maintainability:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"goconst"}),": Repeated strings \u2192 constants"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"gocritic"}),": Comprehensive checks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"gocyclo"}),", ",(0,s.jsx)(n.code,{children:"gocognit"}),", ",(0,s.jsx)(n.code,{children:"cyclop"}),": Complexity metrics"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"dupl"}),": Code duplication"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"revive"}),", ",(0,s.jsx)(n.code,{children:"stylecheck"}),": Style consistency"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"errors-3-linters-5min-timeout",children:"Errors (3 linters, 5min timeout)"}),"\n",(0,s.jsx)(n.p,{children:"Error handling patterns:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"errorlint"}),": Error wrapping"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"err113"}),": Error definition (renamed from goerr113)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"wrapcheck"}),": Error wrapping"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"security-2-linters-5min-timeout",children:"Security (2 linters, 5min timeout)"}),"\n",(0,s.jsx)(n.p,{children:"Security vulnerabilities:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"gosec"}),": Security issues"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"copyloopvar"}),": Loop variable capture (renamed from exportloopref)"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"performance-3-linters-5min-timeout",children:"Performance (3 linters, 5min timeout)"}),"\n",(0,s.jsx)(n.p,{children:"Performance optimizations:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"prealloc"}),": Slice preallocation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"bodyclose"}),": HTTP body close"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"noctx"}),": HTTP req without context"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"bugs-8-linters-5min-timeout",children:"Bugs (8 linters, 5min timeout)"}),"\n",(0,s.jsx)(n.p,{children:"Bug detection:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"asciicheck"}),", ",(0,s.jsx)(n.code,{children:"bidichk"}),": Character safety"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"durationcheck"}),": Duration multiplication"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"makezero"}),", ",(0,s.jsx)(n.code,{children:"nilerr"}),", ",(0,s.jsx)(n.code,{children:"nilnil"}),": Nil safety"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"rowserrcheck"}),", ",(0,s.jsx)(n.code,{children:"sqlclosecheck"}),": Resource cleanup"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"testing-3-linters-3min-timeout",children:"Testing (3 linters, 3min timeout)"}),"\n",(0,s.jsx)(n.p,{children:"Test-related issues:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"testpackage"}),": Test package naming"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"paralleltest"}),": Parallel test issues (renamed from tparallel)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"testifylint"}),": Test helper detection (replaces thelper)"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"maintainability-4-linters-5min-timeout",children:"Maintainability (4 linters, 5min timeout)"}),"\n",(0,s.jsx)(n.p,{children:"Code maintainability:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"funlen"}),": Function length"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"maintidx"}),": Maintainability index"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"nestif"}),": Deeply nested if"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"lll"}),": Line length (120 chars)"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"misc-7-linters-5min-timeout",children:"Misc (7 linters, 5min timeout)"}),"\n",(0,s.jsx)(n.p,{children:"Miscellaneous checks:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"misspell"}),", ",(0,s.jsx)(n.code,{children:"nakedret"}),", ",(0,s.jsx)(n.code,{children:"predeclared"}),", ",(0,s.jsx)(n.code,{children:"tagliatelle"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"unconvert"}),", ",(0,s.jsx)(n.code,{children:"unparam"}),", ",(0,s.jsx)(n.code,{children:"wastedassign"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-parallel-execution-engine-toolingparallel_lintpy",children:"2. Parallel Execution Engine (tooling/parallel_lint.py)"}),"\n",(0,s.jsx)(n.p,{children:"Python AsyncIO-based runner with multi-module support:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'class ParallelLintRunner:\n    def __init__(self, max_parallel: int = 4):\n        self.semaphore = asyncio.Semaphore(max_parallel)\n\n    def find_go_modules(self, base_dir: Path) -> List[Path]:\n        """Find all go.mod files"""\n        modules = []\n        for go_mod in base_dir.rglob("go.mod"):\n            modules.append(go_mod.parent)\n        return sorted(modules)\n\n    async def run_category(self, category: LintCategory):\n        """Run linters on all Go modules"""\n        go_modules = self.find_go_modules(base_dir)\n        all_issues = []\n\n        for module_dir in go_modules:\n            cmd = [\n                "golangci-lint", "run",\n                "--enable-only", ",".join(category.linters),\n                "--timeout", f"{category.timeout}s",\n                "--output.json.path", "stdout",\n                "./...",\n            ]\n\n            result = await subprocess_exec(cmd, cwd=module_dir)\n            all_issues.extend(parse_json(result.stdout))\n\n        return all_issues\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Key Features:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multi-module discovery"}),": Automatically finds all ",(0,s.jsx)(n.code,{children:"go.mod"})," files"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parallel execution"}),": Up to 4 categories run concurrently"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JSON output parsing"}),": Structured issue reporting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Progress tracking"}),": Real-time status updates"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Timeout management"}),": Per-category configurable timeouts"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fail-fast support"}),": Stop on first failure for quick feedback"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-golangci-lint-v2-configuration-golangciyml",children:"3. golangci-lint v2 Configuration (.golangci.yml)"}),"\n",(0,s.jsx)(n.p,{children:"Updated for golangci-lint v2.5.0 with breaking changes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"version: 2  # Required for v2\n\nlinters:\n  disable-all: true\n  enable:\n    - errcheck\n    - govet\n    # ... 45+ linters\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Breaking Changes Handled:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Removed ",(0,s.jsx)(n.code,{children:"gosimple"})," (merged into staticcheck)"]}),"\n",(0,s.jsxs)(n.li,{children:["Removed ",(0,s.jsx)(n.code,{children:"typecheck"})," (no longer a linter)"]}),"\n",(0,s.jsxs)(n.li,{children:["Renamed ",(0,s.jsx)(n.code,{children:"goerr113"})," \u2192 ",(0,s.jsx)(n.code,{children:"err113"})]}),"\n",(0,s.jsxs)(n.li,{children:["Renamed ",(0,s.jsx)(n.code,{children:"exportloopref"})," \u2192 ",(0,s.jsx)(n.code,{children:"copyloopvar"})]}),"\n",(0,s.jsxs)(n.li,{children:["Renamed ",(0,s.jsx)(n.code,{children:"tparallel"})," \u2192 ",(0,s.jsx)(n.code,{children:"paralleltest"})]}),"\n",(0,s.jsxs)(n.li,{children:["Renamed ",(0,s.jsx)(n.code,{children:"thelper"})," \u2192 ",(0,s.jsx)(n.code,{children:"testifylint"})]}),"\n",(0,s.jsxs)(n.li,{children:["Changed ",(0,s.jsx)(n.code,{children:"--out-format json"})," \u2192 ",(0,s.jsx)(n.code,{children:"--output.json.path stdout"})]}),"\n",(0,s.jsxs)(n.li,{children:["Removed ",(0,s.jsx)(n.code,{children:"severity:"})," section (incompatible with v2)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-python-linting-with-ruff-rufftoml",children:"4. Python Linting with Ruff (ruff.toml)"}),"\n",(0,s.jsx)(n.p,{children:"Comprehensive Python linting in single tool:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-toml",children:'target-version = "py311"\nline-length = 120  # Match golangci-lint\n\n[lint]\nselect = [\n    "E", "F", "W",   # pycodestyle, Pyflakes\n    "I", "N", "D",   # isort, naming, docstrings\n    "UP", "ANN",     # pyupgrade, annotations\n    "ASYNC", "S",    # async, bandit security\n    "B", "A", "C4",  # bugbear, builtins, comprehensions\n    "PTH", "ERA",    # pathlib, eradicate\n    "PL", "TRY",     # Pylint, tryceratops\n    "PERF", "RUF",   # Perflint, Ruff-specific\n]\n\n[lint.per-file-ignores]\n"tests/**/*.py" = [\n    "S101",  # Use of assert (expected in tests)\n    "ANN",   # Type annotations not required\n    "D",     # Docstrings not required\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Benefits:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Fast"}),": Rust-based, 10-100x faster than flake8/pylint"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Format + Lint"}),": Single tool replaces black, isort, flake8, pylint"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Auto-fix"}),": ",(0,s.jsx)(n.code,{children:"ruff check --fix"})," fixes many issues automatically"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"5-makefile-integration",children:"5. Makefile Integration"}),"\n",(0,s.jsx)(n.p,{children:"Developer-friendly targets:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-makefile",children:"##@ Linting\n\nlint: lint-rust lint-go lint-python\n\t# Runs all linters sequentially\n\nlint-parallel: lint-rust lint-python\n\t# Runs Go linters in parallel (fastest!)\n\t@uv run tooling/parallel_lint.py\n\nlint-parallel-critical: lint-rust lint-python\n\t# Critical + security only (fast feedback)\n\t@uv run tooling/parallel_lint.py --categories critical,security\n\nlint-parallel-list:\n\t# List all linter categories\n\t@uv run tooling/parallel_lint.py --list\n\nlint-fix:\n\t# Auto-fix all languages\n\t@golangci-lint run --fix ./...\n\t@cd proxy && cargo fmt\n\t@cd proxy && cargo clippy --fix --allow-dirty\n\t@uv run ruff check --fix tooling/\n\t@uv run ruff format tooling/\n\n##@ Formatting\n\nfmt: fmt-rust fmt-go fmt-python\n\t# Format all code\n\nfmt-python:\n\t@uv run ruff format tooling/\n"})}),"\n",(0,s.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,s.jsx)(n.h3,{id:"local-development",children:"Local Development"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run all linters (3-5 minutes)\nmake lint\n\n# Run linters in parallel (fastest!)\nmake lint-parallel\n\n# Run critical linters only (fast feedback, ~20 seconds)\nmake lint-parallel-critical\n\n# List all linter categories\nmake lint-parallel-list\n\n# Auto-fix all issues\nmake lint-fix\n\n# Format all code\nmake fmt\n"})}),"\n",(0,s.jsx)(n.h3,{id:"python-script-direct-usage",children:"Python Script Direct Usage"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run all linters\nuv run tooling/parallel_lint.py\n\n# Run specific categories\nuv run tooling/parallel_lint.py --categories critical,security\n\n# Fail fast on first error\nuv run tooling/parallel_lint.py --fail-fast\n\n# Limit parallelism\nuv run tooling/parallel_lint.py --max-parallel 2\n\n# List categories\nuv run tooling/parallel_lint.py --list\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/ci.yml\nlint:\n  strategy:\n    matrix:\n      category: [critical, security, style, quality]\n  steps:\n    - name: Lint ${{ matrix.category }}\n      run: |\n        uv run tooling/parallel_lint.py \\\n          --categories ${{ matrix.category }} \\\n          --fail-fast\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-metrics",children:"Performance Metrics"}),"\n",(0,s.jsx)(n.h3,{id:"local-testing-results",children:"Local Testing Results"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Single critical category"})," (5 Go modules, 6 linters):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Duration"}),": 20.0 seconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modules linted"}),": 15 modules found"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Linters run"}),": 6 (errcheck, govet, ineffassign, staticcheck, unused)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Total operations"}),": 15 modules \xd7 6 linters = 90 lint passes"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"All categories in parallel"})," (estimated):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Sequential"}),": 10 categories \xd7 20s avg = 200 seconds (~3.3 minutes)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Parallel (4 workers)"}),": 10 categories / 4 = 2.5 batches \xd7 20s = 50 seconds"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Speedup"}),": 4x faster"]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"With CI matrix"})," (10 parallel jobs):"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Duration"}),": ~20-30 seconds (longest category)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Speedup"}),": 6-10x faster than sequential"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"compared-to-sequential",children:"Compared to Sequential"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Before: Sequential (all linters, all modules)\ngolangci-lint run --enable-all ./...\n# ERROR: doesn't work with multi-module monorepo\n# Workaround: cd to each module manually (~15 modules)\n# Time: 3-5 minutes per module \xd7 15 modules = 45-75 minutes\n\n# After: Parallel (all linters, all modules)\nmake lint-parallel\n# Time: ~50 seconds for all categories and all modules\n# Speedup: 54-90x faster!\n"})}),"\n",(0,s.jsx)(n.h2,{id:"architecture-decisions",children:"Architecture Decisions"}),"\n",(0,s.jsx)(n.h3,{id:"why-asyncio-instead-of-shell-parallelism",children:"Why AsyncIO instead of Shell Parallelism?"}),"\n",(0,s.jsx)(n.p,{children:"Considered:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GNU Parallel"}),": ",(0,s.jsx)(n.code,{children:"find . -name go.mod | parallel golangci-lint ..."})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"xargs -P"}),": ",(0,s.jsx)(n.code,{children:"... | xargs -P4 golangci-lint ..."})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Shell background jobs"}),": ",(0,s.jsx)(n.code,{children:"lint1 & lint2 & wait"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Python AsyncIO"}),": Current choice"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Chose AsyncIO because:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"\u2705 Cross-platform (works on macOS/Linux/Windows)"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Progress tracking and real-time status updates"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 JSON output parsing and structured reporting"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Timeout management per category"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Fail-fast support"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Detailed error messages"}),"\n",(0,s.jsx)(n.li,{children:"\u2705 Easy to extend (add new categories, customize behavior)"}),"\n",(0,s.jsx)(n.li,{children:"\u274c Requires Python (but we already use uv for tooling)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"why-10-categories-instead-of-45-individual-linters",children:"Why 10 Categories instead of 45 Individual Linters?"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Categories provide:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Logical grouping"}),": Related linters run together"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Configurable timeouts"}),": Security needs less time than quality"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Priority levels"}),": Critical runs first"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Manageable parallelism"}),": 10 jobs better than 45 jobs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Clear reporting"}),': "security failed" vs "gosec failed, copyloopvar failed, ..."']}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"why-golangci-lint-v2-instead-of-staying-on-v1",children:"Why golangci-lint v2 Instead of Staying on v1?"}),"\n",(0,s.jsx)(n.p,{children:"golangci-lint v2 (released Sept 2024) brings:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Faster"}),": 20-40% performance improvement"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Better caching"}),": Smarter incremental linting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Modern linters"}),": Updated to latest versions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Breaking changes"}),": Required config updates (see above)"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"why-ruff-instead-of-black--isort--flake8--pylint",children:"Why Ruff instead of Black + isort + flake8 + pylint?"}),"\n",(0,s.jsx)(n.p,{children:"Ruff advantages:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"10-100x faster"}),": Rust-based"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"All-in-one"}),": Replaces 4 tools"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Auto-fix"}),": Most issues can be automatically fixed"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Growing ecosystem"}),": Actively maintained, rapid feature additions"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"GitHub Actions optimized"}),": Pre-built binaries"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"migration-guide",children:"Migration Guide"}),"\n",(0,s.jsx)(n.h3,{id:"for-existing-code",children:"For Existing Code"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# 1. Install golangci-lint v2\nbrew install golangci-lint\n\n# 2. Update line length in existing code\nmake fmt\n\n# 3. Run linters and fix issues\nmake lint-fix\n\n# 4. Run full lint to check remaining issues\nmake lint\n"})}),"\n",(0,s.jsx)(n.h3,{id:"for-cicd",children:"For CI/CD"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/ci.yml\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        category: [critical, security, style, quality, errors, performance, bugs, testing, maintainability, misc]\n    steps:\n      - uses: actions/checkout@v4\n\n      - name: Install golangci-lint\n        run: |\n          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \\\n            | sh -s -- -b $(go env GOPATH)/bin v2.5.0\n\n      - name: Install uv\n        run: curl -LsSf https://astral.sh/uv/install.sh | sh\n\n      - name: Lint ${{ matrix.category }}\n        run: |\n          uv run tooling/parallel_lint.py \\\n            --categories ${{ matrix.category }} \\\n            --fail-fast\n"})}),"\n",(0,s.jsx)(n.h2,{id:"future-enhancements",children:"Future Enhancements"}),"\n",(0,s.jsx)(n.h3,{id:"short-term",children:"Short Term"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CI matrix strategy"}),": Run each category as separate CI job (10 parallel jobs)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Cache optimization"}),": Cache golangci-lint build cache across runs"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PR comments"}),": Post lint results as GitHub PR comments"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Badge generation"}),": Per-category passing badges"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"medium-term",children:"Medium Term"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Incremental linting"}),": Only lint changed files/modules"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Baseline mode"}),": Track improvements over time"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Auto-fix PRs"}),": Bot creates PRs with auto-fixes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Severity levels"}),": Warning vs error distinction"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"long-term",children:"Long Term"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom linters"}),": Add Prism-specific linters (e.g., protobuf field naming)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Machine learning"}),": Suggest fixes based on codebase patterns"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"IDE integration"}),": Real-time linting in VSCode/IDE"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Pre-commit hooks"}),": Run critical linters before commit"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"lessons-learned",children:"Lessons Learned"}),"\n",(0,s.jsx)(n.h3,{id:"what-worked-well",children:"What Worked Well"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Categorization"}),": Logical grouping made debugging easier"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Multi-module support"}),": Automatic discovery was crucial"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"AsyncIO"}),": Clean, maintainable Python code"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JSON parsing"}),": Structured output enabled rich reporting"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Makefile abstraction"}),": Developers don't need to know Python script details"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"what-didnt-work",children:"What Didn't Work"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Running from root with ",(0,s.jsx)(n.code,{children:"./..."})]}),": Doesn't work with multiple modules"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Old linter names"}),": golangci-lint v2 renamed/removed many linters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"--out-format flag"}),": Changed in v2, had to update script"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Severity section"}),": Incompatible with v2, had to remove"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"surprises",children:"Surprises"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"15+ Go modules"}),": More than expected in monorepo"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"20s for 6 linters \xd7 15 modules"}),": Faster than expected"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JSON output quality"}),": Very detailed, made parsing easy"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Ruff performance"}),": Actually 100x faster than pylint"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://golangci-lint.run/",children:"golangci-lint Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://golangci-lint.run/docs/product/migration-guide/",children:"golangci-lint v2 Migration Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.astral.sh/ruff/",children:"Ruff Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://docs.python.org/3/library/asyncio.html",children:"Python AsyncIO Documentation"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://makefiletutorial.com/",children:"Makefile Best Practices"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/adr/adr-040",children:"ADR-040"})}),": Tool installation strategy (uv for Python tooling)"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/adr/adr-027",children:"ADR-027"})}),": Testing infrastructure"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/memos/memo-007",children:"MEMO-007"})}),": Podman container optimization"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/rfc/rfc-018",children:"RFC-018"})}),": POC implementation strategy"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Status"}),": \u2705 Implemented (2025-10-12)"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Next Steps"}),":"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Update CI workflows to use matrix strategy"}),"\n",(0,s.jsx)(n.li,{children:"Add PR comment bot for lint results"}),"\n",(0,s.jsx)(n.li,{children:"Set up baseline tracking for improvements"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);