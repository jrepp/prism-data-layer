"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[5768],{1880:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"index","title":"Request for Comments (RFCs)","description":"RFCs are detailed technical specifications for major features and architectural components in Prism. Each RFC provides comprehensive design documentation, implementation guidelines, and rationale for significant system changes.","source":"@site/../docs-cms/rfcs/index.md","sourceDirName":".","slug":"/","permalink":"/prism-data-layer/rfc/","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/index.md","tags":[],"version":"current","frontMatter":{"title":"Request for Comments (RFCs)","slug":"/"},"sidebar":"rfcSidebar","previous":{"title":"RFC-008 Plugin Architecture","permalink":"/prism-data-layer/rfc/rfc-008"}}');var s=n(4848),t=n(8453);const a={title:"Request for Comments (RFCs)",slug:"/"},c="Request for Comments (RFCs)",o={},d=[{value:"Purpose",id:"purpose",level:2},{value:"RFC Process",id:"rfc-process",level:2},{value:"Active RFCs",id:"active-rfcs",level:2},{value:"RFC-001: Prism Data Access Layer Architecture",id:"rfc-001-prism-data-access-layer-architecture",level:3},{value:"RFC-002: Data Layer Interface Specification",id:"rfc-002-data-layer-interface-specification",level:3},{value:"RFC-003: Admin Interface for Prism",id:"rfc-003-admin-interface-for-prism",level:3},{value:"RFC-004: Redis Integration",id:"rfc-004-redis-integration",level:3},{value:"RFC-005: ClickHouse Integration for Time Series",id:"rfc-005-clickhouse-integration-for-time-series",level:3},{value:"RFC-006: Python Admin CLI",id:"rfc-006-python-admin-cli",level:3},{value:"RFC-007: Cache Strategies for Data Layer",id:"rfc-007-cache-strategies-for-data-layer",level:3},{value:"RFC-008: Proxy Plugin Architecture",id:"rfc-008-proxy-plugin-architecture",level:3},{value:"Writing RFCs",id:"writing-rfcs",level:2}];function l(e){const r={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"request-for-comments-rfcs",children:"Request for Comments (RFCs)"})}),"\n",(0,s.jsx)(r.p,{children:"RFCs are detailed technical specifications for major features and architectural components in Prism. Each RFC provides comprehensive design documentation, implementation guidelines, and rationale for significant system changes."}),"\n",(0,s.jsx)(r.h2,{id:"purpose",children:"Purpose"}),"\n",(0,s.jsx)(r.p,{children:"RFCs serve to:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Define complete technical specifications before implementation"}),"\n",(0,s.jsx)(r.li,{children:"Enable thorough review and feedback from stakeholders"}),"\n",(0,s.jsx)(r.li,{children:"Document design decisions and trade-offs"}),"\n",(0,s.jsx)(r.li,{children:"Provide implementation roadmaps for complex features"}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"rfc-process",children:"RFC Process"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Draft"}),": Initial specification written by author(s)"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Review"}),": Team discussion and feedback period"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Proposed"}),": Refined specification ready for approval"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Accepted"}),": Approved for implementation"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Implemented"}),": Feature completed and deployed"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"active-rfcs",children:"Active RFCs"}),"\n",(0,s.jsx)(r.h3,{id:"rfc-001-prism-data-access-layer-architecture",children:"RFC-001: Prism Data Access Layer Architecture"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status"}),": Draft\n",(0,s.jsx)(r.strong,{children:"Summary"}),": Complete architecture for Prism, defining the high-performance data access gateway with unified interface, dynamic configuration, and backend abstraction."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"./RFC-001-prism-architecture",children:"Read RFC-001 \u2192"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"rfc-002-data-layer-interface-specification",children:"RFC-002: Data Layer Interface Specification"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status"}),": Draft\n",(0,s.jsx)(r.strong,{children:"Summary"}),": Specifies the complete data layer interface including gRPC services, message formats, error handling, and client patterns for five core abstractions: Sessions, Queues, PubSub, Readers, and Transactions."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"./RFC-002-data-layer-interface",children:"Read RFC-002 \u2192"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"rfc-003-admin-interface-for-prism",children:"RFC-003: Admin Interface for Prism"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status"}),": Proposed\n",(0,s.jsx)(r.strong,{children:"Summary"}),": Administrative interface specification enabling operators to manage configurations, monitor sessions, view backend health, and perform operational tasks with both gRPC API and browser-based UI."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"./RFC-003-admin-interface",children:"Read RFC-003 \u2192"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"rfc-004-redis-integration",children:"RFC-004: Redis Integration"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status"}),": Draft\n",(0,s.jsx)(r.strong,{children:"Summary"}),": Comprehensive Redis integration covering three distinct access patterns: Cache (HashMap operations), PubSub (broadcasting), and Vector Similarity Search for ML embeddings and semantic search."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"./RFC-004-redis-integration",children:"Read RFC-004 \u2192"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"rfc-005-clickhouse-integration-for-time-series",children:"RFC-005: ClickHouse Integration for Time Series"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status"}),": Draft\n",(0,s.jsx)(r.strong,{children:"Summary"}),": ClickHouse-backed time series analytics for OLAP workloads, supporting 1M+ events/sec ingestion with ReplicatedMergeTree engine, materialized views for pre-aggregations, and tiered storage with TTL."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"./RFC-005-clickhouse-integration",children:"Read RFC-005 \u2192"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"rfc-006-python-admin-cli",children:"RFC-006: Python Admin CLI"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status"}),": Draft\n",(0,s.jsx)(r.strong,{children:"Summary"}),": Python-based command-line interface for administering Prism, covering namespace management, backend health checks, session inspection, metrics, and shadow traffic management using Typer and Rich for excellent developer experience."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"./RFC-006-python-admin-cli",children:"Read RFC-006 \u2192"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"rfc-007-cache-strategies-for-data-layer",children:"RFC-007: Cache Strategies for Data Layer"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status"}),": Draft\n",(0,s.jsx)(r.strong,{children:"Summary"}),": Standardized cache strategies including look-aside (cache-aside) and write-through patterns for common use cases like table readers and object storage metadata, with configuration-driven behavior and observability."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"./RFC-007-cache-strategies",children:"Read RFC-007 \u2192"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"rfc-008-proxy-plugin-architecture",children:"RFC-008: Proxy Plugin Architecture"}),"\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"Status"}),": Draft\n",(0,s.jsx)(r.strong,{children:"Summary"}),": Architectural separation between minimal proxy core (networking, auth, config) and backend plugins (data-source-specific logic), enabling extensibility through in-process, sidecar, and remote plugin deployment models with secure channels."]}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"./RFC-008-proxy-plugin-architecture",children:"Read RFC-008 \u2192"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"writing-rfcs",children:"Writing RFCs"}),"\n",(0,s.jsx)(r.p,{children:"RFCs should include:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Abstract"}),": One-paragraph summary"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Motivation"}),": Why this change is needed"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Detailed Design"}),": Complete technical specification"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Implementation Plan"}),": Phases and milestones"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Alternatives Considered"}),": Other approaches and trade-offs"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Open Questions"}),": Unresolved issues for discussion"]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["For questions about the RFC process, see ",(0,s.jsx)(r.a,{href:"https://github.com/jrepp/prism-data-layer/blob/main/CLAUDE.md#requirements-process",children:"CLAUDE.md"})," in the repository root."]})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>c});var i=n(6540);const s={},t=i.createContext(s);function a(e){const r=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);