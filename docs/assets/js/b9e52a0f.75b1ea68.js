"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[4295],{28453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>l});var s=i(96540);const r={},a=s.createContext(r);function t(n){const e=s.useContext(a);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),s.createElement(a.Provider,{value:e},n.children)}},60881:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"adr-040","title":"Go Binary for Admin CLI (prismctl)","description":"Context","source":"@site/../docs-cms/adr/adr-040-go-binary-admin-cli.md","sourceDirName":".","slug":"/adr-040","permalink":"/prism-data-layer/adr/adr-040","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-040-go-binary-admin-cli.md","tags":[{"inline":true,"label":"go","permalink":"/prism-data-layer/adr/tags/go"},{"inline":true,"label":"cli","permalink":"/prism-data-layer/adr/tags/cli"},{"inline":true,"label":"tooling","permalink":"/prism-data-layer/adr/tags/tooling"},{"inline":true,"label":"dx","permalink":"/prism-data-layer/adr/tags/dx"}],"version":"current","frontMatter":{"date":"2025-10-09T00:00:00.000Z","deciders":"Core Team","doc_uuid":"e9a89036-3214-4516-b580-bf805e2122fc","id":"adr-040","project_id":"prism-data-layer","status":"Accepted","tags":["go","cli","tooling","dx"],"title":"Go Binary for Admin CLI (prismctl)"},"sidebar":"adrSidebar","previous":{"title":"CLI Acceptance Testing with testscript \u2022 ADR-039","permalink":"/prism-data-layer/adr/adr-039"},"next":{"title":"Graph Database Backend Support \u2022 ADR-041","permalink":"/prism-data-layer/adr/adr-041"}}');var r=i(74848),a=i(28453);const t={date:new Date("2025-10-09T00:00:00.000Z"),deciders:"Core Team",doc_uuid:"e9a89036-3214-4516-b580-bf805e2122fc",id:"adr-040",project_id:"prism-data-layer",status:"Accepted",tags:["go","cli","tooling","dx"],title:"Go Binary for Admin CLI (prismctl)"},l=void 0,o={},c=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why Go is Ideal for Admin CLI",id:"why-go-is-ideal-for-admin-cli",level:3},{value:"1. Single Binary Distribution",id:"1-single-binary-distribution",level:4},{value:"2. Blazing Fast Startup",id:"2-blazing-fast-startup",level:4},{value:"3. Professional CLI Tooling",id:"3-professional-cli-tooling",level:4},{value:"4. Consistency with Backend Plugins",id:"4-consistency-with-backend-plugins",level:4},{value:"5. Cross-Platform Just Works",id:"5-cross-platform-just-works",level:4},{value:"6. Easy Distribution",id:"6-easy-distribution",level:4},{value:"7. No Runtime Dependencies",id:"7-no-runtime-dependencies",level:4},{value:"Implementation: prismctl",id:"implementation-prismctl",level:3}];function d(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(e.p,{children:"Prism needs an admin CLI for operators to manage namespaces, monitor health, and perform operational tasks. The CLI must be:"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Fast"}),": Sub-50ms startup time for responsive commands"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Portable"}),": Single binary, works everywhere, no runtime dependencies"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Simple"}),": Easy to install and distribute"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Professional"}),": Polished UX expected for infrastructure tooling"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Maintainable"}),": Consistent with backend plugin implementation"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsxs)(e.p,{children:["Build the admin CLI as a ",(0,r.jsx)(e.strong,{children:"Go binary"})," named ",(0,r.jsx)(e.strong,{children:(0,r.jsx)(e.code,{children:"prismctl"})}),", following patterns from successful CLIs like ",(0,r.jsx)(e.code,{children:"kubectl"}),", ",(0,r.jsx)(e.code,{children:"docker"}),", and ",(0,r.jsx)(e.code,{children:"gh"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Installation"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Download single binary\ncurl -LO https://github.com/prism/releases/download/v1.0.0/prismctl-$(uname -s)-$(uname -m)\nchmod +x prismctl-*\nmv prismctl-* /usr/local/bin/prismctl\n\n# Or via Go install\ngo install github.com/jrepp/prism-data-layer/tools/cmd/prismctl@latest\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Usage"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'prismctl namespace list\nprismctl namespace create my-app --description "My application"\nprismctl health\nprismctl session list\n'})}),"\n",(0,r.jsx)(e.h2,{id:"rationale",children:"Rationale"}),"\n",(0,r.jsx)(e.h3,{id:"why-go-is-ideal-for-admin-cli",children:"Why Go is Ideal for Admin CLI"}),"\n",(0,r.jsx)(e.h4,{id:"1-single-binary-distribution",children:"1. Single Binary Distribution"}),"\n",(0,r.jsxs)(e.p,{children:["Go produces a ",(0,r.jsx)(e.strong,{children:"single static binary"})," with no dependencies:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Build for multiple platforms\nGOOS=linux GOARCH=amd64 go build -o prismctl-linux-amd64\nGOOS=darwin GOARCH=arm64 go build -o prismctl-darwin-arm64\nGOOS=windows GOARCH=amd64 go build -o prismctl-windows-amd64.exe\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Binary size"}),": ~10-15MB (comparable to Python with dependencies)"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Advantages"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u2705 No Python interpreter required"}),"\n",(0,r.jsx)(e.li,{children:"\u2705 No virtual environment management"}),"\n",(0,r.jsx)(e.li,{children:"\u2705 Works on minimal systems (Alpine, BusyBox)"}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 Easy to containerize: ",(0,r.jsx)(e.code,{children:"FROM scratch"})," + binary"]}),"\n",(0,r.jsx)(e.li,{children:"\u2705 No PATH issues or version conflicts"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"2-blazing-fast-startup",children:"2. Blazing Fast Startup"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Performance comparison"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Go binary\n$ time prismctl --version\nprismctl version 1.0.0\nreal    0m0.012s  # 12ms\n\n# Python with uv run --with\n$ time uv run --with prismctl prism --version\nprismctl version 1.0.0\nreal    0m0.234s  # 234ms (20x slower)\n"})}),"\n",(0,r.jsx)(e.p,{children:"For admin operations, 220ms might not matter, but for scripting and automation, it adds up:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Loop 100 times\nfor i in {1..100}; do prismctl namespace list; done\n\n# Go: ~1.2s total (12ms each)\n# Python: ~23s total (230ms each)\n"})}),"\n",(0,r.jsx)(e.h4,{id:"3-professional-cli-tooling",children:"3. Professional CLI Tooling"}),"\n",(0,r.jsx)(e.p,{children:"Go has the best CLI ecosystem:"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Cobra + Viper"})," (used by Kubernetes, Docker, GitHub CLI):"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'var rootCmd = &cobra.Command{\n    Use:   "prismctl",\n    Short: "Admin CLI for Prism data gateway",\n}\n\nvar namespaceCmd = &cobra.Command{\n    Use:   "namespace",\n    Short: "Manage namespaces",\n}\n\nvar namespaceListCmd = &cobra.Command{\n    Use:   "list",\n    Short: "List all namespaces",\n    RunE:  runNamespaceList,\n}\n\nfunc init() {\n    rootCmd.AddCommand(namespaceCmd)\n    namespaceCmd.AddCommand(namespaceListCmd)\n}\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Features out of the box"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Command completion (bash, zsh, fish, powershell)"}),"\n",(0,r.jsx)(e.li,{children:"Man page generation"}),"\n",(0,r.jsx)(e.li,{children:"Markdown docs generation"}),"\n",(0,r.jsx)(e.li,{children:"Flag parsing with validation"}),"\n",(0,r.jsx)(e.li,{children:"Subcommand organization"}),"\n",(0,r.jsx)(e.li,{children:"Configuration file support"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"4-consistency-with-backend-plugins",children:"4. Consistency with Backend Plugins"}),"\n",(0,r.jsx)(e.p,{children:"The backend plugins are written in Go (ADR-025), so using Go for the CLI:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"\u2705 Same language, same patterns, same toolchain"}),"\n",(0,r.jsx)(e.li,{children:"\u2705 Developers only need Go knowledge"}),"\n",(0,r.jsx)(e.li,{children:"\u2705 Can share code/libraries between CLI and plugins"}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 Unified build process: ",(0,r.jsx)(e.code,{children:"make build"})," builds everything"]}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"5-cross-platform-just-works",children:"5. Cross-Platform Just Works"}),"\n",(0,r.jsx)(e.p,{children:"Go's cross-compilation is trivial:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Build for all platforms in one command\nmake release\n\n# Produces:\ndist/\n\u251c\u2500\u2500 prismctl-darwin-amd64\n\u251c\u2500\u2500 prismctl-darwin-arm64\n\u251c\u2500\u2500 prismctl-linux-amd64\n\u251c\u2500\u2500 prismctl-linux-arm64\n\u251c\u2500\u2500 prismctl-windows-amd64.exe\n\u2514\u2500\u2500 checksums.txt\n"})}),"\n",(0,r.jsx)(e.p,{children:"No need for:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Platform-specific Python builds"}),"\n",(0,r.jsx)(e.li,{children:"Dealing with different Python versions (3.10 vs 3.11)"}),"\n",(0,r.jsx)(e.li,{children:"Virtual environment setup per platform"}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"6-easy-distribution",children:"6. Easy Distribution"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"GitHub Releases"})," (recommended):"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'# Automatically upload binaries\ngh release create v1.0.0 \\\n  dist/prismctl-* \\\n  --title "prismctl v1.0.0" \\\n  --notes "Admin CLI for Prism"\n'})}),"\n",(0,r.jsx)(e.p,{children:"Users download:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"curl -LO https://github.com/prism/releases/latest/download/prismctl-$(uname -s)-$(uname -m)\nchmod +x prismctl-*\nsudo mv prismctl-* /usr/local/bin/prismctl\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Homebrew"})," (macOS/Linux):"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-ruby",children:'class Prismctl < Formula\n  desc "Admin CLI for Prism data gateway"\n  homepage "https://prism.io"\n  url "https://github.com/prism/prismctl/archive/v1.0.0.tar.gz"\n\n  def install\n    system "go", "build", "-o", bin/"prismctl"\n  end\nend\n'})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"brew install prismctl\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Package managers"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"apt/deb"}),": Create ",(0,r.jsx)(e.code,{children:".deb"})," package with single binary"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"yum/rpm"}),": Create ",(0,r.jsx)(e.code,{children:".rpm"})," package with single binary"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Chocolatey"})," (Windows): Simple package with .exe"]}),"\n"]}),"\n",(0,r.jsx)(e.h4,{id:"7-no-runtime-dependencies",children:"7. No Runtime Dependencies"}),"\n",(0,r.jsxs)(e.p,{children:["Go binary needs ",(0,r.jsx)(e.strong,{children:"nothing"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Check dependencies (none!)\n$ ldd prismctl\n    not a dynamic executable\n\n# Works on minimal systems\n$ docker run --rm -v $PWD:/app alpine /app/prismctl --version\nprismctl version 1.0.0\n"})}),"\n",(0,r.jsx)(e.p,{children:"Compare to Python:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Python requires:\n- Python 3.10+ interpreter\n- pip or uv\n- C libraries (for some packages like grpcio)\n- System dependencies (openssl, etc.)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"implementation-prismctl",children:"Implementation: prismctl"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Directory structure"}),":\ntools/\n\u2514\u2500\u2500 cmd/\n\u2514\u2500\u2500 prismctl/\n\u251c\u2500\u2500 main.go           # Entry point\n\u251c\u2500\u2500 root.go           # Root command + config\n\u251c\u2500\u2500 namespace.go      # Namespace commands\n\u251c\u2500\u2500 health.go         # Health commands\n\u251c\u2500\u2500 session.go        # Session commands\n\u2514\u2500\u2500 config.go         # Config management"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"\n**Build**:\n"})}),"\n",(0,r.jsx)(e.p,{children:"cd tools\ngo build -o prismctl ./cmd/prismctl\n./prismctl --help"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"\n**Release build** (optimized):\n"})}),"\n",(0,r.jsx)(e.p,{children:'go build -ldflags="-s -w" -o prismctl ./cmd/prismctl\nupx prismctl  # Optional: compress binary (10MB \u2192 3MB)'}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"\n### Configuration\n\n**Default config** (`~/.prism/config.yaml`):\n"})}),"\n",(0,r.jsx)(e.p,{children:"admin:\nendpoint: localhost:8981"}),"\n",(0,r.jsx)(e.p,{children:"plugins:\npostgres:\nimage: prism/postgres-plugin:latest\nport: 9090\nkafka:\nimage: prism/kafka-plugin:latest\nport: 9091\nredis:\nimage: prism/redis-plugin:latest\nport: 9092"}),"\n",(0,r.jsx)(e.p,{children:"logging:\nlevel: info"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"\n**Precedence** (Viper):\n1. Command-line flags\n2. Environment variables (`PRISM_ADMIN_ENDPOINT`)\n3. Config file (`~/.prism/config.yaml`)\n4. Defaults\n\n### Bootstrap and Installation\n\n**Superseded by ADR-045**: Bootstrap is now handled by `prismctl stack init`.\n\n"})}),"\n",(0,r.jsx)(e.h1,{id:"install-prismctl-includes-bootstrap-functionality",children:"Install prismctl (includes bootstrap functionality)"}),"\n",(0,r.jsx)(e.p,{children:"go install github.com/jrepp/prism-data-layer/tools/cmd/prismctl@latest"}),"\n",(0,r.jsx)(e.h1,{id:"initialize-environment",children:"Initialize environment"}),"\n",(0,r.jsx)(e.p,{children:"prismctl stack init"}),"\n",(0,r.jsx)(e.h1,{id:"creates-prism-directory-config-and-stack-manifests",children:"Creates ~/.prism directory, config, and stack manifests"}),"\n",(0,r.jsx)(e.h1,{id:"start-infrastructure",children:"Start infrastructure"}),"\n",(0,r.jsx)(e.p,{children:"prismctl stack start"}),"\n",(0,r.jsx)(e.h1,{id:"use-prismctl-for-admin-operations",children:"Use prismctl for admin operations"}),"\n",(0,r.jsx)(e.p,{children:"prismctl namespace list\nprismctl health"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"\nRationale:\n- Single binary handles both bootstrap and runtime operations\n- No Python dependency for environment setup\n- Consistent `go install` installation method\n- See ADR-045 for stack management details\n\n### Plugin Management\n\n**Plugin manifests** in `~/.prism/plugins/`:\n\n"})}),"\n",(0,r.jsx)(e.h1,{id:"prismpluginspostgresyaml",children:"~/.prism/plugins/postgres.yaml"}),"\n",(0,r.jsx)(e.p,{children:"name: postgres\nimage: prism/postgres-plugin:latest\nport: 9090\nbackends: [postgres]\ncapabilities:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"keyvalue"}),"\n",(0,r.jsx)(e.li,{children:"transactions"}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"\n**CLI integration**:\n"})}),"\n",(0,r.jsx)(e.h1,{id:"list-available-plugins",children:"List available plugins"}),"\n",(0,r.jsx)(e.p,{children:"prismctl plugin list"}),"\n",(0,r.jsx)(e.h1,{id:"start-plugin",children:"Start plugin"}),"\n",(0,r.jsx)(e.p,{children:"prismctl plugin start postgres"}),"\n",(0,r.jsx)(e.h1,{id:"stop-plugin",children:"Stop plugin"}),"\n",(0,r.jsx)(e.p,{children:"prismctl plugin stop postgres"}),"\n",(0,r.jsx)(e.h1,{id:"plugin-health",children:"Plugin health"}),"\n",(0,r.jsx)(e.p,{children:"prismctl plugin health postgres"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"\n**Go implementation**:\n"})}),"\n",(0,r.jsx)(e.p,{children:"func runPluginStart(cmd *cobra.Command, args []string) error {\npluginName := args[0]"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"// Load manifest\nmanifest, err := loadPluginManifest(pluginName)\nif err != nil {\n    return err\n}\n\n// Start container\nreturn startPluginContainer(manifest)\n"})}),"\n",(0,r.jsx)(e.p,{children:"}"}),"\n",(0,r.jsx)(e.p,{children:'func loadPluginManifest(name string) (*PluginManifest, error) {\npath := filepath.Join(os.Getenv("HOME"), ".prism", "plugins", name+".yaml")\ndata, err := os.ReadFile(path)\nif err != nil {\nreturn nil, err\n}'}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{children:"var manifest PluginManifest\nif err := yaml.Unmarshal(data, &manifest); err != nil {\n    return nil, err\n}\n\nreturn &manifest, nil\n"})}),"\n",(0,r.jsx)(e.p,{children:"}"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"\n## Consequences\n\n### Positive\n\n- **Fast**: 12ms startup vs 230ms for Python\n- **Simple**: Single binary, no dependencies\n- **Professional**: Industry-standard CLI patterns (Cobra/Viper)\n- **Consistent**: Same language as backend plugins\n- **Portable**: Works everywhere Go compiles\n- **Easy distribution**: GitHub releases, Homebrew, package managers\n- **Small footprint**: ~10-15MB binary vs Python + deps\n\n### Negative\n\n- **Platform-specific builds**: Must compile for each OS/arch\n  - *Mitigation*: Automated via CI/CD (make release)\n- **Binary size**: 10-15MB vs 2-3MB for minimal Python\n  - *Acceptable*: Trivial for infrastructure tooling\n- **Less dynamic**: Can't hot-reload code like Python\n  - *Not needed*: CLI tools don't need hot-reload\n\n### Neutral\n\n- **Language choice**: Go vs Python is preference for admin tool\n  - *Decision*: Go aligns better with plugin ecosystem and performance requirements\n\n## Comparison: Go vs Python for Admin CLI\n\n| Aspect | Go (prismctl) | Python (with uv) |\n|--------|---------------|------------------|\n| **Startup time** | 12ms | 230ms |\n| **Binary size** | 10-15MB | 5-10MB + Python |\n| **Dependencies** | None | Python 3.10+ |\n| **Installation** | Single binary | pip/uv + package |\n| **Cross-platform** | Build per platform | Universal (with Python) |\n| **CLI framework** | Cobra (kubectl-style) | Click/Typer |\n| **Distribution** | GitHub releases | PyPI |\n| **Updates** | Download new binary | pip/uv upgrade |\n| **Consistency** | Matches Go plugins | Different language |\n| **Community** | Docker, k8s, gh use Go | Many Python CLIs exist |\n\n**Verdict**: Go is the better choice for infrastructure CLI tools that prioritize performance, portability, and professional UX.\n\n## Implementation Plan\n\n1. **Rename**: `tools/cmd/prism-admin` \u2192 `tools/cmd/prismctl`\n2. **Update**: Binary name from `prism-admin` to `prismctl`\n3. **Add**: Plugin management commands to prismctl\n4. **Add**: Stack management subcommand (see ADR-045)\n5. **Document**: Installation and usage in README\n6. **Release**: Automated builds via GitHub Actions\n\n## References\n\n- [Cobra CLI Framework](https://github.com/spf13/cobra)\n- [Viper Configuration](https://github.com/spf13/viper)\n- [kubectl Design](https://kubernetes.io/docs/reference/kubectl/)\n- [GitHub CLI Design](https://cli.github.com/)\n- ADR-012: Go for Tooling\n- ADR-016: Go CLI and Configuration Management\n- ADR-025: Container Plugin Model\n- ADR-045: prismctl Stack Management Subcommand\n- RFC-010: Admin Protocol with OIDC\n\n## Revision History\n\n- 2025-10-09: Initial acceptance with Go binary approach\n- 2025-10-09: Updated to reference ADR-045 for stack management (bootstrap now via prismctl)\n\n"})})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}}}]);