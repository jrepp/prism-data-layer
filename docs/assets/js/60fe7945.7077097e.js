"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[9363],{10784:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"rfc-026","title":"POC 1 - KeyValue with MemStore Implementation Plan (Original)","description":"Note Three Minimal Plugins, which provides a more focused approach with three minimal plugins instead of a single complex MemStore plugin.","source":"@site/../docs-cms/rfcs/rfc-026-poc1-keyvalue-memstore-original.md","sourceDirName":".","slug":"/rfc-026","permalink":"/prism-data-layer/rfc/rfc-026","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/rfc-026-poc1-keyvalue-memstore-original.md","tags":[{"inline":true,"label":"poc","permalink":"/prism-data-layer/rfc/tags/poc"},{"inline":true,"label":"implementation","permalink":"/prism-data-layer/rfc/tags/implementation"},{"inline":true,"label":"keyvalue","permalink":"/prism-data-layer/rfc/tags/keyvalue"},{"inline":true,"label":"memstore","permalink":"/prism-data-layer/rfc/tags/memstore"},{"inline":true,"label":"walking-skeleton","permalink":"/prism-data-layer/rfc/tags/walking-skeleton"},{"inline":true,"label":"workstreams","permalink":"/prism-data-layer/rfc/tags/workstreams"},{"inline":true,"label":"superseded","permalink":"/prism-data-layer/rfc/tags/superseded"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-09T00:00:00.000Z","doc_uuid":"a9c5b30d-fe19-40dc-aebc-866125dbb6d1","id":"rfc-026","project_id":"prism-data-layer","status":"Superseded","tags":["poc","implementation","keyvalue","memstore","walking-skeleton","workstreams","superseded"],"title":"POC 1 - KeyValue with MemStore Implementation Plan (Original)","updated":"2025-10-09T00:00:00.000Z"},"sidebar":"rfcSidebar","previous":{"title":"Pattern SDK Architecture - Backend Drivers and Concurrency Primitives \u2022 RFC-025","permalink":"/prism-data-layer/rfc/rfc-025"},"next":{"title":"Namespace Configuration and Client Request Flow \u2022 RFC-027","permalink":"/prism-data-layer/rfc/rfc-027"}}');var i=s(74848),r=s(28453);const l={author:"Platform Team",created:new Date("2025-10-09T00:00:00.000Z"),doc_uuid:"a9c5b30d-fe19-40dc-aebc-866125dbb6d1",id:"rfc-026",project_id:"prism-data-layer",status:"Superseded",tags:["poc","implementation","keyvalue","memstore","walking-skeleton","workstreams","superseded"],title:"POC 1 - KeyValue with MemStore Implementation Plan (Original)",updated:new Date("2025-10-09T00:00:00.000Z")},a="RFC-026: POC 1 - KeyValue with MemStore Implementation Plan (Original)",c={},o=[{value:"Summary",id:"summary",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Problem",id:"problem",level:3},{value:"Goals",id:"goals",level:3},{value:"Objective: Walking Skeleton",id:"objective-walking-skeleton",level:2},{value:"Architecture Overview",id:"architecture-overview",level:2},{value:"Component Diagram",id:"component-diagram",level:3},{value:"Technology Stack",id:"technology-stack",level:3},{value:"Work Streams",id:"work-streams",level:2},{value:"Work Stream 1: Protobuf Schema and Code Generation",id:"work-stream-1-protobuf-schema-and-code-generation",level:3},{value:"Tasks",id:"tasks",level:4},{value:"Work Stream 2: Rust Proxy Implementation",id:"work-stream-2-rust-proxy-implementation",level:3},{value:"Tasks",id:"tasks-1",level:4},{value:"Work Stream 3: Go MemStore Plugin Implementation",id:"work-stream-3-go-memstore-plugin-implementation",level:3},{value:"Tasks",id:"tasks-2",level:4},{value:"Work Stream 4: Python Client Library",id:"work-stream-4-python-client-library",level:3},{value:"Tasks",id:"tasks-3",level:4},{value:"Work Stream 5: Integration Tests and Demo",id:"work-stream-5-integration-tests-and-demo",level:3},{value:"Tasks",id:"tasks-4",level:4},{value:"Work Stream 6: Local Development Setup",id:"work-stream-6-local-development-setup",level:3},{value:"Tasks",id:"tasks-5",level:4},{value:"Timeline and Dependencies",id:"timeline-and-dependencies",level:2},{value:"Gantt Chart",id:"gantt-chart",level:3},{value:"Day-by-Day Plan",id:"day-by-day-plan",level:3},{value:"Success Criteria",id:"success-criteria",level:2},{value:"Functional Requirements",id:"functional-requirements",level:3},{value:"Non-Functional Requirements",id:"non-functional-requirements",level:3},{value:"Deliverables Checklist",id:"deliverables-checklist",level:3},{value:"Risk Mitigation",id:"risk-mitigation",level:2},{value:"Open Questions",id:"open-questions",level:2},{value:"Related Documents",id:"related-documents",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rfc-026-poc-1---keyvalue-with-memstore-implementation-plan-original",children:"RFC-026: POC 1 - KeyValue with MemStore Implementation Plan (Original)"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),": This RFC has been superseded by ",(0,i.jsx)(n.a,{href:"/rfc/rfc-021",children:"RFC-021: Three Minimal Plugins"}),", which provides a more focused approach with three minimal plugins instead of a single complex MemStore plugin."]}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsxs)(n.p,{children:["Detailed implementation plan for POC 1: ",(0,i.jsx)(n.strong,{children:"KeyValue with MemStore (Walking Skeleton)"}),". This RFC expands RFC-018's high-level POC strategy into actionable work streams with clearly defined tasks, acceptance criteria, and dependencies. POC 1 establishes the foundational end-to-end architecture by implementing the thinnest possible slice demonstrating proxy \u2192 plugin \u2192 backend \u2192 client integration."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Timeline"}),": 2 weeks (10 working days)\n",(0,i.jsx)(n.strong,{children:"Team Size"}),": 2-3 engineers\n",(0,i.jsx)(n.strong,{children:"Approach"}),": Walking Skeleton - build thinnest end-to-end slice, then iterate"]}),"\n",(0,i.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsx)(n.h3,{id:"problem",children:"Problem"}),"\n",(0,i.jsx)(n.p,{children:"RFC-018 provides a comprehensive POC strategy across 5 POCs, but POC 1 needs detailed task breakdown for execution. Teams need:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Clear work streams"}),": Parallelizable tracks for efficient development"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Specific tasks"}),": Actionable items with acceptance criteria"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Dependency mapping"}),": Understanding what blocks what"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Estimation granularity"}),": Day-level estimates for sprint planning"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"goals",children:"Goals"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Actionable Plan"}),": Break POC 1 into tasks assignable to engineers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallel Execution"}),": Identify independent work streams for parallel development"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Risk Mitigation"}),": Surface blocking dependencies early"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Quality Gates"}),": Define testable acceptance criteria per task"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tracking"}),": Enable progress monitoring and velocity measurement"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"objective-walking-skeleton",children:"Objective: Walking Skeleton"}),"\n",(0,i.jsxs)(n.p,{children:["Build the ",(0,i.jsx)(n.strong,{children:"thinnest possible end-to-end slice"})," demonstrating:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Rust proxy receiving gRPC client requests"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Go MemStore plugin handling KeyValue operations"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 In-memory backend (sync.Map + List slice)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Python client library with ergonomic API"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Minimal admin API for configuration"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Local development setup with Docker Compose"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:'What "Walking Skeleton" Means'}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implements ONE pattern (KeyValue) with ONE backend (MemStore)"}),"\n",(0,i.jsx)(n.li,{children:"No authentication, no observability, no multi-tenancy"}),"\n",(0,i.jsx)(n.li,{children:"Manual logs only (no structured logging)"}),"\n",(0,i.jsx)(n.li,{children:'Single namespace ("default")'}),"\n",(0,i.jsxs)(n.li,{children:["Focus: ",(0,i.jsx)(n.strong,{children:"prove the architecture works end-to-end"})]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,i.jsx)(n.h3,{id:"component-diagram",children:"Component Diagram"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    POC 1 Architecture                      \u2502\n\u2502                                                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Python Client (clients/python/)                     \u2502 \u2502\n\u2502  \u2502  - KeyValue API: set(), get(), delete(), scan()      \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                   \u2502                                        \u2502\n\u2502                   \u2502 gRPC (KeyValueService)                 \u2502\n\u2502                   \u25bc                                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Rust Proxy (proxy/)                                 \u2502 \u2502\n\u2502  \u2502  - gRPC server on :8980                             \u2502 \u2502\n\u2502  \u2502  - Load plugin from config                          \u2502 \u2502\n\u2502  \u2502  - Forward requests to plugin                       \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                   \u2502                                        \u2502\n\u2502                   \u2502 gRPC (KeyValueInterface)               \u2502\n\u2502                   \u25bc                                        \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Go MemStore Plugin (plugins/memstore/)              \u2502 \u2502\n\u2502  \u2502  - gRPC server on dynamic port                      \u2502 \u2502\n\u2502  \u2502  - sync.Map for KeyValue storage                    \u2502 \u2502\n\u2502  \u2502  - []interface{} slice for List storage             \u2502 \u2502\n\u2502  \u2502  - TTL cleanup with time.AfterFunc                  \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                                                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Admin API (admin/)                                  \u2502 \u2502\n\u2502  \u2502  - FastAPI server on :8090                          \u2502 \u2502\n\u2502  \u2502  - POST /namespaces (create namespace)              \u2502 \u2502\n\u2502  \u2502  - Writes proxy config file                         \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h3,{id:"technology-stack",children:"Technology Stack"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Language"}),(0,i.jsx)(n.th,{children:"Framework/Library"}),(0,i.jsx)(n.th,{children:"Protocol"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Proxy"}),(0,i.jsx)(n.td,{children:"Rust"}),(0,i.jsx)(n.td,{children:"tokio, tonic (gRPC)"}),(0,i.jsx)(n.td,{children:"gRPC"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"MemStore Plugin"}),(0,i.jsx)(n.td,{children:"Go"}),(0,i.jsx)(n.td,{children:"google.golang.org/grpc"}),(0,i.jsx)(n.td,{children:"gRPC"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Python Client"}),(0,i.jsx)(n.td,{children:"Python 3.11+"}),(0,i.jsx)(n.td,{children:"grpcio, asyncio"}),(0,i.jsx)(n.td,{children:"gRPC"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Admin API"}),(0,i.jsx)(n.td,{children:"Python 3.11+"}),(0,i.jsx)(n.td,{children:"FastAPI"}),(0,i.jsx)(n.td,{children:"HTTP"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"work-streams",children:"Work Streams"}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-1-protobuf-schema-and-code-generation",children:"Work Stream 1: Protobuf Schema and Code Generation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 1 day\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": None (can start immediately)"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 1.1: Define KeyValue protobuf interface"})," (2 hours)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'// proto/interfaces/keyvalue_basic.proto\nsyntax = "proto3";\npackage prism.interfaces.keyvalue;\n\nservice KeyValueBasicInterface {\n  rpc Set(SetRequest) returns (SetResponse);\n  rpc Get(GetRequest) returns (GetResponse);\n  rpc Delete(DeleteRequest) returns (DeleteResponse);\n  rpc Exists(ExistsRequest) returns (ExistsResponse);\n}\n\nmessage SetRequest {\n  string namespace = 1;\n  string key = 2;\n  bytes value = 3;\n  optional int64 ttl_seconds = 4;  // Optional TTL\n}\n\nmessage SetResponse {\n  bool success = 1;\n}\n\nmessage GetRequest {\n  string namespace = 1;\n  string key = 2;\n}\n\nmessage GetResponse {\n  bytes value = 1;\n}\n\nmessage DeleteRequest {\n  string namespace = 1;\n  string key = 2;\n}\n\nmessage DeleteResponse {\n  bool found = 1;\n}\n\nmessage ExistsRequest {\n  string namespace = 1;\n  string key = 2;\n}\n\nmessage ExistsResponse {\n  bool exists = 1;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"keyvalue_basic.proto"})," file created"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Compiles with ",(0,i.jsx)(n.code,{children:"protoc"})," without errors"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Includes Set, Get, Delete, Exists operations"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," TTL field in SetRequest (optional)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 1.2: Define KeyValue Scan interface"})," (1 hour)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'// proto/interfaces/keyvalue_scan.proto\nsyntax = "proto3";\npackage prism.interfaces.keyvalue;\n\nservice KeyValueScanInterface {\n  rpc Scan(ScanRequest) returns (stream ScanResponse);\n  rpc ScanKeys(ScanKeysRequest) returns (stream KeyResponse);\n  rpc Count(CountRequest) returns (CountResponse);\n}\n\nmessage ScanRequest {\n  string namespace = 1;\n  string prefix = 2;\n  int32 limit = 3;  // Max keys to return (0 = unlimited)\n}\n\nmessage ScanResponse {\n  string key = 1;\n  bytes value = 2;\n}\n\nmessage ScanKeysRequest {\n  string namespace = 1;\n  string prefix = 2;\n  int32 limit = 3;\n}\n\nmessage KeyResponse {\n  string key = 1;\n}\n\nmessage CountRequest {\n  string namespace = 1;\n  string prefix = 2;\n}\n\nmessage CountResponse {\n  int64 count = 1;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"keyvalue_scan.proto"})," file created"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Streaming response for Scan operation"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Prefix-based filtering supported"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 1.3: Define List protobuf interface"})," (2 hours)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'// proto/interfaces/list_basic.proto\nsyntax = "proto3";\npackage prism.interfaces.list;\n\nservice ListBasicInterface {\n  rpc PushLeft(PushLeftRequest) returns (PushLeftResponse);\n  rpc PushRight(PushRightRequest) returns (PushRightResponse);\n  rpc PopLeft(PopLeftRequest) returns (PopLeftResponse);\n  rpc PopRight(PopRightRequest) returns (PopRightResponse);\n  rpc Length(LengthRequest) returns (LengthResponse);\n}\n\nmessage PushLeftRequest {\n  string namespace = 1;\n  string list_key = 2;\n  bytes value = 3;\n}\n\nmessage PushLeftResponse {\n  int64 new_length = 1;\n}\n\nmessage PushRightRequest {\n  string namespace = 1;\n  string list_key = 2;\n  bytes value = 3;\n}\n\nmessage PushRightResponse {\n  int64 new_length = 1;\n}\n\nmessage PopLeftRequest {\n  string namespace = 1;\n  string list_key = 2;\n}\n\nmessage PopLeftResponse {\n  bytes value = 1;\n  bool found = 2;\n}\n\nmessage PopRightRequest {\n  string namespace = 1;\n  string list_key = 2;\n}\n\nmessage PopRightResponse {\n  bytes value = 1;\n  bool found = 2;\n}\n\nmessage LengthRequest {\n  string namespace = 1;\n  string list_key = 2;\n}\n\nmessage LengthResponse {\n  int64 length = 1;\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"list_basic.proto"})," file created"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Compiles with ",(0,i.jsx)(n.code,{children:"protoc"})," without errors"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Includes PushLeft, PushRight, PopLeft, PopRight, Length operations"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 1.4: Generate code for all languages"})," (2 hours)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Makefile targets\nproto-generate:\n\t# Generate Rust code\n\tprotoc --rust_out=proto/rust/ --grpc-rust_out=proto/rust/ proto/**/*.proto\n\n\t# Generate Go code\n\tprotoc --go_out=proto/go/ --go-grpc_out=proto/go/ proto/**/*.proto\n\n\t# Generate Python code\n\tpython -m grpc_tools.protoc -I proto/ --python_out=clients/python/ \\\n\t\t--grpc_python_out=clients/python/ proto/**/*.proto\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Makefile target ",(0,i.jsx)(n.code,{children:"proto-generate"})," works"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Rust code generated in ",(0,i.jsx)(n.code,{children:"proto/rust/"})]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Go code generated in ",(0,i.jsx)(n.code,{children:"proto/go/"})]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Python code generated in ",(0,i.jsx)(n.code,{children:"clients/python/prism_pb2.py"})]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," No compilation errors in any language"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-2-rust-proxy-implementation",children:"Work Stream 2: Rust Proxy Implementation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer (Rust experience required)\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 4 days\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": Task 1.4 (protobuf generation)"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks-1",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 2.1: Setup Rust project structure"})," (1 day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"proxy/\n\u251c\u2500\u2500 Cargo.toml          # Dependencies: tokio, tonic, serde\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main.rs         # Entry point\n\u2502   \u251c\u2500\u2500 config.rs       # Configuration loading\n\u2502   \u251c\u2500\u2500 server.rs       # gRPC server setup\n\u2502   \u251c\u2500\u2500 plugin.rs       # Plugin client management\n\u2502   \u2514\u2500\u2500 error.rs        # Error types\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 integration_test.rs\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'# proxy/Cargo.toml\n[package]\nname = "prism-proxy"\nversion = "0.1.0"\nedition = "2021"\n\n[dependencies]\ntokio = { version = "1", features = ["full"] }\ntonic = "0.10"\nserde = { version = "1.0", features = ["derive"] }\nserde_yaml = "0.9"\nanyhow = "1.0"\ntracing = "0.1"\ntracing-subscriber = "0.3"\n\n[build-dependencies]\ntonic-build = "0.10"\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"cargo build"})," succeeds"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Project structure created"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Dependencies resolved"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Hello world binary runs"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 2.2: Implement configuration loading"})," (half day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# proxy/config.yaml\nserver:\n  listen_address: "0.0.0.0:8980"\n\nnamespaces:\n  - name: default\n    pattern: keyvalue\n    plugin:\n      endpoint: "localhost:50051"  # MemStore plugin address\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// proxy/src/config.rs\nuse serde::{Deserialize, Serialize};\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct Config {\n    pub server: ServerConfig,\n    pub namespaces: Vec<NamespaceConfig>,\n}\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct ServerConfig {\n    pub listen_address: String,\n}\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct NamespaceConfig {\n    pub name: String,\n    pub pattern: String,\n    pub plugin: PluginConfig,\n}\n\n#[derive(Debug, Deserialize, Serialize)]\npub struct PluginConfig {\n    pub endpoint: String,\n}\n\nimpl Config {\n    pub fn load(path: &str) -> anyhow::Result<Self> {\n        let content = std::fs::read_to_string(path)?;\n        let config: Config = serde_yaml::from_str(&content)?;\n        Ok(config)\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Config file parsing works"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Errors on missing fields"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Returns structured Config object"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Unit tests for valid and invalid configs"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 2.3: Implement gRPC server skeleton"})," (1 day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// proxy/src/server.rs\nuse tonic::{transport::Server, Request, Response, Status};\nuse prism_pb::keyvalue_service_server::{KeyValueService, KeyValueServiceServer};\nuse prism_pb::{GetRequest, GetResponse, SetRequest, SetResponse};\n\npub struct ProxyService {\n    plugin_client: PluginClient,\n}\n\n#[tonic::async_trait]\nimpl KeyValueService for ProxyService {\n    async fn set(&self, request: Request<SetRequest>) -> Result<Response<SetResponse>, Status> {\n        // Forward to plugin\n        let req = request.into_inner();\n        let resp = self.plugin_client.set(req).await?;\n        Ok(Response::new(resp))\n    }\n\n    async fn get(&self, request: Request<GetRequest>) -> Result<Response<GetResponse>, Status> {\n        let req = request.into_inner();\n        let resp = self.plugin_client.get(req).await?;\n        Ok(Response::new(resp))\n    }\n\n    // ... delete, exists, scan\n}\n\npub async fn start_server(config: Config) -> anyhow::Result<()> {\n    let addr = config.server.listen_address.parse()?;\n\n    // Create plugin client\n    let plugin_client = PluginClient::connect(config.namespaces[0].plugin.endpoint).await?;\n\n    let service = ProxyService { plugin_client };\n\n    Server::builder()\n        .add_service(KeyValueServiceServer::new(service))\n        .serve(addr)\n        .await?;\n\n    Ok(())\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," gRPC server starts on configured port"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Health check endpoint responds"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Graceful shutdown on SIGTERM"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Logs server startup"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 2.4: Implement plugin client forwarding"})," (1 day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// proxy/src/plugin.rs\nuse prism_pb::key_value_basic_interface_client::KeyValueBasicInterfaceClient;\nuse tonic::transport::Channel;\n\npub struct PluginClient {\n    client: KeyValueBasicInterfaceClient<Channel>,\n}\n\nimpl PluginClient {\n    pub async fn connect(endpoint: String) -> anyhow::Result<Self> {\n        let client = KeyValueBasicInterfaceClient::connect(endpoint).await?;\n        Ok(Self { client })\n    }\n\n    pub async fn set(&self, req: SetRequest) -> Result<SetResponse, tonic::Status> {\n        let mut client = self.client.clone();\n        let response = client.set(req).await?;\n        Ok(response.into_inner())\n    }\n\n    pub async fn get(&self, req: GetRequest) -> Result<GetResponse, tonic::Status> {\n        let mut client = self.client.clone();\n        let response = client.get(req).await?;\n        Ok(response.into_inner())\n    }\n\n    // ... delete, exists, scan\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Plugin client connects to Go plugin"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Forwards Set, Get, Delete, Exists operations"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Handles gRPC errors correctly"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Retries connection on failure"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 2.5: Add basic error handling"})," (half day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// proxy/src/error.rs\nuse thiserror::Error;\n\n#[derive(Error, Debug)]\npub enum ProxyError {\n    #[error("Configuration error: {0}")]\n    Config(String),\n\n    #[error("Plugin connection error: {0}")]\n    PluginConnection(String),\n\n    #[error("gRPC error: {0}")]\n    Grpc(#[from] tonic::Status),\n\n    #[error("Internal error: {0}")]\n    Internal(String),\n}\n\nimpl From<ProxyError> for tonic::Status {\n    fn from(err: ProxyError) -> Self {\n        match err {\n            ProxyError::Config(msg) => tonic::Status::invalid_argument(msg),\n            ProxyError::PluginConnection(msg) => tonic::Status::unavailable(msg),\n            ProxyError::Grpc(status) => status,\n            ProxyError::Internal(msg) => tonic::Status::internal(msg),\n        }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Errors mapped to gRPC status codes"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Error messages logged"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Client receives meaningful error responses"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-3-go-memstore-plugin-implementation",children:"Work Stream 3: Go MemStore Plugin Implementation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer (Go experience required)\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 3 days\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": Task 1.4 (protobuf generation)\n",(0,i.jsx)(n.strong,{children:"Can run in parallel with"}),": Work Stream 2"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks-2",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 3.1: Setup Go project structure"})," (half day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"plugins/memstore/\n\u251c\u2500\u2500 go.mod                  # Module definition\n\u251c\u2500\u2500 main.go                 # Entry point\n\u251c\u2500\u2500 server.go               # gRPC server\n\u251c\u2500\u2500 storage/\n\u2502   \u251c\u2500\u2500 keyvalue.go         # KeyValue sync.Map storage\n\u2502   \u251c\u2500\u2500 list.go             # List slice storage\n\u2502   \u2514\u2500\u2500 ttl.go              # TTL cleanup\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 memstore_test.go\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// plugins/memstore/go.mod\nmodule github.com/prism/plugins/memstore\n\ngo 1.21\n\nrequire (\n    google.golang.org/grpc v1.58.0\n    google.golang.org/protobuf v1.31.0\n)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"go build"})," succeeds"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Project structure created"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Dependencies resolved"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Hello world binary runs"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 3.2: Implement KeyValue storage with sync.Map"})," (1 day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// plugins/memstore/storage/keyvalue.go\npackage storage\n\nimport (\n    "sync"\n    "time"\n)\n\ntype KeyValueStore struct {\n    data    sync.Map               // map[string][]byte\n    ttls    sync.Map               // map[string]*time.Timer\n    mu      sync.RWMutex\n}\n\nfunc NewKeyValueStore() *KeyValueStore {\n    return &KeyValueStore{}\n}\n\nfunc (kv *KeyValueStore) Set(key string, value []byte, ttlSeconds int64) error {\n    kv.data.Store(key, value)\n\n    if ttlSeconds > 0 {\n        kv.setTTL(key, time.Duration(ttlSeconds)*time.Second)\n    }\n\n    return nil\n}\n\nfunc (kv *KeyValueStore) Get(key string) ([]byte, bool) {\n    // Check if key exists and not expired\n    value, ok := kv.data.Load(key)\n    if !ok {\n        return nil, false\n    }\n\n    return value.([]byte), true\n}\n\nfunc (kv *KeyValueStore) Delete(key string) bool {\n    _, ok := kv.data.LoadAndDelete(key)\n\n    // Cancel TTL timer if exists\n    if timer, found := kv.ttls.LoadAndDelete(key); found {\n        timer.(*time.Timer).Stop()\n    }\n\n    return ok\n}\n\nfunc (kv *KeyValueStore) Exists(key string) bool {\n    _, ok := kv.data.Load(key)\n    return ok\n}\n\nfunc (kv *KeyValueStore) Scan(prefix string, limit int) []string {\n    keys := []string{}\n    kv.data.Range(func(k, v interface{}) bool {\n        key := k.(string)\n        if strings.HasPrefix(key, prefix) {\n            keys = append(keys, key)\n            if limit > 0 && len(keys) >= limit {\n                return false  // Stop iteration\n            }\n        }\n        return true\n    })\n    return keys\n}\n\nfunc (kv *KeyValueStore) setTTL(key string, duration time.Duration) {\n    timer := time.AfterFunc(duration, func() {\n        kv.Delete(key)\n    })\n    kv.ttls.Store(key, timer)\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Set, Get, Delete, Exists operations work"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," TTL expiration deletes keys automatically"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Thread-safe (passes race detector)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Scan supports prefix matching"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Unit tests for all operations"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 3.3: Implement List storage with slices"})," (1 day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// plugins/memstore/storage/list.go\npackage storage\n\nimport (\n    "sync"\n)\n\ntype ListStore struct {\n    lists sync.Map  // map[string]*List\n}\n\ntype List struct {\n    mu    sync.RWMutex\n    items [][]byte\n}\n\nfunc NewListStore() *ListStore {\n    return &ListStore{}\n}\n\nfunc (ls *ListStore) getOrCreate(listKey string) *List {\n    if val, ok := ls.lists.Load(listKey); ok {\n        return val.(*List)\n    }\n\n    list := &List{items: [][]byte{}}\n    ls.lists.Store(listKey, list)\n    return list\n}\n\nfunc (ls *ListStore) PushLeft(listKey string, value []byte) int64 {\n    list := ls.getOrCreate(listKey)\n    list.mu.Lock()\n    defer list.mu.Unlock()\n\n    // Prepend (expensive - requires copy)\n    list.items = append([][]byte{value}, list.items...)\n    return int64(len(list.items))\n}\n\nfunc (ls *ListStore) PushRight(listKey string, value []byte) int64 {\n    list := ls.getOrCreate(listKey)\n    list.mu.Lock()\n    defer list.mu.Unlock()\n\n    // Append (efficient)\n    list.items = append(list.items, value)\n    return int64(len(list.items))\n}\n\nfunc (ls *ListStore) PopLeft(listKey string) ([]byte, bool) {\n    list := ls.getOrCreate(listKey)\n    list.mu.Lock()\n    defer list.mu.Unlock()\n\n    if len(list.items) == 0 {\n        return nil, false\n    }\n\n    value := list.items[0]\n    list.items = list.items[1:]  // Reslice\n    return value, true\n}\n\nfunc (ls *ListStore) PopRight(listKey string) ([]byte, bool) {\n    list := ls.getOrCreate(listKey)\n    list.mu.Lock()\n    defer list.mu.Unlock()\n\n    if len(list.items) == 0 {\n        return nil, false\n    }\n\n    value := list.items[len(list.items)-1]\n    list.items = list.items[:len(list.items)-1]  // Reslice\n    return value, true\n}\n\nfunc (ls *ListStore) Length(listKey string) int64 {\n    list := ls.getOrCreate(listKey)\n    list.mu.RLock()\n    defer list.mu.RUnlock()\n\n    return int64(len(list.items))\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," PushLeft, PushRight, PopLeft, PopRight, Length operations work"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Thread-safe (passes race detector)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Empty list returns (nil, false) for pops"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Unit tests for all operations"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 3.4: Implement gRPC server"})," (1 day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// plugins/memstore/server.go\npackage main\n\nimport (\n    "context"\n    "fmt"\n    "net"\n\n    "google.golang.org/grpc"\n    pb "github.com/prism/proto/go"\n    "github.com/prism/plugins/memstore/storage"\n)\n\ntype MemStoreServer struct {\n    pb.UnimplementedKeyValueBasicInterfaceServer\n    pb.UnimplementedKeyValueScanInterfaceServer\n    pb.UnimplementedListBasicInterfaceServer\n\n    keyvalue *storage.KeyValueStore\n    lists    *storage.ListStore\n}\n\nfunc NewMemStoreServer() *MemStoreServer {\n    return &MemStoreServer{\n        keyvalue: storage.NewKeyValueStore(),\n        lists:    storage.NewListStore(),\n    }\n}\n\nfunc (s *MemStoreServer) Set(ctx context.Context, req *pb.SetRequest) (*pb.SetResponse, error) {\n    err := s.keyvalue.Set(req.Key, req.Value, req.TtlSeconds)\n    if err != nil {\n        return nil, err\n    }\n    return &pb.SetResponse{Success: true}, nil\n}\n\nfunc (s *MemStoreServer) Get(ctx context.Context, req *pb.GetRequest) (*pb.GetResponse, error) {\n    value, found := s.keyvalue.Get(req.Key)\n    if !found {\n        return nil, status.Error(codes.NotFound, "key not found")\n    }\n    return &pb.GetResponse{Value: value}, nil\n}\n\n// ... Delete, Exists, Scan, PushLeft, PushRight, PopLeft, PopRight, Length\n\nfunc main() {\n    lis, err := net.Listen("tcp", ":50051")\n    if err != nil {\n        log.Fatalf("failed to listen: %v", err)\n    }\n\n    s := grpc.NewServer()\n    pb.RegisterKeyValueBasicInterfaceServer(s, NewMemStoreServer())\n    pb.RegisterKeyValueScanInterfaceServer(s, NewMemStoreServer())\n    pb.RegisterListBasicInterfaceServer(s, NewMemStoreServer())\n\n    log.Printf("MemStore plugin listening on :50051")\n    if err := s.Serve(lis); err != nil {\n        log.Fatalf("failed to serve: %v", err)\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," gRPC server starts on :50051"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," All KeyValue operations work"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," All List operations work"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Health check responds"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Graceful shutdown"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-4-python-client-library",children:"Work Stream 4: Python Client Library"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer (Python experience required)\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 2 days\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": Task 1.4 (protobuf generation)\n",(0,i.jsx)(n.strong,{children:"Can run in parallel with"}),": Work Streams 2 and 3"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks-3",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 4.1: Setup Python project structure"})," (half day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"clients/python/\n\u251c\u2500\u2500 pyproject.toml           # Poetry/pip dependencies\n\u251c\u2500\u2500 prism/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 client.py            # Main client class\n\u2502   \u251c\u2500\u2500 keyvalue.py          # KeyValue API\n\u2502   \u251c\u2500\u2500 list.py              # List API\n\u2502   \u2514\u2500\u2500 errors.py            # Custom exceptions\n\u251c\u2500\u2500 prism_pb2.py             # Generated protobuf (from Task 1.4)\n\u251c\u2500\u2500 prism_pb2_grpc.py        # Generated gRPC (from Task 1.4)\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 test_keyvalue.py\n    \u2514\u2500\u2500 test_list.py\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'# clients/python/pyproject.toml\n[project]\nname = "prism-client"\nversion = "0.1.0"\nrequires-python = ">=3.11"\ndependencies = [\n    "grpcio>=1.58.0",\n    "grpcio-tools>=1.58.0",\n    "protobuf>=4.24.0",\n]\n\n[project.optional-dependencies]\ndev = [\n    "pytest>=7.4.0",\n    "pytest-asyncio>=0.21.0",\n]\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Python package installs (",(0,i.jsx)(n.code,{children:"pip install -e ."}),")"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Dependencies resolved"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Project structure created"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Can import ",(0,i.jsx)(n.code,{children:"from prism import PrismClient"})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 4.2: Implement PrismClient main class"})," (half day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# clients/python/prism/client.py\nimport grpc\nfrom prism.keyvalue import KeyValueAPI\nfrom prism.list import ListAPI\n\nclass PrismClient:\n    """Prism data access client."""\n\n    def __init__(self, proxy_address: str):\n        """\n        Initialize Prism client.\n\n        Args:\n            proxy_address: Proxy address (e.g., "localhost:8980")\n        """\n        self.proxy_address = proxy_address\n        self.channel = grpc.aio.insecure_channel(proxy_address)\n\n        # Pattern APIs\n        self.keyvalue = KeyValueAPI(self.channel)\n        self.list = ListAPI(self.channel)\n\n    async def close(self):\n        """Close gRPC channel."""\n        await self.channel.close()\n\n    async def __aenter__(self):\n        return self\n\n    async def __aexit__(self, *exc):\n        await self.close()\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Client initializes with proxy address"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," gRPC channel created"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Context manager support"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Exposes ",(0,i.jsx)(n.code,{children:"keyvalue"})," and ",(0,i.jsx)(n.code,{children:"list"})," APIs"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 4.3: Implement KeyValue API"})," (1 day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# clients/python/prism/keyvalue.py\nfrom typing import Optional, AsyncIterator\nimport prism_pb2\nimport prism_pb2_grpc\nfrom prism.errors import KeyNotFoundError\n\nclass KeyValueAPI:\n    """KeyValue pattern API."""\n\n    def __init__(self, channel):\n        self.stub = prism_pb2_grpc.KeyValueBasicInterfaceStub(channel)\n        self.scan_stub = prism_pb2_grpc.KeyValueScanInterfaceStub(channel)\n\n    async def set(\n        self,\n        key: str,\n        value: bytes,\n        namespace: str = "default",\n        ttl_seconds: Optional[int] = None\n    ) -> None:\n        """\n        Set a key-value pair.\n\n        Args:\n            key: Key to set\n            value: Value bytes\n            namespace: Namespace (default: "default")\n            ttl_seconds: Optional TTL in seconds\n\n        Raises:\n            grpc.RpcError: On gRPC error\n        """\n        request = prism_pb2.SetRequest(\n            namespace=namespace,\n            key=key,\n            value=value,\n        )\n        if ttl_seconds is not None:\n            request.ttl_seconds = ttl_seconds\n\n        await self.stub.Set(request)\n\n    async def get(\n        self,\n        key: str,\n        namespace: str = "default"\n    ) -> bytes:\n        """\n        Get value for a key.\n\n        Args:\n            key: Key to get\n            namespace: Namespace (default: "default")\n\n        Returns:\n            Value bytes\n\n        Raises:\n            KeyNotFoundError: If key doesn\'t exist\n            grpc.RpcError: On gRPC error\n        """\n        request = prism_pb2.GetRequest(namespace=namespace, key=key)\n\n        try:\n            response = await self.stub.Get(request)\n            return response.value\n        except grpc.RpcError as e:\n            if e.code() == grpc.StatusCode.NOT_FOUND:\n                raise KeyNotFoundError(f"Key not found: {key}")\n            raise\n\n    async def delete(\n        self,\n        key: str,\n        namespace: str = "default"\n    ) -> bool:\n        """\n        Delete a key.\n\n        Args:\n            key: Key to delete\n            namespace: Namespace (default: "default")\n\n        Returns:\n            True if key was found and deleted, False otherwise\n        """\n        request = prism_pb2.DeleteRequest(namespace=namespace, key=key)\n        response = await self.stub.Delete(request)\n        return response.found\n\n    async def exists(\n        self,\n        key: str,\n        namespace: str = "default"\n    ) -> bool:\n        """\n        Check if a key exists.\n\n        Args:\n            key: Key to check\n            namespace: Namespace (default: "default")\n\n        Returns:\n            True if key exists, False otherwise\n        """\n        request = prism_pb2.ExistsRequest(namespace=namespace, key=key)\n        response = await self.stub.Exists(request)\n        return response.exists\n\n    async def scan(\n        self,\n        prefix: str = "",\n        namespace: str = "default",\n        limit: int = 0\n    ) -> AsyncIterator[tuple[str, bytes]]:\n        """\n        Scan keys by prefix (streaming).\n\n        Args:\n            prefix: Key prefix to match (empty = all keys)\n            namespace: Namespace (default: "default")\n            limit: Max keys to return (0 = unlimited)\n\n        Yields:\n            Tuples of (key, value)\n        """\n        request = prism_pb2.ScanRequest(\n            namespace=namespace,\n            prefix=prefix,\n            limit=limit\n        )\n\n        async for response in self.scan_stub.Scan(request):\n            yield (response.key, response.value)\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," All methods (set, get, delete, exists, scan) work"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Async/await support"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," TTL parameter optional"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," scan() is async iterator"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Custom KeyNotFoundError exception"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Type hints for all methods"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 4.4: Implement List API"})," (half day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# clients/python/prism/list.py\nfrom typing import Optional\nimport prism_pb2\nimport prism_pb2_grpc\n\nclass ListAPI:\n    """List pattern API."""\n\n    def __init__(self, channel):\n        self.stub = prism_pb2_grpc.ListBasicInterfaceStub(channel)\n\n    async def push_left(\n        self,\n        list_key: str,\n        value: bytes,\n        namespace: str = "default"\n    ) -> int:\n        """\n        Push value to left (head) of list.\n\n        Returns:\n            New list length\n        """\n        request = prism_pb2.PushLeftRequest(\n            namespace=namespace,\n            list_key=list_key,\n            value=value\n        )\n        response = await self.stub.PushLeft(request)\n        return response.new_length\n\n    async def push_right(\n        self,\n        list_key: str,\n        value: bytes,\n        namespace: str = "default"\n    ) -> int:\n        """\n        Push value to right (tail) of list.\n\n        Returns:\n            New list length\n        """\n        request = prism_pb2.PushRightRequest(\n            namespace=namespace,\n            list_key=list_key,\n            value=value\n        )\n        response = await self.stub.PushRight(request)\n        return response.new_length\n\n    async def pop_left(\n        self,\n        list_key: str,\n        namespace: str = "default"\n    ) -> Optional[bytes]:\n        """\n        Pop value from left (head) of list.\n\n        Returns:\n            Value bytes, or None if list is empty\n        """\n        request = prism_pb2.PopLeftRequest(\n            namespace=namespace,\n            list_key=list_key\n        )\n        response = await self.stub.PopLeft(request)\n        return response.value if response.found else None\n\n    async def pop_right(\n        self,\n        list_key: str,\n        namespace: str = "default"\n    ) -> Optional[bytes]:\n        """\n        Pop value from right (tail) of list.\n\n        Returns:\n            Value bytes, or None if list is empty\n        """\n        request = prism_pb2.PopRightRequest(\n            namespace=namespace,\n            list_key=list_key\n        )\n        response = await self.stub.PopRight(request)\n        return response.value if response.found else None\n\n    async def length(\n        self,\n        list_key: str,\n        namespace: str = "default"\n    ) -> int:\n        """\n        Get list length.\n\n        Returns:\n            List length (0 if list doesn\'t exist)\n        """\n        request = prism_pb2.LengthRequest(\n            namespace=namespace,\n            list_key=list_key\n        )\n        response = await self.stub.Length(request)\n        return response.length\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," All methods (push_left, push_right, pop_left, pop_right, length) work"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Async/await support"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Returns None for empty list pops"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Type hints for all methods"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-5-integration-tests-and-demo",children:"Work Stream 5: Integration Tests and Demo"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 2 days\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": Work Streams 2, 3, 4 complete"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks-4",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 5.1: Write integration tests"})," (1 day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# tests/poc1/test_keyvalue_memstore.py\nimport pytest\nfrom prism import PrismClient\nfrom prism.errors import KeyNotFoundError\n\n@pytest.mark.asyncio\nasync def test_set_get():\n    """Test basic set/get operation."""\n    async with PrismClient("localhost:8980") as client:\n        await client.keyvalue.set("test-key", b"test-value")\n        value = await client.keyvalue.get("test-key")\n        assert value == b"test-value"\n\n@pytest.mark.asyncio\nasync def test_delete():\n    """Test delete operation."""\n    async with PrismClient("localhost:8980") as client:\n        await client.keyvalue.set("delete-me", b"data")\n\n        found = await client.keyvalue.delete("delete-me")\n        assert found == True\n\n        with pytest.raises(KeyNotFoundError):\n            await client.keyvalue.get("delete-me")\n\n@pytest.mark.asyncio\nasync def test_ttl():\n    """Test TTL expiration."""\n    async with PrismClient("localhost:8980") as client:\n        await client.keyvalue.set("expires", b"soon", ttl_seconds=1)\n\n        # Key exists initially\n        assert await client.keyvalue.exists("expires") == True\n\n        # Wait for expiration\n        await asyncio.sleep(1.5)\n\n        # Key should be gone\n        assert await client.keyvalue.exists("expires") == False\n\n@pytest.mark.asyncio\nasync def test_scan():\n    """Test scan operation."""\n    async with PrismClient("localhost:8980") as client:\n        await client.keyvalue.set("user:1", b"alice")\n        await client.keyvalue.set("user:2", b"bob")\n        await client.keyvalue.set("post:1", b"hello")\n\n        keys = []\n        async for key, value in client.keyvalue.scan("user:"):\n            keys.append(key)\n\n        assert len(keys) == 2\n        assert "user:1" in keys\n        assert "user:2" in keys\n        assert "post:1" not in keys\n\n@pytest.mark.asyncio\nasync def test_list_fifo():\n    """Test list FIFO operations."""\n    async with PrismClient("localhost:8980") as client:\n        # Push to right, pop from left (FIFO queue)\n        await client.list.push_right("queue", b"first")\n        await client.list.push_right("queue", b"second")\n        await client.list.push_right("queue", b"third")\n\n        assert await client.list.length("queue") == 3\n\n        assert await client.list.pop_left("queue") == b"first"\n        assert await client.list.pop_left("queue") == b"second"\n        assert await client.list.pop_left("queue") == b"third"\n\n        # Empty list\n        assert await client.list.pop_left("queue") is None\n\n@pytest.mark.asyncio\nasync def test_list_stack():\n    """Test list LIFO operations."""\n    async with PrismClient("localhost:8980") as client:\n        # Push to right, pop from right (LIFO stack)\n        await client.list.push_right("stack", b"first")\n        await client.list.push_right("stack", b"second")\n        await client.list.push_right("stack", b"third")\n\n        assert await client.list.pop_right("stack") == b"third"\n        assert await client.list.pop_right("stack") == b"second"\n        assert await client.list.pop_right("stack") == b"first"\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," All tests pass"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Tests run with ",(0,i.jsx)(n.code,{children:"pytest tests/poc1/"})]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Test coverage >80%"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Tests run in CI"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 5.2: Create demo script"})," (half day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# examples/poc1-demo.py\n"""\nPOC 1 Demo: KeyValue and List operations with MemStore backend.\n\nShows basic CRUD operations, TTL, scanning, and list FIFO/LIFO patterns.\n"""\nimport asyncio\nfrom prism import PrismClient\n\nasync def demo_keyvalue():\n    print("=== KeyValue Pattern Demo ===\\n")\n\n    async with PrismClient("localhost:8980") as client:\n        # Set and get\n        print("1. Setting key-value pairs...")\n        await client.keyvalue.set("user:alice", b\'{"name": "Alice", "age": 30}\')\n        await client.keyvalue.set("user:bob", b\'{"name": "Bob", "age": 25}\')\n        print("   \u2713 Set user:alice and user:bob")\n\n        # Get\n        print("\\n2. Getting value...")\n        value = await client.keyvalue.get("user:alice")\n        print(f"   \u2713 user:alice = {value.decode()}")\n\n        # Scan\n        print("\\n3. Scanning keys with prefix \'user:\'...")\n        async for key, value in client.keyvalue.scan("user:"):\n            print(f"   \u2713 {key} = {value.decode()}")\n\n        # TTL\n        print("\\n4. Setting key with TTL (expires in 5 seconds)...")\n        await client.keyvalue.set("session:123", b"temporary-data", ttl_seconds=5)\n        print(f"   \u2713 session:123 exists: {await client.keyvalue.exists(\'session:123\')}")\n\n        print("   Waiting 5 seconds for expiration...")\n        await asyncio.sleep(5.5)\n        print(f"   \u2713 session:123 exists: {await client.keyvalue.exists(\'session:123\')}")\n\n        # Delete\n        print("\\n5. Deleting key...")\n        found = await client.keyvalue.delete("user:bob")\n        print(f"   \u2713 Deleted user:bob (found: {found})")\n\nasync def demo_list():\n    print("\\n\\n=== List Pattern Demo ===\\n")\n\n    async with PrismClient("localhost:8980") as client:\n        # FIFO queue\n        print("1. FIFO Queue (push right, pop left)...")\n        await client.list.push_right("queue", b"task-1")\n        await client.list.push_right("queue", b"task-2")\n        await client.list.push_right("queue", b"task-3")\n        print(f"   \u2713 Queue length: {await client.list.length(\'queue\')}")\n\n        print("   Processing queue:")\n        while True:\n            task = await client.list.pop_left("queue")\n            if task is None:\n                break\n            print(f"   \u2713 Processed: {task.decode()}")\n\n        # LIFO stack\n        print("\\n2. LIFO Stack (push right, pop right)...")\n        await client.list.push_right("stack", b"page-1")\n        await client.list.push_right("stack", b"page-2")\n        await client.list.push_right("stack", b"page-3")\n        print(f"   \u2713 Stack length: {await client.list.length(\'stack\')}")\n\n        print("   Popping stack (most recent first):")\n        while True:\n            page = await client.list.pop_right("stack")\n            if page is None:\n                break\n            print(f"   \u2713 Popped: {page.decode()}")\n\nasync def main():\n    await demo_keyvalue()\n    await demo_list()\n    print("\\n\u2705 POC 1 Demo Complete!")\n\nif __name__ == "__main__":\n    asyncio.run(main())\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Demo script runs without errors"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Shows all KeyValue operations"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Shows all List operations"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Outputs clear, user-friendly messages"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Demonstrates TTL expiration"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 5.3: Create README and documentation"})," (half day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"# POC 1: KeyValue with MemStore\n\nWalking skeleton demonstrating Prism's end-to-end architecture.\n\n## Quick Start\n\n### 1. Start MemStore plugin:\n    cd plugins/memstore\n    go run main.go\n\n### 2. Start Rust proxy:\n    cd proxy\n    cargo run -- --config config.yaml\n\n### 3. Run demo:\n    cd examples\n    python poc1-demo.py\n\n## Architecture\n\n[Include component diagram here]\n\n## Running Tests\n\n    pytest tests/poc1/\n\n## What's Implemented\n\n- \u2705 KeyValue pattern (Set, Get, Delete, Exists, Scan)\n- \u2705 List pattern (PushLeft, PushRight, PopLeft, PopRight, Length)\n- \u2705 TTL expiration\n- \u2705 Prefix-based scanning\n- \u2705 gRPC communication (Rust \u2194 Go)\n- \u2705 Python async client library\n\n## What's NOT Implemented\n\n- \u274c Authentication\n- \u274c Observability\n- \u274c Multi-tenancy\n- \u274c Multiple backends\n- \u274c Retry logic\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," README.md created"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Quick start instructions work"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Architecture diagram included"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Lists implemented and not-implemented features"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"work-stream-6-local-development-setup",children:"Work Stream 6: Local Development Setup"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Owner"}),": 1 engineer (DevOps/Infrastructure)\n",(0,i.jsx)(n.strong,{children:"Duration"}),": 1 day\n",(0,i.jsx)(n.strong,{children:"Dependencies"}),": Work Streams 2, 3, 4 complete (for testing)\n",(0,i.jsx)(n.strong,{children:"Can run in parallel with"}),": Work Stream 5"]}),"\n",(0,i.jsx)(n.h4,{id:"tasks-5",children:"Tasks"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 6.1: Create Docker Compose setup"})," (half day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.yml\nversion: \'3.8\'\n\nservices:\n  memstore-plugin:\n    build:\n      context: ./plugins/memstore\n      dockerfile: Dockerfile\n    ports:\n      - "50051:50051"\n    healthcheck:\n      test: ["CMD", "grpcurl", "-plaintext", "localhost:50051", "grpc.health.v1.Health/Check"]\n      interval: 10s\n      timeout: 5s\n      retries: 3\n\n  proxy:\n    build:\n      context: ./proxy\n      dockerfile: Dockerfile\n    ports:\n      - "8980:8980"\n    depends_on:\n      - memstore-plugin\n    volumes:\n      - ./proxy/config.yaml:/app/config.yaml:ro\n    environment:\n      - RUST_LOG=info\n    healthcheck:\n      test: ["CMD", "grpcurl", "-plaintext", "localhost:8980", "grpc.health.v1.Health/Check"]\n      interval: 10s\n      timeout: 5s\n      retries: 3\n\n  admin-api:\n    build:\n      context: ./admin\n      dockerfile: Dockerfile\n    ports:\n      - "8090:8090"\n    environment:\n      - PROXY_CONFIG_PATH=/app/proxy/config.yaml\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost:8090/health"]\n      interval: 10s\n      timeout: 5s\n      retries: 3\n\nnetworks:\n  default:\n    name: prism-poc1\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"docker-compose up"})," starts all services"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Services can communicate"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Health checks pass"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"docker-compose down"})," stops cleanly"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Task 6.2: Create Makefiles for development"})," (half day)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-makefile",children:'# Makefile (root)\n.PHONY: all proto dev-up dev-down test demo clean\n\nall: proto\n\n# Generate protobuf code\nproto:\n\t@echo "Generating protobuf code..."\n\tprotoc --rust_out=proto/rust/ --grpc-rust_out=proto/rust/ proto/**/*.proto\n\tprotoc --go_out=proto/go/ --go-grpc_out=proto/go/ proto/**/*.proto\n\tpython -m grpc_tools.protoc -I proto/ --python_out=clients/python/ \\\n\t\t--grpc_python_out=clients/python/ proto/**/*.proto\n\n# Start development environment\ndev-up:\n\tdocker-compose up -d\n\t@echo "Waiting for services to be healthy..."\n\t@sleep 5\n\t@echo "\u2705 POC 1 environment ready!"\n\t@echo "   Proxy:      http://localhost:8980"\n\t@echo "   Admin API:  http://localhost:8090"\n\n# Stop development environment\ndev-down:\n\tdocker-compose down\n\n# Run tests\ntest:\n\tpytest tests/poc1/ -v\n\n# Run demo\ndemo:\n\tpython examples/poc1-demo.py\n\n# Clean build artifacts\nclean:\n\trm -rf proto/rust/*.rs proto/go/*.go clients/python/prism_pb2*.py\n\tcd proxy && cargo clean\n\tcd plugins/memstore && go clean\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Acceptance Criteria"}),":"]}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"make proto"})," generates code"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"make dev-up"})," starts environment"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"make test"})," runs tests"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"make demo"})," runs demo"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.code,{children:"make clean"})," removes artifacts"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"timeline-and-dependencies",children:"Timeline and Dependencies"}),"\n",(0,i.jsx)(n.h3,{id:"gantt-chart",children:"Gantt Chart"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Day 1    2    3    4    5    6    7    8    9    10\n     \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502   \u2502\nWS1  \u2588\u2588\u2588\u2588                                           Protobuf (1 day)\n        \u2502\n        \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>\n        \u2502\nWS2     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                           Rust Proxy (4 days)\nWS3     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                               Go Plugin (3 days)\nWS4     \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                                   Python Client (2 days)\n        \u2502\n        \u2502                   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588               Integration Tests (2 days)\n        \u2502                   \u2502\n        \u2502                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>     Demo & Docs\n        \u2502\n        \u2502                   \u2588\u2588\u2588\u2588                   Docker Compose (1 day)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"day-by-day-plan",children:"Day-by-Day Plan"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Day 1"}),": Protobuf (WS1 complete)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Morning: Define KeyValue + List protobuf interfaces"}),"\n",(0,i.jsx)(n.li,{children:"Afternoon: Generate code for all languages, validate compilation"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Days 2-5"}),": Core Implementation (WS2, WS3, WS4 in parallel)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Rust Proxy (WS2): 4 days"}),"\n",(0,i.jsx)(n.li,{children:"Go Plugin (WS3): 3 days"}),"\n",(0,i.jsx)(n.li,{children:"Python Client (WS4): 2 days"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Day 6"}),": Integration Point"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All components ready for integration testing"}),"\n",(0,i.jsx)(n.li,{children:"Smoke test: Can client talk to proxy talk to plugin?"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Days 7-8"}),": Integration Tests (WS5)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Write comprehensive integration tests"}),"\n",(0,i.jsx)(n.li,{children:"Create demo script"}),"\n",(0,i.jsx)(n.li,{children:"Documentation"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Days 9-10"}),": Polish and Docker (WS6)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Docker Compose setup"}),"\n",(0,i.jsx)(n.li,{children:"Makefile targets"}),"\n",(0,i.jsx)(n.li,{children:"CI integration"}),"\n",(0,i.jsx)(n.li,{children:"Final testing"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"success-criteria",children:"Success Criteria"}),"\n",(0,i.jsx)(n.h3,{id:"functional-requirements",children:"Functional Requirements"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Requirement"}),(0,i.jsx)(n.th,{children:"Test"}),(0,i.jsx)(n.th,{children:"Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Client can SET key-value"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"test_set_get"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Client can GET key-value"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"test_set_get"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Client can DELETE key"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"test_delete"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Client can check EXISTS"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"test_exists"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Client can SCAN with prefix"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"test_scan"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"TTL expiration works"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"test_ttl"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"List FIFO works"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"test_list_fifo"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"List LIFO works"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"test_list_stack"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Empty list pops return None"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"test_list_fifo"})}),(0,i.jsx)(n.td,{children:"\u2b1c"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"non-functional-requirements",children:"Non-Functional Requirements"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Requirement"}),(0,i.jsx)(n.th,{children:"Target"}),(0,i.jsx)(n.th,{children:"Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"End-to-end latency"}),(0,i.jsx)(n.td,{children:"<5ms P99"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"All components start"}),(0,i.jsx)(n.td,{children:"<10 seconds"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Graceful shutdown"}),(0,i.jsx)(n.td,{children:"No errors"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Test coverage"}),(0,i.jsx)(n.td,{children:">80%"}),(0,i.jsx)(n.td,{children:"\u2b1c"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"deliverables-checklist",children:"Deliverables Checklist"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Protobuf interfaces defined and code generated"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Rust proxy compiled and running"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Go MemStore plugin compiled and running"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Python client library installable"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Integration tests passing"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Demo script working"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Docker Compose setup functional"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Makefile targets working"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," Documentation complete"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"risk-mitigation",children:"Risk Mitigation"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Risk"}),(0,i.jsx)(n.th,{children:"Probability"}),(0,i.jsx)(n.th,{children:"Impact"}),(0,i.jsx)(n.th,{children:"Mitigation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Rust gRPC learning curve"})}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Start with minimal example, iterate"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Cross-language serialization issues"})}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Use protobuf, test early"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Plugin discovery complexity"})}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Hard-code path initially"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"TTL cleanup performance"})}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"Profile if issues arise"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Integration test flakiness"})}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Add retries, timeouts"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Should proxy load plugins dynamically or require restart?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proposal"}),": Require restart for POC 1 (simplicity)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Future"}),": Hot reload in POC 2+"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How to handle plugin crashes?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proposal"}),": Proxy returns error, logs crash (no retry in POC 1)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Future"}),": Circuit breaker, retries in POC 2+"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Should TTL cleanup be background or on-access?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Proposal"}),": On-access (simpler, lazy cleanup)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Future"}),": Background goroutine if performance issue"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-018-poc-implementation-strategy",children:"RFC-018: POC Implementation Strategy"})," - Overall POC roadmap"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-008-proxy-plugin-architecture",children:"RFC-008: Proxy Plugin Architecture"})," - Proxy design"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-014-layered-data-access-patterns",children:"RFC-014: Layered Data Access Patterns"})," - KeyValue pattern spec"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/memos/memo-004-backend-plugin-implementation-guide",children:"MEMO-004: Backend Plugin Implementation Guide"})," - MemStore priority rationale"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/memos/memo-006-backend-interface-decomposition-schema-registry",children:"MEMO-006: Backend Interface Decomposition"})," - MemStore interfaces"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2025-10-09: Initial RFC with detailed work streams for POC 1"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var t=s(96540);const i={},r=t.createContext(i);function l(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);