"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[9951],{23660:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"rfc-012","title":"Prism Network Gateway (prism-netgw) - Multi-Region Control Plane","description":"Abstract","source":"@site/../docs-cms/rfcs/rfc-012-prism-netgw-control-plane.md","sourceDirName":".","slug":"/rfc-012","permalink":"/prism-data-layer/rfc/rfc-012","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/rfc-012-prism-netgw-control-plane.md","tags":[{"inline":true,"label":"control-plane","permalink":"/prism-data-layer/rfc/tags/control-plane"},{"inline":true,"label":"multi-region","permalink":"/prism-data-layer/rfc/tags/multi-region"},{"inline":true,"label":"networking","permalink":"/prism-data-layer/rfc/tags/networking"},{"inline":true,"label":"orchestration","permalink":"/prism-data-layer/rfc/tags/orchestration"},{"inline":true,"label":"high-availability","permalink":"/prism-data-layer/rfc/tags/high-availability"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-09T00:00:00.000Z","doc_uuid":"23612b06-566e-4e46-b8fd-148caacc4136","id":"rfc-012","project_id":"prism-data-layer","status":"Draft","tags":["control-plane","multi-region","networking","orchestration","high-availability"],"title":"Prism Network Gateway (prism-netgw) - Multi-Region Control Plane","updated":"2025-10-09T00:00:00.000Z"},"sidebar":"rfcSidebar","previous":{"title":"Data Proxy Authentication (Input/Output) \u2022 RFC-011","permalink":"/prism-data-layer/rfc/rfc-011"},"next":{"title":"Neptune Graph Backend Implementation \u2022 RFC-013","permalink":"/prism-data-layer/rfc/rfc-013"}}');var r=s(74848),i=s(28453);const a={author:"Platform Team",created:new Date("2025-10-09T00:00:00.000Z"),doc_uuid:"23612b06-566e-4e46-b8fd-148caacc4136",id:"rfc-012",project_id:"prism-data-layer",status:"Draft",tags:["control-plane","multi-region","networking","orchestration","high-availability"],title:"Prism Network Gateway (prism-netgw) - Multi-Region Control Plane",updated:new Date("2025-10-09T00:00:00.000Z")},l="RFC-012: Prism Network Gateway (prism-netgw) - Multi-Region Control Plane",o={},c=[{value:"Abstract",id:"abstract",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Problem Statement",id:"problem-statement",level:3},{value:"Goals",id:"goals",level:3},{value:"Non-Goals",id:"non-goals",level:3},{value:"Architecture",id:"architecture",level:2},{value:"High-Level Design",id:"high-level-design",level:3},{value:"Core Concepts",id:"core-concepts",level:2},{value:"1. Cluster Registration",id:"1-cluster-registration",level:3},{value:"2. Configuration Synchronization",id:"2-configuration-synchronization",level:3},{value:"3. Health Monitoring",id:"3-health-monitoring",level:3},{value:"Split-Brain Prevention",id:"split-brain-prevention",level:3},{value:"3. Authorization",id:"3-authorization",level:3},{value:"4. Audit Logging",id:"4-audit-logging",level:3},{value:"Observability",id:"observability",level:2},{value:"Metrics",id:"metrics",level:3},{value:"Migration Path",id:"migration-path",level:2},{value:"Phase 1: Single-Region Deployment (Week 1)",id:"phase-1-single-region-deployment-week-1",level:3},{value:"Phase 2: Multi-Region Expansion (Week 2-3)",id:"phase-2-multi-region-expansion-week-2-3",level:3},{value:"Phase 3: Production Hardening (Week 4-5)",id:"phase-3-production-hardening-week-4-5",level:3},{value:"Phase 4: Advanced Features (Future)",id:"phase-4-advanced-features-future",level:3},{value:"Open Questions",id:"open-questions",level:2},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"rfc-012-prism-network-gateway-prism-netgw---multi-region-control-plane",children:"RFC-012: Prism Network Gateway (prism-netgw) - Multi-Region Control Plane"})}),"\n",(0,r.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,r.jsxs)(n.p,{children:["This RFC proposes ",(0,r.jsx)(n.strong,{children:"prism-netgw"}),", a distributed control plane for managing collections of Prism data gateway clusters across multiple cloud providers, regions, and on-premises environments. prism-netgw handles cluster registration, configuration synchronization, health monitoring, and cross-region routing while tolerating high latency and network partitions."]}),"\n",(0,r.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,r.jsx)(n.h3,{id:"problem-statement",children:"Problem Statement"}),"\n",(0,r.jsx)(n.p,{children:"Organizations deploying Prism at scale face several challenges:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-Region Deployments"}),": Prism gateways deployed across AWS, GCP, Azure, and on-prem"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration Management"}),": Keeping namespace configs, backend definitions, and policies synchronized"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cross-Region Discovery"}),": Applications need to discover nearest Prism gateway"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Health Monitoring"}),": Centralized visibility into all Prism instances"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"High Latency Tolerance"}),": Cross-region communication experiences 100-500ms latency"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Network Partitions"}),": Cloud VPCs, on-prem networks may have intermittent connectivity"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"goals",children:"Goals"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cluster Management"}),": Register, configure, and monitor Prism gateway clusters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration Sync"}),": Distribute namespace and backend configs across regions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Service Discovery"}),": Enable clients to discover nearest healthy Prism gateway"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Health Aggregation"}),": Collect health and metrics from all clusters"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Latency Tolerance"}),": Operate correctly with 100-500ms cross-region latency"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Partition Tolerance"}),": Handle network partitions gracefully"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-Cloud"}),": Support AWS, GCP, Azure, on-prem deployments"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"non-goals",children:"Non-Goals"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not a data plane"}),": prism-netgw does NOT proxy data requests (Prism gateways handle that)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not a service mesh"}),": Use dedicated service mesh (Istio, Linkerd) for data plane networking"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not a config database"}),": Uses etcd/Consul for distributed storage"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"high-level-design",children:"High-Level Design"}),"\n",(0,r.jsx)(n.p,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                      prism-netgw Control Plane                  \u2502\n\u2502                    (Raft consensus, multi-region)               \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502               \u2502               \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 AWS Region   \u2502  \u2502 GCP Zone \u2502  \u2502 On-Prem DC  \u2502\n\u2502 us-east-1    \u2502  \u2502 us-cent1 \u2502  \u2502 Seattle     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502               \u2502               \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Prism Cluster\u2502  \u2502  Prism   \u2502  \u2502   Prism     \u2502\n\u2502  (3 nodes)   \u2502  \u2502 Cluster  \u2502  \u2502  Cluster    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502               \u2502               \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Backends     \u2502  \u2502 Backends \u2502  \u2502  Backends   \u2502\n\u2502 (Postgres,   \u2502  \u2502 (Kafka,  \u2502  \u2502 (SQLite,    \u2502\n\u2502  Redis)      \u2502  \u2502  NATS)   \u2502  \u2502  Postgres)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n### Components\n\n"})}),"\n",(0,r.jsxs)(n.p,{children:['graph TB\nsubgraph "prism-netgw Control Plane"\nAPI[Control Plane API',(0,r.jsx)(n.br,{}),":9980]\nRaft[Raft Consensus",(0,r.jsx)(n.br,{}),"Multi-region]\nStore[Distributed Store",(0,r.jsx)(n.br,{}),"etcd/Consul]\nMonitor[Health Monitor",(0,r.jsx)(n.br,{}),"Polling]\nSync[Config Sync",(0,r.jsx)(n.br,{}),"Push/Pull]\nDiscovery[Service Discovery",(0,r.jsx)(n.br,{}),"DNS/gRPC]\nend"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'subgraph "Prism Gateway Cluster (us-east-1)"\n    Agent1[prism-agent<br/>:9981]\n    Prism1[Prism Gateway 1]\n    Prism2[Prism Gateway 2]\n    Prism3[Prism Gateway 3]\nend\n\nsubgraph "Prism Gateway Cluster (eu-west-1)"\n    Agent2[prism-agent<br/>:9981]\n    Prism4[Prism Gateway 4]\n    Prism5[Prism Gateway 5]\nend\n\nAPI --\x3e Raft\nRaft --\x3e Store\nMonitor --\x3e Agent1\nMonitor --\x3e Agent2\nSync --\x3e Agent1\nSync --\x3e Agent2\nAgent1 --\x3e Prism1\nAgent1 --\x3e Prism2\nAgent1 --\x3e Prism3\nAgent2 --\x3e Prism4\nAgent2 --\x3e Prism5\nDiscovery -.->|Returns nearest| Prism1\nDiscovery -.->|Returns nearest| Prism4\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n### Deployment Model\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Global Control Plane                         \u2502\n\u2502                                                                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u2502\n\u2502  \u2502 netgw-leader \u2502\u2500\u2500\u2500\u25b6\u2502  netgw-node2 \u2502\u25c0\u2500\u2500\u25b6\u2502  netgw-node3 \u2502    \u2502\n\u2502  \u2502  (us-east-1) \u2502    \u2502  (eu-west-1) \u2502    \u2502 (ap-south-1) \u2502    \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2502\n\u2502         \u2502                    \u2502                    \u2502            \u2502\n\u2502         \u2502 Raft consensus     \u2502                    \u2502            \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Deployment Options"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-Region Active-Standby"}),": 1 leader, N followers in different regions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-Region Active-Active"}),": Raft quorum across regions (requires low latency between control plane nodes)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Federated"}),": Independent control planes per region, manual config sync"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"1-cluster-registration",children:"1. Cluster Registration"}),"\n",(0,r.jsx)(n.p,{children:"Prism gateway clusters register with prism-netgw:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.netgw.v1;\n\nmessage RegisterClusterRequest {\n  string cluster_id = 1;         // Unique cluster identifier (e.g., "aws-us-east-1-prod")\n  string region = 2;              // Cloud region (e.g., "us-east-1")\n  string cloud_provider = 3;      // "aws", "gcp", "azure", "on-prem"\n  string vpc_id = 4;              // VPC or network identifier\n  repeated string endpoints = 5;  // gRPC endpoints for Prism gateways\n  map<string, string> labels = 6; // Arbitrary labels (e.g., "env": "prod")\n}\n\nmessage RegisterClusterResponse {\n  string cluster_id = 1;\n  int64 registration_version = 2;  // Version for optimistic concurrency\n  google.protobuf.Timestamp expires_at = 3;  // TTL for heartbeat\n}\n\nservice ControlPlaneService {\n  rpc RegisterCluster(RegisterClusterRequest) returns (RegisterClusterResponse);\n  rpc UnregisterCluster(UnregisterClusterRequest) returns (UnregisterClusterResponse);\n  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-configuration-synchronization",children:"2. Configuration Synchronization"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Namespace and backend configs must be consistent across all clusters."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Version-controlled config distribution with eventual consistency."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'message SyncConfigRequest {\n  string cluster_id = 1;\n  int64 current_version = 2;  // Cluster\'s current config version\n}\n\nmessage SyncConfigResponse {\n  int64 latest_version = 1;\n  repeated NamespaceConfig namespaces = 2;\n  repeated BackendConfig backends = 3;\n  repeated Policy policies = 4;\n\n  // Incremental updates if current_version is recent\n  bool is_incremental = 10;\n  repeated ConfigChange changes = 11;  // Only deltas since current_version\n}\n\nmessage ConfigChange {\n  enum ChangeType {\n    ADDED = 0;\n    MODIFIED = 1;\n    DELETED = 2;\n  }\n\n  ChangeType type = 1;\n  string resource_type = 2;  // "namespace", "backend", "policy"\n  string resource_id = 3;\n  bytes resource_data = 4;   // Protobuf-encoded resource\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Push Model"})," (preferred):\nprism-netgw   \u2192  Watch(config_version)  \u2192  prism-agent\n\u2190  ConfigUpdate stream     \u2190"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n**Pull Model** (fallback for high latency):\nprism-agent   \u2192  SyncConfig(current_version)  \u2192  prism-netgw\n              \u2190  SyncConfigResponse            \u2190\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-health-monitoring",children:"3. Health Monitoring"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Hierarchical Health Model"}),":"]}),"\n",(0,r.jsx)(n.p,{children:"Global Health (prism-netgw)\n\u251c\u2500\u2500 Cluster Health (per region)\n\u2502   \u251c\u2500\u2500 Gateway Health (per Prism instance)\n\u2502   \u2502   \u251c\u2500\u2500 Process Health (alive, responsive)\n\u2502   \u2502   \u251c\u2500\u2500 Backend Health (Postgres, Kafka, etc.)\n\u2502   \u2502   \u2514\u2500\u2500 Namespace Health (operational state)\n\u2502   \u2514\u2500\u2500 Network Health (connectivity, latency)\n\u2514\u2500\u2500 Control Plane Health (netgw nodes)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text"})}),"\n",(0,r.jsx)(n.p,{children:"message ReportHealthRequest {\nstring cluster_id = 1;\ngoogle.protobuf.Timestamp timestamp = 2;"}),"\n",(0,r.jsx)(n.p,{children:"repeated GatewayHealth gateways = 3;\nrepeated BackendHealth backends = 4;\nrepeated NamespaceHealth namespaces = 5;"}),"\n",(0,r.jsx)(n.p,{children:"NetworkMetrics network = 6;  // Latency, packet loss, etc.\n}"}),"\n",(0,r.jsx)(n.p,{children:"message GatewayHealth {\nstring gateway_id = 1;\nHealthStatus status = 2;  // HEALTHY, DEGRADED, UNHEALTHY\nint64 active_sessions = 3;\nint64 requests_per_second = 4;\ndouble cpu_percent = 5;\ndouble memory_mb = 6;\n}"}),"\n",(0,r.jsx)(n.p,{children:'message BackendHealth {\nstring backend_type = 1;  // "postgres", "kafka", etc.\nHealthStatus status = 2;\ndouble latency_ms = 3;\nstring error_message = 4;\n}'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n### 4. Service Discovery\n\n**Goal**: Clients discover nearest healthy Prism gateway.\n\n"})}),"\n",(0,r.jsx)(n.p,{children:'message DiscoverGatewaysRequest {\nstring namespace = 1;        // Filter by namespace support\nstring client_location = 2;   // "us-east-1", "eu-west-1", etc.\nint32 max_results = 3;        // Limit number of results\n}'}),"\n",(0,r.jsx)(n.p,{children:"message DiscoverGatewaysResponse {\nrepeated Gateway gateways = 1;\n}"}),"\n",(0,r.jsx)(n.p,{children:"message Gateway {\nstring gateway_id = 1;\nstring cluster_id = 2;\nrepeated string endpoints = 3;\nstring region = 4;\ndouble latency_ms = 5;        // Estimated latency from client_location\nHealthStatus health = 6;\nint32 load_score = 7;         // 0-100 (lower is better)\n}"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n**DNS-based discovery** (alternative):\n"})}),"\n",(0,r.jsx)(n.h1,{id:"round-robin-dns-for-prism-gateways",children:"Round-robin DNS for Prism gateways"}),"\n",(0,r.jsx)(n.p,{children:"dig prism.example.com"}),"\n",(0,r.jsx)(n.h1,{id:"-100110-us-east-1",children:"\u2192 10.0.1.10 (us-east-1)"}),"\n",(0,r.jsx)(n.h1,{id:"-100220-eu-west-1",children:"\u2192 10.0.2.20 (eu-west-1)"}),"\n",(0,r.jsx)(n.h1,{id:"geo-dns-for-nearest-gateway",children:"Geo-DNS for nearest gateway"}),"\n",(0,r.jsx)(n.p,{children:"dig prism.example.com"}),"\n",(0,r.jsx)(n.h1,{id:"-100110-us-east-1-if-client-in-north-america",children:"\u2192 10.0.1.10 (us-east-1) [if client in North America]"}),"\n",(0,r.jsx)(n.h1,{id:"-100220-eu-west-1-if-client-in-europe",children:"\u2192 10.0.2.20 (eu-west-1) [if client in Europe]"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n### 5. Cross-Region Routing\n\n**Use Case**: Application in `us-east-1` needs to access namespace hosted in `eu-west-1`.\n\n**Options**:\n\n1. **Direct Routing**: Client connects to remote gateway (simple, higher latency)\n2. **Gateway-to-Gateway Forwarding**: Local gateway proxies to remote gateway (transparent)\n3. **Data Replication**: Namespace replicated across regions (lowest latency, eventual consistency)\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"message RouteRequest {\nstring namespace = 1;\nstring client_region = 2;\n}"}),"\n",(0,r.jsx)(n.p,{children:"message RouteResponse {\nenum RoutingStrategy {\nDIRECT = 0;          // Client connects directly to remote gateway\nPROXY = 1;           // Local gateway proxies to remote\nLOCAL_REPLICA = 2;   // Use local replica\n}"}),"\n",(0,r.jsx)(n.p,{children:"RoutingStrategy strategy = 1;\nstring target_gateway = 2;\nrepeated string fallback_gateways = 3;\n}"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n## Latency and Partition Tolerance\n\n### Handling High Latency (100-500ms)\n\n**Strategies**:\n\n1. **Async Configuration Push**: Don't block on config sync\n"})}),"\n",(0,r.jsx)(n.p,{children:"prism-netgw: Config updated (version 123)\n\u2192 Async push to all clusters (fire-and-forget)\n\u2192 Eventually consistent (all clusters converge to version 123)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n2. **Heartbeat with Jitter**: Randomize heartbeat intervals to avoid thundering herd\n"})}),"\n",(0,r.jsx)(n.p,{children:"let heartbeat_interval = Duration::from_secs(30);\nlet jitter = Duration::from_secs(rand::thread_rng().gen_range(0..10));\nsleep(heartbeat_interval + jitter).await;"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n3. **Batch Updates**: Accumulate config changes and push in batches\n"})}),"\n",(0,r.jsx)(n.p,{children:"Instead of: 10 individual namespace updates (10 round trips)\nDo: 1 batch with 10 namespace updates (1 round trip)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n4. **Caching**: Prism clusters cache config locally (survive netgw downtime)\n"})}),"\n",(0,r.jsx)(n.p,{children:"prism-agent:\n- Fetches config from netgw periodically\n- Caches config on disk\n- Uses cached config if netgw unavailable"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'\n### Handling Network Partitions\n\n**CAP Theorem**: prism-netgw favors **Availability + Partition Tolerance** over **Consistency**.\n\n**Scenario**: `eu-west-1` cluster loses connectivity to control plane.\n\n**Behavior**:\n1. **Local Operation**: Cluster continues serving requests using cached config\n2. **Config Staleness**: Config may be stale (eventual consistency acceptable)\n3. **Heartbeat Failure**: Cluster marked as "Unknown" in control plane\n4. **Reconnection**: When partition heals, cluster syncs latest config\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  prism-netgw \u2502 \u2500\u2500\u2500 X \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 eu-west-1    \u2502\n\u2502  (leader)    \u2502                 \u2502  (isolated)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n   \u2502                                \u2502\n   \u2502 Config version: 150            \u2502 Config version: 147 (cached)\n   \u2502 Cluster status: UNKNOWN        \u2502 Status: OPERATIONAL (degraded)\n   \u2502                                \u2502\n   \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 (partition heals)\n   \u2502 SyncConfig(current_version=147)\u2502\n   \u2502 \u25c0\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2502 Incremental updates: 148-150\n'})}),"\n",(0,r.jsx)(n.h3,{id:"split-brain-prevention",children:"Split-Brain Prevention"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": Network partition causes two control plane nodes to both claim leadership."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Solution"}),": Raft consensus with quorum."]}),"\n",(0,r.jsx)(n.p,{children:"Cluster: 5 netgw nodes (us-east-1, us-west-2, eu-west-1, ap-south-1, ap-northeast-1)\nQuorum: 3 nodes"}),"\n",(0,r.jsx)(n.p,{children:"Partition scenario:\nGroup A: us-east-1, us-west-2, eu-west-1 (3 nodes, HAS QUORUM) \u2192 continues as leader\nGroup B: ap-south-1, ap-northeast-1 (2 nodes, NO QUORUM) \u2192 becomes followers"}),"\n",(0,r.jsx)(n.p,{children:"Result: Only Group A can make config changes (split-brain prevented)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n## API Specification\n\n### gRPC Service Definition\n\n"})}),"\n",(0,r.jsx)(n.p,{children:'syntax = "proto3";'}),"\n",(0,r.jsx)(n.p,{children:"package prism.netgw.v1;"}),"\n",(0,r.jsx)(n.p,{children:'import "google/protobuf/timestamp.proto";\nimport "google/protobuf/duration.proto";'}),"\n",(0,r.jsx)(n.p,{children:"service ControlPlaneService {\n// Cluster Management\nrpc RegisterCluster(RegisterClusterRequest) returns (RegisterClusterResponse);\nrpc UnregisterCluster(UnregisterClusterRequest) returns (UnregisterClusterResponse);\nrpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);\nrpc ListClusters(ListClustersRequest) returns (ListClustersResponse);"}),"\n",(0,r.jsx)(n.p,{children:"// Configuration Sync\nrpc SyncConfig(SyncConfigRequest) returns (SyncConfigResponse);\nrpc WatchConfig(WatchConfigRequest) returns (stream ConfigUpdate);  // Server streaming"}),"\n",(0,r.jsx)(n.p,{children:"// Health Monitoring\nrpc ReportHealth(ReportHealthRequest) returns (ReportHealthResponse);\nrpc GetClusterHealth(GetClusterHealthRequest) returns (GetClusterHealthResponse);\nrpc GetGlobalHealth(GetGlobalHealthRequest) returns (GetGlobalHealthResponse);"}),"\n",(0,r.jsx)(n.p,{children:"// Service Discovery\nrpc DiscoverGateways(DiscoverGatewaysRequest) returns (DiscoverGatewaysResponse);"}),"\n",(0,r.jsx)(n.p,{children:"// Cross-Region Routing\nrpc RouteRequest(RouteRequest) returns (RouteResponse);"}),"\n",(0,r.jsx)(n.p,{children:"// Metrics\nrpc GetMetrics(GetMetricsRequest) returns (GetMetricsResponse);\n}"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n## Deployment\n\n### Kubernetes Deployment (Multi-Region)\n\n"})}),"\n",(0,r.jsx)(n.h1,{id:"deploy-netgw-control-plane-in-multiple-regions",children:"Deploy netgw control plane in multiple regions"}),"\n",(0,r.jsx)(n.p,{children:'apiVersion: apps/v1\nkind: StatefulSet\nmetadata:\nname: prism-netgw\nnamespace: prism-system\nspec:\nreplicas: 3  # Raft quorum\ntemplate:\nspec:\ncontainers:\n- name: netgw\nimage: prism/netgw:latest\nports:\n- containerPort: 9980\nname: grpc\n- containerPort: 9981\nname: raft\nenv:\n- name: NETGW_REGION\nvalue: "us-east-1"\n- name: NETGW_PEERS\nvalue: "netgw-0.netgw.prism-system.svc.cluster.local:9981,netgw-1.netgw.prism-system.svc.cluster.local:9981,netgw-2.netgw.prism-system.svc.cluster.local:9981"\n- name: NETGW_CLUSTER_ID\nvalue: "global-control-plane"\nvolumeMounts:\n- name: data\nmountPath: /var/lib/netgw\nvolumeClaimTemplates:'}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'metadata:\nname: data\nspec:\naccessModes: ["ReadWriteOnce"]\nresources:\nrequests:\nstorage: 10Gi'}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n### Agent Deployment (Per Cluster)\n\n"})}),"\n",(0,r.jsx)(n.h1,{id:"deploy-prism-agent-on-each-prism-gateway-cluster",children:"Deploy prism-agent on each Prism gateway cluster"}),"\n",(0,r.jsx)(n.p,{children:'apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\nname: prism-agent\nnamespace: prism\nspec:\ntemplate:\nspec:\ncontainers:\n- name: agent\nimage: prism/agent:latest\nenv:\n- name: NETGW_ENDPOINT\nvalue: "prism-netgw.prism-system.svc.cluster.local:9980"\n- name: CLUSTER_ID\nvalue: "aws-us-east-1-prod"\n- name: REGION\nvalue: "us-east-1"\n- name: CLOUD_PROVIDER\nvalue: "aws"\nvolumeMounts:\n- name: config-cache\nmountPath: /var/cache/prism\nvolumes:\n- name: config-cache\nemptyDir: {}'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n## Security Considerations\n\n### 1. Mutual TLS\n\nAll communication between netgw and agents uses mTLS:\n\n"})}),"\n",(0,r.jsx)(n.p,{children:"tls:\nserver_cert: /etc/netgw/tls/server.crt\nserver_key: /etc/netgw/tls/server.key\nclient_ca: /etc/netgw/tls/ca.crt\nclient_cert_required: true"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n### 2. Authentication\n\nAgents authenticate via client certificates:\n\nCN=prism-agent,O=aws-us-east-1-prod,OU=prism-cluster\n"})}),"\n",(0,r.jsx)(n.h3,{id:"3-authorization",children:"3. Authorization"}),"\n",(0,r.jsx)(n.p,{children:"RBAC policies for cluster operations:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"policies:\n  - cluster_id: aws-us-east-1-prod\n    allowed_operations:\n      - RegisterCluster\n      - Heartbeat\n      - SyncConfig\n      - ReportHealth\n    forbidden_operations:\n      - UnregisterCluster  # Only control plane admin\n      - ListClusters       # Only control plane admin\n"})}),"\n",(0,r.jsx)(n.h3,{id:"4-audit-logging",children:"4. Audit Logging"}),"\n",(0,r.jsx)(n.p,{children:"All control plane operations logged:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "timestamp": "2025-10-09T10:15:23Z",\n  "operation": "RegisterCluster",\n  "cluster_id": "aws-us-east-1-prod",\n  "region": "us-east-1",\n  "cloud_provider": "aws",\n  "success": true,\n  "latency_ms": 45\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"observability",children:"Observability"}),"\n",(0,r.jsx)(n.h3,{id:"metrics",children:"Metrics"}),"\n",(0,r.jsx)(n.h1,{id:"cluster-metrics",children:"Cluster metrics"}),"\n",(0,r.jsx)(n.p,{children:'prism_netgw_clusters_total{region="us-east-1",cloud_provider="aws"} 5\nprism_netgw_cluster_health{cluster_id="...",status="healthy"} 1'}),"\n",(0,r.jsx)(n.h1,{id:"config-sync-metrics",children:"Config sync metrics"}),"\n",(0,r.jsx)(n.p,{children:'prism_netgw_config_version{cluster_id="..."} 150\nprism_netgw_config_sync_latency_ms{cluster_id="..."} 234'}),"\n",(0,r.jsx)(n.h1,{id:"heartbeat-metrics",children:"Heartbeat metrics"}),"\n",(0,r.jsx)(n.p,{children:'prism_netgw_heartbeat_success_total{cluster_id="..."} 12345\nprism_netgw_heartbeat_failure_total{cluster_id="..."} 3\nprism_netgw_heartbeat_latency_ms{cluster_id="..."} 156'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n### Distributed Tracing\n\nTrace: RegisterCluster\n\u251c\u2500 netgw: ValidateRequest (2ms)\n\u251c\u2500 netgw: StoreCluster \u2192 etcd (45ms)\n\u251c\u2500 netgw: PublishEvent \u2192 NATS (12ms)\n\u2514\u2500 netgw: SendResponse (1ms)\nTotal: 60ms\n"})}),"\n",(0,r.jsx)(n.h2,{id:"migration-path",children:"Migration Path"}),"\n",(0,r.jsx)(n.h3,{id:"phase-1-single-region-deployment-week-1",children:"Phase 1: Single-Region Deployment (Week 1)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Deploy netgw control plane in one region"}),"\n",(0,r.jsx)(n.li,{children:"Register Prism clusters in that region"}),"\n",(0,r.jsx)(n.li,{children:"Basic config sync and health monitoring"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-2-multi-region-expansion-week-2-3",children:"Phase 2: Multi-Region Expansion (Week 2-3)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Deploy netgw nodes in 3 regions (Raft quorum)"}),"\n",(0,r.jsx)(n.li,{children:"Enable cross-region config sync"}),"\n",(0,r.jsx)(n.li,{children:"Implement service discovery"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-3-production-hardening-week-4-5",children:"Phase 3: Production Hardening (Week 4-5)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Add latency tolerance mechanisms"}),"\n",(0,r.jsx)(n.li,{children:"Implement partition handling"}),"\n",(0,r.jsx)(n.li,{children:"Add comprehensive observability"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-4-advanced-features-future",children:"Phase 4: Advanced Features (Future)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Gateway-to-gateway routing"}),"\n",(0,r.jsx)(n.li,{children:"Data replication across regions"}),"\n",(0,r.jsx)(n.li,{children:"Multi-cloud VPC peering"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Control Plane Sizing"}),": How many netgw nodes for global deployment?"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Config Storage"}),": etcd vs Consul vs custom Raft?"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DNS vs gRPC Discovery"}),": Which is more reliable for clients?"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cross-Region Bandwidth"}),": Cost implications of config sync?"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Failover Time"}),": Acceptable latency for cluster failover?"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://raft.github.io/",children:"Raft Consensus Algorithm"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://etcd.io/docs/latest/learning/architecture/",children:"etcd Architecture"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.consul.io/docs/architecture/multi-datacenter",children:"Consul Multi-Datacenter"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://kubernetes.io/docs/concepts/cluster-administration/federation/",children:"Kubernetes Federation"})}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://research.google/pubs/pub39966/",children:"Google Spanner"})," (global consistency)"]}),"\n",(0,r.jsx)(n.li,{children:"ADR-027: Admin API via gRPC"}),"\n",(0,r.jsx)(n.li,{children:"RFC-010: Admin Protocol with OIDC"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2025-10-09: Initial draft for prism-netgw multi-region control plane"}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var t=s(96540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);