"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[2487],{3080:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"protobuf-single-source-of-truth","title":"ADR-003: Protobuf as Single Source of Truth","description":"Context","source":"@site/../docs-cms/adr/003-protobuf-single-source-of-truth.md","sourceDirName":".","slug":"/protobuf-single-source-of-truth","permalink":"/prism-data-layer/adr/protobuf-single-source-of-truth","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/003-protobuf-single-source-of-truth.md","tags":[{"inline":true,"label":"architecture","permalink":"/prism-data-layer/adr/tags/architecture"},{"inline":true,"label":"codegen","permalink":"/prism-data-layer/adr/tags/codegen"},{"inline":true,"label":"dx","permalink":"/prism-data-layer/adr/tags/dx"},{"inline":true,"label":"dry","permalink":"/prism-data-layer/adr/tags/dry"}],"version":"current","sidebarPosition":3,"frontMatter":{"title":"ADR-003: Protobuf as Single Source of Truth","status":"Accepted","date":"2025-10-05T00:00:00.000Z","deciders":"Core Team","tags":["architecture","codegen","dx","dry"]},"sidebar":"adrSidebar","previous":{"title":"ADR-002: Client-Originated Configuration","permalink":"/prism-data-layer/adr/client-originated-configuration"},"next":{"title":"ADR-004: Local-First Testing Strategy","permalink":"/prism-data-layer/adr/local-first-testing"}}');var r=i(4848),t=i(8453);const l={title:"ADR-003: Protobuf as Single Source of Truth",status:"Accepted",date:new Date("2025-10-05T00:00:00.000Z"),deciders:"Core Team",tags:["architecture","codegen","dx","dry"]},o=void 0,a={},d=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why Protobuf?",id:"why-protobuf",level:3},{value:"Custom Options for Prism",id:"custom-options-for-prism",level:3},{value:"Code Generation Pipeline",id:"code-generation-pipeline",level:3},{value:"Example: Complete Data Model",id:"example-complete-data-model",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Project Structure",id:"project-structure",level:3},{value:"Code Generation Tool",id:"code-generation-tool",level:3},{value:"CI Integration",id:"ci-integration",level:3},{value:"Migration Strategy",id:"migration-strategy",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(n.p,{children:"In a data gateway system, multiple components need consistent understanding of data models:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Proxy"}),": Routes requests, validates data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backends"}),": Store and retrieve data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Client libraries"}),": Make requests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Admin UI"}),": Display and manage data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": Describe APIs"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Traditionally, these are defined separately:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Database schemas (SQL DDL)"}),"\n",(0,r.jsx)(n.li,{children:"API schemas (OpenAPI/Swagger)"}),"\n",(0,r.jsx)(n.li,{children:"Client code (hand-written)"}),"\n",(0,r.jsx)(n.li,{children:"Documentation (hand-written)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This leads to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Drift"}),": Schemas get out of sync"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Duplication"}),": Same model defined 4+ times"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Errors"}),": Manual synchronization fails"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Slow iteration"}),": Every change requires updating multiple files"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": How do we maintain consistency across all components while keeping the architecture DRY (Don't Repeat Yourself)?"]}),"\n",(0,r.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.strong,{children:"Protocol Buffers (protobuf)"})," as the single source of truth for all data models, with custom options for Prism-specific metadata. Generate all code, schemas, and configuration from proto definitions."]}),"\n",(0,r.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,r.jsx)(n.h3,{id:"why-protobuf",children:"Why Protobuf?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Language Agnostic"}),": Generate code for Rust, Python, JavaScript, TypeScript"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Strong Typing"}),": Catch errors at compile time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backward Compatible"}),": Evolve schemas without breaking clients"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Compact"}),": Efficient binary serialization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Extensible"}),": Custom options for domain-specific metadata"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tooling"}),": Excellent IDE support, linters, formatters"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"custom-options-for-prism",children:"Custom Options for Prism"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'// prism/options.proto\nsyntax = "proto3";\npackage prism;\n\nimport "google/protobuf/descriptor.proto";\n\n// Message-level options\nextend google.protobuf.MessageOptions {\n  string access_pattern = 50001;      // read_heavy | write_heavy | append_heavy\n  int64 estimated_read_rps = 50002;   // Capacity planning\n  int64 estimated_write_rps = 50003;\n  string backend = 50004;             // postgres | kafka | nats | sqlite | neptune\n  string consistency = 50005;         // strong | eventual | causal\n  int32 retention_days = 50006;       // Auto-delete policy\n  bool enable_cache = 50007;          // Add caching layer\n}\n\n// Field-level options\nextend google.protobuf.FieldOptions {\n  string index = 50101;               // primary | secondary | partition_key | clustering_key\n  string pii = 50102;                 // email | name | ssn | phone | address\n  bool encrypt_at_rest = 50103;       // Field-level encryption\n  string validation = 50104;          // email | uuid | url | regex:...\n  int32 max_length = 50105;           // String length validation\n}\n\n// Service-level options (for future gRPC services)\nextend google.protobuf.ServiceOptions {\n  bool require_auth = 50201;          // All RPCs require auth\n  int32 rate_limit_rps = 50202;       // Service-wide rate limit\n}\n\n// RPC-level options\nextend google.protobuf.MethodOptions {\n  bool idempotent = 50301;            // Safe to retry\n  int32 timeout_ms = 50302;           // RPC timeout\n  string cache_ttl = 50303;           // Cache responses\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"code-generation-pipeline",children:"Code Generation Pipeline"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"proto/*.proto\n    \u2502\n    \u251c\u2500\u2500> Rust code (prost)\n    \u2502    \u251c\u2500\u2500 Data structures\n    \u2502    \u251c\u2500\u2500 gRPC server traits\n    \u2502    \u2514\u2500\u2500 Validation logic\n    \u2502\n    \u251c\u2500\u2500> Python code (protoc)\n    \u2502    \u251c\u2500\u2500 Data classes\n    \u2502    \u2514\u2500\u2500 gRPC clients\n    \u2502\n    \u251c\u2500\u2500> TypeScript code (ts-proto)\n    \u2502    \u251c\u2500\u2500 Types for admin UI\n    \u2502    \u2514\u2500\u2500 API client\n    \u2502\n    \u251c\u2500\u2500> SQL schemas\n    \u2502    \u251c\u2500\u2500 CREATE TABLE statements\n    \u2502    \u251c\u2500\u2500 Indexes\n    \u2502    \u2514\u2500\u2500 Constraints\n    \u2502\n    \u251c\u2500\u2500> Kafka schemas\n    \u2502    \u251c\u2500\u2500 Topic configurations\n    \u2502    \u2514\u2500\u2500 Serialization\n    \u2502\n    \u251c\u2500\u2500> OpenAPI docs\n    \u2502    \u2514\u2500\u2500 REST API documentation\n    \u2502\n    \u2514\u2500\u2500> Deployment configs\n         \u251c\u2500\u2500 Capacity specs\n         \u2514\u2500\u2500 Backend routing\n"})}),"\n",(0,r.jsx)(n.h3,{id:"example-complete-data-model",children:"Example: Complete Data Model"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'// user_profile.proto\nsyntax = "proto3";\n\npackage prism.example;\n\nimport "prism/options.proto";\n\nmessage UserProfile {\n  option (prism.backend) = "postgres";\n  option (prism.consistency) = "strong";\n  option (prism.estimated_read_rps) = "5000";\n  option (prism.estimated_write_rps) = "500";\n  option (prism.enable_cache) = true;\n\n  // Primary key\n  string user_id = 1 [\n    (prism.index) = "primary",\n    (prism.validation) = "uuid"\n  ];\n\n  // PII fields\n  string email = 2 [\n    (prism.pii) = "email",\n    (prism.index) = "secondary",\n    (prism.validation) = "email"\n  ];\n\n  string full_name = 3 [\n    (prism.pii) = "name",\n    (prism.max_length) = 256\n  ];\n\n  // Encrypted field\n  string ssn = 4 [\n    (prism.pii) = "ssn",\n    (prism.encrypt_at_rest) = true\n  ];\n\n  // Metadata\n  int64 created_at = 5;\n  int64 updated_at = 6;\n\n  // Nested message\n  ProfileSettings settings = 7;\n}\n\nmessage ProfileSettings {\n  bool email_notifications = 1;\n  string timezone = 2;\n  string language = 3;\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["This ",(0,r.jsx)(n.strong,{children:"single file"})," generates:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rust structs"})," with validation:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'#[derive(Clone, PartialEq, Message)]\npub struct UserProfile {\n    #[prost(string, tag = "1")]\n    pub user_id: String,\n    #[prost(string, tag = "2")]\n    pub email: String,\n    // ... with validation methods\n}\n\nimpl UserProfile {\n    pub fn validate(&self) -> Result<(), ValidationError> {\n        validate_uuid(&self.user_id)?;\n        validate_email(&self.email)?;\n        // ...\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.ol,{start:"2",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Postgres schema"}),":"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-sql",children:"CREATE TABLE user_profile (\n    user_id UUID PRIMARY KEY,\n    email VARCHAR(255) NOT NULL,\n    full_name VARCHAR(256),\n    ssn_encrypted BYTEA,  -- Encrypted at application layer\n    created_at BIGINT NOT NULL,\n    updated_at BIGINT NOT NULL,\n    settings JSONB\n);\n\nCREATE INDEX idx_user_profile_email ON user_profile(email);\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TypeScript types"})," for admin UI:"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export interface UserProfile {\n  userId: string;\n  email: string;\n  fullName: string;\n  ssn: string;\n  createdAt: number;\n  updatedAt: number;\n  settings?: ProfileSettings;\n}\n"})}),"\n",(0,r.jsxs)(n.ol,{start:"4",children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deployment config"})," (auto-generated):"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"name: user-profile\nbackend: postgres\ncapacity:\n  read_rps: 5000\n  write_rps: 500\n  estimated_data_size_mb: 1000\ncache:\n  enabled: true\n  ttl_seconds: 300\n"})}),"\n",(0,r.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"OpenAPI/Swagger as Source of Truth"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Pros:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"HTTP-first"}),"\n",(0,r.jsx)(n.li,{children:"Good tooling"}),"\n",(0,r.jsx)(n.li,{children:"Popular"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Cons:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Doesn't support binary protocols (Kafka, NATS)"}),"\n",(0,r.jsx)(n.li,{children:"Weaker typing than protobuf"}),"\n",(0,r.jsx)(n.li,{children:"No field-level metadata"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Rejected because: Doesn't cover all our use cases"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"SQL DDL as Source of Truth"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Pros:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Natural for database-first design"}),"\n",(0,r.jsx)(n.li,{children:"DBAs comfortable with it"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Cons:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Only works for SQL backends"}),"\n",(0,r.jsx)(n.li,{children:"Doesn't describe APIs"}),"\n",(0,r.jsx)(n.li,{children:"Poor code generation for clients"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Rejected because: Too backend-specific"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"JSON Schema"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Pros:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Simple"}),"\n",(0,r.jsx)(n.li,{children:"Widely understood"}),"\n",(0,r.jsx)(n.li,{children:"Works with HTTP APIs"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Cons:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Runtime validation only"}),"\n",(0,r.jsx)(n.li,{children:"No compile-time safety"}),"\n",(0,r.jsx)(n.li,{children:"Verbose"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Rejected because: Lack of strong typing"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Hand-Written Code"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Pros:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Full control"}),"\n",(0,r.jsx)(n.li,{children:"No code generation complexity"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Cons:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Massive duplication"}),"\n",(0,r.jsx)(n.li,{children:"Drift between components"}),"\n",(0,r.jsx)(n.li,{children:"Error-prone"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Rejected because: Doesn't scale"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,r.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Single Source of Truth"}),": One place to change data models"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Consistency"}),": All components guaranteed to have same understanding"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type Safety"}),": Compile-time errors across all languages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fast Iteration"}),": Change proto, regenerate, done"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": Proto files are self-documenting"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": Generated validators ensure data integrity"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backward Compatibility"}),": Protobuf's rules prevent breaking changes"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Code Generation Complexity"}),": Must maintain codegen tooling","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Mitigation"}),": Use existing tools (prost, ts-proto); only customize for Prism options"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Learning Curve"}),": Team must learn protobuf","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Mitigation"}),": Good documentation; protobuf is simpler than alternatives"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Build Step Required"}),": Can't edit generated code directly","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Mitigation"}),": Fast build times; clear separation of generated vs. hand-written"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Proto Language Limitations"}),": Can't express all constraints","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use custom options for Prism-specific needs"}),"\n",(0,r.jsx)(n.li,{children:"Complex validation logic in hand-written code"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Version Management"}),": Proto file changes must be carefully reviewed","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enforce backward compatibility checks in CI"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,r.jsx)(n.h3,{id:"project-structure",children:"Project Structure"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"proto/\n\u251c\u2500\u2500 prism/\n\u2502   \u251c\u2500\u2500 options.proto          # Custom Prism options\n\u2502   \u2514\u2500\u2500 common/\n\u2502       \u251c\u2500\u2500 types.proto        # Common types (timestamps, UUIDs, etc.)\n\u2502       \u2514\u2500\u2500 errors.proto       # Error definitions\n\u251c\u2500\u2500 examples/\n\u2502   \u251c\u2500\u2500 user_profile.proto     # Example from above\n\u2502   \u251c\u2500\u2500 user_events.proto      # Kafka example\n\u2502   \u2514\u2500\u2500 social_graph.proto     # Neptune example\n\u2514\u2500\u2500 BUILD.bazel                # Or build.rs for Rust\n"})}),"\n",(0,r.jsx)(n.h3,{id:"code-generation-tool",children:"Code Generation Tool"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# tooling/codegen/__main__.py\n\npython -m tooling.codegen \\\n  --proto-path proto \\\n  --out-rust proxy/src/generated \\\n  --out-python tooling/generated \\\n  --out-typescript admin/app/models/generated \\\n  --out-sql backends/postgres/migrations \\\n  --out-docs docs/api\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ci-integration",children:"CI Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/proto.yml\nname: Protobuf\n\non: [push, pull_request]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check backward compatibility\n        run: buf breaking --against '.git#branch=main'\n      - name: Lint proto files\n        run: buf lint\n      - name: Generate code\n        run: python -m tooling.codegen\n      - name: Verify no changes\n        run: git diff --exit-code  # Fail if generated code is stale\n"})}),"\n",(0,r.jsx)(n.h3,{id:"migration-strategy",children:"Migration Strategy"}),"\n",(0,r.jsx)(n.p,{children:"When changing proto definitions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Additive changes"})," (new fields): Safe, just regenerate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Renaming fields"}),": Use ",(0,r.jsx)(n.code,{children:"json_name"})," option for backward compat"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Removing fields"}),": Mark as ",(0,r.jsx)(n.code,{children:"reserved"})," instead"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Changing types"}),": Create new field, migrate data, deprecate old"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://protobuf.dev/programming-guides/proto3/",children:"Protocol Buffers Language Guide"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://buf.build/",children:"Buf Schema Registry"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/tokio-rs/prost",children:"prost (Rust protobuf)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/stephenh/ts-proto",children:"ts-proto (TypeScript)"})}),"\n",(0,r.jsx)(n.li,{children:"ADR-002: Client-Originated Configuration"}),"\n",(0,r.jsx)(n.li,{children:"ADR-004: Local-First Testing Strategy"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2025-10-05: Initial draft and acceptance"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(6540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);