"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[68471],{28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>c});var r=s(96540);const i={},t=r.createContext(i);function a(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),r.createElement(t.Provider,{value:n},e.children)}},67358:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"rfc-030","title":"RFC-030: Schema Evolution and Validation for Decoupled Pub/Sub","description":"Abstract","source":"@site/../docs-cms/rfcs/RFC-030-schema-evolution-pubsub-validation.md","sourceDirName":".","slug":"/rfc-030","permalink":"/prism-data-layer/rfc/rfc-030","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/RFC-030-schema-evolution-pubsub-validation.md","tags":[{"inline":true,"label":"schema","permalink":"/prism-data-layer/rfc/tags/schema"},{"inline":true,"label":"pubsub","permalink":"/prism-data-layer/rfc/tags/pubsub"},{"inline":true,"label":"validation","permalink":"/prism-data-layer/rfc/tags/validation"},{"inline":true,"label":"evolution","permalink":"/prism-data-layer/rfc/tags/evolution"},{"inline":true,"label":"governance","permalink":"/prism-data-layer/rfc/tags/governance"},{"inline":true,"label":"developer-experience","permalink":"/prism-data-layer/rfc/tags/developer-experience"},{"inline":true,"label":"internet-scale","permalink":"/prism-data-layer/rfc/tags/internet-scale"}],"version":"current","frontMatter":{"title":"RFC-030: Schema Evolution and Validation for Decoupled Pub/Sub","author":"Platform Team","created":"2025-10-13T00:00:00.000Z","updated":"2025-10-13T00:00:00.000Z","status":"Draft","tags":["schema","pubsub","validation","evolution","governance","developer-experience","internet-scale"],"id":"rfc-030","project_id":"prism-data-layer","doc_uuid":"57465edc-4a60-43d5-8963-9198b3facc96"},"sidebar":"rfcSidebar","previous":{"title":"Load Testing Framework Evaluation and Strategy \u2022 RFC-029","permalink":"/prism-data-layer/rfc/rfc-029"},"next":{"title":"Message Envelope Protocol for Pub/Sub Systems \u2022 RFC-031","permalink":"/prism-data-layer/rfc/rfc-031"}}');var i=s(74848),t=s(28453);const a={title:"RFC-030: Schema Evolution and Validation for Decoupled Pub/Sub",author:"Platform Team",created:new Date("2025-10-13T00:00:00.000Z"),updated:new Date("2025-10-13T00:00:00.000Z"),status:"Draft",tags:["schema","pubsub","validation","evolution","governance","developer-experience","internet-scale"],id:"rfc-030",project_id:"prism-data-layer",doc_uuid:"57465edc-4a60-43d5-8963-9198b3facc96"},c=void 0,o={},l=[{value:"Abstract",id:"abstract",level:2},{value:"Motivation",id:"motivation",level:2},{value:"The Decoupling Problem",id:"the-decoupling-problem",level:3},{value:"Why This Matters for PRD-001 Goals",id:"why-this-matters-for-prd-001-goals",level:3},{value:"Real-World Scenarios",id:"real-world-scenarios",level:3},{value:"Goals",id:"goals",level:2},{value:"Non-Goals",id:"non-goals",level:2},{value:"Proposed Solution: Layered Schema Registry",id:"proposed-solution-layered-schema-registry",level:2},{value:"Architecture Overview",id:"architecture-overview",level:3},{value:"Three-Tier Schema Storage",id:"three-tier-schema-storage",level:3},{value:"Tier 1: GitHub (Developer-Friendly, Git-Native)",id:"tier-1-github-developer-friendly-git-native",level:4},{value:"Tier 2: Prism Schema Registry (Platform-Managed, High Performance)",id:"tier-2-prism-schema-registry-platform-managed-high-performance",level:4},{value:"Tier 3: Confluent Schema Registry (Kafka-Native)",id:"tier-3-confluent-schema-registry-kafka-native",level:4},{value:"Comparison with Kafka Ecosystem Registries",id:"comparison-with-kafka-ecosystem-registries",level:3},{value:"Build vs Buy: Custom Prism Schema Registry Feasibility Analysis",id:"build-vs-buy-custom-prism-schema-registry-feasibility-analysis",level:3},{value:"Internet-Scale Decoupled Usage Scenarios",id:"internet-scale-decoupled-usage-scenarios",level:3},{value:"Schema Declaration in Namespace Config",id:"schema-declaration-in-namespace-config",level:3},{value:"Schema Attachment at Publish Time",id:"schema-attachment-at-publish-time",level:3},{value:"Consumer Schema Discovery and Validation",id:"consumer-schema-discovery-and-validation",level:3},{value:"Backend Schema Propagation",id:"backend-schema-propagation",level:3},{value:"Optional Field Enforcement for Producers",id:"optional-field-enforcement-for-producers",level:3},{value:"Backward/Forward Compatibility Modes",id:"backwardforward-compatibility-modes",level:3},{value:"Governance: Schema and Consumer Tags for Distributed Teams",id:"governance-schema-and-consumer-tags-for-distributed-teams",level:3},{value:"Schema-Level Governance Tags",id:"schema-level-governance-tags",level:4},{value:"Consumer-Level Governance Tags",id:"consumer-level-governance-tags",level:4},{value:"Governance Tag Enforcement Matrix",id:"governance-tag-enforcement-matrix",level:4},{value:"Field-Level Access Control (Column Security)",id:"field-level-access-control-column-security",level:4},{value:"Deprecation Warnings for Schema Evolution",id:"deprecation-warnings-for-schema-evolution",level:4},{value:"Audit Logging and Compliance",id:"audit-logging-and-compliance",level:4},{value:"Governance Tag Best Practices",id:"governance-tag-best-practices",level:4},{value:"Example: End-to-End Governance Flow",id:"example-end-to-end-governance-flow",level:4},{value:"Schema Evolution Workflow",id:"schema-evolution-workflow",level:3},{value:"Schema Registry API Specification",id:"schema-registry-api-specification",level:3},{value:"Developer Workflows",id:"developer-workflows",level:3},{value:"Implementation Plan",id:"implementation-plan",level:2},{value:"Phase 1: GitHub-Based Registry (Weeks 1-3)",id:"phase-1-github-based-registry-weeks-1-3",level:3},{value:"Phase 2: Schema Validation (Weeks 4-6)",id:"phase-2-schema-validation-weeks-4-6",level:3},{value:"Phase 3: Prism Schema Registry (Weeks 7-10)",id:"phase-3-prism-schema-registry-weeks-7-10",level:3},{value:"Phase 4: Governance and PII (Weeks 11-13)",id:"phase-4-governance-and-pii-weeks-11-13",level:3},{value:"Phase 5: Code Generation (Weeks 14-16)",id:"phase-5-code-generation-weeks-14-16",level:3},{value:"Trade-Offs and Alternatives",id:"trade-offs-and-alternatives",level:2},{value:"Alternative 1: No Schema Registry (Status Quo)",id:"alternative-1-no-schema-registry-status-quo",level:3},{value:"Alternative 2: Confluent Schema Registry Only",id:"alternative-2-confluent-schema-registry-only",level:3},{value:"Alternative 3: Git-Only (No Registry Service)",id:"alternative-3-git-only-no-registry-service",level:3},{value:"Proposed Hybrid Approach",id:"proposed-hybrid-approach",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Schema Tampering",id:"schema-tampering",level:3},{value:"PII Leakage",id:"pii-leakage",level:3},{value:"Schema Poisoning",id:"schema-poisoning",level:3},{value:"Performance Characteristics",id:"performance-characteristics",level:2},{value:"Per-Message Validation Performance Trade-Offs",id:"per-message-validation-performance-trade-offs",level:3},{value:"Schema Registry Benchmarks",id:"schema-registry-benchmarks",level:3},{value:"Publish Overhead",id:"publish-overhead",level:3},{value:"Observability",id:"observability",level:2},{value:"Metrics",id:"metrics",level:3},{value:"Logs",id:"logs",level:3},{value:"Traces",id:"traces",level:3},{value:"Testing Strategy",id:"testing-strategy",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"End-to-End Tests",id:"end-to-end-tests",level:3},{value:"Migration Path",id:"migration-path",level:2},{value:"Phase 0: No Schemas (Current State)",id:"phase-0-no-schemas-current-state",level:3},{value:"Phase 1: Optional Schema References (Soft Launch)",id:"phase-1-optional-schema-references-soft-launch",level:3},{value:"Phase 2: Mandatory Schemas for New Topics",id:"phase-2-mandatory-schemas-for-new-topics",level:3},{value:"Phase 3: Governance Enforcement",id:"phase-3-governance-enforcement",level:3},{value:"Success Criteria",id:"success-criteria",level:2},{value:"Open Questions",id:"open-questions",level:2},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",input:"input",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,i.jsx)(n.p,{children:"This RFC addresses schema evolution and validation for publisher/consumer patterns in Prism where producers and consumers are decoupled across async teams with different workflows and GitHub repositories. It proposes a schema registry approach that enables producers to declare publish schemas (GitHub or dedicated registry), consumers to validate compatibility at runtime, and platform teams to enforce governance while maintaining development velocity."}),"\n",(0,i.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,i.jsx)(n.h3,{id:"the-decoupling-problem",children:"The Decoupling Problem"}),"\n",(0,i.jsx)(n.p,{children:"Prism's pub/sub and queue patterns intentionally decouple producers from consumers:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Current Architecture:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Producer App   \u2502         \u2502  Consumer App   \u2502\n\u2502  (Team A, Repo 1)\u2502        \u2502  (Team B, Repo 2)\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                           \u2502\n         \u2502  Publish                  \u2502  Subscribe\n         \u2502  events                   \u2502  events\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                     \u25bc     \u25bc\n              \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n              \u2502  Prism Proxy     \u2502\n              \u2502  NATS/Kafka      \u2502\n              \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Problems This Creates:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Schema Discovery"}),": Consumer teams don't know what schema producers use"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No centralized documentation"}),"\n",(0,i.jsxs)(n.li,{children:['Tribal knowledge or Slack asks: "Hey, what fields does ',(0,i.jsx)(n.code,{children:"user.created"}),' have?"']}),"\n",(0,i.jsx)(n.li,{children:"Breaking changes discovered at runtime"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Version Mismatches"}),": Producer evolves schema, consumer breaks"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Producer adds required field \u2192 consumers crash on deserialization"}),"\n",(0,i.jsxs)(n.li,{children:["Producer removes field \u2192 consumers get ",(0,i.jsx)(n.code,{children:"null"})," unexpectedly"]}),"\n",(0,i.jsx)(n.li,{children:"Producer changes field type \u2192 silent data corruption"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cross-Repo Workflows"}),": Teams can't coordinate deploys"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Producer Team A deploys v2 schema on Monday"}),"\n",(0,i.jsx)(n.li,{children:"Consumer Team B still running v1 code on Friday"}),"\n",(0,i.jsx)(n.li,{children:"No visibility into downstream breakage"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Testing Challenges"}),": Consumers can't test against producer changes"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Integration tests use mock data"}),"\n",(0,i.jsx)(n.li,{children:"Mocks drift from real schemas"}),"\n",(0,i.jsx)(n.li,{children:"Production is first place incompatibility detected"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Governance Vacuum"}),": No platform control over data quality"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No PII tagging enforcement"}),"\n",(0,i.jsx)(n.li,{children:"No backward compatibility checks"}),"\n",(0,i.jsx)(n.li,{children:"No schema approval workflows"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"why-this-matters-for-prd-001-goals",children:"Why This Matters for PRD-001 Goals"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"PRD-001 Core Goals This Blocks:"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Goal"}),(0,i.jsx)(n.th,{children:"Blocked By"}),(0,i.jsx)(n.th,{children:"Impact"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Accelerate Development"})}),(0,i.jsx)(n.td,{children:"Waiting for schema docs from other teams"}),(0,i.jsx)(n.td,{children:"Delays feature delivery"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Enable Migrations"})}),(0,i.jsx)(n.td,{children:"Can't validate consumers before backend change"}),(0,i.jsx)(n.td,{children:"Risky migrations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Reduce Operational Cost"})}),(0,i.jsx)(n.td,{children:"Runtime failures from schema mismatches"}),(0,i.jsx)(n.td,{children:"Incident toil"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Improve Reliability"})}),(0,i.jsx)(n.td,{children:"Silent data corruption from type changes"}),(0,i.jsx)(n.td,{children:"Data quality issues"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Foster Innovation"})}),(0,i.jsx)(n.td,{children:"Fear of breaking downstream consumers"}),(0,i.jsx)(n.td,{children:"Slows experimentation"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"real-world-scenarios",children:"Real-World Scenarios"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario 1: E-Commerce Order Events"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Producer: Order Service (Team A)\n  - Publishes: orders.created\n  - Schema: {order_id, user_id, items[], total, currency}\n\nConsumers:\n  - Fulfillment Service (Team B): Needs order_id, items[]\n  - Analytics Pipeline (Team C): Needs all fields\n  - Email Service (Team D): Needs order_id, user_id, total\n\nProblem: Team A wants to add `tax_amount` field (required)\n  - How do they know which consumers will break?\n  - How do consumers discover this change before deploy?\n  - What happens if Team D deploys before Team A?\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario 2: IoT Sensor Data"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Producer: IoT Gateway (Team A)\n  - Publishes: sensor.readings\n  - Schema: {sensor_id, timestamp, temperature, humidity}\n\nConsumers:\n  - Alerting Service (Team B): Needs sensor_id, temperature\n  - Data Lake (Team C): Needs all fields\n  - Dashboard (Team D): Needs sensor_id, timestamp, temperature\n\nProblem: Team A changes `temperature` from int (Celsius) to float (Fahrenheit)\n  - Type change breaks deserialization\n  - Semantic change breaks business logic\n  - How to test this without breaking production?\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario 3: User Profile Updates"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Producer: User Service (Team A)\n  - Publishes: user.profile.updated\n  - Schema: {user_id, email, name, avatar_url}\n  - Contains PII: email, name\n\nConsumer: Search Indexer (Team B)\n  - Stores ALL fields in Elasticsearch (public-facing search)\n\nProblem: PII leak due to missing governance\n  - Producer doesn't tag PII fields\n  - Consumer indexes email addresses\n  - Compliance violation, data breach risk\n"})}),"\n",(0,i.jsx)(n.h2,{id:"goals",children:"Goals"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schema Discovery"}),": Consumers can find producer schemas without asking humans"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compatibility Validation"}),": Consumers detect breaking changes before deploy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Decoupled Evolution"}),": Producers evolve schemas without coordinating deploys"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testing Support"}),": Consumers test against real schemas in CI/CD"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Governance Enforcement"}),": Platform enforces PII tagging, compatibility rules"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Developer Velocity"}),": Schema changes take minutes, not days of coordination"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"non-goals",children:"Non-Goals"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Runtime Schema Transformation"}),": No automatic v1 \u2192 v2 translation (use separate topics)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-Language Type System"}),": Won't solve Go struct \u2194 Python dict \u2194 Rust enum mapping"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schema Inference"}),": Won't auto-generate schemas from published data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Global Schema Uniqueness"}),": Same event type can have different schemas per namespace"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Zero Downtime Schema Migration"}),": Producers/consumers must handle overlapping schema versions"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"proposed-solution-layered-schema-registry",children:"Proposed Solution: Layered Schema Registry"}),"\n",(0,i.jsx)(n.h3,{id:"architecture-overview",children:"Architecture Overview"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Producer Workflow                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                            \u2502\n\u2502  1. Define Schema (protobuf/json-schema/avro)             \u2502\n\u2502     \u251c\u2500 orders.created.v2.proto                            \u2502\n\u2502     \u251c\u2500 PII tags: @prism.pii(type="email")                 \u2502\n\u2502     \u2514\u2500 Backward compat: optional new fields               \u2502\n\u2502                                                            \u2502\n\u2502  2. Register Schema                                        \u2502\n\u2502     \u251c\u2500 Option A: Push to GitHub (git tag release)        \u2502\n\u2502     \u251c\u2500 Option B: POST to Prism Schema Registry           \u2502\n\u2502     \u2514\u2500 CI/CD validates compat                             \u2502\n\u2502                                                            \u2502\n\u2502  3. Publish with Schema Reference                         \u2502\n\u2502     client.publish(topic="orders.created", payload=data,  \u2502\n\u2502                    schema_url="github.com/.../v2.proto")  \u2502\n\u2502                                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Consumer Workflow                          \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                            \u2502\n\u2502  1. Discover Schema                                        \u2502\n\u2502     \u251c\u2500 List available schemas for topic                   \u2502\n\u2502     \u251c\u2500 GET github.com/.../orders.created.v2.proto         \u2502\n\u2502     \u2514\u2500 Generate client code (protoc)                      \u2502\n\u2502                                                            \u2502\n\u2502  2. Validate Compatibility (CI/CD)                        \u2502\n\u2502     \u251c\u2500 prism schema check --consumer my-schema.proto      \u2502\n\u2502     \u251c\u2500 Fails if producer added required fields           \u2502\n\u2502     \u2514\u2500 Warns if producer removed fields                   \u2502\n\u2502                                                            \u2502\n\u2502  3. Subscribe with Schema Assertion                       \u2502\n\u2502     client.subscribe(topic="orders.created",              \u2502\n\u2502                      expected_schema="v2",                \u2502\n\u2502                      on_mismatch="warn")                  \u2502\n\u2502                                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Prism Proxy (Schema Enforcement)               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502                                                            \u2502\n\u2502  - Caches schemas from registry/GitHub                    \u2502\n\u2502  - Validates published messages match declared schema     \u2502\n\u2502  - Attaches schema metadata to messages                   \u2502\n\u2502  - Enforces PII tagging policy                            \u2502\n\u2502  - Tracks schema versions per topic                       \u2502\n\u2502                                                            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n'})}),"\n",(0,i.jsx)(n.h3,{id:"three-tier-schema-storage",children:"Three-Tier Schema Storage"}),"\n",(0,i.jsx)(n.h4,{id:"tier-1-github-developer-friendly-git-native",children:"Tier 1: GitHub (Developer-Friendly, Git-Native)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use Case"}),": Open-source workflows, multi-repo teams, audit trail via Git history"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"# Producer repository structure\nmy-service/\n\u251c\u2500\u2500 schemas/\n\u2502   \u2514\u2500\u2500 events/\n\u2502       \u251c\u2500\u2500 orders.created.v1.proto\n\u2502       \u251c\u2500\u2500 orders.created.v2.proto\n\u2502       \u2514\u2500\u2500 orders.updated.v1.proto\n\u251c\u2500\u2500 prism-config.yaml\n\u2514\u2500\u2500 README.md\n\n# prism-config.yaml\nnamespaces:\n  - name: orders\n    pattern: pubsub\n    schema:\n      registry_type: github\n      repository: github.com/myorg/my-service\n      path: schemas/events\n      branch: main  # or use git tags for immutability\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Schema URL Format:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"github.com/myorg/my-service/blob/main/schemas/events/orders.created.v2.proto\ngithub.com/myorg/my-service/blob/v2.1.0/schemas/events/orders.created.v2.proto  # Tagged release\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Familiar Git workflow (PR reviews, version tags)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Public schemas for open-source projects"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Free (GitHub hosts)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Change history and blame"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 CI/CD integration via GitHub Actions"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u274c Requires GitHub access (not suitable for air-gapped envs)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Rate limits (5000 req/hour authenticated)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Latency (300-500ms per fetch)"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"tier-2-prism-schema-registry-platform-managed-high-performance",children:"Tier 2: Prism Schema Registry (Platform-Managed, High Performance)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use Case"}),": Enterprise, high-throughput, governance controls, private networks"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'# POST /v1/schemas\nPOST https://prism-registry.example.com/v1/schemas\n\n{\n  "namespace": "orders",\n  "topic": "orders.created",\n  "version": "v2",\n  "format": "protobuf",\n  "schema": "<base64-encoded proto>",\n  "metadata": {\n    "owner_team": "order-team",\n    "pii_fields": ["email", "billing_address"],\n    "compatibility_mode": "backward"\n  }\n}\n\n# Response\n{\n  "schema_id": "schema-abc123",\n  "schema_url": "prism-registry.example.com/v1/schemas/schema-abc123",\n  "validation": {\n    "compatible_with_v1": true,\n    "breaking_changes": [],\n    "warnings": ["Field \'tax_amount\' added as optional"]\n  }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Low latency (<10ms, in-cluster)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 No external dependencies"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Governance hooks (approval workflows)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Caching (aggressive, TTL=1h)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Observability (metrics, audit logs)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u274c Requires infrastructure (deploy + maintain registry service)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Not Git-native (must integrate with Git repos separately)"}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"tier-3-confluent-schema-registry-kafka-native",children:"Tier 3: Confluent Schema Registry (Kafka-Native)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Use Case"}),": Kafka-heavy deployments, existing Confluent infrastructure"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'# Use Confluent REST API\nPOST http://kafka-schema-registry:8081/subjects/orders.created-value/versions\n\n{\n  "schema": "{...protobuf IDL...}",\n  "schemaType": "PROTOBUF"\n}\n\n# Prism adapter translates to Confluent API\nprism-config.yaml:\n  schema:\n    registry_type: confluent\n    url: http://kafka-schema-registry:8081\n    compatibility: BACKWARD\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Kafka ecosystem integration"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Mature, battle-tested (100k+ deployments)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Built-in compatibility checks"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u274c Kafka-specific (doesn't work with NATS)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Licensing (Confluent Community vs Enterprise)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Heavy (JVM-based, 1GB+ memory)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"comparison-with-kafka-ecosystem-registries",children:"Comparison with Kafka Ecosystem Registries"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Validation Against Existing Standards:"})}),"\n",(0,i.jsx)(n.p,{children:"Prism's schema registry approach is validated against three major Kafka ecosystem registries:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"Confluent Schema Registry"}),(0,i.jsx)(n.th,{children:"AWS Glue Schema Registry"}),(0,i.jsx)(n.th,{children:"Apicurio Registry"}),(0,i.jsx)(n.th,{children:"Prism Schema Registry"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Protocol Support"})}),(0,i.jsx)(n.td,{children:"REST"}),(0,i.jsx)(n.td,{children:"REST"}),(0,i.jsx)(n.td,{children:"REST"}),(0,i.jsx)(n.td,{children:"gRPC + REST"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Schema Formats"})}),(0,i.jsx)(n.td,{children:"Avro, Protobuf, JSON Schema"}),(0,i.jsx)(n.td,{children:"Avro, JSON Schema, Protobuf"}),(0,i.jsx)(n.td,{children:"Avro, Protobuf, JSON, OpenAPI, AsyncAPI"}),(0,i.jsx)(n.td,{children:"Protobuf, JSON Schema, Avro"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Backend Lock-In"})}),(0,i.jsx)(n.td,{children:"Kafka-specific"}),(0,i.jsx)(n.td,{children:"AWS-specific"}),(0,i.jsx)(n.td,{children:"Multi-backend"}),(0,i.jsx)(n.td,{children:"Multi-backend (NATS, Kafka, etc.)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Compatibility Checking"})}),(0,i.jsx)(n.td,{children:"\u2705 Backward, Forward, Full"}),(0,i.jsx)(n.td,{children:"\u2705 Backward, Forward, Full, None"}),(0,i.jsx)(n.td,{children:"\u2705 Backward, Forward, Full"}),(0,i.jsx)(n.td,{children:"\u2705 Backward, Forward, Full, None"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Schema Evolution"})}),(0,i.jsx)(n.td,{children:"\u2705 Subject-based versioning"}),(0,i.jsx)(n.td,{children:"\u2705 Version-based"}),(0,i.jsx)(n.td,{children:"\u2705 Artifact-based"}),(0,i.jsx)(n.td,{children:"\u2705 Topic + namespace versioning"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Language-agnostic"})}),(0,i.jsx)(n.td,{children:"\u2705 Yes"}),(0,i.jsx)(n.td,{children:"\u2705 Yes"}),(0,i.jsx)(n.td,{children:"\u2705 Yes"}),(0,i.jsx)(n.td,{children:"\u2705 Yes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Storage Backend"})}),(0,i.jsx)(n.td,{children:"Kafka topic"}),(0,i.jsx)(n.td,{children:"DynamoDB"}),(0,i.jsx)(n.td,{children:"PostgreSQL, Kafka, Infinispan"}),(0,i.jsx)(n.td,{children:"SQLite (dev), Postgres (prod)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Git Integration"})}),(0,i.jsx)(n.td,{children:"\u274c No"}),(0,i.jsx)(n.td,{children:"\u274c No"}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f External only"}),(0,i.jsx)(n.td,{children:"\u2705 Native GitHub support"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Client-Side Caching"})}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f Manual"}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f Manual"}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f Manual"}),(0,i.jsx)(n.td,{children:"\u2705 Built-in (namespace config)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"PII Governance"})}),(0,i.jsx)(n.td,{children:"\u274c No"}),(0,i.jsx)(n.td,{children:"\u274c No"}),(0,i.jsx)(n.td,{children:"\u274c No"}),(0,i.jsx)(n.td,{children:"\u2705 Prism annotations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Deployment"})}),(0,i.jsx)(n.td,{children:"JVM (1GB+)"}),(0,i.jsx)(n.td,{children:"Managed service"}),(0,i.jsx)(n.td,{children:"JVM or native"}),(0,i.jsx)(n.td,{children:"Rust (<50MB)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Latency (P99)"})}),(0,i.jsx)(n.td,{children:"10-20ms"}),(0,i.jsx)(n.td,{children:"20-50ms"}),(0,i.jsx)(n.td,{children:"10-30ms"}),(0,i.jsx)(n.td,{children:"<10ms (in-cluster)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Pricing"})}),(0,i.jsx)(n.td,{children:"Free (OSS) / Enterprise $$"}),(0,i.jsx)(n.td,{children:"Per API call"}),(0,i.jsx)(n.td,{children:"Free (OSS)"}),(0,i.jsx)(n.td,{children:"Free (OSS)"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Differentiators:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multi-Backend Support"}),": Prism works with NATS, Kafka, RabbitMQ, etc. (not Kafka-specific)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Git-Native"}),": Schemas can live in GitHub repos (no separate registry infrastructure for OSS)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Config-Time Resolution"}),": Schema validated once at namespace config, not per-message"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PII Governance"}),": Built-in ",(0,i.jsx)(n.code,{children:"@prism.pii"})," annotations for compliance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lightweight"}),": Rust-based registry (50MB) vs JVM-based (1GB+)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Standard Compatibility:"})}),"\n",(0,i.jsx)(n.p,{children:"Prism implements the same compatibility modes as Confluent:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"BACKWARD"}),": New schema can read old data (add optional fields)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"FORWARD"}),": Old schema can read new data (delete optional fields)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"FULL"}),": Both backward and forward"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NONE"}),": No compatibility checks"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Prism can also ",(0,i.jsx)(n.strong,{children:"interoperate"})," with Confluent Schema Registry via Tier 3 adapter (see above)."]}),"\n",(0,i.jsx)(n.h3,{id:"build-vs-buy-custom-prism-schema-registry-feasibility-analysis",children:"Build vs Buy: Custom Prism Schema Registry Feasibility Analysis"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CRITICAL DECISION"}),": Should Prism build its own schema registry or rely on existing solutions?"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Decision Criteria:"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Criterion"}),(0,i.jsx)(n.th,{children:"Custom Prism Registry"}),(0,i.jsx)(n.th,{children:"Existing Solutions (Confluent, Apicurio)"}),(0,i.jsx)(n.th,{children:"Weight"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Multi-Backend Support"})}),(0,i.jsx)(n.td,{children:"\u2705 Works with NATS, Kafka, Redis, etc."}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f Kafka-specific (Confluent) or heavyweight (Apicurio)"}),(0,i.jsx)(n.td,{children:"HIGH"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Development Effort"})}),(0,i.jsx)(n.td,{children:"\u274c 3-4 months initial + ongoing maintenance"}),(0,i.jsx)(n.td,{children:"\u2705 Zero dev effort, use off-the-shelf"}),(0,i.jsx)(n.td,{children:"HIGH"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Deployment Complexity"})}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f Another service to deploy/monitor"}),(0,i.jsx)(n.td,{children:"\u274c Same (JVM-based, 1GB+ memory)"}),(0,i.jsx)(n.td,{children:"MEDIUM"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Performance"})}),(0,i.jsx)(n.td,{children:"\u2705 Rust-based (<50MB, <10ms P99)"}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f JVM overhead (100ms+ P99 at scale)"}),(0,i.jsx)(n.td,{children:"MEDIUM"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Git Integration"})}),(0,i.jsx)(n.td,{children:"\u2705 Native GitHub support (Tier 1)"}),(0,i.jsx)(n.td,{children:"\u274c No native Git integration"}),(0,i.jsx)(n.td,{children:"HIGH"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"PII Governance"})}),(0,i.jsxs)(n.td,{children:["\u2705 Built-in ",(0,i.jsx)(n.code,{children:"@prism.pii"})," annotations"]}),(0,i.jsx)(n.td,{children:"\u274c Not supported (manual enforcement)"}),(0,i.jsx)(n.td,{children:"MEDIUM"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Operational Maturity"})}),(0,i.jsx)(n.td,{children:"\u274c New, unproven at scale"}),(0,i.jsx)(n.td,{children:"\u2705 Battle-tested (100k+ deployments)"}),(0,i.jsx)(n.td,{children:"HIGH"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Ecosystem Tools"})}),(0,i.jsx)(n.td,{children:"\u274c No existing tooling"}),(0,i.jsx)(n.td,{children:"\u2705 Rich ecosystem (CLI, UI, plugins)"}),(0,i.jsx)(n.td,{children:"MEDIUM"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Licensing"})}),(0,i.jsx)(n.td,{children:"\u2705 Open-source (Apache 2.0)"}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f Confluent: Community (limited) vs Enterprise"}),(0,i.jsx)(n.td,{children:"MEDIUM"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Air-Gap Support"})}),(0,i.jsx)(n.td,{children:"\u2705 Works offline with Git repos"}),(0,i.jsx)(n.td,{children:"\u274c Requires external registry service"}),(0,i.jsx)(n.td,{children:"LOW"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Recommendation: Hybrid Approach (Build Lightweight Custom Registry + Support Existing)"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Phase 1: Minimal Viable Registry (8 weeks)"})}),"\n",(0,i.jsxs)(n.p,{children:["Build a ",(0,i.jsx)(n.strong,{children:"lightweight Prism Schema Registry"})," focused on features that existing solutions don't provide:"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Core Features (Must-Have)"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Schema CRUD (register, get, list, delete)"}),"\n",(0,i.jsx)(n.li,{children:"Protobuf + JSON Schema support"}),"\n",(0,i.jsx)(n.li,{children:"Backward/forward compatibility checks"}),"\n",(0,i.jsx)(n.li,{children:"SQLite (dev) + PostgreSQL (prod) storage"}),"\n",(0,i.jsx)(n.li,{children:"REST + gRPC API"}),"\n",(0,i.jsx)(n.li,{children:"GitHub URL resolution (Tier 1 support)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Prism-Specific Features (Differentiators)"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["PII annotation validation (",(0,i.jsx)(n.code,{children:"@prism.pii"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"Multi-backend schema propagation (push to Kafka/NATS)"}),"\n",(0,i.jsx)(n.li,{children:"Namespace-scoped schemas (tenant isolation)"}),"\n",(0,i.jsx)(n.li,{children:"Schema trust verification (SHA256 hash, allowed sources)"}),"\n",(0,i.jsx)(n.li,{children:"Deprecation warnings via field tags"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"NOT Building (Use Existing)"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Complex UI (use Apicurio for browsing)"}),"\n",(0,i.jsx)(n.li,{children:"Schema transformation (avro \u2194 protobuf)"}),"\n",(0,i.jsx)(n.li,{children:"Advanced governance (approval workflows - Phase 2)"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Phase 2: Interoperability (4 weeks)"})}),"\n",(0,i.jsxs)(n.p,{children:["Add adapters to ",(0,i.jsx)(n.strong,{children:"use existing registries"})," where already deployed:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Use existing Confluent Schema Registry\nnamespaces:\n  - name: order-events\n    schema:\n      registry_type: confluent\n      registry_url: http://kafka-schema-registry:8081\n      # Prism acts as pass-through, no custom registry needed\n\n# Use existing Apicurio Registry\nnamespaces:\n  - name: user-events\n    schema:\n      registry_type: apicurio\n      registry_url: http://apicurio-registry:8080\n      # Prism fetches schemas from Apicurio\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Phase 3: Federation (Future)"})}),"\n",(0,i.jsxs)(n.p,{children:["Allow ",(0,i.jsx)(n.strong,{children:"multiple registries"})," to work together:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Federated schema discovery\nnamespaces:\n  - name: order-events\n    schema:\n      registry_type: federated\n      registries:\n        - type: prism\n          url: https://prism-registry.example.com\n          priority: 1  # Try first\n        - type: confluent\n          url: http://kafka-registry:8081\n          priority: 2  # Fallback\n        - type: github\n          url: github.com/myorg/schemas\n          priority: 3  # Last resort\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Build Feasibility Assessment:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Timeline Estimate:"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Phase"}),(0,i.jsx)(n.th,{children:"Effort"}),(0,i.jsx)(n.th,{children:"Calendar Time"}),(0,i.jsx)(n.th,{children:"Team Size"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Phase 1: Core Registry"})}),(0,i.jsx)(n.td,{children:"320 hours"}),(0,i.jsx)(n.td,{children:"8 weeks"}),(0,i.jsx)(n.td,{children:"2 engineers"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Phase 2: Interoperability"})}),(0,i.jsx)(n.td,{children:"160 hours"}),(0,i.jsx)(n.td,{children:"4 weeks"}),(0,i.jsx)(n.td,{children:"1 engineer"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Phase 3: Federation"})}),(0,i.jsx)(n.td,{children:"240 hours"}),(0,i.jsx)(n.td,{children:"6 weeks"}),(0,i.jsx)(n.td,{children:"2 engineers"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Ongoing Maintenance"})}),(0,i.jsx)(n.td,{children:"80 hours/quarter"}),(0,i.jsx)(n.td,{children:"Continuous"}),(0,i.jsx)(n.td,{children:"1 engineer (20%)"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Technical Risks:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Risk: Schema validation complexity"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Protobuf has subtle compatibility rules (field renumbering, one-of changes)"}),"\n",(0,i.jsx)(n.li,{children:"Mitigation: Use existing protobuf-go libraries, test against Confluent test suite"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Risk: Operational overhead"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Another service to deploy, monitor, scale"}),"\n",(0,i.jsx)(n.li,{children:"Mitigation: Deploy as sidecar to Prism proxy, share lifecycle"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Risk: Ecosystem fragmentation"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Teams may already standardize on Confluent Schema Registry"}),"\n",(0,i.jsx)(n.li,{children:"Mitigation: Support interoperability (Phase 2), not replacement"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"When to Use Custom Prism Registry:"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Scenario"}),(0,i.jsx)(n.th,{children:"Use Prism Registry"}),(0,i.jsx)(n.th,{children:"Use Existing Registry"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"New Prism deployment"})}),(0,i.jsx)(n.td,{children:"\u2705 Yes (simple, integrated)"}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f If already using Kafka heavily"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Multi-backend (NATS + Kafka + Redis)"})}),(0,i.jsx)(n.td,{children:"\u2705 Yes (unified registry)"}),(0,i.jsx)(n.td,{children:"\u274c No (need separate registries per backend)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"PII compliance required"})}),(0,i.jsx)(n.td,{children:"\u2705 Yes (built-in governance)"}),(0,i.jsx)(n.td,{children:"\u274c No (manual enforcement)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Existing Confluent deployment"})}),(0,i.jsx)(n.td,{children:"\u274c No (keep Confluent)"}),(0,i.jsx)(n.td,{children:"\u2705 Yes (use adapter)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Air-gapped environment"})}),(0,i.jsx)(n.td,{children:"\u2705 Yes (works offline)"}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f Need to deploy registry"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Open-source projects"})}),(0,i.jsx)(n.td,{children:"\u2705 Yes (GitHub Tier 1)"}),(0,i.jsx)(n.td,{children:"\u274c No (extra infra)"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cost-Benefit Analysis:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Benefits of Building Custom Registry:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Multi-Backend Support"}),": One registry for NATS, Kafka, Redis, PostgreSQL"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"PII Governance"}),": Mandatory PII tagging enforced at registration"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Git-Native"}),": Schemas live in Git repos, no separate infrastructure"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Performance"}),": Rust-based, <50MB memory, <10ms P99 latency"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Simplicity"}),": Tightly integrated with Prism proxy (shared config, auth, observability)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Costs of Building Custom Registry:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Development Time"}),": 8-12 weeks initial + ongoing maintenance"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Operational Overhead"}),": Another service to deploy/monitor"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Ecosystem Gap"}),": No existing tooling, community support"]}),"\n",(0,i.jsxs)(n.li,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Adoption Risk"}),": Teams may resist non-standard solution"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"FINAL RECOMMENDATION:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Build a minimal Prism Schema Registry (Phase 1) with these constraints:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scope"}),": Focus on Prism-specific features (PII, multi-backend, Git integration)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Interoperability"}),": Support existing registries via adapters (Phase 2)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Default to GitHub"}),": Make Tier 1 (GitHub) the default for simplicity"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optional Deployment"}),": Prism Registry is opt-in, not required"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Decision Matrix:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Deployment Scenario                    \u2502 Recommended Registry\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  New Prism deployment                   \u2502 GitHub (Tier 1)     \u2502\n\u2502  Multi-backend (NATS + Kafka)           \u2502 Prism Registry      \u2502\n\u2502  Existing Confluent infrastructure      \u2502 Confluent (Tier 3)  \u2502\n\u2502  PII compliance required                \u2502 Prism Registry      \u2502\n\u2502  Open-source project                    \u2502 GitHub (Tier 1)     \u2502\n\u2502  High-throughput (&gt;100k RPS)            \u2502 Prism Registry      \u2502\n\u2502  Air-gapped network                     \u2502 Prism Registry      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Validation Checklist Before Building:"})}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Survey existing users"}),": Do they already use Confluent/Apicurio? (If yes, interop only)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Prototype GitHub adapter"}),": Can we meet 80% of needs with Tier 1 only? (If yes, delay registry)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Load test Apicurio"}),": Does it meet performance needs at our scale? (If yes, consider using it)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Cost estimate"}),": What's the TCO of running JVM registry vs Rust registry? (Compare ops cost)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Compliance review"}),": Do we need PII features for regulatory reasons? (If yes, must build)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:'If 3+ boxes checked "build not needed", defer custom registry to Phase 2.'}),"\n",(0,i.jsx)(n.h3,{id:"internet-scale-decoupled-usage-scenarios",children:"Internet-Scale Decoupled Usage Scenarios"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CRITICAL DESIGN REQUIREMENT"}),": System must support truly independent producers/consumers across organizational boundaries."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario 1: Open-Source Data Exchange"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Producer: IoT Device Manufacturer (Acme Corp)\n  - Ships devices that publish telemetry to customer's Prism proxy\n  - Schema: github.com/acme/device-schemas/telemetry.v1.proto\n  - Public GitHub repo with MIT license\n\nConsumer: Independent Developer (Alice)\n  - Builds monitoring dashboard for Acme devices\n  - Discovers schema via GitHub\n  - Never talks to Acme directly\n\nKey Challenge: Alice discovers schema change (v2) 6 months after Acme ships it\n  - Solution: Backward compatibility enforced at Acme's CI/CD\n  - Alice's v1 consumer continues working\n  - Alice upgrades to v2 when ready (no coordination)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario 2: Multi-Tenant SaaS Platform"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Producers: 1000s of customer applications (different companies)\n  - Each publishes events to their isolated namespace\n  - Schemas registered per-customer: customer123.orders.created\n\nConsumers: Platform analytics service (SaaS vendor)\n  - Subscribes to events from all customers\n  - Needs to handle schema drift per customer\n\nKey Challenge: Customer A uses v1 schema, Customer B uses v3 schema\n  - Solution: Schema metadata in message headers\n  - Consumer deserializes per-message using attached schema\n  - No cross-customer coordination needed\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario 3: Public API Webhooks"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Producer: Payment Gateway (Stripe-like)\n  - Sends webhook events to merchant endpoints\n  - Schema: stripe.com/schemas/payment.succeeded.v2.json\n\nConsumers: 100k+ merchants worldwide\n  - Implement webhook handlers in various languages\n  - Download JSON schema from public URL\n\nKey Challenge: Payment gateway evolves schema, merchants deploy asynchronously\n  - Solution: Public schema registry (read-only for merchants)\n  - Merchants use prism schema check in CI/CD\n  - Breaking changes trigger merchant notifications\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario 4: Federated Event Bus"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Producers: Multiple organizations in supply chain\n  - Manufacturer publishes: mfg.shipment.created\n  - Distributor publishes: dist.delivery.scheduled\n  - Retailer publishes: retail.order.fulfilled\n\nConsumers: Each organization subscribes to others' events\n  - No direct contracts between organizations\n  - Schema discovery via public registry\n\nKey Challenge: No central authority to enforce schemas\n  - Solution: Each organization runs own Prism Schema Registry\n  - Cross-organization schema discovery via DNS (schema-registry.mfg.example.com)\n  - Federation via schema URLs (like ActivityPub for events)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Internet-Scale Design Principles:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"No Coordination Assumption"}),": Producers/consumers never talk directly"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Public Schema Discovery"}),": Schemas must be fetchable via HTTPS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Long Version Lifetimes"}),": Schemas supported for years (not weeks)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Graceful Degradation"}),": Old consumers ignore new fields silently"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Namespace Isolation"}),": Per-tenant/organization namespaces prevent conflicts"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"schema-declaration-in-namespace-config",children:"Schema Declaration in Namespace Config"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CRITICAL ARCHITECTURAL DECISION"}),": Schema is declared ONCE in namespace configuration, not per-message. The proxy automatically attaches schema metadata to all published messages."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Client-Originated Configuration (RFC-014):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Producer namespace config - schema declared at configuration time\nnamespaces:\n  - name: order-events\n    pattern: pubsub\n    backend:\n      type: nats\n      topic: orders.created\n\n    # Schema declaration (ONCE per namespace, not per publish)\n    # IMPORTANT: Schema is referenced by URL only (no inline schema content)\n    schema:\n      # Option 1: GitHub reference\n      registry_type: github\n      url: github.com/myorg/order-service/schemas/orders.created.v2.proto\n      version: v2  # Explicit version for this namespace\n\n      # Option 2: Prism Schema Registry reference\n      registry_type: prism\n      registry_url: https://schema-registry.example.com\n      subject: orders.created  # Subject name in registry\n      version: v2\n\n      # Option 3: Any HTTPS endpoint\n      registry_type: https\n      url: https://schemas.example.com/orders/created/v2.proto\n\n      # Schema trust verification (mandatory for external URLs)\n      trust:\n        schema_name: "orders.OrderCreated"  # Protobuf message name for verification\n        sha256_hash: "abc123..."  # Optional: Verify schema integrity\n        allowed_sources:  # Optional: Restrict schema sources\n          - "github.com/myorg/*"\n          - "schemas.example.com/*"\n\n      # When validation happens:\n      validation:\n        config_time: true   # Validate schema exists when namespace is configured\n        build_time: true    # Generate typed clients at build time\n        publish_time: false # NO per-message validation (performance)\n\n      # Compatibility policy\n      compatibility: backward  # v2 consumers can read v1 data\n\n      # PII enforcement (checked at registration time, not runtime)\n      pii_validation: enforce  # fail if PII fields not tagged\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Design Principles:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Configuration-Time Schema Resolution"}),": When namespace is configured, Prism:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Fetches schema from registry/GitHub"}),"\n",(0,i.jsx)(n.li,{children:"Validates schema exists and is parseable"}),"\n",(0,i.jsx)(n.li,{children:"Caches schema definition in proxy memory"}),"\n",(0,i.jsx)(n.li,{children:"Generates code gen artifacts (if requested)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Zero Per-Message Overhead"}),": Proxy attaches cached schema metadata to every message without re-validation"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Build-Time Assertions"}),": Client code generation ensures type safety at compile time"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Optional Runtime Validation"}),": Only enabled explicitly for debugging (huge performance cost)"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"schema-attachment-at-publish-time",children:"Schema Attachment at Publish Time"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configuration-Time Schema Resolution (ONCE):"})}),"\n",(0,i.jsx)(n.mermaid,{value:'sequenceDiagram\n    participant App as Producer App\n    participant Client as Prism Client SDK\n    participant Proxy as Prism Proxy\n    participant Registry as Schema Registry\n\n    Note over App,Proxy: 1. Namespace Configuration (happens ONCE at startup)\n\n    App->>Client: Configure namespace "order-events"\n    Client->>Proxy: ConfigureNamespace(schema_url="github.com/.../v2.proto")\n\n    Proxy->>Registry: GET schema (with cache)\n    Registry--\x3e>Proxy: Schema definition + metadata\n\n    Proxy->>Proxy: Cache schema in memory\n    Proxy--\x3e>Client: Namespace configured\n    Client--\x3e>App: Ready to publish'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Publish Flow (NO per-message validation):"})}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant App as Producer App\n    participant Client as Prism Client SDK\n    participant Proxy as Prism Proxy\n    participant NATS as NATS Backend\n\n    Note over App,NATS: 2. Publishing Messages (fast path, no validation)\n\n    App->>Client: publish(payload=OrderCreated{...})\n\n    Note over Client: Serialize using generated code (build-time types)\n\n    Client->>Proxy: PublishRequest(payload bytes)\n\n    Note over Proxy: Lookup cached schema for namespace\n\n    Proxy->>Proxy: Attach schema metadata (0 cost lookup)\n    Proxy->>NATS: Publish + headers{schema_url, schema_version, schema_hash}\n    NATS--\x3e>Proxy: ACK\n    Proxy--\x3e>Client: Success\n    Client--\x3e>App: Published"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Optional Runtime Validation (debugging only):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"# Enable ONLY for debugging - huge performance cost\nvalidation:\n  config_time: true\n  build_time: true\n  publish_time: true  # \u26a0\ufe0f WARNING: +50% latency overhead\n\n# Proxy validates every message against schema\n# Use only when debugging schema issues\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Message Format with Schema Metadata:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"# NATS message headers\nX-Prism-Schema-URL: github.com/myorg/order-service/schemas/orders.created.v2.proto\nX-Prism-Schema-Version: v2\nX-Prism-Schema-Hash: sha256:abc123...  # For immutability check\nX-Prism-Namespace: order-events\nX-Prism-Published-At: 2025-10-13T10:30:00Z\n\n# Payload (protobuf binary)\n<binary protobuf OrderCreated>\n"})}),"\n",(0,i.jsx)(n.h3,{id:"consumer-schema-discovery-and-validation",children:"Consumer Schema Discovery and Validation"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Discovery API:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# List all schemas for a topic\nprism schema list --topic orders.created\n\n# Output:\n# VERSION   URL                                                    PUBLISHED     CONSUMERS\n# v2        github.com/.../orders.created.v2.proto                 2025-10-13    3 active\n# v1        github.com/.../orders.created.v1.proto                 2025-09-01    1 active (deprecated)\n\n# Get schema definition\nprism schema get --topic orders.created --version v2\n\n# Output: (downloads proto file)\nsyntax = "proto3";\nmessage OrderCreated {\n  string order_id = 1;\n  string user_id = 2;\n  string email = 3;\n  repeated OrderItem items = 4;\n  double total = 5;\n  string currency = 6;\n  optional double tax_amount = 7;  // Added in v2\n}\n\n# Generate client code\nprism schema codegen --topic orders.created --version v2 --language go --output ./proto\n# Generates: orders_created.pb.go\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Consumer Compatibility Check (CI/CD):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# In consumer CI pipeline\nprism schema check \\\n  --topic orders.created \\\n  --consumer-schema ./schemas/my_consumer_schema.proto \\\n  --mode strict\n\n# Output:\n\u2705 Compatible with producer schema v2\n\u26a0\ufe0f  Warning: Producer added optional field 'tax_amount' (not in consumer schema)\n\u274c Error: Consumer expects required field 'discount_code' (not in producer schema)\n\n# Exit code: 1 (fail CI)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Consumer Subscription with Schema Assertion:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Python consumer with schema validation\nfrom prism_sdk import PrismClient\nfrom prism_sdk.schema import SchemaValidator\n\nclient = PrismClient(namespace="order-events")\n\n# Option 1: Validate at subscribe time (fail-fast)\nstream = client.subscribe(\n    topic="orders.created",\n    schema_assertion={\n        "expected_version": "v2",\n        "on_mismatch": "error",  # Options: error | warn | ignore\n        "compatibility_mode": "forward"  # v1 consumer reads v2 data\n    }\n)\n\n# Option 2: Validate per-message (flexible)\nfor event in stream:\n    try:\n        # Client SDK deserializes using schema from message headers\n        order = event.payload  # Typed OrderCreated object\n\n        # Explicit validation\n        if event.schema_version != "v2":\n            logger.warning(f"Unexpected schema version: {event.schema_version}")\n            continue\n\n        process_order(order)\n        event.ack()\n\n    except SchemaValidationError as e:\n        logger.error(f"Schema mismatch: {e}")\n        event.nack()  # Reject message, will retry or DLQ\n'})}),"\n",(0,i.jsx)(n.h3,{id:"backend-schema-propagation",children:"Backend Schema Propagation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CRITICAL REQUIREMENT"}),": Prism must push schema metadata to backend systems to enable native schema validation and discovery within each backend's ecosystem."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Backend Interface for Schema Distribution:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Backend plugin interface extension for schema propagation\ntype SchemaAwareBackend interface {\n    Backend  // Standard backend interface\n\n    // PushSchema distributes schema to backend-specific registry\n    PushSchema(ctx context.Context, req *PushSchemaRequest) (*PushSchemaResponse, error)\n\n    // GetBackendSchemaURL returns backend-specific schema location\n    GetBackendSchemaURL(namespace, topic, version string) (string, error)\n\n    // SupportsSchemaRegistry indicates if backend has native schema support\n    SupportsSchemaRegistry() bool\n}\n\ntype PushSchemaRequest struct {\n    Namespace     string\n    Topic         string\n    Version       string\n    SchemaFormat  string  // "protobuf", "json-schema", "avro"\n    SchemaContent []byte\n    Metadata      map[string]string\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Kafka Backend: Schema Registry Integration"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Namespace config with Kafka backend\nnamespaces:\n  - name: order-events\n    pattern: pubsub\n    backend:\n      type: kafka\n      broker: kafka.example.com:9092\n      topic: orders.created\n\n      # Enable automatic schema propagation to Confluent Schema Registry\n      schema_propagation:\n        enabled: true\n        registry_url: http://schema-registry.kafka.example.com:8081\n        subject_naming: "TopicNameStrategy"  # or RecordNameStrategy, TopicRecordNameStrategy\n        compatibility: BACKWARD\n\n    schema:\n      registry_type: prism\n      registry_url: https://schema-registry.example.com\n      subject: orders.created\n      version: v2\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"How Kafka Schema Propagation Works:"})}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Config as Namespace Config\n    participant Proxy as Prism Proxy\n    participant PrismReg as Prism Schema Registry\n    participant KafkaReg as Confluent Schema Registry\n    participant Kafka as Kafka Broker\n\n    Note over Config,Kafka: Schema propagation flow (happens at config time)\n\n    Config->>Proxy: Configure namespace with Kafka backend\n    Proxy->>PrismReg: GET schema (orders.created v2)\n    PrismReg--\x3e>Proxy: Schema definition (protobuf)\n\n    Note over Proxy: Check if Kafka backend supports schema registry\n\n    Proxy->>KafkaReg: POST /subjects/orders.created-value/versions\n    Note over Proxy,KafkaReg: Convert protobuf to Confluent format\n\n    KafkaReg--\x3e>Proxy: Schema ID: 123\n    Proxy->>Proxy: Cache schema ID for publishing\n\n    Note over Proxy,Kafka: Future publishes include schema ID\n\n    Proxy->>Kafka: Publish message with schema ID 123 in header"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"NATS Backend: JetStream Metadata"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Namespace config with NATS backend\nnamespaces:\n  - name: order-events\n    pattern: pubsub\n    backend:\n      type: nats\n      url: nats://nats.example.com:4222\n      subject: orders.created\n\n      # Enable schema metadata in stream configuration\n      schema_propagation:\n        enabled: true\n        method: "stream_metadata"  # or "message_headers"\n\n    schema:\n      registry_type: github\n      url: github.com/myorg/schemas/orders.created.v2.proto\n      version: v2\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"NATS Schema Propagation Methods:"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Method 1: Stream Metadata (Config-Time)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Prism creates NATS stream with schema metadata\nstream := &nats.StreamConfig{\n    Name:     "ORDER_EVENTS",\n    Subjects: []string{"orders.created"},\n    Metadata: map[string]string{\n        "schema_url":     "github.com/myorg/schemas/orders.created.v2.proto",\n        "schema_version": "v2",\n        "schema_format":  "protobuf",\n        "schema_hash":    "sha256:abc123...",\n    },\n}\njs.AddStream(stream)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Method 2: Message Headers (Publish-Time)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Prism attaches schema metadata to every message\nmsg := &nats.Msg{\n    Subject: "orders.created",\n    Data:    protobufPayload,\n    Header: nats.Header{\n        "Prism-Schema-URL":     []string{"github.com/myorg/schemas/orders.created.v2.proto"},\n        "Prism-Schema-Version": []string{"v2"},\n        "Prism-Schema-Hash":    []string{"sha256:abc123..."},\n    },\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Schema Propagation Trade-Offs:"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Backend"}),(0,i.jsx)(n.th,{children:"Native Registry"}),(0,i.jsx)(n.th,{children:"Propagation Method"}),(0,i.jsx)(n.th,{children:"Performance"}),(0,i.jsx)(n.th,{children:"Discovery"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Kafka"})}),(0,i.jsx)(n.td,{children:"\u2705 Confluent Schema Registry"}),(0,i.jsx)(n.td,{children:"POST to registry at config time"}),(0,i.jsx)(n.td,{children:"Excellent (schema ID in msg)"}),(0,i.jsx)(n.td,{children:"Native Kafka tooling"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"NATS"})}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f No native registry"}),(0,i.jsx)(n.td,{children:"Stream metadata + msg headers"}),(0,i.jsx)(n.td,{children:"Good (header overhead ~200 bytes)"}),(0,i.jsx)(n.td,{children:"Custom via stream metadata"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"RabbitMQ"})}),(0,i.jsx)(n.td,{children:"\u274c No native support"}),(0,i.jsx)(n.td,{children:"Message headers only"}),(0,i.jsx)(n.td,{children:"Good"}),(0,i.jsx)(n.td,{children:"Custom via headers"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Redis"})}),(0,i.jsx)(n.td,{children:"\u274c No native support"}),(0,i.jsx)(n.td,{children:"Key prefix (schema:topic:version)"}),(0,i.jsx)(n.td,{children:"Excellent"}),(0,i.jsx)(n.td,{children:"Custom via key scan"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"PostgreSQL"})}),(0,i.jsx)(n.td,{children:"\u274c No native support"}),(0,i.jsx)(n.td,{children:"Schema table (topic, version, content)"}),(0,i.jsx)(n.td,{children:"Good"}),(0,i.jsx)(n.td,{children:"SQL query"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Configuration-Time vs Runtime Propagation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Configuration-time propagation (recommended)\nschema_propagation:\n  mode: config_time  # Push schema to backend when namespace is configured\n  enabled: true\n  # Pros: Zero per-message overhead, backend-native discovery\n  # Cons: Schema changes require namespace reconfiguration\n\n# Runtime propagation (fallback)\nschema_propagation:\n  mode: runtime  # Attach schema metadata to every message\n  enabled: true\n  method: message_headers\n  # Pros: Works with any backend, no backend-specific integration\n  # Cons: +200 bytes per message, no backend-native discovery\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Schema Discovery from Backend Systems:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Kafka: Use native Confluent tooling\ncurl http://schema-registry:8081/subjects/orders.created-value/versions/latest\n\n# NATS: Query stream metadata via CLI\nnats stream info ORDER_EVENTS --json | jq \'.config.metadata\'\n\n# Output:\n# {\n#   "schema_url": "github.com/myorg/schemas/orders.created.v2.proto",\n#   "schema_version": "v2",\n#   "schema_format": "protobuf"\n# }\n\n# PostgreSQL: Query schema table\nSELECT schema_url, version, format FROM prism_schemas\nWHERE topic = \'orders.created\' ORDER BY created_at DESC LIMIT 1;\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Benefits of Backend Schema Propagation:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Native Tooling"}),": Kafka consumers can use Confluent's schema registry client libraries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Backend-Aware Validation"}),": Kafka brokers can enforce schema validation (Confluent Server feature)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ecosystem Integration"}),": Works with existing monitoring/debugging tools for each backend"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reduced Coupling"}),": Consumers don't need Prism SDK to discover schemas"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compliance"}),": Audit trail lives in backend-specific systems"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"optional-field-enforcement-for-producers",children:"Optional Field Enforcement for Producers"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"BEST PRACTICE"}),": Prism strongly recommends (and can enforce) that all fields in producer schemas are ",(0,i.jsx)(n.code,{children:"optional"})," to maintain maximum backward compatibility."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Optional Fields Matter:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"// \u274c BAD: Required fields break backward compatibility\nmessage OrderCreated {\n  string order_id = 1;       // Implicitly required (proto3)\n  string user_id = 2;        // Implicitly required\n  double total = 3;          // Implicitly required\n  string payment_method = 4; // NEW field - BREAKS v1 consumers!\n}\n\n// \u2705 GOOD: Optional fields preserve compatibility\nmessage OrderCreated {\n  optional string order_id = 1;       // Explicitly optional\n  optional string user_id = 2;        // Explicitly optional\n  optional double total = 3;          // Explicitly optional\n  optional string payment_method = 4; // NEW field - v1 consumers ignore it\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Prism Optional Field Validation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Enable optional field enforcement in schema validation\nschema:\n  registry_type: prism\n  registry_url: https://schema-registry.example.com\n  version: v2\n\n  # Validation rules\n  validation:\n    config_time: true\n    build_time: true\n    enforce_optional_fields: true  # Reject schemas with required fields\n    optional_field_exceptions:      # Allow exceptions for specific fields\n      - "id"         # Primary keys can be required\n      - "*_id"       # Foreign keys can be required\n      - "timestamp"  # Timestamps can be required\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Schema Registration with Enforcement:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Producer tries to register schema with required fields\nprism schema register --file order_created.proto --enforce-optional\n\n# Prism validation output:\n\u274c Error: Field 'order_id' is required (not marked optional)\n\u274c Error: Field 'user_id' is required (not marked optional)\n\u274c Error: Field 'total' is required (not marked optional)\n\n\u2139\ufe0f  Recommendation: Mark fields as 'optional' to maintain backward compatibility\n\u2139\ufe0f  Example: optional string order_id = 1;\n\n# Registration fails (exit code 1)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Enforcement Levels:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Level 1: Warn only (default, non-blocking)\nvalidation:\n  enforce_optional_fields: warn  # Log warnings but allow registration\n\n# Level 2: Enforce with exceptions (recommended)\nvalidation:\n  enforce_optional_fields: true\n  optional_field_exceptions: ["*_id", "timestamp"]\n\n# Level 3: Strict enforcement (no exceptions)\nvalidation:\n  enforce_optional_fields: strict  # All fields MUST be optional\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Migration Path for Existing Schemas:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Step 1: Audit existing schemas for required fields\nprism schema audit --check-optional-fields\n\n# Output:\n# Topic: orders.created (v2)\n#   \u274c Field 'order_id' is required (recommend: optional)\n#   \u274c Field 'user_id' is required (recommend: optional)\n#   \u274c Field 'total' is required (recommend: optional)\n#\n# Topic: user.profile.updated (v3)\n#   \u2705 All fields are optional (backward compatible)\n\n# Step 2: Create v3 schema with all optional fields\ncat > orders.created.v3.proto <<EOF\nsyntax = \"proto3\";\nmessage OrderCreated {\n  optional string order_id = 1;\n  optional string user_id = 2;\n  optional double total = 3;\n  optional string currency = 4;\n}\nEOF\n\n# Step 3: Register new schema version\nprism schema register --file orders.created.v3.proto --enforce-optional\n\u2705 Schema registered: All fields properly marked optional\n\n# Step 4: Gradual consumer migration (v2 \u2192 v3)\n#    Both schemas coexist during transition period\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Benefits of Optional Field Enforcement:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Backward Compatibility"}),": Old consumers continue working when fields added"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Forward Compatibility"}),": New consumers handle missing fields gracefully"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Schema Evolution"}),": Producers can add fields without breaking changes"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Zero Coordination"}),": No need to coordinate producer/consumer deployments"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Reduced Risk"}),": Eliminates class of breaking changes at registration time"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Trade-Offs:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"Validation Overhead"}),": Consumers must check for presence of optional fields"]}),"\n",(0,i.jsxs)(n.li,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"Default Values"}),": Optional fields need sensible defaults or null handling"]}),"\n",(0,i.jsxs)(n.li,{children:["\u26a0\ufe0f ",(0,i.jsx)(n.strong,{children:"Type Safety"}),": Some languages (Go) treat optional differently than required"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Consumer Handling Optional Fields:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Python consumer handling optional fields\nfrom prism_sdk import PrismClient\n\nclient = PrismClient(namespace="order-events")\nstream = client.subscribe("orders.created")\n\nfor event in stream:\n    order = event.payload  # OrderCreated protobuf\n\n    # Optional fields: Check presence before access\n    if order.HasField("order_id"):\n        print(f"Order ID: {order.order_id}")\n    else:\n        print("Order ID: <missing>")  # Handle missing field\n\n    # Alternative: Use getattr with default\n    total = getattr(order, \'total\', 0.0)  # Default to 0.0 if missing\n    currency = getattr(order, \'currency\', \'USD\')  # Default to USD\n\n    process_order(order)\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Go consumer handling optional fields\nfunc handleOrderCreated(msg *OrderCreated) {\n    // Optional fields are pointers in Go (protobuf)\n    if msg.OrderId != nil {\n        fmt.Printf("Order ID: %s\\n", *msg.OrderId)\n    } else {\n        fmt.Println("Order ID: <missing>")\n    }\n\n    // Safe access with default\n    total := 0.0\n    if msg.Total != nil {\n        total = *msg.Total\n    }\n\n    currency := "USD"\n    if msg.Currency != nil {\n        currency = *msg.Currency\n    }\n\n    processOrder(msg)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"backwardforward-compatibility-modes",children:"Backward/Forward Compatibility Modes"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compatibility Matrix:"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Mode"}),(0,i.jsx)(n.th,{children:"Producer Changes Allowed"}),(0,i.jsx)(n.th,{children:"Consumer Requirement"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Backward"})}),(0,i.jsx)(n.td,{children:"Add optional fields"}),(0,i.jsx)(n.td,{children:"Old consumers work with new data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Forward"})}),(0,i.jsx)(n.td,{children:"Delete optional fields"}),(0,i.jsx)(n.td,{children:"New consumers work with old data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Full"})}),(0,i.jsx)(n.td,{children:"Add/delete optional fields"}),(0,i.jsx)(n.td,{children:"Bidirectional compatibility"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"None"})}),(0,i.jsx)(n.td,{children:"Any changes"}),(0,i.jsx)(n.td,{children:"No compatibility guarantees"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Backward Compatibility"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"# Producer v1 schema\nmessage OrderCreated {\n  string order_id = 1;\n  string user_id = 2;\n  double total = 3;\n}\n\n# Producer v2 schema (backward compatible)\nmessage OrderCreated {\n  string order_id = 1;\n  string user_id = 2;\n  double total = 3;\n  optional double tax_amount = 4;  # NEW: Optional field\n  optional string promo_code = 5;  # NEW: Optional field\n}\n\n# Consumer still on v1 code\norder = OrderCreated.decode(payload)\nprint(order.total)  # Works! Ignores unknown fields (tax_amount, promo_code)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Example: Forward Compatibility"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"# Producer v1 schema\nmessage OrderCreated {\n  string order_id = 1;\n  string user_id = 2;\n  double total = 3;\n  optional string notes = 4;  # Optional field\n}\n\n# Producer v2 schema (forward compatible)\nmessage OrderCreated {\n  string order_id = 1;\n  string user_id = 2;\n  double total = 3;\n  # Removed: optional string notes = 4;\n}\n\n# Consumer on v2 code reads v1 message\norder = OrderCreated.decode(payload)\nprint(order.notes)  # Empty/default value, no error\n"})}),"\n",(0,i.jsx)(n.h3,{id:"governance-schema-and-consumer-tags-for-distributed-teams",children:"Governance: Schema and Consumer Tags for Distributed Teams"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CRITICAL VALUE PROPOSITION"}),": Prism-level governance tags enable platform teams to enforce policies across distributed teams without manual coordination."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Governance Tags Matter:"})}),"\n",(0,i.jsx)(n.p,{children:"In distributed organizations with 10+ teams publishing/consuming events:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem 1"}),": No visibility into who accesses sensitive data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem 2"}),": No automated enforcement of compliance policies (GDPR, HIPAA, SOC2)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem 3"}),": Manual approval workflows slow down development"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Problem 4"}),": Audit trails require custom tooling per backend"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Declarative tags in schemas + automated enforcement at Prism proxy"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"schema-level-governance-tags",children:"Schema-Level Governance Tags"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Tag Categories:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\nimport "prism/annotations.proto";\n\n// Schema-level tags (message options)\nmessage UserProfileUpdated {\n  option (prism.sensitivity) = "high";           // low | medium | high | critical\n  option (prism.compliance) = "gdpr,hipaa";      // Comma-separated compliance frameworks\n  option (prism.retention_days) = 90;            // Data retention policy\n  option (prism.owner_team) = "user-platform";   // Team responsible for schema\n  option (prism.consumer_approval) = "required"; // Require approval for new consumers\n  option (prism.audit_log) = "enabled";          // Log all access to this topic\n  option (prism.data_classification) = "confidential";  // public | internal | confidential | restricted\n\n  string user_id = 1 [(prism.index) = "primary"];\n\n  // Field-level tags\n  string email = 2 [\n    (prism.pii) = "email",\n    (prism.encrypt) = "aes256",\n    (prism.masking) = "hash"  // hash | redact | tokenize | none\n  ];\n\n  string full_name = 3 [\n    (prism.pii) = "name",\n    (prism.masking) = "redact"\n  ];\n\n  string phone = 4 [\n    (prism.pii) = "phone",\n    (prism.masking) = "hash",\n    (prism.deprecated) = "2025-12-31",  // Deprecation date\n    (prism.deprecated_reason) = "Use phone_e164 instead"\n  ];\n\n  string phone_e164 = 5 [(prism.pii) = "phone"];  // Replacement field\n\n  // Non-PII fields\n  string avatar_url = 6;\n  int64 created_at = 7;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Schema Tag Validation at Registration:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Producer tries to register schema\nprism schema register --file user_profile.proto --namespace user-events\n\n# Prism validation checks:\n\u2705 Sensitivity: high (requires encryption for PII fields)\n\u2705 Compliance: gdpr,hipaa (PII fields properly tagged)\n\u274c Error: Field 'email' marked as PII but missing encryption annotation\n\u274c Error: Schema sensitivity=high but no owner_team specified\n\u2139\ufe0f  Hint: Add [(prism.encrypt) = \"aes256\"] to field 'email'\n\n# Exit code: 1 (registration fails until tags are correct)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"consumer-level-governance-tags",children:"Consumer-Level Governance Tags"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Consumer Registration with Tags:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Consumer declares itself when subscribing\nnamespaces:\n  - name: user-events-consumer\n    pattern: pubsub\n    backend:\n      type: nats\n      subject: user.profile.updated\n\n    # Consumer metadata (governance tags)\n    consumer:\n      team: "analytics-team"\n      purpose: "Generate user behavior reports"\n      data_usage: "analytics"  # analytics | operational | ml_training | debugging\n      pii_access: "required"   # required | not_needed\n      retention_days: 30       # How long consumer retains data\n      compliance_frameworks: ["gdpr", "ccpa"]  # Must match schema requirements\n      approved_by: "security-team"  # Approval ticket/email\n      approval_date: "2025-10-01"\n      access_pattern: "read_only"  # read_only | write_through | bidirectional\n\n      # Rate limiting (prevent abuse)\n      rate_limit:\n        max_messages_per_second: 1000\n        max_consumers: 5  # Max concurrent consumer instances\n\n      # Allowed fields (column-level access control)\n      allowed_fields: ["user_id", "avatar_url", "created_at"]  # Cannot access email, phone\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Consumer Approval Workflow:"})}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    participant Dev as Developer (Analytics Team)\n    participant CLI as Prism CLI\n    participant Proxy as Prism Proxy\n    participant Registry as Schema Registry\n    participant Approval as Approval System (PagerDuty/Jira)\n    participant Security as Security Team\n\n    Note over Dev,Security: Consumer wants to subscribe to high-sensitivity topic\n\n    Dev->>CLI: prism namespace configure user-events-consumer.yaml\n    CLI->>Proxy: RegisterConsumer(team=analytics, purpose=reports)\n\n    Proxy->>Registry: GetSchema(user.profile.updated)\n    Registry--\x3e>Proxy: Schema(sensitivity=high, consumer_approval=required)\n\n    Note over Proxy: Check if consumer approval required\n\n    Proxy->>Approval: CreateApprovalRequest(team=analytics, topic=user.profile.updated)\n    Approval->>Security: Notify: Analytics team requests access to user.profile.updated\n    Security->>Approval: Review request \u2192 Approve with conditions (allowed_fields=[user_id])\n\n    Approval--\x3e>Proxy: ApprovalGranted(request_id=123, allowed_fields=[user_id])\n    Proxy--\x3e>CLI: Consumer registered (pending: add allowed_fields to config)\n    CLI--\x3e>Dev: \u26a0\ufe0f  Approval granted but restricted: Only allowed_fields=[user_id]"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Enforcement at Subscribe Time:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Consumer tries to subscribe\nfrom prism_sdk import PrismClient\n\nclient = PrismClient(namespace="user-events-consumer")\n\n# Prism checks consumer tags against schema tags\nstream = client.subscribe("user.profile.updated")\n\n# Enforcement scenarios:\n\n# Scenario 1: Consumer missing required compliance tag\n\u274c SubscribeError: Schema requires compliance=[gdpr,hipaa], consumer declares compliance=[gdpr]\n   Add \'hipaa\' to consumer.compliance_frameworks in config\n\n# Scenario 2: Consumer requests PII but doesn\'t need it\n\u26a0\ufe0f  Warning: Consumer declares pii_access=required but allowed_fields excludes all PII fields\n   Consider setting pii_access=not_needed\n\n# Scenario 3: Consumer exceeds rate limit\n\u274c SubscribeError: Consumer rate limit exceeded (1050 msg/s > 1000 msg/s limit)\n   Increase rate_limit in config or reduce consumer count\n\n# Scenario 4: Consumer approved for specific fields only\n\u2705 Subscribed with field filtering: Only fields [user_id, avatar_url] will be delivered\n   Other fields automatically filtered by Prism proxy\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"governance-tag-enforcement-matrix",children:"Governance Tag Enforcement Matrix"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Tag"}),(0,i.jsx)(n.th,{children:"Enforced At"}),(0,i.jsx)(n.th,{children:"Validation"}),(0,i.jsx)(n.th,{children:"Action on Violation"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"prism.sensitivity"})}),(0,i.jsx)(n.td,{children:"Schema registration"}),(0,i.jsx)(n.td,{children:"Check PII fields have encryption/masking"}),(0,i.jsx)(n.td,{children:"Reject schema registration"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"prism.compliance"})}),(0,i.jsx)(n.td,{children:"Consumer subscribe"}),(0,i.jsx)(n.td,{children:"Match consumer compliance frameworks"}),(0,i.jsx)(n.td,{children:"Block subscription"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"prism.owner_team"})}),(0,i.jsx)(n.td,{children:"Schema registration"}),(0,i.jsx)(n.td,{children:"Team exists in org directory"}),(0,i.jsx)(n.td,{children:"Reject schema"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"prism.consumer_approval"})}),(0,i.jsx)(n.td,{children:"Consumer subscribe"}),(0,i.jsx)(n.td,{children:"Check approval ticket exists"}),(0,i.jsx)(n.td,{children:"Block until approved"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"prism.pii"})}),(0,i.jsx)(n.td,{children:"Schema registration"}),(0,i.jsx)(n.td,{children:"Field name matches PII patterns"}),(0,i.jsx)(n.td,{children:"Reject schema"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"prism.encrypt"})}),(0,i.jsx)(n.td,{children:"Publish time"}),(0,i.jsx)(n.td,{children:"Payload field is encrypted"}),(0,i.jsx)(n.td,{children:"Reject publish"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"prism.masking"})}),(0,i.jsx)(n.td,{children:"Consumer delivery"}),(0,i.jsx)(n.td,{children:"Apply masking before delivery"}),(0,i.jsx)(n.td,{children:"Auto-mask field"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"prism.deprecated"})}),(0,i.jsx)(n.td,{children:"Consumer subscribe"}),(0,i.jsx)(n.td,{children:"Warn about deprecated fields"}),(0,i.jsx)(n.td,{children:"Log warning, continue"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"prism.retention_days"})}),(0,i.jsx)(n.td,{children:"Consumer subscribe"}),(0,i.jsx)(n.td,{children:"Consumer retention \u2264 schema retention"}),(0,i.jsx)(n.td,{children:"Block subscription"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"prism.allowed_fields"})}),(0,i.jsx)(n.td,{children:"Consumer delivery"}),(0,i.jsx)(n.td,{children:"Filter fields not in allowed list"}),(0,i.jsx)(n.td,{children:"Auto-filter fields"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"prism.rate_limit"})}),(0,i.jsx)(n.td,{children:"Consumer delivery"}),(0,i.jsx)(n.td,{children:"Track message rate per consumer"}),(0,i.jsx)(n.td,{children:"Throttle/block"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"prism.audit_log"})}),(0,i.jsx)(n.td,{children:"All operations"}),(0,i.jsx)(n.td,{children:"Log to audit system"}),(0,i.jsx)(n.td,{children:"N/A (always logged)"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"field-level-access-control-column-security",children:"Field-Level Access Control (Column Security)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Consumer needs some fields but not PII fields"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Prism proxy auto-filters fields based on ",(0,i.jsx)(n.code,{children:"allowed_fields"})," tag"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Consumer config with field restrictions\nnamespaces:\n  - name: user-events-limited\n    pattern: pubsub\n    backend:\n      type: nats\n      subject: user.profile.updated\n\n    consumer:\n      team: "dashboard-team"\n      allowed_fields: ["user_id", "avatar_url", "created_at"]  # No PII fields\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Proxy Filtering Behavior:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Producer publishes full message\nproducer.publish("user.profile.updated", {\n    "user_id": "user-123",\n    "email": "alice@example.com",      # PII\n    "full_name": "Alice Johnson",      # PII\n    "phone": "+1-555-1234",            # PII\n    "avatar_url": "https://...",\n    "created_at": 1697200000\n})\n\n# Consumer receives filtered message (auto-applied by Prism)\nmessage = consumer.receive()\nprint(message.payload)\n# Output:\n# {\n#     "user_id": "user-123",\n#     "avatar_url": "https://...",\n#     "created_at": 1697200000\n#     # email, full_name, phone REMOVED by proxy\n# }\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Benefits"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Consumers can't accidentally access PII"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 No code changes needed (filtering is transparent)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Audit logs show which fields were filtered"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Reduces compliance risk"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"deprecation-warnings-for-schema-evolution",children:"Deprecation Warnings for Schema Evolution"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Producer wants to deprecate field, needs to warn consumers"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": ",(0,i.jsx)(n.code,{children:"@prism.deprecated"})," tag with date and reason"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'message OrderCreated {\n  string order_id = 1;\n\n  // Old field (deprecated)\n  string status = 2 [\n    (prism.deprecated) = "2025-12-31",\n    (prism.deprecated_reason) = "Use order_status enum instead for type safety"\n  ];\n\n  // New field (replacement)\n  OrderStatus order_status = 3;\n}\n\nenum OrderStatus {\n  ORDER_STATUS_UNKNOWN = 0;\n  ORDER_STATUS_PENDING = 1;\n  ORDER_STATUS_CONFIRMED = 2;\n  ORDER_STATUS_SHIPPED = 3;\n  ORDER_STATUS_DELIVERED = 4;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Consumer Warnings at Runtime:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# Consumer subscribes to orders.created\nstream = client.subscribe(\"orders.created\")\n\nfor event in stream:\n    order = event.payload\n\n    # Accessing deprecated field triggers warning\n    print(order.status)\n    # Warning: Field 'status' is deprecated as of 2025-12-31\n    #          Reason: Use order_status enum instead for type safety\n    #          Migration guide: https://docs.example.com/migrate-order-status\n\n    # Accessing new field (no warning)\n    print(order.order_status)  # \u2705 Preferred\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Deprecation Lifecycle:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# 1. Add deprecation tag (2025-10-01)\n#    Consumers get warnings but continue working\n\n# 2. Monitor deprecation warnings (2025-10 \u2192 2025-12)\nprism schema deprecation-report --topic orders.created\n# Output:\n# Field: status\n# Deprecated: 2025-12-31\n# Active consumers: 3\n#   - inventory-service (12k accesses/day)\n#   - analytics-pipeline (8k accesses/day)\n#   - email-service (2k accesses/day)\n\n# 3. Notify teams (2025-11-01)\nprism schema notify-consumers --topic orders.created --field status\n# Sends email to teams: \"Field 'status' will be removed on 2025-12-31\"\n\n# 4. Remove field (2026-01-01, after deprecation date)\n#    Only after all consumers migrated\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"audit-logging-and-compliance",children:"Audit Logging and Compliance"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Automatic Audit Trails:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// Every schema access logged to audit system (e.g., CloudWatch, Splunk)\n{\n  "event": "consumer_access",\n  "timestamp": "2025-10-13T10:30:00Z",\n  "topic": "user.profile.updated",\n  "schema_version": "v2",\n  "consumer_team": "analytics-team",\n  "consumer_id": "analytics-pipeline-pod-42",\n  "fields_accessed": ["user_id", "avatar_url"],\n  "fields_filtered": ["email", "full_name", "phone"],  // PII fields not delivered\n  "pii_access": false,\n  "compliance_frameworks": ["gdpr", "ccpa"],\n  "approval_ticket": "SEC-12345",\n  "message_count": 1,\n  "action": "delivered"\n}\n\n{\n  "event": "schema_registration",\n  "timestamp": "2025-10-13T09:00:00Z",\n  "topic": "user.profile.updated",\n  "schema_version": "v3",\n  "owner_team": "user-platform",\n  "sensitivity": "high",\n  "pii_fields": ["email", "full_name", "phone"],\n  "compliance_frameworks": ["gdpr", "hipaa"],\n  "registered_by": "alice@example.com",\n  "action": "approved"\n}\n\n{\n  "event": "consumer_blocked",\n  "timestamp": "2025-10-13T10:35:00Z",\n  "topic": "user.profile.updated",\n  "consumer_team": "external-vendor",\n  "reason": "Missing compliance framework: hipaa",\n  "action": "blocked"\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Compliance Reporting:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Generate GDPR compliance report\nprism governance report --framework gdpr --start 2025-10-01 --end 2025-10-31\n\n# Output:\n# GDPR Compliance Report (2025-10-01 to 2025-10-31)\n#\n# Topics with PII:\n#   - user.profile.updated: 3 consumers, 1.2M messages\n#   - order.created: 2 consumers, 800K messages\n#\n# PII Access by Team:\n#   - analytics-team: 1.2M messages (approved: SEC-12345)\n#   - email-service: 500K messages (approved: SEC-67890)\n#   - dashboard-team: 0 messages (field filtering active)\n#\n# Violations: 0\n# Warnings: 1 (analytics-team exceeded rate limit 3 times)\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"governance-tag-best-practices",children:"Governance Tag Best Practices"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"For Platform Teams:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Start with Required Tags"}),": Make ",(0,i.jsx)(n.code,{children:"owner_team"}),", ",(0,i.jsx)(n.code,{children:"sensitivity"}),", ",(0,i.jsx)(n.code,{children:"compliance"})," mandatory"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Automate Approvals"}),": Integrate with PagerDuty/Jira for approval workflows"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enforce at Registration"}),": Block schema registration if tags missing"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Audit Everything"}),": Enable ",(0,i.jsx)(n.code,{children:"audit_log=enabled"})," for all high-sensitivity topics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Field-Level Control"}),": Use ",(0,i.jsx)(n.code,{children:"allowed_fields"})," to implement principle of least privilege"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"For Producer Teams:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tag PII Fields"}),": Use ",(0,i.jsx)(n.code,{children:"@prism.pii"})," annotation for all PII"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Set Sensitivity"}),": Mark schemas as ",(0,i.jsx)(n.code,{children:"high"})," if contains PII"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Document Deprecations"}),": Use ",(0,i.jsx)(n.code,{children:"@prism.deprecated"})," with clear migration path"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Specify Retention"}),": Set ",(0,i.jsx)(n.code,{children:"retention_days"})," based on legal requirements"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optional Fields"}),": Use ",(0,i.jsx)(n.code,{children:"optional"})," for all new fields to maintain backward compatibility"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"For Consumer Teams:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Declare Purpose"}),": Be specific about ",(0,i.jsx)(n.code,{children:"data_usage"})," (analytics vs operational)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Minimize Access"}),": Only request ",(0,i.jsx)(n.code,{children:"allowed_fields"})," you actually need"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Match Compliance"}),": Ensure your ",(0,i.jsx)(n.code,{children:"compliance_frameworks"})," match schema requirements"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Set Retention"}),": Don't exceed schema's ",(0,i.jsx)(n.code,{children:"retention_days"})," policy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Handle Deprecations"}),": Monitor warnings and migrate before deadline"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"example-end-to-end-governance-flow",children:"Example: End-to-End Governance Flow"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario: Analytics team wants to analyze user behavior"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Step 1: User Platform team creates schema with governance tags\ncat > user_events.proto <<EOF\nsyntax = "proto3";\nimport "prism/annotations.proto";\n\nmessage UserActivityEvent {\n  option (prism.sensitivity) = "high";\n  option (prism.compliance) = "gdpr,ccpa";\n  option (prism.retention_days) = 90;\n  option (prism.owner_team) = "user-platform";\n  option (prism.consumer_approval) = "required";\n\n  string user_id = 1 [(prism.index) = "primary"];\n  string email = 2 [(prism.pii) = "email", (prism.encrypt) = "aes256"];\n  string activity_type = 3;  // "login", "purchase", "view"\n  int64 timestamp = 4;\n}\nEOF\n\n# Step 2: Register schema (enforces governance tags)\nprism schema register --file user_events.proto --topic user.activity\n\u2705 Schema registered (approval required for new consumers)\n\n# Step 3: Analytics team requests consumer access\ncat > analytics_consumer.yaml <<EOF\nnamespaces:\n  - name: user-analytics\n    pattern: pubsub\n    backend:\n      type: nats\n      subject: user.activity\n    consumer:\n      team: "analytics-team"\n      purpose: "User behavior analysis for product recommendations"\n      data_usage: "analytics"\n      pii_access: "not_needed"  # Don\'t need email\n      retention_days: 30\n      compliance_frameworks: ["gdpr", "ccpa"]\n      allowed_fields: ["user_id", "activity_type", "timestamp"]  # Exclude email\nEOF\n\nprism namespace configure analytics_consumer.yaml\n\u26a0\ufe0f  Consumer registration requires approval (high sensitivity topic)\n    Approval request created: SEC-99999\n\n# Step 4: Security team approves (automated via Jira/PagerDuty)\n# Security reviews: purpose, allowed_fields, retention\n\u2705 Approval granted: SEC-99999\n\n# Step 5: Analytics team subscribes (approval verified automatically)\nprism namespace configure analytics_consumer.yaml\n\u2705 Consumer registered and approved\n\n# Step 6: Consumer receives filtered messages (PII auto-removed)\n# Consumer code:\nstream = client.subscribe("user.activity")\nfor event in stream:\n    print(event.payload)\n    # { "user_id": "u123", "activity_type": "login", "timestamp": 1697200000 }\n    # "email" field NOT delivered (filtered by Prism proxy)\n\n# Step 7: Audit trail generated automatically\n# All accesses logged with team, purpose, fields accessed, PII filtering applied\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Benefits of Governance Tags:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Self-Service"}),": Teams can request access without manual coordination"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Automated Enforcement"}),": Prism proxy blocks non-compliant consumers"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Audit Trail"}),": Every access logged for compliance reporting"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Least Privilege"}),": Field-level filtering prevents accidental PII access"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Deprecation Management"}),": Consumers warned before breaking changes"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Compliance Ready"}),": GDPR/HIPAA/SOC2 reports generated automatically"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"schema-evolution-workflow",children:"Schema Evolution Workflow"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario: Add Optional Field (Backward Compatible)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Step 1: Producer team updates schema\n# schemas/orders.created.v2.proto\nmessage OrderCreated {\n  string order_id = 1;\n  string user_id = 2;\n  double total = 3;\n  optional double tax_amount = 4;  # NEW\n}\n\n# Step 2: Validate compatibility\nprism schema validate --file orders.created.v2.proto --check-backward\n\n# Output:\n\u2705 Backward compatible with v1\n   - Added optional field \'tax_amount\' (safe)\n\n# Step 3: Register new schema version\nprism schema register \\\n  --file orders.created.v2.proto \\\n  --topic orders.created \\\n  --version v2 \\\n  --compatibility backward\n\n# Output:\n\u2705 Schema registered: schema-xyz789\n   URL: github.com/myorg/order-service/schemas/orders.created.v2.proto\n   Compatible consumers: v1 (3 instances)\n\n# Step 4: Update producer code to publish v2\n# Producer code change\nclient.publish(\n    topic="orders.created",\n    payload=order_v2,  # Includes tax_amount\n    schema_version="v2"\n)\n\n# Step 5: Deploy producer (v1 consumers still work!)\nkubectl apply -f producer-deployment.yaml\n\n# Step 6: Consumers discover new schema\nprism schema list --topic orders.created\n# v2 now available, v1 consumers keep working\n\n# Step 7: Consumer teams upgrade when ready (no coordination!)\n# Consumer Team B: Updates code to use tax_amount\n# Consumer Team C: Ignores new field (still works)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Scenario: Add Required Field (Breaking Change)"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Producer wants to add required field\nmessage OrderCreated {\n  string order_id = 1;\n  string user_id = 2;\n  double total = 3;\n  string payment_method = 4;  # NEW: Required field\n}\n\n# Validation fails\nprism schema validate --file orders.created.v3.proto --check-backward\n\n# Output:\n\u274c NOT backward compatible with v2\n   - Added required field \'payment_method\' (BREAKING)\n\n\u2139\ufe0f  Recommendation: Use new topic \'orders.created.v3\' or make field optional\n\n# Producer options:\n# Option A: New topic (clean separation)\nclient.publish(topic="orders.created.v3", payload=order_v3)\n\n# Option B: Make field optional (non-breaking)\noptional string payment_method = 4;\n\n# Option C: Parallel publish (transition period)\nclient.publish(topic="orders.created", payload=order_v2)  # Old consumers\nclient.publish(topic="orders.created.v3", payload=order_v3)  # New consumers\n'})}),"\n",(0,i.jsx)(n.h3,{id:"schema-registry-api-specification",children:"Schema Registry API Specification"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"gRPC Service:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.schema.v1;\n\nservice SchemaRegistryService {\n  // Register new schema version\n  rpc RegisterSchema(RegisterSchemaRequest) returns (RegisterSchemaResponse);\n\n  // Get schema by topic + version\n  rpc GetSchema(GetSchemaRequest) returns (GetSchemaResponse);\n\n  // List all schema versions for topic\n  rpc ListSchemas(ListSchemasRequest) returns (ListSchemasResponse);\n\n  // Check compatibility between schemas\n  rpc CheckCompatibility(CheckCompatibilityRequest) returns (CheckCompatibilityResponse);\n\n  // Delete schema version (with safety checks)\n  rpc DeleteSchema(DeleteSchemaRequest) returns (DeleteSchemaResponse);\n\n  // Get active consumers for schema version\n  rpc GetConsumers(GetConsumersRequest) returns (GetConsumersResponse);\n}\n\nmessage RegisterSchemaRequest {\n  string namespace = 1;\n  string topic = 2;\n  string version = 3;  // e.g., "v2", "1.0.0"\n\n  SchemaFormat format = 4;\n  bytes schema_content = 5;  // Protobuf IDL, JSON Schema, Avro, etc.\n\n  CompatibilityMode compatibility = 6;\n  map<string, string> metadata = 7;  // owner_team, description, etc.\n}\n\nenum SchemaFormat {\n  SCHEMA_FORMAT_UNSPECIFIED = 0;\n  SCHEMA_FORMAT_PROTOBUF = 1;\n  SCHEMA_FORMAT_JSON_SCHEMA = 2;\n  SCHEMA_FORMAT_AVRO = 3;\n}\n\nenum CompatibilityMode {\n  COMPATIBILITY_MODE_UNSPECIFIED = 0;\n  COMPATIBILITY_MODE_NONE = 1;\n  COMPATIBILITY_MODE_BACKWARD = 2;\n  COMPATIBILITY_MODE_FORWARD = 3;\n  COMPATIBILITY_MODE_FULL = 4;\n}\n\nmessage RegisterSchemaResponse {\n  string schema_id = 1;\n  string schema_url = 2;\n  ValidationResult validation = 3;\n}\n\nmessage ValidationResult {\n  bool is_compatible = 1;\n  repeated string breaking_changes = 2;\n  repeated string warnings = 3;\n  repeated string compatible_versions = 4;\n}\n\nmessage GetSchemaRequest {\n  string namespace = 1;\n  string topic = 2;\n  string version = 3;  // or "latest"\n}\n\nmessage GetSchemaResponse {\n  string schema_id = 1;\n  string version = 2;\n  SchemaFormat format = 3;\n  bytes schema_content = 4;\n  SchemaMetadata metadata = 5;\n}\n\nmessage SchemaMetadata {\n  string owner_team = 1;\n  string description = 2;\n  google.protobuf.Timestamp created_at = 3;\n  string created_by = 4;\n  repeated string pii_fields = 5;\n  CompatibilityMode compatibility = 6;\n  int32 active_consumers = 7;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"developer-workflows",children:"Developer Workflows"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Workflow 1: New Producer Team"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# 1. Create schema file\nmkdir -p schemas/events\ncat > schemas/events/notification.sent.v1.proto <<EOF\nsyntax = "proto3";\nmessage NotificationSent {\n  string notification_id = 1;\n  string user_id = 2;\n  string channel = 3;  // email, sms, push\n  string status = 4;\n}\nEOF\n\n# 2. Register schema\nprism schema register \\\n  --file schemas/events/notification.sent.v1.proto \\\n  --topic notification.sent \\\n  --version v1 \\\n  --compatibility backward \\\n  --owner-team notifications-team\n\n# 3. Generate client code\nprism schema codegen \\\n  --topic notification.sent \\\n  --version v1 \\\n  --language python \\\n  --output ./generated\n\n# 4. Publish with schema reference\nfrom generated import notification_sent_pb2\nfrom prism_sdk import PrismClient\n\nclient = PrismClient(namespace="notifications", schema_validation=True)\n\nnotification = notification_sent_pb2.NotificationSent(\n    notification_id="notif-123",\n    user_id="user-456",\n    channel="email",\n    status="sent"\n)\n\nclient.publish(\n    topic="notification.sent",\n    payload=notification,\n    schema_version="v1"\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Workflow 2: Existing Consumer Team"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# 1. Discover available schemas\nprism schema list --topic orders.created\n\n# Output:\n# VERSION   STATUS       CONSUMERS   PUBLISHED\n# v2        current      3           2025-10-13\n# v1        deprecated   1           2025-09-01\n\n# 2. Get schema definition\nprism schema get --topic orders.created --version v2 --output ./schemas\n\n# 3. Check compatibility with current consumer code\nprism schema check \\\n  --topic orders.created \\\n  --consumer-schema ./schemas/my_orders_v1.proto \\\n  --mode strict\n\n# Output:\n\u26a0\ufe0f  Warning: Producer added field \'tax_amount\' (optional)\n\u2705 Your consumer code will continue to work\n\n# 4. Generate updated client code\nprism schema codegen \\\n  --topic orders.created \\\n  --version v2 \\\n  --language rust \\\n  --output ./src/generated\n\n# 5. Update consumer code\nuse prism_sdk::PrismClient;\nuse generated::orders_created::OrderCreated;\n\nlet client = PrismClient::new("order-events")\n    .with_schema_validation(true);\n\nlet stream = client.subscribe("orders.created")\n    .with_schema_assertion("v2", OnMismatch::Warn)\n    .build()?;\n\nfor event in stream {\n    let order: OrderCreated = event.payload()?;\n\n    // New field available (optional)\n    if let Some(tax) = order.tax_amount {\n        println!("Tax: ${}", tax);\n    }\n\n    process_order(&order)?;\n    event.ack()?;\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Workflow 3: Platform Team Governance"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Audit all schemas for PII tagging\nprism schema audit --check-pii\n\n# Output:\n\u274c orders.created.v2: Field 'email' missing @prism.pii tag\n\u274c user.profile.updated.v1: Field 'phone' missing @prism.pii tag\n\u2705 notification.sent.v1: All PII fields tagged\n\n# Enforce compatibility policy\nprism schema policy set \\\n  --namespace orders \\\n  --compatibility backward \\\n  --require-pii-tags \\\n  --approval-required-for breaking\n\n# Block incompatible schema registration\nprism schema register --file orders.created.v3.proto\n\n# Output:\n\u274c Registration blocked: Breaking changes detected\n   - Removed field 'currency' (required)\n   - Added required field 'payment_method'\n\n\u2139\ufe0f  Policy requires approval for breaking changes\n   Create approval request: prism schema approve-request --schema-file orders.created.v3.proto\n"})}),"\n",(0,i.jsx)(n.h2,{id:"implementation-plan",children:"Implementation Plan"}),"\n",(0,i.jsx)(n.h3,{id:"phase-1-github-based-registry-weeks-1-3",children:"Phase 1: GitHub-Based Registry (Weeks 1-3)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Schema URL parsing (github.com/org/repo/path)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 GitHub API client (fetch schema files)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Local schema cache (TTL=1h)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Publish-time schema attachment (message headers)"}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Consumer schema discovery CLI (",(0,i.jsx)(n.code,{children:"prism schema list/get"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Success Criteria:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Producer can reference GitHub schema in config"}),"\n",(0,i.jsx)(n.li,{children:"Consumer can fetch schema from GitHub"}),"\n",(0,i.jsx)(n.li,{children:"Message headers include schema metadata"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-2-schema-validation-weeks-4-6",children:"Phase 2: Schema Validation (Weeks 4-6)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Protobuf schema parser"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Publish-time payload validation"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Compatibility checker (backward/forward)"}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 CI/CD integration (",(0,i.jsx)(n.code,{children:"prism schema check"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Consumer-side schema assertion"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Success Criteria:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Invalid publish rejected with clear error"}),"\n",(0,i.jsx)(n.li,{children:"CI pipeline catches breaking changes before merge"}),"\n",(0,i.jsx)(n.li,{children:"Consumer can opt into strict schema validation"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-3-prism-schema-registry-weeks-7-10",children:"Phase 3: Prism Schema Registry (Weeks 7-10)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Schema Registry gRPC service"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 SQLite storage (local dev), Postgres (prod)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 REST API adapter (for non-gRPC clients)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Admin UI (Ember.js) for browsing schemas"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Migration from GitHub to registry"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Success Criteria:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Schema registry handles 10k req/sec"}),"\n",(0,i.jsx)(n.li,{children:"<10ms P99 latency for schema fetch"}),"\n",(0,i.jsx)(n.li,{children:"UI shows schema versions, consumers, compatibility"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-4-governance-and-pii-weeks-11-13",children:"Phase 4: Governance and PII (Weeks 11-13)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 PII annotation parser (",(0,i.jsx)(n.code,{children:"@prism.pii"}),")"]}),"\n",(0,i.jsx)(n.li,{children:"\u2705 PII validation at schema registration"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Approval workflows for breaking changes"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Audit logs (who registered what, when)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Consumer PII awareness SDK"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Success Criteria:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Schema without PII tags rejected"}),"\n",(0,i.jsx)(n.li,{children:"Breaking changes require approval"}),"\n",(0,i.jsx)(n.li,{children:"Audit trail for compliance"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-5-code-generation-weeks-14-16",children:"Phase 5: Code Generation (Weeks 14-16)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.code,{children:"prism schema codegen"})," CLI"]}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Protobuf \u2192 Go structs"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Protobuf \u2192 Python dataclasses"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Protobuf \u2192 Rust structs"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 JSON Schema \u2192 TypeScript interfaces"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Success Criteria:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"One command generates client code"}),"\n",(0,i.jsx)(n.li,{children:"Generated code includes PII awareness"}),"\n",(0,i.jsx)(n.li,{children:"Works with all supported languages (Go, Python, Rust)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"trade-offs-and-alternatives",children:"Trade-Offs and Alternatives"}),"\n",(0,i.jsx)(n.h3,{id:"alternative-1-no-schema-registry-status-quo",children:"Alternative 1: No Schema Registry (Status Quo)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Zero infrastructure overhead"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 No coordination needed"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u274c Runtime failures from schema mismatches"}),"\n",(0,i.jsx)(n.li,{children:"\u274c No PII governance"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Manual coordination for schema changes"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Testing impossible without mocks"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Verdict:"})," Unacceptable for PRD-001 reliability goals"]}),"\n",(0,i.jsx)(n.h3,{id:"alternative-2-confluent-schema-registry-only",children:"Alternative 2: Confluent Schema Registry Only"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Battle-tested at scale"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Rich compatibility checks"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Kafka ecosystem integration"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u274c Kafka-specific (doesn't work with NATS)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c JVM-based (1GB+ memory)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Licensing complexity"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Not Git-native"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Verdict:"})," Good for Kafka-heavy deployments, but too narrow for Prism's multi-backend vision"]}),"\n",(0,i.jsx)(n.h3,{id:"alternative-3-git-only-no-registry-service",children:"Alternative 3: Git-Only (No Registry Service)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pros:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Familiar Git workflow"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Free (GitHub)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Version control built-in"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Cons:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u274c GitHub rate limits (5000 req/hour)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c High latency (300-500ms)"}),"\n",(0,i.jsx)(n.li,{children:"\u274c No runtime governance"}),"\n",(0,i.jsx)(n.li,{children:"\u274c Poor observability"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Verdict:"})," Good for low-throughput, open-source projects, but insufficient for enterprise"]}),"\n",(0,i.jsx)(n.h3,{id:"proposed-hybrid-approach",children:"Proposed Hybrid Approach"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use all three tiers based on context:"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Scenario"}),(0,i.jsx)(n.th,{children:"Recommended Registry"}),(0,i.jsx)(n.th,{children:"Rationale"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Open-source project"})}),(0,i.jsx)(n.td,{children:"GitHub"}),(0,i.jsx)(n.td,{children:"Public schemas, Git workflow"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Internal services (<1k RPS)"})}),(0,i.jsx)(n.td,{children:"GitHub"}),(0,i.jsx)(n.td,{children:"Simple, no infra"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Production (>10k RPS)"})}),(0,i.jsx)(n.td,{children:"Prism Registry"}),(0,i.jsx)(n.td,{children:"Performance, governance"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Kafka-native pipeline"})}),(0,i.jsx)(n.td,{children:"Confluent Registry"}),(0,i.jsx)(n.td,{children:"Ecosystem integration"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Air-gapped network"})}),(0,i.jsx)(n.td,{children:"Prism Registry"}),(0,i.jsx)(n.td,{children:"No external dependencies"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"schema-tampering",children:"Schema Tampering"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Risk:"})," Attacker modifies schema to inject malicious fields"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Mitigation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Schema hash verification (SHA256)"}),"\n",(0,i.jsx)(n.li,{children:"Immutable schema versions (can't edit v2 after publish)"}),"\n",(0,i.jsx)(n.li,{children:"Git commit signatures (for GitHub registry)"}),"\n",(0,i.jsx)(n.li,{children:"Audit logs (who changed what)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"pii-leakage",children:"PII Leakage"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Risk:"})," Consumer accidentally logs PII field"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Mitigation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Mandatory PII tagging at registration"}),"\n",(0,i.jsx)(n.li,{children:"SDK warnings on PII field access"}),"\n",(0,i.jsx)(n.li,{children:"Automatic masking in logs (via SDK)"}),"\n",(0,i.jsx)(n.li,{children:"Compliance scanning of schemas"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"schema-poisoning",children:"Schema Poisoning"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Risk:"})," Malicious producer registers incompatible schema"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Mitigation:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Namespace-based authorization (only owner team can register)"}),"\n",(0,i.jsx)(n.li,{children:"Approval workflows for breaking changes"}),"\n",(0,i.jsx)(n.li,{children:"Rollback capability (revert to previous version)"}),"\n",(0,i.jsx)(n.li,{children:"Canary deployments (gradual rollout)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"performance-characteristics",children:"Performance Characteristics"}),"\n",(0,i.jsx)(n.h3,{id:"per-message-validation-performance-trade-offs",children:"Per-Message Validation Performance Trade-Offs"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"CRITICAL DESIGN DECISION"}),": Prism does ",(0,i.jsx)(n.strong,{children:"NOT"})," validate every message against schema by default (performance reasons)."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Validation Timing Options:"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Validation Type"}),(0,i.jsx)(n.th,{children:"When"}),(0,i.jsx)(n.th,{children:"Cost"}),(0,i.jsx)(n.th,{children:"Use Case"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Config-Time"})}),(0,i.jsx)(n.td,{children:"Namespace registration"}),(0,i.jsx)(n.td,{children:"One-time (~100ms)"}),(0,i.jsx)(n.td,{children:"Schema exists and is parseable"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Build-Time"})}),(0,i.jsx)(n.td,{children:"Code generation"}),(0,i.jsx)(n.td,{children:"One-time (~1s)"}),(0,i.jsx)(n.td,{children:"Type safety in client code"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Publish-Time"})}),(0,i.jsx)(n.td,{children:"Every message"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"+50% latency"})}),(0,i.jsx)(n.td,{children:"Debugging schema issues"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Per-Message Validation Cost Analysis:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"# Baseline: No validation\nPublish latency (P99): 10ms\nThroughput: 100k msg/s per proxy instance\n\n# With per-message validation (protobuf deserialization + validation)\nPublish latency (P99): 15ms (+50%)\nThroughput: 66k msg/s per proxy instance (-34%)\n\n# Cost breakdown per message:\n#   - Deserialize payload: +3ms\n#   - Validate required fields: +1ms\n#   - Validate field types: +1ms\n#   - Total overhead: +5ms (50% increase)\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Per-Message Validation is Expensive:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Binary Passthrough Problem"}),": Pattern provider plugins (Kafka, NATS, Redis) treat payloads as ",(0,i.jsx)(n.strong,{children:"opaque binary blobs"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Plugins forward bytes without knowing structure"}),"\n",(0,i.jsx)(n.li,{children:"Validation requires deserialization \u2192 validation \u2192 re-serialization"}),"\n",(0,i.jsx)(n.li,{children:"Triple overhead: parse + validate + encode"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Schema Lookup"}),": Every message needs schema metadata"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Cache hit: ~0.1ms (fast, but adds up at scale)"}),"\n",(0,i.jsx)(n.li,{children:"Cache miss: ~10ms (fetch from registry)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type Checking"}),": Protobuf validation is non-trivial"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Check required fields present"}),"\n",(0,i.jsx)(n.li,{children:"Validate field types match schema"}),"\n",(0,i.jsx)(n.li,{children:"Check enum values are valid"}),"\n",(0,i.jsx)(n.li,{children:"Validate repeated field constraints"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Recommended Approach: Build-Time + Config-Time Validation"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Recommended configuration\nschema:\n  registry_type: prism\n  url: https://schema-registry.example.com\n  version: v2\n\n  validation:\n    config_time: true    # \u2705 Validate schema exists when namespace configured\n    build_time: true     # \u2705 Generate typed client code (compile-time safety)\n    publish_time: false  # \u274c NO per-message validation (performance)\n\n    # Optional: Enable for debugging only\n    # publish_time: true  # \u26a0\ufe0f  WARNING: +50% latency, -34% throughput\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"When to Enable Per-Message Validation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Scenario 1: Development/staging environment\n# Use case: Catch schema bugs before production\nvalidation:\n  publish_time: true\n  on_validation_failure: reject  # Block invalid messages\n\n# Scenario 2: Production debugging\n# Use case: Investigate why consumers are failing\nvalidation:\n  publish_time: true\n  on_validation_failure: warn  # Log errors but allow publish\n  sample_rate: 0.01  # Only validate 1% of messages (reduce overhead)\n\n# Scenario 3: Critical compliance topic\n# Use case: Must guarantee schema compliance for audit\nvalidation:\n  publish_time: true\n  on_validation_failure: reject\n  # Accept performance trade-off for compliance\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Pattern Providers: Schema-Agnostic Binary Passthrough"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"IMPORTANT ARCHITECTURAL PRINCIPLE"}),": Backend pattern provider plugins (Kafka, NATS, Redis, PostgreSQL) are ",(0,i.jsx)(n.strong,{children:"schema-agnostic"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Backend plugin interface - no schema knowledge\ntype Producer interface {\n    // Publish accepts opaque binary payload\n    // Plugin does NOT know if payload is protobuf, JSON, Avro, etc.\n    Publish(ctx context.Context, topic string, payload []byte, headers map[string]string) error\n}\n\ntype Consumer interface {\n    // Subscribe delivers opaque binary payload\n    // Plugin does NOT deserialize or validate\n    Subscribe(ctx context.Context, topic string) (<-chan Message, error)\n}\n\ntype Message struct {\n    Topic    string\n    Payload  []byte  // Opaque bytes (could be protobuf, JSON, avro, etc.)\n    Headers  map[string]string\n    Offset   int64\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Schema-Agnostic Design:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Performance"}),": Zero deserialization overhead in hot path"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Flexibility"}),": Same plugin works with protobuf, JSON Schema, Avro, custom formats"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Simplicity"}),": Plugin logic focuses on backend-specific concerns (connection, retries, etc.)"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Composability"}),": Schema validation is orthogonal concern (handled by proxy)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Schema Validation Responsibility Split:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Prism Proxy (Schema Aware)                             \u2502\n\u2502  - Fetches schema from registry                         \u2502\n\u2502  - Optionally validates payload at publish time         \u2502\n\u2502  - Attaches schema metadata to message headers          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502 Binary payload + headers\n                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Pattern Provider Plugin (Schema Agnostic)              \u2502\n\u2502  - Treats payload as opaque []byte                      \u2502\n\u2502  - Forwards to backend (NATS, Kafka, etc.)              \u2502\n\u2502  - No knowledge of protobuf/JSON/Avro                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                          \u2502 Binary payload + headers\n                          \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Backend (NATS/Kafka/Redis)                             \u2502\n\u2502  - Stores bytes as-is                                   \u2502\n\u2502  - No deserialization                                   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Schema-Specific Consumers/Producers (Optional)"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"While pattern providers are schema-agnostic, applications can build schema-specific consumers for type safety:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Generic schema-agnostic consumer (default)\nfunc GenericConsumer(prismClient *prism.Client, topic string) {\n    stream, _ := prismClient.Subscribe(topic)\n    for msg := range stream {\n        payload := msg.Payload()  // []byte - opaque binary\n        // Application deserializes based on schema metadata in headers\n        schemaURL := msg.Header("X-Prism-Schema-URL")\n        schema := fetchSchema(schemaURL)\n        data := deserialize(payload, schema)\n        process(data)\n    }\n}\n\n// Schema-specific consumer (type-safe, generated code)\nfunc OrderCreatedConsumer(prismClient *prism.Client) {\n    stream, _ := prismClient.SubscribeTyped[OrderCreated]("orders.created")\n    for msg := range stream {\n        order := msg.Payload()  // *OrderCreated - strongly typed!\n        // No manual deserialization needed\n        fmt.Printf("Order ID: %s, Total: %.2f\\n", order.OrderId, order.Total)\n        process(order)\n    }\n}\n\n// Generated typed client (code gen from schema)\ntype TypedClient struct {\n    client *prism.Client\n    schema *prism.Schema\n}\n\nfunc (c *TypedClient) SubscribeTyped[T proto.Message](topic string) (<-chan TypedMessage[T], error) {\n    rawStream, err := c.client.Subscribe(topic)\n    if err != nil {\n        return nil, err\n    }\n\n    typedStream := make(chan TypedMessage[T])\n    go func() {\n        for msg := range rawStream {\n            // Deserialize using schema\n            var payload T\n            proto.Unmarshal(msg.Payload(), &payload)\n\n            // Optional: Validate against schema\n            if c.schema.Validate(&payload) != nil {\n                continue  // Skip invalid messages\n            }\n\n            typedStream <- TypedMessage[T]{Payload: payload, Metadata: msg.Metadata()}\n        }\n    }()\n\n    return typedStream, nil\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Code Generation for Schema-Specific Clients:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Generate typed client from schema\nprism schema codegen \\\n  --topic orders.created \\\n  --version v2 \\\n  --language go \\\n  --output ./generated/orders\n\n# Generated code provides:\n# - Strongly typed OrderCreated struct\n# - Type-safe Subscribe[OrderCreated]() method\n# - Automatic deserialization\n# - Optional validation\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Trade-Offs: Generic vs Schema-Specific Consumers:"})}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Approach"}),(0,i.jsx)(n.th,{children:"Type Safety"}),(0,i.jsx)(n.th,{children:"Performance"}),(0,i.jsx)(n.th,{children:"Flexibility"}),(0,i.jsx)(n.th,{children:"Complexity"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Generic (schema-agnostic)"})}),(0,i.jsx)(n.td,{children:"\u274c Runtime errors"}),(0,i.jsx)(n.td,{children:"\u2705 Fast (no validation)"}),(0,i.jsx)(n.td,{children:"\u2705 Works with any schema"}),(0,i.jsx)(n.td,{children:"\u2705 Simple"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Schema-Specific (typed)"})}),(0,i.jsx)(n.td,{children:"\u2705 Compile-time safety"}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f Slower (validation)"}),(0,i.jsx)(n.td,{children:"\u274c One consumer per schema"}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f Code gen required"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Hybrid (typed + optional validation)"})}),(0,i.jsx)(n.td,{children:"\u2705 Compile-time safety"}),(0,i.jsx)(n.td,{children:"\u2705 Fast (validation disabled)"}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f Moderate"}),(0,i.jsx)(n.td,{children:"\u26a0\ufe0f Code gen + config"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"schema-registry-benchmarks",children:"Schema Registry Benchmarks"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Operation"}),(0,i.jsx)(n.th,{children:"Latency (P99)"}),(0,i.jsx)(n.th,{children:"Throughput"}),(0,i.jsx)(n.th,{children:"Caching"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"GitHub fetch"})}),(0,i.jsx)(n.td,{children:"500ms"}),(0,i.jsx)(n.td,{children:"5k req/hour"}),(0,i.jsx)(n.td,{children:"TTL=1h"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Registry fetch"})}),(0,i.jsx)(n.td,{children:"10ms"}),(0,i.jsx)(n.td,{children:"100k RPS"}),(0,i.jsx)(n.td,{children:"Aggressive"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Compatibility check"})}),(0,i.jsx)(n.td,{children:"50ms"}),(0,i.jsx)(n.td,{children:"10k RPS"}),(0,i.jsx)(n.td,{children:"N/A"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Config-time validation"})}),(0,i.jsx)(n.td,{children:"100ms"}),(0,i.jsx)(n.td,{children:"N/A (one-time)"}),(0,i.jsx)(n.td,{children:"N/A"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Per-message validation"})}),(0,i.jsx)(n.td,{children:"5ms"}),(0,i.jsx)(n.td,{children:"50k RPS"}),(0,i.jsx)(n.td,{children:"In-memory"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"publish-overhead",children:"Publish Overhead"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Without schema validation:"})," 10ms P99\n",(0,i.jsx)(n.strong,{children:"With per-message validation:"})," 15ms P99 (+50% overhead)"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Rationale:"})," Per-message validation is expensive, use config-time + build-time validation instead"]}),"\n",(0,i.jsx)(n.h2,{id:"observability",children:"Observability"}),"\n",(0,i.jsx)(n.h3,{id:"metrics",children:"Metrics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'# Schema registry\nprism_schema_registry_requests_total{operation="get_schema", status="success"}\nprism_schema_registry_cache_hit_rate{namespace="orders"}\nprism_schema_registry_validation_failures{topic="orders.created", reason="missing_field"}\n\n# Publisher\nprism_publish_schema_validation_duration_seconds{topic="orders.created", result="valid"}\nprism_publish_schema_mismatch_total{topic="orders.created", error_type="missing_field"}\n\n# Consumer\nprism_subscribe_schema_assertion_failures{topic="orders.created", expected_version="v2", actual_version="v1"}\nprism_consumer_schema_incompatible_messages{topic="orders.created", action="dropped"}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"logs",children:"Logs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "event": "schema_validation_failed",\n  "topic": "orders.created",\n  "schema_version": "v2",\n  "error": "Field \'email\' missing (required)",\n  "publisher_id": "order-service-pod-123",\n  "timestamp": "2025-10-13T10:30:00Z"\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"traces",children:"Traces"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Span: PublishWithSchemaValidation [15ms]\n\u251c\u2500 Span: FetchSchema (cached) [2ms]\n\u251c\u2500 Span: ValidatePayload [8ms]\n\u2502  \u251c\u2500 Check required fields [2ms]\n\u2502  \u251c\u2500 Check PII tags [1ms]\n\u2502  \u2514\u2500 Type validation [5ms]\n\u2514\u2500 Span: PublishToBackend [5ms]\n"})}),"\n",(0,i.jsx)(n.h2,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,i.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func TestSchemaCompatibilityBackward(t *testing.T) {\n    v1 := loadSchema("orders.created.v1.proto")\n    v2 := loadSchema("orders.created.v2.proto")\n\n    checker := NewCompatibilityChecker(CompatibilityBackward)\n    result := checker.Check(v1, v2)\n\n    assert.True(t, result.IsCompatible)\n    assert.Contains(t, result.Warnings, "Added optional field \'tax_amount\'")\n}\n\nfunc TestSchemaValidationFailure(t *testing.T) {\n    schema := loadSchema("orders.created.v2.proto")\n    payload := map[string]interface{}{\n        "order_id": "order-123",\n        "user_id": "user-456",\n        // Missing required field \'total\'\n    }\n\n    validator := NewSchemaValidator(schema)\n    err := validator.Validate(payload)\n\n    assert.Error(t, err)\n    assert.Contains(t, err.Error(), "Field \'total\' missing")\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def test_publish_with_schema_validation(prism_client, schema_registry):\n    # Register schema\n    schema_id = schema_registry.register(\n        topic="test.events",\n        version="v1",\n        schema=load_proto("test_events.v1.proto")\n    )\n\n    # Publish valid message\n    response = prism_client.publish(\n        topic="test.events",\n        payload={"event_id": "evt-123", "data": "foo"},\n        schema_version="v1"\n    )\n    assert response.success\n\n    # Publish invalid message (should fail)\n    with pytest.raises(SchemaValidationError):\n        prism_client.publish(\n            topic="test.events",\n            payload={"event_id": "evt-456"},  # Missing \'data\' field\n            schema_version="v1"\n        )\n'})}),"\n",(0,i.jsx)(n.h3,{id:"end-to-end-tests",children:"End-to-End Tests"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Test full workflow: register \u2192 publish \u2192 consume \u2192 validate\nmake test-e2e-schema\n\n# Steps:\n# 1. Start Prism proxy + schema registry\n# 2. Register schema via CLI\n# 3. Producer publishes with schema reference\n# 4. Consumer subscribes with schema assertion\n# 5. Verify consumer receives typed payload\n# 6. Verify incompatible message rejected\n"})}),"\n",(0,i.jsx)(n.h2,{id:"migration-path",children:"Migration Path"}),"\n",(0,i.jsx)(n.h3,{id:"phase-0-no-schemas-current-state",children:"Phase 0: No Schemas (Current State)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# Producers publish arbitrary payloads\nclient.publish(topic="orders.created", payload={"order_id": "123", ...})\n'})}),"\n",(0,i.jsx)(n.h3,{id:"phase-1-optional-schema-references-soft-launch",children:"Phase 1: Optional Schema References (Soft Launch)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# Producers optionally declare schema URL\nnamespaces:\n  - name: orders\n    schema:\n      url: github.com/.../orders.created.v1.proto\n      validation: warn  # Log warnings, don't fail\n"})}),"\n",(0,i.jsx)(n.h3,{id:"phase-2-mandatory-schemas-for-new-topics",children:"Phase 2: Mandatory Schemas for New Topics"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# New topics require schema declaration\nnamespaces:\n  - name: new-events\n    schema:\n      url: github.com/.../new_events.v1.proto\n      validation: strict  # Fail on mismatch\n"})}),"\n",(0,i.jsx)(n.h3,{id:"phase-3-governance-enforcement",children:"Phase 3: Governance Enforcement"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# All topics require schema + PII tags\nprism schema policy set --require-pii-tags --global\n"})}),"\n",(0,i.jsx)(n.h2,{id:"success-criteria",children:"Success Criteria"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schema Discovery"}),": Consumer finds producer schema in <10 seconds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Breaking Change Detection"}),": CI catches incompatible schema in <30 seconds"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Publish Overhead"}),": <15ms P99 with validation enabled"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Developer Adoption"}),": 80% of new topics use schemas within 6 months"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PII Compliance"}),": 100% of schemas with PII have tags within 12 months"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schema Versioning"}),": Semantic versioning (1.0.0) or simple (v1, v2)?"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schema Deletion"}),": Allow deletion of old versions with active consumers?"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cross-Namespace Schemas"}),": Can schemas be shared across namespaces?"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schema Testing"}),": How to test schema changes before production?"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schema Ownership"}),": Team-based or individual ownership model?"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PRD-001"}),": Prism Data Access Gateway (core product goals)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"RFC-002"}),": Data Layer Interface Specification (PubSub service)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"RFC-014"}),": Layered Data Access Patterns (pub/sub patterns)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"ADR-003"}),": Protobuf Single Source of Truth (protobuf strategy)"]}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.confluent.io/platform/current/schema-registry/index.html",children:"Confluent Schema Registry"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://cloud.google.com/pubsub/docs/schemas",children:"Google Pub/Sub Schema Validation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.aws.amazon.com/eventbridge/latest/userguide/eb-schema.html",children:"AWS EventBridge Schema Registry"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"2025-10-13 (v3): Governance, performance, and feasibility enhancements based on user feedback:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Removed inline schema option"}),": Config now uses URL references only (no inline protobuf content)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fixed Mermaid diagrams"}),": Changed from ",(0,i.jsx)(n.code,{children:"text to "}),"mermaid for proper rendering"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Backend schema propagation"}),": Added SchemaAwareBackend interface for pushing schemas to Kafka/NATS"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schema trust verification"}),": Added schema_name, sha256_hash, allowed_sources for URL-based schemas"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"HTTPS schema registry support"}),": Any HTTPS endpoint can serve schemas (not just GitHub)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Build vs Buy analysis"}),": Comprehensive feasibility study for custom Prism Schema Registry"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Governance tags (MAJOR)"}),": Schema-level and consumer-level tags for distributed teams:\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Schema tags: sensitivity, compliance, retention_days, owner_team, consumer_approval, audit_log"}),"\n",(0,i.jsx)(n.li,{children:"Consumer tags: team, purpose, data_usage, pii_access, compliance_frameworks, allowed_fields"}),"\n",(0,i.jsx)(n.li,{children:"Field-level access control: Prism proxy auto-filters fields based on allowed_fields"}),"\n",(0,i.jsx)(n.li,{children:"Deprecation warnings: @prism.deprecated tag with date and reason"}),"\n",(0,i.jsx)(n.li,{children:"Audit logging: Automatic compliance reporting for GDPR/HIPAA/SOC2"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optional field enforcement"}),": Prism can enforce that all fields are optional for backward compatibility"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Per-message validation trade-offs"}),": Detailed performance analysis (+50% latency, -34% throughput)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pattern providers schema-agnostic"}),": Clarified that plugins treat payloads as opaque binary blobs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schema-specific consumers"}),": Added examples of typed consumers with code generation"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"2025-10-13 (v2): Major architectural revisions based on feedback:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Schema declaration moved to namespace config"})," (not per-publish) for performance"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validation timing clarified"}),": Build-time (code gen) + config-time (validation), NOT runtime per-message"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Comparison with Kafka ecosystem registries"}),": Confluent, AWS Glue, Apicurio feature matrix"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Internet-scale scenarios added"}),": Open-source data exchange, multi-tenant SaaS, public webhooks, federated event bus"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Key principle"}),": Zero per-message overhead via config-time schema resolution"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"2025-10-13 (v1): Initial draft exploring schema evolution and validation for decoupled pub/sub"}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);