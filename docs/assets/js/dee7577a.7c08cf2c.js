"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[7014],{6946:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"go-cli-configuration","title":"ADR-016: Go CLI and Configuration Management","description":"Context","source":"@site/../docs-cms/adr/016-go-cli-configuration.md","sourceDirName":".","slug":"/go-cli-configuration","permalink":"/prism-data-layer/adr/go-cli-configuration","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/016-go-cli-configuration.md","tags":[{"inline":true,"label":"go","permalink":"/prism-data-layer/adr/tags/go"},{"inline":true,"label":"cli","permalink":"/prism-data-layer/adr/tags/cli"},{"inline":true,"label":"configuration","permalink":"/prism-data-layer/adr/tags/configuration"},{"inline":true,"label":"developer-experience","permalink":"/prism-data-layer/adr/tags/developer-experience"}],"version":"current","sidebarPosition":16,"frontMatter":{"title":"ADR-016: Go CLI and Configuration Management","status":"Accepted","date":"2025-10-07T00:00:00.000Z","deciders":"Core Team","tags":["go","cli","configuration","developer-experience"]},"sidebar":"adrSidebar","previous":{"title":"ADR-015: Go Testing Strategy","permalink":"/prism-data-layer/adr/go-testing-strategy"},"next":{"title":"ADR-017: Go Structured Logging with slog","permalink":"/prism-data-layer/adr/go-structured-logging"}}');var o=i(4848),t=i(8453);const s={title:"ADR-016: Go CLI and Configuration Management",status:"Accepted",date:new Date("2025-10-07T00:00:00.000Z"),deciders:"Core Team",tags:["go","cli","configuration","developer-experience"]},l=void 0,a={},c=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Cobra (CLI Framework)",id:"cobra-cli-framework",level:3},{value:"Viper (Configuration Management)",id:"viper-configuration-management",level:3},{value:"Configuration Hierarchy (highest to lowest precedence)",id:"configuration-hierarchy-highest-to-lowest-precedence",level:3},{value:"Configuration Schema",id:"configuration-schema",level:2},{value:"CLI Structure",id:"cli-structure",level:2},{value:"prism-cli",id:"prism-cli",level:3},{value:"prism-migrate",id:"prism-migrate",level:3},{value:"prism-bench",id:"prism-bench",level:3},{value:"Examples",id:"examples",level:2},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Dependencies",id:"dependencies",level:3},{value:"Package Structure",id:"package-structure",level:3},{value:"Example Implementation",id:"example-implementation",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,o.jsx)(n.p,{children:"Prism Go tooling requires robust CLI interfaces with:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Subcommands for different operations"}),"\n",(0,o.jsx)(n.li,{children:"Configuration file support"}),"\n",(0,o.jsx)(n.li,{children:"Environment variable overrides"}),"\n",(0,o.jsx)(n.li,{children:"Flag parsing with validation"}),"\n",(0,o.jsx)(n.li,{children:"Consistent UX across tools"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.strong,{children:"Cobra"})," for CLI structure and ",(0,o.jsx)(n.strong,{children:"Viper"})," for configuration management."]}),"\n",(0,o.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,o.jsx)(n.h3,{id:"cobra-cli-framework",children:"Cobra (CLI Framework)"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Industry Standard"}),": Used by Kubernetes, Hugo, GitHub CLI, Docker CLI"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Rich Features"}),": Subcommands, flags, aliases, help generation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"POSIX Compliance"}),": Follows standard CLI conventions"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Code Generation"}),": ",(0,o.jsx)(n.code,{children:"cobra-cli"})," scaffolds command structure"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Testing Support"}),": Commands are testable units"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"viper-configuration-management",children:"Viper (Configuration Management)"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Layered Configuration"}),": Flags > Env > Config File > Defaults"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Multiple Formats"}),": YAML, JSON, TOML"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Environment Binding"}),": Automatic env var mapping"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Seamless Cobra Integration"}),": Built to work together"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"configuration-hierarchy-highest-to-lowest-precedence",children:"Configuration Hierarchy (highest to lowest precedence)"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:["CLI flags: ",(0,o.jsx)(n.code,{children:"--namespace test --backend postgres"})]}),"\n",(0,o.jsxs)(n.li,{children:["Environment variables: ",(0,o.jsx)(n.code,{children:"PRISM_NAMESPACE=test PRISM_BACKEND=postgres"})]}),"\n",(0,o.jsxs)(n.li,{children:["Config file: ",(0,o.jsx)(n.code,{children:"~/.prism.yaml"})," or ",(0,o.jsx)(n.code,{children:"./prism.yaml"})]}),"\n",(0,o.jsx)(n.li,{children:"Defaults: Sensible fallbacks"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"configuration-schema",children:"Configuration Schema"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"# prism.yaml\nproxy:\n  endpoint: localhost:8980\n  timeout: 30s\n\nlogging:\n  level: info  # debug, info, warn, error\n  format: json  # json, text\n\nmigrate:\n  batch_size: 1000\n  workers: 4\n"})}),"\n",(0,o.jsx)(n.h2,{id:"cli-structure",children:"CLI Structure"}),"\n",(0,o.jsx)(n.h3,{id:"prism-cli",children:"prism-cli"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"prism-cli [command] [flags]\n\nCommands:\n  get        Get a value from Prism\n  put        Put a value into Prism\n  delete     Delete a value from Prism\n  scan       Scan values in a namespace\n  config     Show resolved configuration\n\nGlobal Flags:\n  -c, --config string      Config file (default: ~/.prism.yaml)\n  -e, --endpoint string    Prism proxy endpoint (default: localhost:8980)\n      --log-level string   Log level: debug, info, warn, error\n      --log-format string  Log format: json, text\n"})}),"\n",(0,o.jsx)(n.h3,{id:"prism-migrate",children:"prism-migrate"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"prism-migrate [command] [flags]\n\nCommands:\n  run        Run data migration\n  validate   Validate migration configuration\n  status     Show migration status\n\nFlags:\n  --source string        Source connection string\n  --dest string          Destination connection string\n  --batch-size int       Batch size (default: 1000)\n  --workers int          Concurrent workers (default: NumCPU)\n  --dry-run              Validate without migrating\n"})}),"\n",(0,o.jsx)(n.h3,{id:"prism-bench",children:"prism-bench"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"prism-bench [command] [flags]\n\nCommands:\n  load       Run load test\n  report     Generate report from results\n\nFlags:\n  --duration duration    Test duration (default: 1m)\n  --rps int             Target requests per second\n  --workers int         Concurrent workers\n  --pattern string      Access pattern: random, sequential\n"})}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'# Get a value\nprism-cli get test user123 profile\n\n# Put a value\nprism-cli put test user123 profile \'{"name":"Alice"}\'\n\n# Scan namespace\nprism-cli scan test user123\n\n# Show configuration\nprism-cli config\n\n# Run migration\nprism-migrate run \\\n  --source postgres://localhost/old \\\n  --dest postgres://localhost/new \\\n  --workers 8\n\n# Load test\nprism-bench load --duration 5m --rps 10000\n'})}),"\n",(0,o.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,o.jsx)(n.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:"require (\n    github.com/spf13/cobra v1.8.1\n    github.com/spf13/viper v1.19.0\n)\n"})}),"\n",(0,o.jsx)(n.h3,{id:"package-structure",children:"Package Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"tools/\n\u251c\u2500\u2500 cmd/\n\u2502   \u251c\u2500\u2500 prism-cli/\n\u2502   \u2502   \u251c\u2500\u2500 main.go        # Entry point\n\u2502   \u2502   \u251c\u2500\u2500 root.go        # Root command\n\u2502   \u2502   \u251c\u2500\u2500 get.go         # Get subcommand\n\u2502   \u2502   \u251c\u2500\u2500 put.go         # Put subcommand\n\u2502   \u2502   \u2514\u2500\u2500 config.go      # Config subcommand\n\u2502   \u251c\u2500\u2500 prism-migrate/\n\u2502   \u2502   \u251c\u2500\u2500 main.go\n\u2502   \u2502   \u251c\u2500\u2500 root.go\n\u2502   \u2502   \u2514\u2500\u2500 run.go\n\u2502   \u2514\u2500\u2500 prism-bench/\n\u2502       \u251c\u2500\u2500 main.go\n\u2502       \u251c\u2500\u2500 root.go\n\u2502       \u2514\u2500\u2500 load.go\n\u251c\u2500\u2500 internal/\n\u2502   \u2514\u2500\u2500 config/\n\u2502       \u251c\u2500\u2500 config.go      # Config types\n\u2502       \u2514\u2500\u2500 loader.go      # Viper integration\n"})}),"\n",(0,o.jsx)(n.h3,{id:"example-implementation",children:"Example Implementation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-go",children:'// cmd/prism-cli/root.go\npackage main\n\nimport (\n    "log/slog"\n    "os"\n\n    "github.com/spf13/cobra"\n    "github.com/spf13/viper"\n)\n\nvar rootCmd = &cobra.Command{\n    Use:   "prism-cli",\n    Short: "Prism command-line interface",\n    PersistentPreRun: func(cmd *cobra.Command, args []string) {\n        // Initialize logging\n        initLogging()\n    },\n}\n\nfunc init() {\n    cobra.OnInitialize(initConfig)\n\n    rootCmd.PersistentFlags().StringP("config", "c", "", "config file (default: ~/.prism.yaml)")\n    rootCmd.PersistentFlags().StringP("endpoint", "e", "localhost:8980", "Prism proxy endpoint")\n    rootCmd.PersistentFlags().String("log-level", "info", "log level (debug, info, warn, error)")\n    rootCmd.PersistentFlags().String("log-format", "json", "log format (json, text)")\n\n    viper.BindPFlag("proxy.endpoint", rootCmd.PersistentFlags().Lookup("endpoint"))\n    viper.BindPFlag("logging.level", rootCmd.PersistentFlags().Lookup("log-level"))\n    viper.BindPFlag("logging.format", rootCmd.PersistentFlags().Lookup("log-format"))\n}\n\nfunc initConfig() {\n    if cfgFile := rootCmd.PersistentFlags().Lookup("config").Value.String(); cfgFile != "" {\n        viper.SetConfigFile(cfgFile)\n    } else {\n        home, _ := os.UserHomeDir()\n        viper.AddConfigPath(home)\n        viper.AddConfigPath(".")\n        viper.SetConfigName(".prism")\n        viper.SetConfigType("yaml")\n    }\n\n    viper.SetEnvPrefix("PRISM")\n    viper.AutomaticEnv()\n\n    viper.ReadInConfig()\n}\n\nfunc main() {\n    if err := rootCmd.Execute(); err != nil {\n        slog.Error("command failed", "error", err)\n        os.Exit(1)\n    }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,o.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Industry-standard tools with large communities"}),"\n",(0,o.jsx)(n.li,{children:"Rich feature set without custom implementation"}),"\n",(0,o.jsx)(n.li,{children:"Excellent documentation and examples"}),"\n",(0,o.jsx)(n.li,{children:"Clear configuration precedence"}),"\n",(0,o.jsx)(n.li,{children:"Easy testing"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Two dependencies (but they work together seamlessly)"}),"\n",(0,o.jsx)(n.li,{children:"Learning curve for contributors"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Config file watching not needed for CLI tools (useful for daemons)"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/spf13/cobra",children:"Cobra Documentation"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/spf13/viper",children:"Viper Documentation"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://12factor.net/config",children:"12-Factor App Config"})}),"\n",(0,o.jsx)(n.li,{children:"ADR-012: Go for Tooling"}),"\n",(0,o.jsx)(n.li,{children:"org-stream-producer ADR-010: Command-Line Configuration"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"2025-10-07: Initial draft and acceptance (adapted from org-stream-producer)"}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var r=i(6540);const o={},t=r.createContext(o);function s(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);