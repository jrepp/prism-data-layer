"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[1870],{12915:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"memo-012","title":"Developer Experience and Common Workflows","description":"Purpose","source":"@site/../docs-cms/memos/MEMO-012-developer-experience.md","sourceDirName":".","slug":"/memo-012","permalink":"/prism-data-layer/memos/memo-012","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/MEMO-012-developer-experience.md","tags":[{"inline":true,"label":"dx","permalink":"/prism-data-layer/memos/tags/dx"},{"inline":true,"label":"developer-experience","permalink":"/prism-data-layer/memos/tags/developer-experience"},{"inline":true,"label":"testing","permalink":"/prism-data-layer/memos/tags/testing"},{"inline":true,"label":"tooling","permalink":"/prism-data-layer/memos/tags/tooling"},{"inline":true,"label":"workflows","permalink":"/prism-data-layer/memos/tags/workflows"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-11T00:00:00.000Z","doc_uuid":"b9a8d03d-a0b3-4b42-ba16-b8077c02844d","id":"memo-012","project_id":"prism-data-layer","tags":["dx","developer-experience","testing","tooling","workflows"],"title":"Developer Experience and Common Workflows","updated":"2025-10-11T00:00:00.000Z"},"sidebar":"memosSidebar","previous":{"title":"Distributed Error Handling Best Practices \u2022 MEMO-011","permalink":"/prism-data-layer/memos/memo-011"},"next":{"title":"POC 1 Infrastructure Analysis - SDK and Load Testing \u2022 MEMO-013","permalink":"/prism-data-layer/memos/memo-013"}}');var r=t(74848),i=t(28453);const l={author:"Platform Team",created:new Date("2025-10-11T00:00:00.000Z"),doc_uuid:"b9a8d03d-a0b3-4b42-ba16-b8077c02844d",id:"memo-012",project_id:"prism-data-layer",tags:["dx","developer-experience","testing","tooling","workflows"],title:"Developer Experience and Common Workflows",updated:new Date("2025-10-11T00:00:00.000Z")},o="MEMO-012: Developer Experience and Common Workflows",a={},d=[{value:"Purpose",id:"purpose",level:2},{value:"Core Commands",id:"core-commands",level:2},{value:"Documentation",id:"documentation",level:3},{value:"Pattern Development",id:"pattern-development",level:3},{value:"Proxy",id:"proxy",level:3},{value:"Load Testing",id:"load-testing",level:3},{value:"Mental Models",id:"mental-models",level:2},{value:"Three-Layer Testing",id:"three-layer-testing",level:3},{value:"TDD Workflow",id:"tdd-workflow",level:3},{value:"Speed Optimization Techniques",id:"speed-optimization-techniques",level:2},{value:"Skip Full Validation During Iteration",id:"skip-full-validation-during-iteration",level:3},{value:"Parallel Testing",id:"parallel-testing",level:3},{value:"Incremental Builds",id:"incremental-builds",level:3},{value:"Reuse Running Backends",id:"reuse-running-backends",level:3},{value:"Coverage Without HTML",id:"coverage-without-html",level:3},{value:"Common Shortcuts",id:"common-shortcuts",level:2},{value:"Alias Setup",id:"alias-setup",level:3},{value:"Docker Compose Profiles",id:"docker-compose-profiles",level:3},{value:"Go Test Shortcuts",id:"go-test-shortcuts",level:3},{value:"Integration Test Setup",id:"integration-test-setup",level:2},{value:"Multicast Registry Pattern",id:"multicast-registry-pattern",level:3},{value:"Quick Smoke Test",id:"quick-smoke-test",level:3},{value:"Documentation Workflow",id:"documentation-workflow",level:2},{value:"Creating New Docs",id:"creating-new-docs",level:3},{value:"Frontmatter Templates",id:"frontmatter-templates",level:3},{value:"Performance Testing",id:"performance-testing",level:2},{value:"Benchmark Comparison",id:"benchmark-comparison",level:3},{value:"Load Test Profiles",id:"load-test-profiles",level:3},{value:"Debugging",id:"debugging",level:2},{value:"gRPC Tracing",id:"grpc-tracing",level:3},{value:"Race Detector",id:"race-detector",level:3},{value:"Container Logs",id:"container-logs",level:3},{value:"CI/CD",id:"cicd",level:2},{value:"Pre-Commit Checklist",id:"pre-commit-checklist",level:3},{value:"Fast Iteration Loop",id:"fast-iteration-loop",level:3},{value:"Related Documentation",id:"related-documentation",level:2},{value:"Summary",id:"summary",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"memo-012-developer-experience-and-common-workflows",children:"MEMO-012: Developer Experience and Common Workflows"})}),"\n",(0,r.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsx)(n.p,{children:"Document common commands, testing patterns, and workflows used daily in Prism development."}),"\n",(0,r.jsx)(n.h2,{id:"core-commands",children:"Core Commands"}),"\n",(0,r.jsx)(n.h3,{id:"documentation",children:"Documentation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Validate docs before commit (MANDATORY)\nuv run tooling/validate_docs.py\n\n# Build and serve docs locally\ncd docusaurus && npm run build && npm run serve\n\n# Fix broken links\nuv run tooling/fix_doc_links.py\n"})}),"\n",(0,r.jsx)(n.h3,{id:"pattern-development",children:"Pattern Development"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Build all patterns\ncd patterns && make build\n\n# Watch for changes and auto-rebuild\ncd patterns && go run ./watcher --reload\n\n# Run tests with coverage\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out\n\n# Run with race detector\ngo test -race ./...\n\n# Coverage enforcement\nmake coverage-sdk        # Core SDK (85% min)\nmake coverage-memstore   # MemStore (85% min)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"proxy",children:"Proxy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run proxy locally\ncd proxy && cargo run --release\n\n# Run tests\ncd proxy && cargo test --workspace\n"})}),"\n",(0,r.jsx)(n.h3,{id:"load-testing",children:"Load Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Start backends\ndocker compose up redis nats\n\n# Run load test\ncd cmd/prism-loadtest\ngo run . mixed -r 100 -d 60s \\\n  --redis-addr localhost:6379 \\\n  --nats-servers nats://localhost:4222\n"})}),"\n",(0,r.jsx)(n.h2,{id:"mental-models",children:"Mental Models"}),"\n",(0,r.jsx)(n.h3,{id:"three-layer-testing",children:"Three-Layer Testing"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Layer 1: Unit Tests"})," (Fast, no network)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"In-memory backends (MemStore, SQLite)"}),"\n",(0,r.jsx)(n.li,{children:"Run constantly during development"}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"go test ./storage/..."})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Layer 2: Integration Tests"})," (Medium, local network)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Real backends in Docker (Redis, NATS)"}),"\n",(0,r.jsx)(n.li,{children:"Run before commits"}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"go test ./tests/integration/..."})}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Layer 3: Load Tests"})," (Slow, full system)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Multiple patterns + proxy"}),"\n",(0,r.jsx)(n.li,{children:"Run before merges"}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.code,{children:"prism-loadtest mixed -r 100 -d 60s"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"tdd-workflow",children:"TDD Workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# 1. Write test (red)\nvim storage/keyvalue_test.go\ngo test ./storage  # Should fail\n\n# 2. Implement (green)\nvim storage/keyvalue.go\ngo test ./storage  # Should pass\n\n# 3. Check coverage\ngo test -cover ./storage\n# coverage: 85.7% of statements\n\n# 4. Commit with coverage\ngit commit -m "Implement KeyValue storage (coverage: 85.7%)"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"speed-optimization-techniques",children:"Speed Optimization Techniques"}),"\n",(0,r.jsx)(n.h3,{id:"skip-full-validation-during-iteration",children:"Skip Full Validation During Iteration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Fast: skip Docusaurus build\nuv run tooling/validate_docs.py --skip-build\n\n# Full: includes build (pre-commit)\nuv run tooling/validate_docs.py\n"})}),"\n",(0,r.jsx)(n.h3,{id:"parallel-testing",children:"Parallel Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Run all pattern tests in parallel\ncd patterns\ngo test ./memstore/... ./redis/... ./kafka/... -p 3\n"})}),"\n",(0,r.jsx)(n.h3,{id:"incremental-builds",children:"Incremental Builds"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Watch mode rebuilds only changed files\ncd patterns && go run ./watcher --reload\n\n# In another terminal, edit files\nvim redis/storage.go\n# Watcher automatically rebuilds redis pattern\n"})}),"\n",(0,r.jsx)(n.h3,{id:"reuse-running-backends",children:"Reuse Running Backends"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Start once, leave running\ndocker compose up -d redis nats postgres\n\n# Run multiple test iterations without restart\ngo test ./tests/integration/... # Uses running containers\n"})}),"\n",(0,r.jsx)(n.h3,{id:"coverage-without-html",children:"Coverage Without HTML"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Quick: just print total\ngo test -cover ./... | grep coverage\n\n# Detailed: per-function breakdown\ngo test -coverprofile=coverage.out ./...\ngo tool cover -func=coverage.out | tail -1\n"})}),"\n",(0,r.jsx)(n.h2,{id:"common-shortcuts",children:"Common Shortcuts"}),"\n",(0,r.jsx)(n.h3,{id:"alias-setup",children:"Alias Setup"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Add to ~/.bashrc or ~/.zshrc\nalias prism="uv run --with prismctl prism"\nalias validate-docs="uv run tooling/validate_docs.py"\nalias build-patterns="cd ~/dev/prism/patterns && make build"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"docker-compose-profiles",children:"Docker Compose Profiles"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Start only what you need\ndocker compose up redis        # Just Redis\ndocker compose up redis nats   # Redis + NATS\ndocker compose up              # Everything\n"})}),"\n",(0,r.jsx)(n.h3,{id:"go-test-shortcuts",children:"Go Test Shortcuts"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Test single package\ngo test ./storage\n\n# Test with verbose output\ngo test -v ./storage\n\n# Test single function\ngo test -run TestKeyValueStore_Set ./storage\n\n# Benchmark single function\ngo test -bench=BenchmarkGet -benchmem ./storage\n"})}),"\n",(0,r.jsx)(n.h2,{id:"integration-test-setup",children:"Integration Test Setup"}),"\n",(0,r.jsx)(n.h3,{id:"multicast-registry-pattern",children:"Multicast Registry Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Terminal 1: Start backends\ndocker compose up redis nats\n\n# Terminal 2: Run coordinator tests\ncd patterns/multicast-registry\ngo test ./tests/integration/...\n\n# Or run load test\ncd cmd/prism-loadtest\ngo run . mixed -r 100 -d 10s\n"})}),"\n",(0,r.jsx)(n.h3,{id:"quick-smoke-test",children:"Quick Smoke Test"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Verify all components build\nmake -C patterns build && \\\ncargo build --manifest-path proxy/Cargo.toml && \\\necho "\u2705 All components build successfully"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"documentation-workflow",children:"Documentation Workflow"}),"\n",(0,r.jsx)(n.h3,{id:"creating-new-docs",children:"Creating New Docs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# 1. Create file with frontmatter\nvim docs-cms/memos/MEMO-XXX-my-topic.md\n\n# 2. Validate locally\nuv run tooling/validate_docs.py --skip-build\n\n# 3. Fix any errors\nuv run tooling/fix_doc_links.py  # If link errors\n\n# 4. Full validation before commit\nuv run tooling/validate_docs.py\n\n# 5. Commit\ngit add docs-cms/memos/MEMO-XXX-my-topic.md\ngit commit -m "Add MEMO-XXX documenting <topic>"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"frontmatter-templates",children:"Frontmatter Templates"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"ADR"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'---\ntitle: "ADR-XXX: Title"\nstatus: Proposed | Accepted | Implemented\ndate: 2025-10-11\ndeciders: Core Team\ntags: [architecture, backend]\nid: adr-xxx\n---\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"RFC"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'---\ntitle: "RFC-XXX: Title"\nstatus: Proposed | Accepted | Implemented\nauthor: Name\ncreated: 2025-10-11\nupdated: 2025-10-11\ntags: [design, api]\nid: rfc-xxx\n---\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"MEMO"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'---\ntitle: "MEMO-XXX: Title"\nauthor: Platform Team\ncreated: 2025-10-11\nupdated: 2025-10-11\ntags: [implementation, testing]\nid: memo-xxx\n---\n'})}),"\n",(0,r.jsx)(n.h2,{id:"performance-testing",children:"Performance Testing"}),"\n",(0,r.jsx)(n.h3,{id:"benchmark-comparison",children:"Benchmark Comparison"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Baseline\ngo test -bench=. -benchmem ./... > old.txt\n\n# After changes\ngo test -bench=. -benchmem ./... > new.txt\n\n# Compare\nbenchcmp old.txt new.txt\n"})}),"\n",(0,r.jsx)(n.h3,{id:"load-test-profiles",children:"Load Test Profiles"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Quick validation (10s)\nprism-loadtest mixed -r 100 -d 10s\n\n# Standard test (60s)\nprism-loadtest mixed -r 100 -d 60s\n\n# Stress test (5m)\nprism-loadtest mixed -r 500 -d 5m\n"})}),"\n",(0,r.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,r.jsx)(n.h3,{id:"grpc-tracing",children:"gRPC Tracing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Enable gRPC logging\nexport GRPC_GO_LOG_VERBOSITY_LEVEL=99\nexport GRPC_GO_LOG_SEVERITY_LEVEL=info\ngo test ./tests/integration/...\n"})}),"\n",(0,r.jsx)(n.h3,{id:"race-detector",children:"Race Detector"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Always run before commit\ngo test -race ./...\n\n# In CI (mandatory)\nmake test-race\n"})}),"\n",(0,r.jsx)(n.h3,{id:"container-logs",children:"Container Logs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Follow specific service\ndocker compose logs -f redis\n\n# All services\ndocker compose logs -f\n\n# Last 100 lines\ndocker compose logs --tail=100\n"})}),"\n",(0,r.jsx)(n.h2,{id:"cicd",children:"CI/CD"}),"\n",(0,r.jsx)(n.h3,{id:"pre-commit-checklist",children:"Pre-Commit Checklist"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 1. Tests pass\ngo test ./...\n\n# 2. Race detector clean\ngo test -race ./...\n\n# 3. Coverage meets threshold\nmake coverage-all\n\n# 4. Documentation valid\nuv run tooling/validate_docs.py\n\n# 5. All builds succeed\nmake -C patterns build\ncargo build --manifest-path proxy/Cargo.toml\n"})}),"\n",(0,r.jsx)(n.h3,{id:"fast-iteration-loop",children:"Fast Iteration Loop"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Option 1: Watch + Test\ncd patterns && go run ./watcher --reload &\nwatch -n 2 'go test ./memstore/...'\n\n# Option 2: Single command\ncd patterns/memstore && \\\n  while true; do \\\n    inotifywait -e modify *.go && \\\n    go test ./...; \\\n  done\n"})}),"\n",(0,r.jsx)(n.h2,{id:"related-documentation",children:"Related Documentation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://github.com/jrepp/prism-data-layer/blob/main/CLAUDE.md",children:"CLAUDE.md"})," - Complete project guidance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/rfc/rfc-018",children:"RFC-018: POC Implementation Strategy"})," - Development phases"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/memos/memo-010",children:"MEMO-010: Load Test Results"})," - Performance baselines"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/adr/adr-004",children:"ADR-004: Local-First Testing"})," - Testing philosophy"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Most Common Commands"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"uv run tooling/validate_docs.py"})," - Before every commit"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"go test -race ./..."})," - Before every commit"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"make coverage-<component>"})," - Verify thresholds"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"docker compose up redis nats"})," - Start backends once, reuse"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"go run ./watcher --reload"})," - Watch mode for rapid iteration"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Speed Tips"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Skip full validation during iteration (",(0,r.jsx)(n.code,{children:"--skip-build"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Reuse running Docker containers"}),"\n",(0,r.jsxs)(n.li,{children:["Test single packages instead of ",(0,r.jsx)(n.code,{children:"./..."})]}),"\n",(0,r.jsx)(n.li,{children:"Use watch mode for auto-rebuild"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mental Model"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Unit tests (fast) \u2192 Integration tests (medium) \u2192 Load tests (slow)"}),"\n",(0,r.jsx)(n.li,{children:"TDD: red \u2192 green \u2192 refactor (with coverage in commit message)"}),"\n",(0,r.jsx)(n.li,{children:"Documentation: write \u2192 validate \u2192 fix \u2192 validate \u2192 commit"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var s=t(96540);const r={},i=s.createContext(r);function l(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);