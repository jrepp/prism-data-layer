"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[8343],{28453:(e,t,a)=>{a.d(t,{R:()=>r,x:()=>o});var s=a(96540);const i={},n=s.createContext(i);function r(e){const t=s.useContext(n);return s.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(n.Provider,{value:t},e.children)}},44402:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"netflix-key-use-cases","title":"Netflix Data Gateway Use Cases","description":"That\'s a very insightful observation, and it\'s mostly correct, but with an important distinction: Key-Value (KV) is the most prominent and mature abstraction built on the Data Gateway platform, but it is not the only one. The Data Gateway is a broader platform that enables the creation of various data abstraction layers to serve different use cases.","source":"@site/../docs-cms/netflix/key-use-cases.md","sourceDirName":".","slug":"/netflix-key-use-cases","permalink":"/prism-data-layer/netflix/netflix-key-use-cases","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/netflix/key-use-cases.md","tags":[{"inline":true,"label":"netflix","permalink":"/prism-data-layer/netflix/tags/netflix"},{"inline":true,"label":"use-cases","permalink":"/prism-data-layer/netflix/tags/use-cases"},{"inline":true,"label":"applications","permalink":"/prism-data-layer/netflix/tags/applications"}],"version":"current","sidebarPosition":4,"frontMatter":{"id":"netflix-key-use-cases","title":"Netflix Data Gateway Use Cases","sidebar_label":"Use Cases","sidebar_position":4,"tags":["netflix","use-cases","applications"]},"sidebar":"netflixSidebar","previous":{"title":"Abstractions","permalink":"/prism-data-layer/netflix/netflix-abstractions"},"next":{"title":"Write-Ahead Log","permalink":"/prism-data-layer/netflix/netflix-write-ahead-log"}}');var i=a(74848),n=a(28453);const r={id:"netflix-key-use-cases",title:"Netflix Data Gateway Use Cases",sidebar_label:"Use Cases",sidebar_position:4,tags:["netflix","use-cases","applications"]},o=void 0,l={},c=[];function d(e){const t={p:"p",...(0,n.R)(),...e.components};return(0,i.jsx)(t.p,{children:"That's a very insightful observation, and it's mostly correct, but with an important distinction: Key-Value (KV) is the most prominent and mature abstraction built on the Data Gateway platform, but it is not the only one. The Data Gateway is a broader platform that enables the creation of various data abstraction layers to serve different use cases.\nHere is a breakdown of the distinction:\nData Gateway (The Platform): This is the underlying infrastructure that provides essential services for deploying and managing the data tier. It handles critical functions like protecting backend data stores, configuring data access, and ensuring secure communication.\nKey-Value DAL (An Abstraction): This is one of the foundational services built on top of the Data Gateway. It simplifies data access by providing developers with a simple, robust key-value API, hiding the complexity of the underlying storage engines like Cassandra or EVCache.\nBeyond key-value: other abstractions\nWhile the KV DAL is a cornerstone, Netflix has developed other abstractions for different data access patterns.\nTimeSeries Abstraction\nPurpose: Built to handle the massive volume of temporal event data generated by user interactions and microservices.\nUse cases: Tracking user interaction events (playbacks, searches), tracing service-to-service communication, and analyzing the performance of new features.\nImplementation: Leverages the Data Gateway platform but uses a different architecture from the KV DAL. It is optimized for time-based queries and storage, integrating with backends like Cassandra and Elasticsearch.\nDistributed Counter Abstraction\nPurpose: A more specialized service built for counting immutable events at scale.\nUse cases: Could be used for features like incrementing play counts or tracking system metrics that need real-time aggregation.\nGraphQL and other APIs\nPurpose: The Data Gateway and underlying abstractions integrate with Netflix's federated GraphQL architecture, which provides a unified API for clients.\nImplementation: The GraphQL layer queries the data abstractions. For example, a request for a user's viewing history might go to the GraphQL API, which in turn calls the TimeSeries abstraction, providing a single, consistent experience for the application developer.\nRelational and columnar data access\nPurpose: Netflix also uses relational and columnar databases for specific workloads like billing and analytics.\nImplementation: The Data Gateway approach is designed to accommodate these needs as well, potentially with its own specialized abstractions or integrations, rather than forcing a key-value pattern on all data.\nIn conclusion, while the key-value abstraction was the most mature and widely adopted initially, the Data Gateway is a more versatile platform that supports multiple types of data abstractions. This allows Netflix to apply the \"right tool for the right job\" principle for its database needs while still benefiting from a standardized, resilient, and developer-friendly access layer"})}function u(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);