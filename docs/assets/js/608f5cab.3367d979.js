"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[10834],{28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>l});var s=t(96540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}},99521:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"memo-022","title":"Prismctl OIDC Integration Testing Requirements","description":"Context","source":"@site/../docs-cms/memos/MEMO-022-prismctl-integration-testing.md","sourceDirName":".","slug":"/memo-022","permalink":"/prism-data-layer/memos/memo-022","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/MEMO-022-prismctl-integration-testing.md","tags":[{"inline":true,"label":"testing","permalink":"/prism-data-layer/memos/tags/testing"},{"inline":true,"label":"cli","permalink":"/prism-data-layer/memos/tags/cli"},{"inline":true,"label":"oidc","permalink":"/prism-data-layer/memos/tags/oidc"},{"inline":true,"label":"integration","permalink":"/prism-data-layer/memos/tags/integration"},{"inline":true,"label":"dx","permalink":"/prism-data-layer/memos/tags/dx"},{"inline":true,"label":"security","permalink":"/prism-data-layer/memos/tags/security"}],"version":"current","frontMatter":{"author":"Claude Code","created":"2025-10-13T00:00:00.000Z","doc_uuid":"e7a9c4f1-22b5-4d3e-8a1f-9b6c7d8e9f0a","id":"memo-022","project_id":"prism-data-layer","tags":["testing","cli","oidc","integration","dx","security"],"title":"Prismctl OIDC Integration Testing Requirements","updated":"2025-10-13T00:00:00.000Z"},"sidebar":"memosSidebar","previous":{"title":"Parallel Linting System for Multi-Language Monorepo \u2022 MEMO-021","permalink":"/prism-data-layer/memos/memo-021"}}');var r=t(74848),i=t(28453);const o={author:"Claude Code",created:new Date("2025-10-13T00:00:00.000Z"),doc_uuid:"e7a9c4f1-22b5-4d3e-8a1f-9b6c7d8e9f0a",id:"memo-022",project_id:"prism-data-layer",tags:["testing","cli","oidc","integration","dx","security"],title:"Prismctl OIDC Integration Testing Requirements",updated:new Date("2025-10-13T00:00:00.000Z")},l="MEMO-022: Prismctl OIDC Integration Testing Requirements",c={},a=[{value:"Context",id:"context",level:2},{value:"Integration Testing Strategy",id:"integration-testing-strategy",level:2},{value:"Test Infrastructure",id:"test-infrastructure",level:3},{value:"Test Scenarios",id:"test-scenarios",level:3},{value:"1. <strong>Device Code Flow</strong> (Priority: HIGH)",id:"1-device-code-flow-priority-high",level:4},{value:"2. <strong>Password Flow</strong> (Priority: MEDIUM)",id:"2-password-flow-priority-medium",level:4},{value:"3. <strong>Token Refresh</strong> (Priority: HIGH)",id:"3-token-refresh-priority-high",level:4},{value:"4. <strong>Userinfo Endpoint</strong> (Priority: MEDIUM)",id:"4-userinfo-endpoint-priority-medium",level:4},{value:"5. <strong>CLI End-to-End</strong> (Priority: HIGH)",id:"5-cli-end-to-end-priority-high",level:4},{value:"Test Utilities",id:"test-utilities",level:3},{value:"Implementation Plan",id:"implementation-plan",level:2},{value:"Phase 1: Infrastructure Setup (Week 1)",id:"phase-1-infrastructure-setup-week-1",level:3},{value:"Phase 2: Core Flow Tests (Week 2)",id:"phase-2-core-flow-tests-week-2",level:3},{value:"Phase 3: Edge Cases &amp; CLI (Week 3)",id:"phase-3-edge-cases--cli-week-3",level:3},{value:"Phase 4: CI/CD Integration (Week 4)",id:"phase-4-cicd-integration-week-4",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:2},{value:"Success Criteria",id:"success-criteria",level:2},{value:"Security Considerations",id:"security-considerations",level:2},{value:"References",id:"references",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"memo-022-prismctl-oidc-integration-testing-requirements",children:"MEMO-022: Prismctl OIDC Integration Testing Requirements"})}),"\n",(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsxs)(n.p,{children:["Prismctl's authentication system (",(0,r.jsx)(n.code,{children:"cli/prismctl/auth.py"}),") has ",(0,r.jsx)(n.strong,{children:"40% code coverage"})," with unit tests. The uncovered 60% consists of OIDC integration flows that require a live identity provider:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Device code flow (recommended for CLI)"}),"\n",(0,r.jsx)(n.li,{children:"Password flow (local dev only)"}),"\n",(0,r.jsx)(n.li,{children:"Token refresh flow"}),"\n",(0,r.jsx)(n.li,{children:"Userinfo endpoint calls"}),"\n",(0,r.jsx)(n.li,{children:"OIDC endpoint discovery"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Current State"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\u2705 Unit tests: 6/6 passing\n\u2705 Token storage: Secure (600 permissions)\n\u2705 Expiry detection: Working\n\u2705 CLI commands: Functional\n\u274c OIDC flows: Untested (40% coverage)\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Why Integration Tests Matter"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security"}),": OIDC is our primary authentication mechanism"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"User Experience"}),": Login flow is first interaction with prismctl"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reliability"}),": Token refresh must work seamlessly"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Compatibility"}),": Must work with Dex (local) and production IdPs"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"integration-testing-strategy",children:"Integration Testing Strategy"}),"\n",(0,r.jsx)(n.h3,{id:"test-infrastructure",children:"Test Infrastructure"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Local Dex Server"})," (from ",(0,r.jsx)(n.a,{href:"/rfc/rfc-016",children:"RFC-016"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# tests/integration/docker-compose.dex.yml\nservices:\n  dex:\n    image: ghcr.io/dexidp/dex:v2.37.0\n    container_name: prismctl-test-dex\n    ports:\n      - "5556:5556"  # HTTP\n    volumes:\n      - ./dex-config.yaml:/etc/dex/config.yaml:ro\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "-q", "http://localhost:5556/healthz"]\n      interval: 2s\n      timeout: 2s\n      retries: 10\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Dex Test Configuration"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# tests/integration/dex-config.yaml\nissuer: http://localhost:5556/dex\n\nstorage:\n  type: memory  # In-memory for tests\n\nweb:\n  http: 0.0.0.0:5556\n\nstaticClients:\n  - id: prismctl-test\n    name: "Prismctl Test Client"\n    redirectURIs:\n      - http://localhost:8080/callback\n    secret: test-secret\n\nconnectors:\n  - type: mockCallback\n    id: mock\n    name: Mock\n\nenablePasswordDB: true\nstaticPasswords:\n  - email: "test@prism.local"\n    hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"  # "password"\n    username: "test"\n    userID: "test-user-id"\n  - email: "admin@prism.local"\n    hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"  # "password"\n    username: "admin"\n    userID: "admin-user-id"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"test-scenarios",children:"Test Scenarios"}),"\n",(0,r.jsxs)(n.h4,{id:"1-device-code-flow-priority-high",children:["1. ",(0,r.jsx)(n.strong,{children:"Device Code Flow"})," (Priority: HIGH)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test"}),": ",(0,r.jsx)(n.code,{children:"test_device_code_flow_success"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def test_device_code_flow_success():\n    """Test successful device code authentication."""\n    # Start local Dex server\n    with DexTestServer() as dex:\n        config = OIDCConfig(\n            issuer=dex.issuer_url,\n            client_id="prismctl-test",\n            client_secret="test-secret",\n        )\n\n        authenticator = OIDCAuthenticator(config)\n\n        # Mock browser interaction (auto-approve)\n        with mock_device_approval(dex):\n            token = authenticator.login_device_code(open_browser=False)\n\n        # Assertions\n        assert token.access_token is not None\n        assert token.refresh_token is not None\n        assert not token.is_expired()\n\n        # Verify token works for userinfo\n        userinfo = authenticator.get_userinfo(token)\n        assert userinfo["email"] == "test@prism.local"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test"}),": ",(0,r.jsx)(n.code,{children:"test_device_code_flow_timeout"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def test_device_code_flow_timeout():\n    """Test device code flow timeout without approval."""\n    with DexTestServer() as dex:\n        authenticator = OIDCAuthenticator(config)\n\n        # Don\'t approve - should timeout\n        with pytest.raises(TimeoutError, match="timed out"):\n            authenticator.login_device_code(open_browser=False)\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test"}),": ",(0,r.jsx)(n.code,{children:"test_device_code_flow_denied"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def test_device_code_flow_denied():\n    """Test device code flow when user denies."""\n    with DexTestServer() as dex:\n        with mock_device_denial(dex):\n            with pytest.raises(ValueError, match="denied by user"):\n                authenticator.login_device_code(open_browser=False)\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"2-password-flow-priority-medium",children:["2. ",(0,r.jsx)(n.strong,{children:"Password Flow"})," (Priority: MEDIUM)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test"}),": ",(0,r.jsx)(n.code,{children:"test_password_flow_success"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def test_password_flow_success():\n    """Test successful password authentication."""\n    with DexTestServer() as dex:\n        authenticator = OIDCAuthenticator(config)\n\n        token = authenticator.login_password(\n            username="test@prism.local",\n            password="password"\n        )\n\n        assert token.access_token is not None\n        assert not token.is_expired()\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test"}),": ",(0,r.jsx)(n.code,{children:"test_password_flow_invalid_credentials"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def test_password_flow_invalid_credentials():\n    """Test password flow with wrong credentials."""\n    with DexTestServer() as dex:\n        authenticator = OIDCAuthenticator(config)\n\n        with pytest.raises(requests.HTTPError):\n            authenticator.login_password(\n                username="test@prism.local",\n                password="wrong"\n            )\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"3-token-refresh-priority-high",children:["3. ",(0,r.jsx)(n.strong,{children:"Token Refresh"})," (Priority: HIGH)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test"}),": ",(0,r.jsx)(n.code,{children:"test_token_refresh_success"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def test_token_refresh_success():\n    """Test successful token refresh."""\n    with DexTestServer() as dex:\n        authenticator = OIDCAuthenticator(config)\n\n        # Get initial token\n        old_token = authenticator.login_password("test@prism.local", "password")\n        old_access = old_token.access_token\n\n        # Wait for token to need refresh (or mock expiry)\n        time.sleep(1)\n\n        # Refresh token\n        new_token = authenticator.refresh_token(old_token)\n\n        assert new_token.access_token != old_access\n        assert not new_token.is_expired()\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test"}),": ",(0,r.jsx)(n.code,{children:"test_token_refresh_without_refresh_token"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def test_token_refresh_without_refresh_token():\n    """Test refresh fails when no refresh_token available."""\n    token = Token(\n        access_token="test",\n        refresh_token=None,  # No refresh token!\n        id_token=None,\n        expires_at=datetime.now(timezone.utc) - timedelta(hours=1)\n    )\n\n    with pytest.raises(ValueError, match="No refresh token"):\n        authenticator.refresh_token(token)\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"4-userinfo-endpoint-priority-medium",children:["4. ",(0,r.jsx)(n.strong,{children:"Userinfo Endpoint"})," (Priority: MEDIUM)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test"}),": ",(0,r.jsx)(n.code,{children:"test_get_userinfo_success"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def test_get_userinfo_success():\n    """Test retrieving user information."""\n    with DexTestServer() as dex:\n        authenticator = OIDCAuthenticator(config)\n        token = authenticator.login_password("test@prism.local", "password")\n\n        userinfo = authenticator.get_userinfo(token)\n\n        assert userinfo["email"] == "test@prism.local"\n        assert userinfo["name"] is not None\n        assert userinfo["sub"] == "test-user-id"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test"}),": ",(0,r.jsx)(n.code,{children:"test_get_userinfo_expired_token"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def test_get_userinfo_expired_token():\n    """Test userinfo fails with expired token."""\n    expired_token = Token(\n        access_token="invalid",\n        refresh_token=None,\n        id_token=None,\n        expires_at=datetime.now(timezone.utc) - timedelta(hours=1)\n    )\n\n    with pytest.raises(requests.HTTPError, match="401"):\n        authenticator.get_userinfo(expired_token)\n'})}),"\n",(0,r.jsxs)(n.h4,{id:"5-cli-end-to-end-priority-high",children:["5. ",(0,r.jsx)(n.strong,{children:"CLI End-to-End"})," (Priority: HIGH)"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test"}),": ",(0,r.jsx)(n.code,{children:"test_cli_login_logout_cycle"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'def test_cli_login_logout_cycle():\n    """Test full login/logout cycle via CLI."""\n    with DexTestServer() as dex:\n        # Configure prismctl to use test Dex\n        with temp_config(dex.issuer_url):\n            # Login\n            result = subprocess.run(\n                ["uv", "run", "prismctl", "login",\n                 "--username", "test@prism.local",\n                 "--password", "password"],\n                capture_output=True,\n                text=True\n            )\n\n            assert result.returncode == 0\n            assert "Authenticated successfully" in result.stdout\n\n            # Check whoami\n            result = subprocess.run(\n                ["uv", "run", "prismctl", "whoami"],\n                capture_output=True,\n                text=True\n            )\n\n            assert result.returncode == 0\n            assert "test@prism.local" in result.stdout\n\n            # Logout\n            result = subprocess.run(\n                ["uv", "run", "prismctl", "logout"],\n                capture_output=True,\n                text=True\n            )\n\n            assert result.returncode == 0\n            assert "Token removed" in result.stdout\n'})}),"\n",(0,r.jsx)(n.h3,{id:"test-utilities",children:"Test Utilities"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"DexTestServer Context Manager"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# tests/integration/dex_server.py\nimport subprocess\nimport time\nfrom contextlib import contextmanager\n\nclass DexTestServer:\n    """Manage Dex test server lifecycle."""\n\n    def __init__(self):\n        self.issuer_url = "http://localhost:5556/dex"\n        self.container_name = "prismctl-test-dex"\n\n    def start(self):\n        """Start Dex container."""\n        subprocess.run([\n            "podman", "compose",\n            "-f", "tests/integration/docker-compose.dex.yml",\n            "up", "-d"\n        ], check=True)\n\n        # Wait for health check\n        self._wait_for_health()\n\n    def stop(self):\n        """Stop Dex container."""\n        subprocess.run([\n            "podman", "compose",\n            "-f", "tests/integration/docker-compose.dex.yml",\n            "down"\n        ], check=True)\n\n    def _wait_for_health(self, timeout=30):\n        """Wait for Dex to be healthy."""\n        import requests\n\n        start = time.time()\n        while time.time() - start < timeout:\n            try:\n                resp = requests.get(f"{self.issuer_url}/.well-known/openid-configuration")\n                if resp.status_code == 200:\n                    return\n            except requests.ConnectionError:\n                pass\n            time.sleep(0.5)\n\n        raise TimeoutError("Dex server did not become healthy")\n\n    def __enter__(self):\n        self.start()\n        return self\n\n    def __exit__(self, *args):\n        self.stop()\n\n@contextmanager\ndef temp_config(issuer_url):\n    """Create temporary prismctl config for testing."""\n    import tempfile\n    from pathlib import Path\n\n    with tempfile.TemporaryDirectory() as tmpdir:\n        config_path = Path(tmpdir) / "config.yaml"\n        config_path.write_text(f"""\noidc:\n  issuer: {issuer_url}\n  client_id: prismctl-test\n  client_secret: test-secret\n\nproxy:\n  url: http://localhost:8080\n\ntoken_path: {tmpdir}/token\n""")\n\n        # Set environment variable\n        import os\n        old_config = os.environ.get("PRISM_CONFIG")\n        os.environ["PRISM_CONFIG"] = str(config_path)\n\n        try:\n            yield config_path\n        finally:\n            if old_config:\n                os.environ["PRISM_CONFIG"] = old_config\n            else:\n                del os.environ["PRISM_CONFIG"]\n'})}),"\n",(0,r.jsx)(n.h2,{id:"implementation-plan",children:"Implementation Plan"}),"\n",(0,r.jsx)(n.h3,{id:"phase-1-infrastructure-setup-week-1",children:"Phase 1: Infrastructure Setup (Week 1)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create ",(0,r.jsx)(n.code,{children:"tests/integration/"})," directory"]}),"\n",(0,r.jsxs)(n.li,{children:["Add ",(0,r.jsx)(n.code,{children:"docker-compose.dex.yml"})," and ",(0,r.jsx)(n.code,{children:"dex-config.yaml"})]}),"\n",(0,r.jsxs)(n.li,{children:["Implement ",(0,r.jsx)(n.code,{children:"DexTestServer"})," utility class"]}),"\n",(0,r.jsxs)(n.li,{children:["Add Makefile target: ",(0,r.jsx)(n.code,{children:"make test-prismctl-integration"})]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-2-core-flow-tests-week-2",children:"Phase 2: Core Flow Tests (Week 2)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Implement device code flow tests (3 scenarios)"}),"\n",(0,r.jsx)(n.li,{children:"Implement password flow tests (2 scenarios)"}),"\n",(0,r.jsx)(n.li,{children:"Implement token refresh tests (2 scenarios)"}),"\n",(0,r.jsx)(n.li,{children:"Target: 70% coverage"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-3-edge-cases--cli-week-3",children:"Phase 3: Edge Cases & CLI (Week 3)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Add userinfo endpoint tests (2 scenarios)"}),"\n",(0,r.jsx)(n.li,{children:"Implement CLI end-to-end test"}),"\n",(0,r.jsx)(n.li,{children:"Add error handling tests (network failures, timeouts)"}),"\n",(0,r.jsx)(n.li,{children:"Target: 85%+ coverage"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-4-cicd-integration-week-4",children:"Phase 4: CI/CD Integration (Week 4)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Add integration tests to GitHub Actions"}),"\n",(0,r.jsx)(n.li,{children:"Run in parallel with acceptance tests"}),"\n",(0,r.jsx)(n.li,{children:"Cache Dex container image"}),"\n",(0,r.jsx)(n.li,{children:"Add coverage reporting"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"GitHub Actions Workflow"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/ci.yml (add new job)\n\ntest-prismctl-integration:\n  name: Prismctl Integration Tests\n  runs-on: ubuntu-latest\n\n  steps:\n    - name: checkout\n      uses: actions/checkout@v4\n\n    - name: setup-python\n      uses: actions/setup-python@v5\n      with:\n        python-version: '3.11'\n\n    - name: install-uv\n      uses: astral-sh/setup-uv@v5\n\n    - name: start-dex-server\n      run: |\n        cd cli/tests/integration\n        docker compose -f docker-compose.dex.yml up -d\n\n        # Wait for health check\n        timeout 30 bash -c 'until wget -q --spider http://localhost:5556/dex/healthz; do sleep 1; done'\n\n    - name: run-integration-tests\n      run: |\n        cd cli\n        uv run pytest tests/integration/ -v --cov=prismctl.auth\n\n    - name: upload-coverage\n      uses: codecov/codecov-action@v5\n      with:\n        files: cli/coverage.xml\n        flags: prismctl-integration\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Makefile Target"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:"# Makefile (add to testing section)\n\ntest-prismctl-integration: ## Run prismctl integration tests with Dex\n\t$(call print_blue,Starting Dex test server...)\n\t@cd cli/tests/integration && podman compose up -d\n\t@sleep 5  # Wait for Dex to be ready\n\t$(call print_blue,Running prismctl integration tests...)\n\t@cd cli && uv run pytest tests/integration/ -v --cov=prismctl.auth --cov-report=term-missing\n\t$(call print_blue,Stopping Dex test server...)\n\t@cd cli/tests/integration && podman compose down\n\t$(call print_green,Prismctl integration tests complete)\n"})}),"\n",(0,r.jsx)(n.h2,{id:"success-criteria",children:"Success Criteria"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Coverage Goals"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Unit tests: ",(0,r.jsx)(n.strong,{children:"40%"})," (current) \u2192 No change needed"]}),"\n",(0,r.jsxs)(n.li,{children:["Integration tests: ",(0,r.jsx)(n.strong,{children:"60%"})," (new) \u2192 OIDC flows"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Combined: 85%+ coverage"})," for ",(0,r.jsx)(n.code,{children:"prismctl/auth.py"})]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test Metrics"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 15+ integration test scenarios"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 All OIDC flows tested (device code, password, refresh)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Error cases covered (timeouts, denials, invalid credentials)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 CLI end-to-end tests passing"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Tests run in CI/CD (< 2 minutes)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Zero flaky tests"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Quality Gates"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"All integration tests must pass before merge"}),"\n",(0,r.jsx)(n.li,{children:"Coverage must not decrease"}),"\n",(0,r.jsx)(n.li,{children:"Tests must be deterministic (no random failures)"}),"\n",(0,r.jsx)(n.li,{children:"Dex server must start/stop reliably"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test Credentials"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use mock/test credentials only"}),"\n",(0,r.jsx)(n.li,{children:"Never use production OIDC servers in tests"}),"\n",(0,r.jsx)(n.li,{children:"Store test client secrets in test configs (not repo secrets)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Token Handling"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Test tokens should be clearly marked as test data"}),"\n",(0,r.jsx)(n.li,{children:"Use short expiry times in tests (1 minute)"}),"\n",(0,r.jsx)(n.li,{children:"Clean up tokens after each test"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Network Isolation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dex should bind to localhost only"}),"\n",(0,r.jsx)(n.li,{children:"No external network access required"}),"\n",(0,r.jsx)(n.li,{children:"Tests should work offline (after image pull)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/adr/adr-046",children:"ADR-046: Dex IdP for Local Testing"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/rfc/rfc-016",children:"RFC-016: Local Development Infrastructure"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/memos/memo-020",children:"MEMO-020: Parallel Testing and Build Hygiene"})}),"\n",(0,r.jsxs)(n.li,{children:["Dex Documentation: ",(0,r.jsx)(n.a,{href:"https://dexidp.io/docs/",children:"https://dexidp.io/docs/"})]}),"\n",(0,r.jsxs)(n.li,{children:["OIDC Spec: ",(0,r.jsx)(n.a,{href:"https://openid.net/specs/openid-connect-core-1_0.html",children:"https://openid.net/specs/openid-connect-core-1_0.html"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Immediate"}),": Create test infrastructure (Dex compose file)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Week 1"}),": Implement device code flow tests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Week 2"}),": Implement remaining OIDC flow tests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Week 3"}),": Add CLI end-to-end tests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Week 4"}),": Integrate into CI/CD pipeline"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Target Completion"}),": 4 weeks from 2025-10-13 = ",(0,r.jsx)(n.strong,{children:"2025-11-10"})]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);