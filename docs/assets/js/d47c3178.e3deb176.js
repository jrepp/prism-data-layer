"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[2976],{1667:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"implementation-roadmap","title":"ADR-011: Implementation Roadmap and Next Steps","description":"Context","source":"@site/../docs-cms/adr/011-implementation-roadmap.md","sourceDirName":".","slug":"/implementation-roadmap","permalink":"/prism-data-layer/adr/implementation-roadmap","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/011-implementation-roadmap.md","tags":[{"inline":true,"label":"architecture","permalink":"/prism-data-layer/adr/tags/architecture"},{"inline":true,"label":"planning","permalink":"/prism-data-layer/adr/tags/planning"}],"version":"current","sidebarPosition":11,"frontMatter":{"title":"ADR-011: Implementation Roadmap and Next Steps","status":"Accepted","date":"2025-10-05T00:00:00.000Z","deciders":"Core Team","tags":["architecture","planning"]},"sidebar":"adrSidebar","previous":{"title":"ADR-010: Caching Layer Design","permalink":"/prism-data-layer/adr/caching-layer"},"next":{"title":"ADR-012: Go for Tooling and CLI Utilities","permalink":"/prism-data-layer/adr/go-for-tooling"}}');var i=s(4848),t=s(8453);const l={title:"ADR-011: Implementation Roadmap and Next Steps",status:"Accepted",date:new Date("2025-10-05T00:00:00.000Z"),deciders:"Core Team",tags:["architecture","planning"]},c=void 0,a={},d=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Step 1: Protobuf Foundation (Week 1, Days 1-3)",id:"step-1-protobuf-foundation-week-1-days-1-3",level:2},{value:"Goal",id:"goal",level:3},{value:"Deliverables",id:"deliverables",level:3},{value:"Success Criteria",id:"success-criteria",level:3},{value:"Files to Create",id:"files-to-create",level:3},{value:"Step 2: Rust Proxy Skeleton (Week 1, Days 4-5)",id:"step-2-rust-proxy-skeleton-week-1-days-4-5",level:2},{value:"Goal",id:"goal-1",level:3},{value:"Deliverables",id:"deliverables-1",level:3},{value:"Success Criteria",id:"success-criteria-1",level:3},{value:"Files to Create",id:"files-to-create-1",level:3},{value:"Step 3: KeyValue Protobuf + Service Stub (Week 2, Days 1-2)",id:"step-3-keyvalue-protobuf--service-stub-week-2-days-1-2",level:2},{value:"Goal",id:"goal-2",level:3},{value:"Deliverables",id:"deliverables-2",level:3},{value:"Success Criteria",id:"success-criteria-2",level:3},{value:"Files to Create/Update",id:"files-to-createupdate",level:3},{value:"Step 4: SQLite Backend Implementation (Week 2, Days 3-5)",id:"step-4-sqlite-backend-implementation-week-2-days-3-5",level:2},{value:"Goal",id:"goal-3",level:3},{value:"Deliverables",id:"deliverables-3",level:3},{value:"Success Criteria",id:"success-criteria-3",level:3},{value:"Files to Create",id:"files-to-create-2",level:3},{value:"Step 5: Integration Tests + Local Stack (Week 3, Days 1-3)",id:"step-5-integration-tests--local-stack-week-3-days-1-3",level:2},{value:"Goal",id:"goal-4",level:3},{value:"Deliverables",id:"deliverables-4",level:3},{value:"Success Criteria",id:"success-criteria-4",level:3},{value:"Files to Create",id:"files-to-create-3",level:3},{value:"Step 6: Postgres Backend + Documentation (Week 3-4, Days 4-7)",id:"step-6-postgres-backend--documentation-week-3-4-days-4-7",level:2},{value:"Goal",id:"goal-5",level:3},{value:"Deliverables",id:"deliverables-5",level:3},{value:"Success Criteria",id:"success-criteria-5",level:3},{value:"Files to Create",id:"files-to-create-4",level:3},{value:"Summary Timeline",id:"summary-timeline",level:2},{value:"Success Metrics",id:"success-metrics",level:2},{value:"Next Steps After Step 6",id:"next-steps-after-step-6",level:2},{value:"Alternatives Considered",id:"alternatives-considered",level:2},{value:"Big Bang Approach",id:"big-bang-approach",level:3},{value:"Vertical Slice",id:"vertical-slice",level:3},{value:"Backend-First",id:"backend-first",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function o(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsx)(n.p,{children:"We have comprehensive architecture documentation (ADRs 001-010), protobuf data model plan, and PRD. Now we need a concrete implementation roadmap that balances:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Quick wins"}),": Show value early"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Risk reduction"}),": Validate core assumptions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Incremental delivery"}),": Each step produces working software"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Learning"}),": Build expertise progressively"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The roadmap must deliver a working system that demonstrates Prism's core value proposition within 4 weeks."}),"\n",(0,i.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,i.jsxs)(n.p,{children:["Implement Prism in ",(0,i.jsx)(n.strong,{children:"6 major steps"}),", each building on the previous, with clear deliverables and success criteria."]}),"\n",(0,i.jsx)(n.h2,{id:"step-1-protobuf-foundation-week-1-days-1-3",children:"Step 1: Protobuf Foundation (Week 1, Days 1-3)"}),"\n",(0,i.jsx)(n.h3,{id:"goal",children:"Goal"}),"\n",(0,i.jsx)(n.p,{children:"Establish protobuf as single source of truth with code generation pipeline."}),"\n",(0,i.jsx)(n.h3,{id:"deliverables",children:"Deliverables"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Create ",(0,i.jsx)(n.code,{children:"proto/"})," directory structure"]}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"proto/\n\u251c\u2500\u2500 prism/\n\u2502   \u251c\u2500\u2500 options.proto         # Custom Prism tags\n\u2502   \u2514\u2500\u2500 common/\n\u2502       \u251c\u2500\u2500 types.proto       # Timestamps, UUIDs, etc.\n\u2502       \u251c\u2500\u2500 errors.proto      # Error definitions\n\u2502       \u2514\u2500\u2500 metadata.proto    # Item metadata\n\u251c\u2500\u2500 buf.yaml                   # Buf configuration\n\u2514\u2500\u2500 buf.lock\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Implement Prism custom options"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Message-level: ",(0,i.jsx)(n.code,{children:"namespace"}),", ",(0,i.jsx)(n.code,{children:"backend"}),", ",(0,i.jsx)(n.code,{children:"access_pattern"}),", ",(0,i.jsx)(n.code,{children:"estimated_*_rps"}),", etc."]}),"\n",(0,i.jsxs)(n.li,{children:["Field-level: ",(0,i.jsx)(n.code,{children:"pii"}),", ",(0,i.jsx)(n.code,{children:"encrypt_at_rest"}),", ",(0,i.jsx)(n.code,{children:"index"}),", ",(0,i.jsx)(n.code,{children:"validation"})]}),"\n",(0,i.jsxs)(n.li,{children:["Service/RPC-level: ",(0,i.jsx)(n.code,{children:"require_auth"}),", ",(0,i.jsx)(n.code,{children:"timeout_ms"}),", ",(0,i.jsx)(n.code,{children:"idempotent"})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Set up code generation"}),":"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Install buf\nbrew install bufbuild/buf/buf\n\n# Generate Rust code\nbuf generate --template buf.gen.rust.yaml\n\n# Generate Python code\nbuf generate --template buf.gen.python.yaml\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Create ",(0,i.jsx)(n.code,{children:"tooling/codegen"})]})," module:"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"python -m tooling.codegen generate\n# \u2192 Generates Rust, Python, TypeScript from proto\n"})}),"\n",(0,i.jsx)(n.h3,{id:"success-criteria",children:"Success Criteria"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.code,{children:"prism/options.proto"})," compiles without errors"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Rust code generates successfully with ",(0,i.jsx)(n.code,{children:"prost"})]}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Can import generated Rust code in a test program"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Buf lint passes with zero warnings"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"files-to-create",children:"Files to Create"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proto/prism/options.proto"})," (~200 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proto/prism/common/*.proto"})," (~150 lines total)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proto/buf.yaml"})," (~30 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tooling/codegen/generator.py"})," (~100 lines)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-2-rust-proxy-skeleton-week-1-days-4-5",children:"Step 2: Rust Proxy Skeleton (Week 1, Days 4-5)"}),"\n",(0,i.jsx)(n.h3,{id:"goal-1",children:"Goal"}),"\n",(0,i.jsx)(n.p,{children:"Create minimal gRPC server in Rust that can accept requests and return dummy responses."}),"\n",(0,i.jsx)(n.h3,{id:"deliverables-1",children:"Deliverables"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Initialize Rust workspace"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"cargo new --lib proxy\ncd proxy\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add dependencies"})," (",(0,i.jsx)(n.code,{children:"Cargo.toml"}),"):"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[dependencies]\ntokio = { version = "1.35", features = ["full"] }\ntonic = "0.10"\nprost = "0.12"\ntower = "0.4"\ntracing = "0.1"\ntracing-subscriber = "0.3"\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implement health check service"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// proxy/src/health.rs\npub struct HealthService;\n\n#[tonic::async_trait]\nimpl HealthCheck for HealthService {\n    async fn check(&self, _req: Request<()>) -> Result<Response<HealthCheckResponse>> {\n        Ok(Response::new(HealthCheckResponse { status: "healthy" }))\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create main server"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// proxy/src/main.rs\n#[tokio::main]\nasync fn main() -> Result<()> {\n    let addr = "0.0.0.0:8980".parse()?;\n    let health_svc = HealthService::default();\n\n    Server::builder()\n        .add_service(HealthServer::new(health_svc))\n        .serve(addr)\n        .await?;\n\n    Ok(())\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add basic logging"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"tracing_subscriber::fmt()\n    .with_target(false)\n    .compact()\n    .init();\n"})}),"\n",(0,i.jsx)(n.h3,{id:"success-criteria-1",children:"Success Criteria"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.code,{children:"cargo build"})," succeeds"]}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Server starts on port 8980"}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 Health check responds: ",(0,i.jsx)(n.code,{children:"grpcurl localhost:8980 Health/Check"})]}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Logs appear in JSON format"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"files-to-create-1",children:"Files to Create"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/Cargo.toml"})," (~40 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/src/main.rs"})," (~80 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/src/health.rs"})," (~30 lines)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-3-keyvalue-protobuf--service-stub-week-2-days-1-2",children:"Step 3: KeyValue Protobuf + Service Stub (Week 2, Days 1-2)"}),"\n",(0,i.jsx)(n.h3,{id:"goal-2",children:"Goal"}),"\n",(0,i.jsx)(n.p,{children:"Define complete KeyValue protobuf API and generate server stubs."}),"\n",(0,i.jsx)(n.h3,{id:"deliverables-2",children:"Deliverables"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create KeyValue proto"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"// proto/prism/keyvalue/v1/keyvalue.proto\nservice KeyValueService {\n  rpc Put(PutRequest) returns (PutResponse);\n  rpc Get(GetRequest) returns (GetResponse);\n  rpc Delete(DeleteRequest) returns (DeleteResponse);\n  rpc Scan(ScanRequest) returns (stream ScanResponse);\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create KeyValue types"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"// proto/prism/keyvalue/v1/types.proto\nmessage Item {\n  bytes key = 1;\n  bytes value = 2;\n  prism.common.ItemMetadata metadata = 3;\n}\n\nmessage PutRequest {\n  string namespace = 1;\n  string id = 2;\n  repeated Item items = 3;\n}\n// ... etc\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Regenerate Rust code"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"buf generate\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implement stub service"})," (returns errors):"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// proxy/src/keyvalue/service.rs\npub struct KeyValueService;\n\n#[tonic::async_trait]\nimpl KeyValue for KeyValueService {\n    async fn put(&self, req: Request<PutRequest>) -> Result<Response<PutResponse>> {\n        Err(Status::unimplemented("put not yet implemented"))\n    }\n    // ... etc\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Wire into server"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"Server::builder()\n    .add_service(HealthServer::new(health_svc))\n    .add_service(KeyValueServer::new(kv_svc))  // \u2190 New!\n    .serve(addr)\n    .await?;\n"})}),"\n",(0,i.jsx)(n.h3,{id:"success-criteria-2",children:"Success Criteria"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Protobuf compiles cleanly"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Rust code generates without errors"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Server starts with KeyValue service"}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.code,{children:"grpcurl"})," can call ",(0,i.jsx)(n.code,{children:"KeyValue/Put"})," (gets unimplemented error)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"files-to-createupdate",children:"Files to Create/Update"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proto/prism/keyvalue/v1/keyvalue.proto"})," (~80 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proto/prism/keyvalue/v1/types.proto"})," (~120 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/src/keyvalue/service.rs"})," (~100 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/src/main.rs"})," (update: +5 lines)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-4-sqlite-backend-implementation-week-2-days-3-5",children:"Step 4: SQLite Backend Implementation (Week 2, Days 3-5)"}),"\n",(0,i.jsx)(n.h3,{id:"goal-3",children:"Goal"}),"\n",(0,i.jsx)(n.p,{children:"Implement working KeyValue backend using SQLite for local testing."}),"\n",(0,i.jsx)(n.h3,{id:"deliverables-3",children:"Deliverables"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Define backend trait"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// proxy/src/backend/mod.rs\n#[async_trait]\npub trait KeyValueBackend: Send + Sync {\n    async fn put(&self, namespace: &str, id: &str, items: Vec<Item>) -> Result<()>;\n    async fn get(&self, namespace: &str, id: &str, keys: Vec<&[u8]>) -> Result<Vec<Item>>;\n    async fn delete(&self, namespace: &str, id: &str, keys: Vec<&[u8]>) -> Result<()>;\n    async fn scan(&self, namespace: &str, id: &str) -> Result<Vec<Item>>;\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implement SQLite backend"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// proxy/src/backend/sqlite.rs\npub struct SqliteBackend {\n    pool: SqlitePool,\n}\n\n#[async_trait]\nimpl KeyValueBackend for SqliteBackend {\n    async fn put(&self, namespace: &str, id: &str, items: Vec<Item>) -> Result<()> {\n        let mut tx = self.pool.begin().await?;\n\n        for item in items {\n            sqlx::query(\n                "INSERT OR REPLACE INTO kv (namespace, id, key, value) VALUES (?, ?, ?, ?)"\n            )\n            .bind(namespace)\n            .bind(id)\n            .bind(&item.key)\n            .bind(&item.value)\n            .execute(&mut tx)\n            .await?;\n        }\n\n        tx.commit().await?;\n        Ok(())\n    }\n    // ... etc\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create schema migration"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- proxy/migrations/001_create_kv_table.sql\nCREATE TABLE IF NOT EXISTS kv (\n    namespace TEXT NOT NULL,\n    id TEXT NOT NULL,\n    key BLOB NOT NULL,\n    value BLOB NOT NULL,\n    created_at INTEGER NOT NULL DEFAULT (unixepoch()),\n    updated_at INTEGER NOT NULL DEFAULT (unixepoch()),\n    PRIMARY KEY (namespace, id, key)\n);\n\nCREATE INDEX idx_kv_namespace ON kv(namespace);\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Wire backend into service"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// proxy/src/keyvalue/service.rs\npub struct KeyValueService {\n    backend: Arc<dyn KeyValueBackend>,\n}\n\n#[tonic::async_trait]\nimpl KeyValue for KeyValueService {\n    async fn put(&self, req: Request<PutRequest>) -> Result<Response<PutResponse>> {\n        let req = req.into_inner();\n        self.backend.put(&req.namespace, &req.id, req.items).await?;\n        Ok(Response::new(PutResponse { success: true }))\n    }\n    // ... etc\n}\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add configuration"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# proxy/config.yaml\ndatabase:\n  type: sqlite\n  path: ./prism.db\n\nlogging:\n  level: debug\n  format: json\n"})}),"\n",(0,i.jsx)(n.h3,{id:"success-criteria-3",children:"Success Criteria"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 Can put data: ",(0,i.jsx)(n.code,{children:'grpcurl -d \'{"namespace":"test","id":"1","items":[{"key":"aGVsbG8=","value":"d29ybGQ="}]}\' localhost:8980 prism.keyvalue.v1.KeyValueService/Put'})]}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Can get data back with same value"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Data persists across server restarts"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 All CRUD operations work (Put, Get, Delete, Scan)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"files-to-create-2",children:"Files to Create"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/src/backend/mod.rs"})," (~50 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/src/backend/sqlite.rs"})," (~250 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/migrations/001_create_kv_table.sql"})," (~15 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/config.yaml"})," (~20 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/Cargo.toml"})," (update: add ",(0,i.jsx)(n.code,{children:"sqlx"}),", ",(0,i.jsx)(n.code,{children:"serde_yaml"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-5-integration-tests--local-stack-week-3-days-1-3",children:"Step 5: Integration Tests + Local Stack (Week 3, Days 1-3)"}),"\n",(0,i.jsx)(n.h3,{id:"goal-4",children:"Goal"}),"\n",(0,i.jsx)(n.p,{children:"Validate end-to-end functionality with automated tests using real local backends."}),"\n",(0,i.jsx)(n.h3,{id:"deliverables-4",children:"Deliverables"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create integration test"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// proxy/tests/integration_test.rs\n#[tokio::test]\nasync fn test_put_get_roundtrip() {\n    let client = KeyValueClient::connect("http://localhost:8980").await.unwrap();\n\n    // Put\n    let put_req = PutRequest {\n        namespace: "test".to_string(),\n        id: "user123".to_string(),\n        items: vec![Item {\n            key: b"profile".to_vec(),\n            value: b"Alice".to_vec(),\n            metadata: None,\n        }],\n        item_priority_token: 0,\n    };\n    client.put(put_req).await.unwrap();\n\n    // Get\n    let get_req = GetRequest {\n        namespace: "test".to_string(),\n        id: "user123".to_string(),\n        predicate: Some(KeyPredicate {\n            predicate: Some(key_predicate::Predicate::MatchAll(MatchAll {})),\n        }),\n    };\n    let response = client.get(get_req).await.unwrap().into_inner();\n\n    assert_eq!(response.items.len(), 1);\n    assert_eq!(response.items[0].key, b"profile");\n    assert_eq!(response.items[0].value, b"Alice");\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Enhance ",(0,i.jsx)(n.code,{children:"docker-compose.test.yml"})]}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'services:\n  prism-proxy:\n    build: ./proxy\n    ports:\n      - "8980:8980"\n    depends_on:\n      - postgres\n    environment:\n      DATABASE_URL: postgres://prism:prism_test_password@postgres/prism_test\n\n  postgres:\n    # ... existing config ...\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create test helper"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// proxy/tests/common/mod.rs\npub struct TestFixture {\n    pub client: KeyValueClient<Channel>,\n}\n\nimpl TestFixture {\n    pub async fn new() -> Self {\n        // Wait for server to be ready\n        tokio::time::sleep(Duration::from_secs(1)).await;\n\n        let client = KeyValueClient::connect("http://localhost:8980")\n            .await\n            .expect("Failed to connect");\n\n        Self { client }\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add CI workflow"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/test.yml\nname: Tests\n\non: [push, pull_request]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Start local stack\n        run: python -m tooling.test.local-stack up\n\n      - name: Run unit tests\n        run: cargo test --lib\n\n      - name: Run integration tests\n        run: cargo test --test integration_test\n"})}),"\n",(0,i.jsx)(n.h3,{id:"success-criteria-4",children:"Success Criteria"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 All integration tests pass locally"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Tests pass in CI"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Can run full test suite in < 60 seconds"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Tests clean up after themselves (no state leakage)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"files-to-create-3",children:"Files to Create"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/tests/integration_test.rs"})," (~200 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/tests/common/mod.rs"})," (~50 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:".github/workflows/test.yml"})," (~40 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"docker-compose.test.yml"})," (update: add prism-proxy service)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"step-6-postgres-backend--documentation-week-3-4-days-4-7",children:"Step 6: Postgres Backend + Documentation (Week 3-4, Days 4-7)"}),"\n",(0,i.jsx)(n.h3,{id:"goal-5",children:"Goal"}),"\n",(0,i.jsx)(n.p,{children:"Production-ready Postgres backend with complete documentation."}),"\n",(0,i.jsx)(n.h3,{id:"deliverables-5",children:"Deliverables"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Implement Postgres backend"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// proxy/src/backend/postgres.rs\npub struct PostgresBackend {\n    pool: PgPool,\n}\n\n#[async_trait]\nimpl KeyValueBackend for PostgresBackend {\n    async fn put(&self, namespace: &str, id: &str, items: Vec<Item>) -> Result<()> {\n        let mut tx = self.pool.begin().await?;\n\n        for item in items {\n            sqlx::query(\n                "INSERT INTO kv (namespace, id, key, value, updated_at)\n                 VALUES ($1, $2, $3, $4, NOW())\n                 ON CONFLICT (namespace, id, key)\n                 DO UPDATE SET value = EXCLUDED.value, updated_at = NOW()"\n            )\n            .bind(namespace)\n            .bind(id)\n            .bind(&item.key)\n            .bind(&item.value)\n            .execute(&mut tx)\n            .await?;\n        }\n\n        tx.commit().await?;\n        Ok(())\n    }\n    // ... etc (similar to SQLite but with Postgres-specific SQL)\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add connection pooling"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let pool = PgPoolOptions::new()\n    .max_connections(20)\n    .connect(&database_url)\n    .await?;\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"3",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create Postgres migrations"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sql",children:"-- proxy/migrations/postgres/001_create_kv_table.sql\nCREATE TABLE IF NOT EXISTS kv (\n    namespace VARCHAR(255) NOT NULL,\n    id VARCHAR(255) NOT NULL,\n    key BYTEA NOT NULL,\n    value BYTEA NOT NULL,\n    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n    updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n    PRIMARY KEY (namespace, id, key)\n);\n\nCREATE INDEX idx_kv_namespace ON kv(namespace);\nCREATE INDEX idx_kv_id ON kv(namespace, id);\n"})}),"\n",(0,i.jsxs)(n.ol,{start:"4",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Add integration tests for Postgres"}),":"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#[tokio::test]\nasync fn test_postgres_backend() {\n    let pool = PgPool::connect("postgres://prism:prism_test_password@localhost/prism_test")\n        .await\n        .unwrap();\n\n    let backend = PostgresBackend::new(pool);\n\n    // Run same tests as SQLite\n    // ... test put, get, delete, scan\n}\n'})}),"\n",(0,i.jsxs)(n.ol,{start:"5",children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Write documentation"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"docs/getting-started.md"}),": Quickstart guide"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"docs/api-reference.md"}),": gRPC API documentation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"docs/deployment.md"}),": How to deploy Prism"]}),"\n",(0,i.jsxs)(n.li,{children:["Update ",(0,i.jsx)(n.code,{children:"README.md"})," with real examples"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"success-criteria-5",children:"Success Criteria"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 Postgres backend passes all integration tests"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Performance: 10k RPS sustained on laptop"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Connection pooling works correctly"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Documentation covers all key use cases"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Can deploy Prism with Postgres in production"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"files-to-create-4",children:"Files to Create"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/src/backend/postgres.rs"})," (~300 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/migrations/postgres/001_create_kv_table.sql"})," (~20 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"proxy/tests/postgres_test.rs"})," (~150 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"docs/getting-started.md"})," (~200 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"docs/api-reference.md"})," (~300 lines)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"docs/deployment.md"})," (~150 lines)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"summary-timeline",children:"Summary Timeline"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Week"}),(0,i.jsx)(n.th,{children:"Days"}),(0,i.jsx)(n.th,{children:"Step"}),(0,i.jsx)(n.th,{children:"Deliverable"}),(0,i.jsx)(n.th,{children:"Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"1-3"}),(0,i.jsx)(n.td,{children:"Step 1"}),(0,i.jsx)(n.td,{children:"Protobuf foundation"}),(0,i.jsx)(n.td,{children:"\ud83d\udccb Planned"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:"4-5"}),(0,i.jsx)(n.td,{children:"Step 2"}),(0,i.jsx)(n.td,{children:"Rust proxy skeleton"}),(0,i.jsx)(n.td,{children:"\ud83d\udccb Planned"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"1-2"}),(0,i.jsx)(n.td,{children:"Step 3"}),(0,i.jsx)(n.td,{children:"KeyValue protobuf + stubs"}),(0,i.jsx)(n.td,{children:"\ud83d\udccb Planned"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:"3-5"}),(0,i.jsx)(n.td,{children:"Step 4"}),(0,i.jsx)(n.td,{children:"SQLite backend"}),(0,i.jsx)(n.td,{children:"\ud83d\udccb Planned"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:"1-3"}),(0,i.jsx)(n.td,{children:"Step 5"}),(0,i.jsx)(n.td,{children:"Integration tests + CI"}),(0,i.jsx)(n.td,{children:"\ud83d\udccb Planned"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3-4"}),(0,i.jsx)(n.td,{children:"4-7"}),(0,i.jsx)(n.td,{children:"Step 6"}),(0,i.jsx)(n.td,{children:"Postgres + docs"}),(0,i.jsx)(n.td,{children:"\ud83d\udccb Planned"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Total"}),": ~4 weeks to production-ready KeyValue abstraction"]}),"\n",(0,i.jsx)(n.h2,{id:"success-metrics",children:"Success Metrics"}),"\n",(0,i.jsx)(n.p,{children:"After completing all 6 steps, we should have:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Working system"}),": KeyValue abstraction with SQLite + Postgres"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Performance"}),": P99 < 10ms, 10k RPS sustained"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Testing"}),": 90%+ code coverage, all tests green"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Documentation"}),": Complete getting-started guide"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Deployable"}),": Can deploy to production"]}),"\n",(0,i.jsxs)(n.li,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Validated"}),": Core architecture proven with real code"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"next-steps-after-step-6",children:"Next Steps After Step 6"}),"\n",(0,i.jsx)(n.p,{children:"Once the foundation is solid, subsequent phases:"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Phase 2"})," (Weeks 5-8):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"TimeSeries abstraction + Kafka backend"}),"\n",(0,i.jsx)(n.li,{children:"OpenTelemetry observability"}),"\n",(0,i.jsx)(n.li,{children:"Shadow traffic support"}),"\n",(0,i.jsx)(n.li,{children:"Production deployment"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Phase 3"})," (Weeks 9-12):"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Graph abstraction + Neptune backend"}),"\n",(0,i.jsx)(n.li,{children:"Client-originated configuration"}),"\n",(0,i.jsx)(n.li,{children:"Admin UI basics"}),"\n",(0,i.jsx)(n.li,{children:"Auto-provisioning"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,i.jsx)(n.h3,{id:"big-bang-approach",children:"Big Bang Approach"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implement all abstractions (KeyValue, TimeSeries, Graph) at once"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rejected"}),": Too risky, can't validate assumptions early"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"vertical-slice",children:"Vertical Slice"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implement one end-to-end use case (e.g., user profiles)"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rejected"}),": Doesn't validate platform generality"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"backend-first",children:"Backend-First"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Implement all backends for KeyValue before moving to TimeSeries"}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rejected"}),": Diminishing returns; SQLite + Postgres sufficient to validate"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ADR-001 through ADR-010 (all previous architectural decisions)"}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/jrepp/prism-data-layer/blob/main/docs-cms/protobuf-data-model-plan.md",children:"Protobuf Data Model Plan"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/jrepp/prism-data-layer/blob/main/PRD.md",children:"PRD"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2025-10-05: Initial roadmap and acceptance"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var r=s(6540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);