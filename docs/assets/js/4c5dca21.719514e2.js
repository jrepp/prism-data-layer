"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[63012],{28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>l});var i=t(96540);const r={},s=i.createContext(r);function c(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(s.Provider,{value:n},e.children)}},41328:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"adr-051","title":"ADR-051: MinIO for Claim Check Pattern Testing","description":"Status","source":"@site/../docs-cms/adr/adr-051-minio-claim-check-testing.md","sourceDirName":".","slug":"/adr-051","permalink":"/prism-data-layer/adr/adr-051","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-051-minio-claim-check-testing.md","tags":[{"inline":true,"label":"testing","permalink":"/prism-data-layer/adr/tags/testing"},{"inline":true,"label":"minio","permalink":"/prism-data-layer/adr/tags/minio"},{"inline":true,"label":"s3","permalink":"/prism-data-layer/adr/tags/s-3"},{"inline":true,"label":"object-storage","permalink":"/prism-data-layer/adr/tags/object-storage"},{"inline":true,"label":"claim-check","permalink":"/prism-data-layer/adr/tags/claim-check"},{"inline":true,"label":"testcontainers","permalink":"/prism-data-layer/adr/tags/testcontainers"},{"inline":true,"label":"local-testing","permalink":"/prism-data-layer/adr/tags/local-testing"}],"version":"current","frontMatter":{"title":"ADR-051: MinIO for Claim Check Pattern Testing","status":"Proposed","date":"2025-10-14T00:00:00.000Z","deciders":"Core Team","tags":["testing","minio","s3","object-storage","claim-check","testcontainers","local-testing"],"id":"adr-051","project_id":"prism-data-layer","doc_uuid":"6619d625-317a-4b8d-a80a-e225219eaf92"},"sidebar":"adrSidebar","previous":{"title":"Topaz for Policy-Based Authorization \u2022 ADR-050","permalink":"/prism-data-layer/adr/adr-050"},"next":{"title":"Object Store Interface Design \u2022 ADR-052","permalink":"/prism-data-layer/adr/adr-052"}}');var r=t(74848),s=t(28453);const c={title:"ADR-051: MinIO for Claim Check Pattern Testing",status:"Proposed",date:new Date("2025-10-14T00:00:00.000Z"),deciders:"Core Team",tags:["testing","minio","s3","object-storage","claim-check","testcontainers","local-testing"],id:"adr-051",project_id:"prism-data-layer",doc_uuid:"6619d625-317a-4b8d-a80a-e225219eaf92"},l="ADR-051: MinIO for Claim Check Pattern Testing",a={},o=[{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Evaluation Criteria",id:"evaluation-criteria",level:3},{value:"Decision",id:"decision",level:2},{value:"MinIO Configuration for Testing",id:"minio-configuration-for-testing",level:3},{value:"Test Setup Pattern",id:"test-setup-pattern",level:3},{value:"Test Bucket Strategy",id:"test-bucket-strategy",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Plan",id:"implementation-plan",level:2},{value:"Phase 1: MinIO Driver (Week 1)",id:"phase-1-minio-driver-week-1",level:3},{value:"Phase 2: Test Framework Integration (Week 1)",id:"phase-2-test-framework-integration-week-1",level:3},{value:"Phase 3: Claim Check Tests (Week 2)",id:"phase-3-claim-check-tests-week-2",level:3},{value:"Testing the Tests",id:"testing-the-tests",level:2},{value:"Alternatives Considered",id:"alternatives-considered",level:2},{value:"1. LocalStack (S3 Emulator)",id:"1-localstack-s3-emulator",level:3},{value:"2. Azurite (Azure Blob Emulator)",id:"2-azurite-azure-blob-emulator",level:3},{value:"3. S3Mock (Java-based)",id:"3-s3mock-java-based",level:3},{value:"4. Real AWS S3",id:"4-real-aws-s3",level:3},{value:"5. In-Memory Fake",id:"5-in-memory-fake",level:3},{value:"Monitoring and Debugging",id:"monitoring-and-debugging",level:2},{value:"Container Logs",id:"container-logs",level:3},{value:"MinIO Console",id:"minio-console",level:3},{value:"Performance Metrics",id:"performance-metrics",level:3},{value:"Migration to Production",id:"migration-to-production",level:2},{value:"Open Questions",id:"open-questions",level:2},{value:"References",id:"references",level:2},{value:"Related Documents",id:"related-documents",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"adr-051-minio-for-claim-check-pattern-testing",children:"ADR-051: MinIO for Claim Check Pattern Testing"})}),"\n",(0,r.jsx)(n.h2,{id:"status",children:"Status"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Proposed"})," - Pending review"]}),"\n",(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(n.p,{children:"The claim check pattern (RFC-033) requires an object storage backend for storing large payloads. For acceptance testing, we need a local object storage solution that:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"S3-Compatible"}),": Uses standard S3 API for portability"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lightweight"}),": Runs in testcontainers without heavy infrastructure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fast Startup"}),": Quick container initialization for rapid test iteration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Feature-Complete"}),": Supports TTL, metadata, checksums"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Production-Like"}),": Behaves like real S3/GCS for realistic testing"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"evaluation-criteria",children:"Evaluation Criteria"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Backend"}),(0,r.jsx)(n.th,{children:"S3 API"}),(0,r.jsx)(n.th,{children:"Container"}),(0,r.jsx)(n.th,{children:"Startup"}),(0,r.jsx)(n.th,{children:"TTL"}),(0,r.jsx)(n.th,{children:"Cost"}),(0,r.jsx)(n.th,{children:"Prod-Like"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"MinIO"})}),(0,r.jsx)(n.td,{children:"\u2705 Full"}),(0,r.jsx)(n.td,{children:"\u2705 50MB"}),(0,r.jsx)(n.td,{children:"~2s"}),(0,r.jsx)(n.td,{children:"\u2705 Lifecycle"}),(0,r.jsx)(n.td,{children:"Free"}),(0,r.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"LocalStack"}),(0,r.jsx)(n.td,{children:"\u2705 Full"}),(0,r.jsx)(n.td,{children:"\u274c 800MB"}),(0,r.jsx)(n.td,{children:"~10s"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"Free"}),(0,r.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Azurite"}),(0,r.jsx)(n.td,{children:"\u274c Azure"}),(0,r.jsx)(n.td,{children:"\u2705 100MB"}),(0,r.jsx)(n.td,{children:"~3s"}),(0,r.jsx)(n.td,{children:"\u26a0\ufe0f Limited"}),(0,r.jsx)(n.td,{children:"Free"}),(0,r.jsx)(n.td,{children:"\u2b50\u2b50\u2b50"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"S3Mock"}),(0,r.jsx)(n.td,{children:"\u26a0\ufe0f Basic"}),(0,r.jsx)(n.td,{children:"\u2705 80MB"}),(0,r.jsx)(n.td,{children:"~4s"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"Free"}),(0,r.jsx)(n.td,{children:"\u2b50\u2b50"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"SeaweedFS"}),(0,r.jsx)(n.td,{children:"\u26a0\ufe0f Partial"}),(0,r.jsx)(n.td,{children:"\u2705 40MB"}),(0,r.jsx)(n.td,{children:"~2s"}),(0,r.jsx)(n.td,{children:"\u26a0\ufe0f Limited"}),(0,r.jsx)(n.td,{children:"Free"}),(0,r.jsx)(n.td,{children:"\u2b50\u2b50\u2b50"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Real S3"}),(0,r.jsx)(n.td,{children:"\u2705 Full"}),(0,r.jsx)(n.td,{children:"N/A"}),(0,r.jsx)(n.td,{children:"N/A"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"$$"}),(0,r.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Use MinIO for claim check pattern acceptance testing."})}),"\n",(0,r.jsx)(n.p,{children:"MinIO provides:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Full S3 compatibility"}),": Drop-in replacement for production S3/GCS"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Small footprint"}),": 50MB Docker image, 2-second startup"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Complete feature set"}),": Lifecycle policies (TTL), versioning, encryption"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Open source"}),": No licensing concerns, active development"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Production use"}),": Many companies use MinIO in production"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"minio-configuration-for-testing",children:"MinIO Configuration for Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# testcontainers configuration\nservices:\n  minio:\n    image: minio/minio:latest\n    ports:\n      - "9000:9000"  # API\n      - "9001:9001"  # Console\n    environment:\n      MINIO_ROOT_USER: minioadmin\n      MINIO_ROOT_PASSWORD: minioadmin\n    command: server /data --console-address ":9001"\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]\n      interval: 5s\n      timeout: 3s\n      retries: 5\n'})}),"\n",(0,r.jsx)(n.h3,{id:"test-setup-pattern",children:"Test Setup Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// tests/acceptance/backends/minio.go\nfunc setupMinIO(t *testing.T, ctx context.Context) (interface{}, func()) {\n    t.Helper()\n\n    // Start MinIO testcontainer\n    minioContainer, err := testcontainers.GenericContainer(ctx, testcontainers.GenericContainerRequest{\n        ContainerRequest: testcontainers.ContainerRequest{\n            Image:        "minio/minio:RELEASE.2024-10-13T13-34-11Z",  // Pin version\n            ExposedPorts: []string{"9000/tcp", "9001/tcp"},\n            Env: map[string]string{\n                "MINIO_ROOT_USER":     "minioadmin",\n                "MINIO_ROOT_PASSWORD": "minioadmin",\n            },\n            Cmd: []string{"server", "/data", "--console-address", ":9001"},\n            WaitingFor: wait.ForHTTP("/minio/health/live").\n                WithPort("9000/tcp").\n                WithStartupTimeout(30 * time.Second),\n        },\n        Started: true,\n    })\n    require.NoError(t, err, "Failed to start MinIO container")\n\n    // Get endpoint\n    endpoint, err := minioContainer.Endpoint(ctx, "")\n    require.NoError(t, err, "Failed to get MinIO endpoint")\n\n    // Create driver\n    driver := minio.New()\n    config := &plugin.Config{\n        Plugin: plugin.PluginConfig{\n            Name:    "minio-test",\n            Version: "0.1.0",\n        },\n        Backend: map[string]any{\n            "endpoint":   endpoint,\n            "access_key": "minioadmin",\n            "secret_key": "minioadmin",\n            "use_ssl":    false,  // No TLS in tests\n            "region":     "us-east-1",\n        },\n    }\n\n    err = driver.Initialize(ctx, config)\n    require.NoError(t, err, "Failed to initialize MinIO driver")\n\n    err = driver.Start(ctx)\n    require.NoError(t, err, "Failed to start MinIO driver")\n\n    // Create test bucket\n    err = driver.CreateBucket(ctx, "test-claims")\n    require.NoError(t, err, "Failed to create test bucket")\n\n    cleanup := func() {\n        driver.Stop(ctx)\n        if err := minioContainer.Terminate(ctx); err != nil {\n            t.Logf("Failed to terminate MinIO container: %v", err)\n        }\n    }\n\n    return driver, cleanup\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"test-bucket-strategy",children:"Test Bucket Strategy"}),"\n",(0,r.jsx)(n.p,{children:"Each test suite gets isolated buckets:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Pattern: {suite}-{backend}-{timestamp}\n// Example: claimcheck-nats-1697234567\n\nfunc createTestBucket(t *testing.T, driver ObjectStoreInterface) string {\n    bucketName := fmt.Sprintf("%s-%s-%d",\n        t.Name(),\n        driver.Name(),\n        time.Now().Unix())\n\n    // Sanitize bucket name (S3 rules: lowercase, no underscores)\n    bucketName = strings.ToLower(bucketName)\n    bucketName = strings.ReplaceAll(bucketName, "_", "-")\n    bucketName = strings.ReplaceAll(bucketName, "/", "-")\n\n    err := driver.CreateBucket(ctx, bucketName)\n    require.NoError(t, err)\n\n    // Set lifecycle policy for automatic cleanup\n    err = driver.SetBucketLifecycle(ctx, bucketName, &LifecyclePolicy{\n        Rules: []LifecycleRule{\n            {\n                ID:         "expire-after-1-hour",\n                Expiration: 3600, // 1 hour\n                Status:     "Enabled",\n            },\n        },\n    })\n    require.NoError(t, err)\n\n    t.Cleanup(func() {\n        // Best effort cleanup - lifecycle will handle stragglers\n        if err := driver.DeleteBucket(ctx, bucketName); err != nil {\n            t.Logf("Failed to delete test bucket: %v", err)\n        }\n    })\n\n    return bucketName\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,r.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fast Tests"}),": 2-second container startup keeps test suite fast"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Reliable"}),": MinIO widely used, well-tested, stable"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"S3-Compatible"}),": Tests transfer directly to production S3/GCS/Azure"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No Mocks"}),": Real object storage behavior, catches edge cases"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"TTL Support"}),": Test claim expiration and lifecycle policies"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Local Development"}),": Developers can run full test suite locally"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CI/CD Friendly"}),": Lightweight enough for GitHub Actions"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not Real S3"}),": Subtle behavioral differences may exist"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Container Overhead"}),": Adds ~2s to test startup time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource Usage"}),": Each test needs MinIO container (managed by testcontainers)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Version Pinning"}),": Must pin MinIO version for reproducible tests"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Additional Dependency"}),": Another driver to maintain"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"S3 API Learning"}),": Team must understand S3 concepts (buckets, keys, lifecycle)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Docker Required"}),": Tests require Docker/Podman (already required)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation-plan",children:"Implementation Plan"}),"\n",(0,r.jsx)(n.h3,{id:"phase-1-minio-driver-week-1",children:"Phase 1: MinIO Driver (Week 1)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"pkg/drivers/minio/\n\u251c\u2500\u2500 driver.go          # ObjectStoreInterface implementation\n\u251c\u2500\u2500 config.go          # MinIO-specific configuration\n\u251c\u2500\u2500 client.go          # S3 client wrapper\n\u251c\u2500\u2500 lifecycle.go       # TTL and lifecycle policies\n\u2514\u2500\u2500 driver_test.go     # Unit tests\n"})}),"\n",(0,r.jsx)(n.h3,{id:"phase-2-test-framework-integration-week-1",children:"Phase 2: Test Framework Integration (Week 1)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"tests/acceptance/backends/\n\u2514\u2500\u2500 minio.go           # Backend registration\n\ntests/acceptance/framework/\n\u2514\u2500\u2500 types.go           # Add PatternObjectStore constant\n"})}),"\n",(0,r.jsx)(n.h3,{id:"phase-3-claim-check-tests-week-2",children:"Phase 3: Claim Check Tests (Week 2)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"tests/acceptance/patterns/claimcheck/\n\u251c\u2500\u2500 claimcheck_test.go      # Multi-pattern tests\n\u251c\u2500\u2500 large_payload_test.go   # 5MB+ payloads\n\u251c\u2500\u2500 threshold_test.go       # Boundary conditions\n\u251c\u2500\u2500 compression_test.go     # Gzip/zstd compression\n\u2514\u2500\u2500 ttl_test.go            # Expiration behavior\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-the-tests",children:"Testing the Tests"}),"\n",(0,r.jsx)(n.p,{children:"Validate MinIO setup with smoke tests:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func TestMinIOSetup(t *testing.T) {\n    ctx := context.Background()\n\n    driver, cleanup := setupMinIO(t, ctx)\n    defer cleanup()\n\n    // Test basic operations\n    bucket := "smoke-test"\n    err := driver.CreateBucket(ctx, bucket)\n    require.NoError(t, err)\n\n    // Put object\n    data := []byte("hello world")\n    err = driver.Put(ctx, bucket, "test-key", data)\n    require.NoError(t, err)\n\n    // Get object\n    retrieved, err := driver.Get(ctx, bucket, "test-key")\n    require.NoError(t, err)\n    assert.Equal(t, data, retrieved)\n\n    // Delete object\n    err = driver.Delete(ctx, bucket, "test-key")\n    require.NoError(t, err)\n\n    // Verify deletion\n    exists, err := driver.Exists(ctx, bucket, "test-key")\n    require.NoError(t, err)\n    assert.False(t, exists)\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,r.jsx)(n.h3,{id:"1-localstack-s3-emulator",children:"1. LocalStack (S3 Emulator)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pros"}),": Full AWS service suite (S3, SQS, SNS, etc.)\n",(0,r.jsx)(n.strong,{children:"Cons"}),": 800MB image, 10s+ startup, overkill for S3-only needs\n",(0,r.jsx)(n.strong,{children:"Verdict"}),": Too heavy for our use case"]}),"\n",(0,r.jsx)(n.h3,{id:"2-azurite-azure-blob-emulator",children:"2. Azurite (Azure Blob Emulator)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pros"}),": Official Microsoft emulator, lightweight\n",(0,r.jsx)(n.strong,{children:"Cons"}),": Azure Blob API != S3 API, different semantics\n",(0,r.jsx)(n.strong,{children:"Verdict"}),": Would require Azure-specific driver"]}),"\n",(0,r.jsx)(n.h3,{id:"3-s3mock-java-based",children:"3. S3Mock (Java-based)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pros"}),": Lightweight, Docker-friendly\n",(0,r.jsx)(n.strong,{children:"Cons"}),": Limited S3 API coverage, no lifecycle policies\n",(0,r.jsx)(n.strong,{children:"Verdict"}),": Missing critical features"]}),"\n",(0,r.jsx)(n.h3,{id:"4-real-aws-s3",children:"4. Real AWS S3"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pros"}),": 100% production behavior\n",(0,r.jsx)(n.strong,{children:"Cons"}),": Costs money, requires AWS credentials, slower, internet dependency\n",(0,r.jsx)(n.strong,{children:"Verdict"}),": Use for integration tests, not unit tests"]}),"\n",(0,r.jsx)(n.h3,{id:"5-in-memory-fake",children:"5. In-Memory Fake"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pros"}),": Fastest possible, no dependencies\n",(0,r.jsx)(n.strong,{children:"Cons"}),": No S3 API compatibility, won't catch integration issues\n",(0,r.jsx)(n.strong,{children:"Verdict"}),": Use for unit tests, not acceptance tests"]}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-and-debugging",children:"Monitoring and Debugging"}),"\n",(0,r.jsx)(n.h3,{id:"container-logs",children:"Container Logs"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# View MinIO logs during test failures\ndocker logs <container-id>\n\n# Or via testcontainers\nt.Logf("MinIO logs: %s", minioContainer.Logs(ctx))\n'})}),"\n",(0,r.jsx)(n.h3,{id:"minio-console",children:"MinIO Console"}),"\n",(0,r.jsx)(n.p,{children:"Access web UI for debugging:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Get console URL\necho "http://$(docker port <container-id> 9001)"\n\n# Login: minioadmin / minioadmin\n# View buckets, objects, lifecycle policies\n'})}),"\n",(0,r.jsx)(n.h3,{id:"performance-metrics",children:"Performance Metrics"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Track MinIO operation latency\nfunc (d *MinioDriver) Put(ctx context.Context, bucket, key string, data []byte) error {\n    start := time.Now()\n    defer func() {\n        d.metrics.PutLatency.Observe(time.Since(start).Seconds())\n    }()\n\n    _, err := d.client.PutObject(ctx, bucket, key, ...)\n    return err\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"migration-to-production",children:"Migration to Production"}),"\n",(0,r.jsx)(n.p,{children:"When moving from MinIO tests to production S3:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration Change"}),": Update backend config from ",(0,r.jsx)(n.code,{children:"minio"})," to ",(0,r.jsx)(n.code,{children:"s3"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Credentials"}),": Use IAM roles instead of access keys"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Region"}),": Specify correct AWS region"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Bucket Names"}),": Use production bucket naming convention"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lifecycle Policies"}),": Match test TTLs to production requirements"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Encryption"}),": Enable S3-SSE or KMS encryption"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Test (MinIO)\nobject_store:\n  backend: minio\n  endpoint: localhost:9000\n  access_key: minioadmin\n  secret_key: minioadmin\n  use_ssl: false\n\n# Production (S3)\nobject_store:\n  backend: s3\n  region: us-west-2\n  # Credentials from IAM role\n  use_ssl: true\n  server_side_encryption: AES256\n"})}),"\n",(0,r.jsx)(n.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-Region Testing"}),": Should we test S3 cross-region behavior? (MinIO doesn't support this)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Large File Performance"}),": What's the largest payload we should test? (10GB?)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Concurrent Access"}),": Should we test concurrent claim check operations?"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"MinIO Version Policy"}),": Pin exact version or use ",(0,r.jsx)(n.code,{children:"latest"}),"?"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://min.io/docs/minio/linux/index.html",children:"MinIO Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://hub.docker.com/r/minio/minio",children:"MinIO Docker Hub"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://golang.testcontainers.org/",children:"testcontainers-go"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/AmazonS3/latest/API/Welcome.html",children:"AWS S3 API Reference"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-lifecycle-mgmt.html",children:"S3 Lifecycle Configuration"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"RFC-033: Claim Check Pattern for Large Payloads"}),"\n",(0,r.jsx)(n.li,{children:"ADR-052: Object Store Interface Design"}),"\n",(0,r.jsx)(n.li,{children:"ADR-004: Local-First Testing Strategy"}),"\n",(0,r.jsx)(n.li,{children:"ADR-049: Podman Container Optimization"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);