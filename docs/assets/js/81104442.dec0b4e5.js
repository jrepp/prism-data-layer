"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[6455],{7428:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"adr-031","title":"ADR-031 TTL Defaults for Client-Configured Data","description":"Status: Accepted","source":"@site/../docs-cms/adr/031-ttl-defaults-client-data.md","sourceDirName":".","slug":"/adr-031","permalink":"/prism-data-layer/adr/adr-031","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/031-ttl-defaults-client-data.md","tags":[],"version":"current","sidebarPosition":31,"frontMatter":{"id":"adr-031","title":"ADR-031 TTL Defaults for Client-Configured Data","sidebar_label":"ADR-031 TTL Defaults","status":"Accepted"},"sidebar":"adrSidebar","previous":{"title":"ADR-030: Schema Recording with Protobuf Tagging","permalink":"/prism-data-layer/adr/schema-recording-protobuf-tags"},"next":{"title":"ADR-032 Object Storage","permalink":"/prism-data-layer/adr/adr-032"}}');var t=i(4848),r=i(8453);const l={id:"adr-031",title:"ADR-031 TTL Defaults for Client-Configured Data",sidebar_label:"ADR-031 TTL Defaults",status:"Accepted"},a="ADR-031: TTL Defaults for Client-Configured Dynamic Data",d={},c=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Principles",id:"principles",level:3},{value:"TTL Default Strategy",id:"ttl-default-strategy",level:2},{value:"Default TTL Values by Pattern",id:"default-ttl-values-by-pattern",level:3},{value:"TTL Precedence Rules",id:"ttl-precedence-rules",level:3},{value:"Implementation in Protobuf",id:"implementation-in-protobuf",level:3},{value:"Configuration YAML Example",id:"configuration-yaml-example",level:3},{value:"Backend-Specific Implementation",id:"backend-specific-implementation",level:2},{value:"Redis (Cache, Session, Vector)",id:"redis-cache-session-vector",level:3},{value:"PostgreSQL (KeyValue)",id:"postgresql-keyvalue",level:3},{value:"ClickHouse (TimeSeries)",id:"clickhouse-timeseries",level:3},{value:"MinIO (Object Storage)",id:"minio-object-storage",level:3},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"Metrics",id:"metrics",level:3},{value:"Alerting Rules",id:"alerting-rules",level:3},{value:"Admin CLI Commands",id:"admin-cli-commands",level:3},{value:"Client SDK Examples",id:"client-sdk-examples",level:2},{value:"Python SDK",id:"python-sdk",level:3},{value:"Go SDK",id:"go-sdk",level:3},{value:"Migration Path",id:"migration-path",level:2},{value:"Phase 1: Audit and Baseline (Week 1)",id:"phase-1-audit-and-baseline-week-1",level:3},{value:"Phase 2: Implement Defaults (Week 2-3)",id:"phase-2-implement-defaults-week-2-3",level:3},{value:"Phase 3: Enforcement and Monitoring (Week 4)",id:"phase-3-enforcement-and-monitoring-week-4",level:3},{value:"Phase 4: Optimization (Ongoing)",id:"phase-4-optimization-ongoing",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Mitigations",id:"mitigations",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:2},{value:"Alternative 1: Manual Cleanup Scripts",id:"alternative-1-manual-cleanup-scripts",level:3},{value:"Alternative 2: Infinite TTL by Default",id:"alternative-2-infinite-ttl-by-default",level:3},{value:"Alternative 3: Separate TTL Service",id:"alternative-3-separate-ttl-service",level:3},{value:"Related ADRs",id:"related-adrs",level:2},{value:"References",id:"references",level:2},{value:"Appendix: Default TTL Reference Table",id:"appendix-default-ttl-reference-table",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"adr-031-ttl-defaults-for-client-configured-dynamic-data",children:"ADR-031: TTL Defaults for Client-Configured Dynamic Data"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status"}),": Accepted\n",(0,t.jsx)(n.strong,{children:"Date"}),": 2025-10-08\n",(0,t.jsx)(n.strong,{children:"Decision Makers"}),": System Architecture Team\n",(0,t.jsx)(n.strong,{children:"Tags"}),": ",(0,t.jsx)(n.code,{children:"data-lifecycle"}),", ",(0,t.jsx)(n.code,{children:"cache"}),", ",(0,t.jsx)(n.code,{children:"cleanup"}),", ",(0,t.jsx)(n.code,{children:"operations"})]}),"\n",(0,t.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,t.jsx)(n.p,{children:"Prism manages dynamic data on behalf of clients across multiple backends (Redis cache, session storage, temporary records, etc.). Without proper Time-To-Live (TTL) policies, this data accumulates indefinitely, leading to:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Storage Exhaustion"}),": Backends run out of disk/memory"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Degradation"}),": Large datasets slow down queries and operations"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cost Overruns"}),": Cloud storage costs grow unchecked"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Stale Data"}),": Old data persists beyond its useful lifetime"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Operational Burden"}),": Manual cleanup becomes necessary"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Clients may not always specify TTL values when creating dynamic data, either due to oversight, lack of domain knowledge, or API design that doesn't enforce it."}),"\n",(0,t.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"We will enforce TTL policies on all client-configured dynamic data with sensible defaults when clients do not specify explicit TTL values."})}),"\n",(0,t.jsx)(n.h3,{id:"principles",children:"Principles"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"TTL by Default"}),": Every piece of dynamic data MUST have a TTL"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Client Override"}),": Clients can specify custom TTL values"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Backend-Specific Defaults"}),": Different backends have different appropriate default TTLs"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Pattern-Specific Defaults"}),": Data access patterns inform default TTL values"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitoring"}),": Track TTL distribution and expiration rates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Make defaults visible and well-documented"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"ttl-default-strategy",children:"TTL Default Strategy"}),"\n",(0,t.jsx)(n.h3,{id:"default-ttl-values-by-pattern",children:"Default TTL Values by Pattern"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Pattern"}),(0,t.jsx)(n.th,{children:"Backend"}),(0,t.jsx)(n.th,{children:"Default TTL"}),(0,t.jsx)(n.th,{children:"Rationale"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Cache"})}),(0,t.jsx)(n.td,{children:"Redis"}),(0,t.jsx)(n.td,{children:"15 minutes"}),(0,t.jsx)(n.td,{children:"Most cache hits occur within minutes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Session"})}),(0,t.jsx)(n.td,{children:"Redis"}),(0,t.jsx)(n.td,{children:"24 hours"}),(0,t.jsx)(n.td,{children:"Typical user session lifetime"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"PubSub"})}),(0,t.jsx)(n.td,{children:"NATS/Kafka"}),(0,t.jsx)(n.td,{children:"N/A"}),(0,t.jsx)(n.td,{children:"Messages consumed immediately"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"KeyValue"})}),(0,t.jsx)(n.td,{children:"PostgreSQL"}),(0,t.jsx)(n.td,{children:"30 days"}),(0,t.jsx)(n.td,{children:"Application data with moderate longevity"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"TimeSeries"})}),(0,t.jsx)(n.td,{children:"ClickHouse"}),(0,t.jsx)(n.td,{children:"90 days"}),(0,t.jsx)(n.td,{children:"Observability data retention standard"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Graph"})}),(0,t.jsx)(n.td,{children:"Neptune"}),(0,t.jsx)(n.td,{children:"Infinite"}),(0,t.jsx)(n.td,{children:"Relationships typically long-lived"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Vector Search"})}),(0,t.jsx)(n.td,{children:"Redis VSS"}),(0,t.jsx)(n.td,{children:"90 days"}),(0,t.jsx)(n.td,{children:"Embedding data for ML/search"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.strong,{children:"Object Store"})}),(0,t.jsx)(n.td,{children:"MinIO"}),(0,t.jsx)(n.td,{children:"90 days"}),(0,t.jsx)(n.td,{children:"Blob storage for artifacts/uploads"})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"ttl-precedence-rules",children:"TTL Precedence Rules"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Client-Specified TTL\n    \u2193 (if not provided)\nNamespace-Level Default TTL\n    \u2193 (if not configured)\nPattern-Specific Default TTL\n    \u2193 (fallback)\nSystem-Wide Default TTL (30 days)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"implementation-in-protobuf",children:"Implementation in Protobuf"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"// Client-specified TTL in requests\nmessage SetRequest {\n  string namespace = 1;\n  string key = 2;\n  bytes value = 3;\n\n  // Optional: Client-specified TTL in seconds\n  // If not provided, uses namespace or pattern defaults\n  optional int64 ttl_seconds = 4;\n\n  // Optional: Explicit infinite TTL (use with caution)\n  optional bool no_expiration = 5;\n}\n\n// Namespace configuration with TTL defaults\nmessage NamespaceConfig {\n  string name = 1;\n  string backend = 2;\n  string pattern = 3;\n\n  // Namespace-level TTL override (applies to all operations)\n  optional int64 default_ttl_seconds = 4;\n\n  // Allow clients to specify no expiration\n  bool allow_infinite_ttl = 5 [default = false];\n\n  // Warn when data approaches expiration\n  bool enable_ttl_warnings = 6 [default = true];\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"configuration-yaml-example",children:"Configuration YAML Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"namespaces:\n  - name: user-sessions\n    backend: redis\n    pattern: cache\n    default_ttl_seconds: 86400  # 24 hours\n    allow_infinite_ttl: false\n\n  - name: analytics-events\n    backend: clickhouse\n    pattern: timeseries\n    default_ttl_seconds: 7776000  # 90 days\n    enable_ttl_warnings: true\n\n  - name: permanent-records\n    backend: postgres\n    pattern: keyvalue\n    allow_infinite_ttl: true  # Explicit opt-in for infinite TTL\n"})}),"\n",(0,t.jsx)(n.h2,{id:"backend-specific-implementation",children:"Backend-Specific Implementation"}),"\n",(0,t.jsx)(n.h3,{id:"redis-cache-session-vector",children:"Redis (Cache, Session, Vector)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"// Rust implementation in Prism proxy\nasync fn set_with_ttl(\n    &self,\n    key: &str,\n    value: &[u8],\n    ttl: Option<Duration>,\n    config: &NamespaceConfig,\n) -> Result<()> {\n    let effective_ttl = ttl\n        .or(config.default_ttl)\n        .unwrap_or(DEFAULT_CACHE_TTL); // 15 minutes\n\n    self.redis\n        .set_ex(key, value, effective_ttl.as_secs() as usize)\n        .await\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"postgresql-keyvalue",children:"PostgreSQL (KeyValue)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- Table schema with TTL support\nCREATE TABLE keyvalue (\n    namespace VARCHAR(255) NOT NULL,\n    key VARCHAR(255) NOT NULL,\n    value BYTEA NOT NULL,\n    created_at TIMESTAMPTZ DEFAULT NOW(),\n    expires_at TIMESTAMPTZ NOT NULL, -- Always required\n    PRIMARY KEY (namespace, key)\n);\n\n-- Index for efficient TTL-based cleanup\nCREATE INDEX idx_keyvalue_expires ON keyvalue(expires_at)\nWHERE expires_at IS NOT NULL;\n\n-- Background job to delete expired records\nDELETE FROM keyvalue\nWHERE expires_at < NOW()\nAND expires_at IS NOT NULL;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"clickhouse-timeseries",children:"ClickHouse (TimeSeries)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",children:"-- ClickHouse table with TTL\nCREATE TABLE events (\n    timestamp DateTime64(9),\n    event_type LowCardinality(String),\n    namespace LowCardinality(String),\n    payload String\n)\nENGINE = MergeTree()\nPARTITION BY toYYYYMMDD(timestamp)\nORDER BY (namespace, event_type, timestamp)\nTTL timestamp + INTERVAL 90 DAY; -- Default 90 days\n"})}),"\n",(0,t.jsx)(n.h3,{id:"minio-object-storage",children:"MinIO (Object Storage)"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'# MinIO lifecycle policy\nlifecycle_config = {\n    "Rules": [\n        {\n            "ID": "default-ttl",\n            "Status": "Enabled",\n            "Expiration": {\n                "Days": 90  # Default 90 days\n            },\n            "Filter": {\n                "Prefix": "tmp/"  # Apply to temporary objects\n            }\n        }\n    ]\n}\nminio_client.set_bucket_lifecycle("prism-objects", lifecycle_config)\n'})}),"\n",(0,t.jsx)(n.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,t.jsx)(n.h3,{id:"metrics",children:"Metrics"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-protobuf",children:"message TTLMetrics {\n  string namespace = 1;\n\n  // TTL distribution\n  int64 items_with_ttl = 2;\n  int64 items_without_ttl = 3;  // Should be 0\n  int64 items_infinite_ttl = 4;\n\n  // Expiration stats\n  int64 expired_last_hour = 5;\n  int64 expiring_next_hour = 6;\n  int64 expiring_next_day = 7;\n\n  // Storage impact\n  int64 total_bytes = 8;\n  int64 bytes_to_expire_soon = 9;\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"alerting-rules",children:"Alerting Rules"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'# Prometheus alert rules\ngroups:\n  - name: ttl_alerts\n    rules:\n      - alert: HighInfiniteTTLRatio\n        expr: |\n          (prism_items_infinite_ttl / prism_items_total) > 0.1\n        for: 1h\n        annotations:\n          summary: "More than 10% of data has infinite TTL"\n\n      - alert: StorageGrowthUnbounded\n        expr: |\n          rate(prism_total_bytes[1d]) > 0 AND\n          rate(prism_expired_bytes[1d]) == 0\n        for: 6h\n        annotations:\n          summary: "Storage growing without expiration"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"admin-cli-commands",children:"Admin CLI Commands"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"# Show TTL distribution for namespace\nprism namespace describe my-app --show-ttl-stats\n\n# List items expiring soon\nprism data list my-app --expiring-within 24h\n\n# Override TTL for specific keys\nprism data set-ttl my-app key123 --ttl 1h\n\n# Disable expiration for specific item (requires permission)\nprism data set-ttl my-app key456 --infinite\n"})}),"\n",(0,t.jsx)(n.h2,{id:"client-sdk-examples",children:"Client SDK Examples"}),"\n",(0,t.jsx)(n.h3,{id:"python-sdk",children:"Python SDK"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:'from prism_sdk import PrismClient\n\nclient = PrismClient(namespace="user-sessions")\n\n# Explicit TTL (recommended)\nclient.set("session:abc123", session_data, ttl_seconds=3600)\n\n# Uses namespace default (24 hours for sessions)\nclient.set("session:def456", session_data)\n\n# Infinite TTL (requires namespace config: allow_infinite_ttl=true)\nclient.set("permanent:record", data, no_expiration=True)\n'})}),"\n",(0,t.jsx)(n.h3,{id:"go-sdk",children:"Go SDK"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-go",children:'client := prism.NewClient("user-sessions")\n\n// Explicit TTL\nclient.Set(ctx, "session:abc123", sessionData,\n    prism.WithTTL(1*time.Hour))\n\n// Uses namespace default\nclient.Set(ctx, "session:def456", sessionData)\n\n// Infinite TTL (opt-in required)\nclient.Set(ctx, "permanent:record", data,\n    prism.WithNoExpiration())\n'})}),"\n",(0,t.jsx)(n.h2,{id:"migration-path",children:"Migration Path"}),"\n",(0,t.jsx)(n.h3,{id:"phase-1-audit-and-baseline-week-1",children:"Phase 1: Audit and Baseline (Week 1)"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Audit existing data"}),": Identify data without TTL"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Baseline metrics"}),": Measure current storage usage and growth rates"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Document patterns"}),": Map data types to appropriate TTL ranges"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"phase-2-implement-defaults-week-2-3",children:"Phase 2: Implement Defaults (Week 2-3)"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Add protobuf fields"}),": ",(0,t.jsx)(n.code,{children:"ttl_seconds"}),", ",(0,t.jsx)(n.code,{children:"no_expiration"})]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Update namespace configs"}),": Set pattern-specific defaults"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Backend implementations"}),": Apply TTL at storage layer"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Generate SDKs"}),": Update client libraries with TTL support"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"phase-3-enforcement-and-monitoring-week-4",children:"Phase 3: Enforcement and Monitoring (Week 4)"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Enable TTL enforcement"}),": All new data gets TTL"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Backfill existing data"}),": Apply default TTL to legacy data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Deploy monitoring"}),": Grafana dashboards, Prometheus alerts"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Update API docs and client guides"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"phase-4-optimization-ongoing",children:"Phase 4: Optimization (Ongoing)"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Review TTL distributions"}),": Adjust defaults based on usage"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Client feedback"}),": Refine TTL ranges per use case"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Cost analysis"}),": Track storage cost reductions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"}),": Measure impact on backend performance"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,t.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Bounded Storage"}),": Data automatically expires, preventing unbounded growth"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Lower Costs"}),": Reduced storage requirements, especially in cloud environments"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Better Performance"}),": Smaller datasets improve query and scan performance"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Operational Safety"}),": No more manual cleanup scripts or emergency interventions"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Clear Expectations"}),": Clients understand data lifecycle from the start"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Breaking Change"}),": Existing clients may rely on infinite TTL behavior"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Migration Effort"}),": Backfilling TTL on existing data requires careful planning"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Complexity"}),": TTL precedence rules and overrides add API surface area"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Edge Cases"}),": Some use cases genuinely need infinite TTL (configuration, schemas)"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"mitigations",children:"Mitigations"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Gradual Rollout"}),": Enable TTL enforcement gradually, namespace by namespace"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Opt-In Infinite TTL"}),": Require explicit configuration for no-expiration data"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Warning Period"}),": Emit warnings before enforcing TTL on existing namespaces"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Documentation"}),": Comprehensive guides and migration playbooks"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Client Support"}),": SDK helpers for common TTL patterns"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,t.jsx)(n.h3,{id:"alternative-1-manual-cleanup-scripts",children:"Alternative 1: Manual Cleanup Scripts"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Approach"}),": Rely on periodic batch jobs to clean up old data."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Rejected because"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Reactive rather than proactive"}),"\n",(0,t.jsx)(n.li,{children:"Requires custom logic per backend"}),"\n",(0,t.jsx)(n.li,{children:"Risk of deleting wrong data"}),"\n",(0,t.jsx)(n.li,{children:"Operational burden"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"alternative-2-infinite-ttl-by-default",children:"Alternative 2: Infinite TTL by Default"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Approach"}),": Default to no expiration, require clients to opt-in to TTL."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Rejected because"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Clients often forget to set TTL"}),"\n",(0,t.jsx)(n.li,{children:"Storage grows unbounded"}),"\n",(0,t.jsx)(n.li,{children:'Contradicts "safe by default" principle'}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"alternative-3-separate-ttl-service",children:"Alternative 3: Separate TTL Service"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Approach"}),": Build a standalone service to manage TTL across backends."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Rejected because"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Additional operational complexity"}),"\n",(0,t.jsx)(n.li,{children:"Backends already support TTL natively"}),"\n",(0,t.jsx)(n.li,{children:"Adds latency to data operations"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"related-adrs",children:"Related ADRs"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"ADR-010: Redis Integration (Cache pattern TTL)"}),"\n",(0,t.jsx)(n.li,{children:"ADR-015: PostgreSQL Integration (KeyValue pattern TTL)"}),"\n",(0,t.jsx)(n.li,{children:"ADR-020: ClickHouse Integration (TimeSeries TTL)"}),"\n",(0,t.jsxs)(n.li,{children:["ADR-032: Object Storage Pattern (Blob storage TTL) ",(0,t.jsx)(n.em,{children:"(Pending)"})]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://redis.io/commands/expire/",children:"Redis EXPIRE command"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://wiki.postgresql.org/wiki/Deleting_expired_rows",children:"PostgreSQL DELETE with TTL"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree#table_engine-mergetree-ttl",children:"ClickHouse TTL"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://min.io/docs/minio/linux/administration/object-management/lifecycle-management.html",children:"MinIO Lifecycle Management"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html",children:"AWS DynamoDB TTL"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"appendix-default-ttl-reference-table",children:"Appendix: Default TTL Reference Table"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Use Case"}),(0,t.jsx)(n.th,{children:"Pattern"}),(0,t.jsx)(n.th,{children:"Backend"}),(0,t.jsx)(n.th,{children:"Suggested TTL"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"HTTP session storage"}),(0,t.jsx)(n.td,{children:"Cache"}),(0,t.jsx)(n.td,{children:"Redis"}),(0,t.jsx)(n.td,{children:"24 hours"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"API response cache"}),(0,t.jsx)(n.td,{children:"Cache"}),(0,t.jsx)(n.td,{children:"Redis"}),(0,t.jsx)(n.td,{children:"5-15 minutes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"User preferences"}),(0,t.jsx)(n.td,{children:"KeyValue"}),(0,t.jsx)(n.td,{children:"PostgreSQL"}),(0,t.jsx)(n.td,{children:"Infinite"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Temporary upload tokens"}),(0,t.jsx)(n.td,{children:"Cache"}),(0,t.jsx)(n.td,{children:"Redis"}),(0,t.jsx)(n.td,{children:"1 hour"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Observability metrics"}),(0,t.jsx)(n.td,{children:"TimeSeries"}),(0,t.jsx)(n.td,{children:"ClickHouse"}),(0,t.jsx)(n.td,{children:"90 days"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Application logs"}),(0,t.jsx)(n.td,{children:"TimeSeries"}),(0,t.jsx)(n.td,{children:"ClickHouse"}),(0,t.jsx)(n.td,{children:"30 days"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"ML feature vectors"}),(0,t.jsx)(n.td,{children:"Vector"}),(0,t.jsx)(n.td,{children:"Redis VSS"}),(0,t.jsx)(n.td,{children:"90 days"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"User profile cache"}),(0,t.jsx)(n.td,{children:"Cache"}),(0,t.jsx)(n.td,{children:"Redis"}),(0,t.jsx)(n.td,{children:"1 hour"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Rate limiting counters"}),(0,t.jsx)(n.td,{children:"Cache"}),(0,t.jsx)(n.td,{children:"Redis"}),(0,t.jsx)(n.td,{children:"1 minute"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Uploaded file artifacts"}),(0,t.jsx)(n.td,{children:"Object Store"}),(0,t.jsx)(n.td,{children:"MinIO"}),(0,t.jsx)(n.td,{children:"90 days"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Build artifacts (CI/CD)"}),(0,t.jsx)(n.td,{children:"Object Store"}),(0,t.jsx)(n.td,{children:"MinIO"}),(0,t.jsx)(n.td,{children:"30 days"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Database connection pool"}),(0,t.jsx)(n.td,{children:"N/A"}),(0,t.jsx)(n.td,{children:"Internal"}),(0,t.jsx)(n.td,{children:"10 minutes"})]})]})]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Status"}),": Accepted\n",(0,t.jsx)(n.strong,{children:"Next Steps"}),":"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Update namespace configuration schema with TTL fields"}),"\n",(0,t.jsx)(n.li,{children:"Implement TTL defaults in proxy for each backend"}),"\n",(0,t.jsx)(n.li,{children:"Add TTL metrics to monitoring dashboards"}),"\n",(0,t.jsx)(n.li,{children:"Document TTL best practices in client SDK guides"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>a});var s=i(6540);const t={},r=s.createContext(t);function l(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);