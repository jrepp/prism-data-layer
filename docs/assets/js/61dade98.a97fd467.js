"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[99999],{21574:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>u,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"adr-042","title":"AWS SQS Queue Backend Plugin","description":"Context","source":"@site/../docs-cms/adr/adr-042-sqs-queue-backend.md","sourceDirName":".","slug":"/adr-042","permalink":"/prism-data-layer/adr/adr-042","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-042-sqs-queue-backend.md","tags":[{"inline":true,"label":"backend","permalink":"/prism-data-layer/adr/tags/backend"},{"inline":true,"label":"queue","permalink":"/prism-data-layer/adr/tags/queue"},{"inline":true,"label":"sqs","permalink":"/prism-data-layer/adr/tags/sqs"},{"inline":true,"label":"aws","permalink":"/prism-data-layer/adr/tags/aws"},{"inline":true,"label":"plugin","permalink":"/prism-data-layer/adr/tags/plugin"},{"inline":true,"label":"messaging","permalink":"/prism-data-layer/adr/tags/messaging"}],"version":"current","frontMatter":{"date":"2025-10-09T00:00:00.000Z","deciders":"Platform Team","doc_uuid":"4b6223b5-4cb2-4523-8d66-afbdc2ed0b04","id":"adr-042","project_id":"prism-data-layer","status":"Proposed","tags":["backend","queue","sqs","aws","plugin","messaging"],"title":"AWS SQS Queue Backend Plugin"},"sidebar":"adrSidebar","previous":{"title":"Graph Database Backend Support \u2022 ADR-041","permalink":"/prism-data-layer/adr/adr-041"},"next":{"title":"Plugin Capability Discovery System \u2022 ADR-043","permalink":"/prism-data-layer/adr/adr-043"}}');var r=s(74848),t=s(28453);const a={date:new Date("2025-10-09T00:00:00.000Z"),deciders:"Platform Team",doc_uuid:"4b6223b5-4cb2-4523-8d66-afbdc2ed0b04",id:"adr-042",project_id:"prism-data-layer",status:"Proposed",tags:["backend","queue","sqs","aws","plugin","messaging"],title:"AWS SQS Queue Backend Plugin"},l=void 0,u={},o=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why SQS?",id:"why-sqs",level:3},{value:"When to Use SQS Backend",id:"when-to-use-sqs-backend",level:3},{value:"Queue Data Abstraction Layer",id:"queue-data-abstraction-layer",level:2},{value:"Core Operations",id:"core-operations",level:3},{value:"Example: Job Processing",id:"example-job-processing",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Plugin Architecture",id:"plugin-architecture",level:3},{value:"Queue Creation with Dead Letter Queue",id:"queue-creation-with-dead-letter-queue",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"1. Batch Operations",id:"1-batch-operations",level:3},{value:"2. Long Polling",id:"2-long-polling",level:3},{value:"3. Visibility Timeout Tuning",id:"3-visibility-timeout-tuning",level:3},{value:"4. Message Prefetching",id:"4-message-prefetching",level:3},{value:"Cost Optimization",id:"cost-optimization",level:2},{value:"Monitoring",id:"monitoring",level:2},{value:"CloudWatch Metrics",id:"cloudwatch-metrics",level:3},{value:"Dead Letter Queue Monitoring",id:"dead-letter-queue-monitoring",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"1. IAM Authentication",id:"1-iam-authentication",level:3},{value:"2. Encryption at Rest",id:"2-encryption-at-rest",level:3},{value:"3. Encryption in Transit",id:"3-encryption-in-transit",level:3},{value:"4. VPC Endpoints",id:"4-vpc-endpoints",level:3},{value:"Testing Strategy",id:"testing-strategy",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Migration Path",id:"migration-path",level:2},{value:"Phase 1: Basic Operations (Week 1)",id:"phase-1-basic-operations-week-1",level:3},{value:"Phase 2: Advanced Features (Week 2)",id:"phase-2-advanced-features-week-2",level:3},{value:"Phase 3: Management (Week 3)",id:"phase-3-management-week-3",level:3},{value:"Phase 4: Production (Week 4)",id:"phase-4-production-week-4",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(n.p,{children:"Prism requires a queue backend for asynchronous message processing use cases such as:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Job Processing"}),": Background tasks, batch jobs, workflows"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event-Driven Architecture"}),": Decoupling microservices"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Load Leveling"}),": Buffering requests during traffic spikes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Retry Logic"}),": Automatic retries with exponential backoff"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dead Letter Queues"}),": Handling failed messages"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"AWS SQS (Simple Queue Service)"})," is a fully managed message queuing service that provides:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Standard Queues"}),": At-least-once delivery, best-effort ordering, unlimited throughput"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FIFO Queues"}),": Exactly-once processing, strict ordering, 3,000 msg/sec with batching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dead Letter Queues"}),": Automatic handling of failed messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Long Polling"}),": Reduces empty receives and costs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Visibility Timeout"}),": Prevents duplicate processing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Message Attributes"}),": Metadata for routing and filtering"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsxs)(n.p,{children:["Implement an ",(0,r.jsx)(n.strong,{children:"AWS SQS Queue Backend Plugin"})," for Prism that provides:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Queue Abstraction Layer"}),": Unified API for send/receive/delete operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Standard + FIFO Support"}),": Both queue types available"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Batch Operations"}),": Send/receive up to 10 messages per API call"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dead Letter Queues"}),": Automatic retry and failure handling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Long Polling"}),": Efficient message retrieval"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"AWS Integration"}),": IAM authentication, CloudWatch metrics, VPC endpoints"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,r.jsx)(n.h3,{id:"why-sqs",children:"Why SQS?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Fully managed (no infrastructure to manage)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 AWS native (seamless integration with Lambda, ECS, etc.)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Unlimited scalability (standard queues)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Low cost ($0.40 per million requests)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 High availability (distributed architecture)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Simple API (no complex broker setup)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Dead letter queues (built-in failure handling)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u274c At-least-once delivery for standard queues (duplicates possible)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c No message routing (unlike RabbitMQ exchanges)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Limited throughput for FIFO queues (3,000 msg/sec)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c AWS vendor lock-in"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Alternatives Considered"}),":"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Queue System"}),(0,r.jsx)(n.th,{children:"Pros"}),(0,r.jsx)(n.th,{children:"Cons"}),(0,r.jsx)(n.th,{children:"Verdict"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"RabbitMQ"})}),(0,r.jsx)(n.td,{children:"Rich routing, mature, self-hostable"}),(0,r.jsx)(n.td,{children:"Requires operational expertise, no managed AWS service"}),(0,r.jsx)(n.td,{children:"\u274c Rejected: Higher ops burden"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Kafka"})}),(0,r.jsx)(n.td,{children:"High throughput, event streaming, replay"}),(0,r.jsx)(n.td,{children:"Over-engineered for simple queueing, higher cost"}),(0,r.jsx)(n.td,{children:"\u274c Rejected: Too complex for job queues"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"AWS SNS"})}),(0,r.jsx)(n.td,{children:"Pub/sub fanout, push-based"}),(0,r.jsx)(n.td,{children:"Not a queue (no retry logic), no message persistence"}),(0,r.jsx)(n.td,{children:"\u274c Rejected: Different use case"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Redis"})}),(0,r.jsx)(n.td,{children:"Fast, simple, key-value store"}),(0,r.jsx)(n.td,{children:"Not durable, requires self-management"}),(0,r.jsx)(n.td,{children:"\u274c Rejected: Not purpose-built for queues"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"SQS"})}),(0,r.jsx)(n.td,{children:"Managed, simple, cost-effective, AWS-native"}),(0,r.jsx)(n.td,{children:"At-least-once delivery, no routing"}),(0,r.jsxs)(n.td,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Accepted"}),": Best for AWS job queues"]})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"when-to-use-sqs-backend",children:"When to Use SQS Backend"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use SQS for"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Background job processing (email sending, image processing)"}),"\n",(0,r.jsx)(n.li,{children:"Asynchronous task queues (video transcoding, report generation)"}),"\n",(0,r.jsx)(n.li,{children:"Decoupling microservices (order service \u2192 payment service)"}),"\n",(0,r.jsx)(n.li,{children:"Load leveling (buffer traffic spikes)"}),"\n",(0,r.jsx)(n.li,{children:"Retry logic (handle transient failures)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Don't use SQS for"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Event streaming with replay (use Kafka)"}),"\n",(0,r.jsx)(n.li,{children:"Real-time notifications (use WebSockets or SNS)"}),"\n",(0,r.jsx)(n.li,{children:"Complex routing logic (use RabbitMQ)"}),"\n",(0,r.jsx)(n.li,{children:"Transactions across queues (SQS has no distributed transactions)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"queue-data-abstraction-layer",children:"Queue Data Abstraction Layer"}),"\n",(0,r.jsx)(n.h3,{id:"core-operations",children:"Core Operations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.queue.v1;\n\nservice QueueService {\n  // Basic operations\n  rpc SendMessage(SendMessageRequest) returns (SendMessageResponse);\n  rpc ReceiveMessage(ReceiveMessageRequest) returns (ReceiveMessageResponse);\n  rpc DeleteMessage(DeleteMessageRequest) returns (DeleteMessageResponse);\n\n  // Batch operations\n  rpc SendMessageBatch(SendMessageBatchRequest) returns (SendMessageBatchResponse);\n  rpc DeleteMessageBatch(DeleteMessageBatchRequest) returns (DeleteMessageBatchResponse);\n\n  // Queue management\n  rpc CreateQueue(CreateQueueRequest) returns (CreateQueueResponse);\n  rpc DeleteQueue(DeleteQueueRequest) returns (DeleteQueueResponse);\n  rpc GetQueueAttributes(GetQueueAttributesRequest) returns (GetQueueAttributesResponse);\n\n  // Dead letter queue\n  rpc RedriveMessages(RedriveMessagesRequest) returns (RedriveMessagesResponse);\n}\n\nmessage SendMessageRequest {\n  string queue_name = 1;\n  string message_body = 2;  // Payload (max 256 KB)\n\n  // Optional attributes\n  int32 delay_seconds = 3;  // 0-900 seconds\n  map<string, MessageAttribute> attributes = 4;\n\n  // FIFO-specific\n  string message_group_id = 10;  // Required for FIFO queues\n  string message_deduplication_id = 11;  // Optional (SQS can auto-generate)\n}\n\nmessage MessageAttribute {\n  oneof value {\n    string string_value = 1;\n    int64 number_value = 2;\n    bytes binary_value = 3;\n  }\n  string data_type = 4;  // "String", "Number", "Binary"\n}\n\nmessage SendMessageResponse {\n  string message_id = 1;\n  string md5_of_body = 2;  // Checksum for verification\n  string sequence_number = 3;  // FIFO-specific\n}\n\nmessage ReceiveMessageRequest {\n  string queue_name = 1;\n  int32 max_messages = 2;  // 1-10 messages\n  int32 visibility_timeout = 3;  // 0-43200 seconds (12 hours)\n  int32 wait_time_seconds = 4;  // 0-20 seconds (long polling)\n\n  repeated string attribute_names = 10;  // Return specific attributes\n}\n\nmessage ReceiveMessageResponse {\n  repeated Message messages = 1;\n}\n\nmessage Message {\n  string message_id = 1;\n  string receipt_handle = 2;  // Required for delete\n  string body = 3;\n  map<string, MessageAttribute> attributes = 4;\n\n  int32 receive_count = 10;  // How many times message was received\n  google.protobuf.Timestamp first_receive_timestamp = 11;\n}\n\nmessage DeleteMessageRequest {\n  string queue_name = 1;\n  string receipt_handle = 2;  // From ReceiveMessageResponse\n}\n\nmessage DeleteMessageResponse {\n  bool success = 1;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-job-processing",children:"Example: Job Processing"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Producer"})," (send job to queue):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'import pb "prism/queue/v1"\n\nfunc submitJob(client pb.QueueServiceClient, jobData string) error {\n    req := &pb.SendMessageRequest{\n        QueueName:   "image-processing-queue",\n        MessageBody: jobData,  // JSON: {"image_url": "s3://...", "filters": ["resize", "watermark"]}\n        Attributes: map[string]*pb.MessageAttribute{\n            "JobType": {Value: &pb.MessageAttribute_StringValue{StringValue: "image_processing"}},\n            "Priority": {Value: &pb.MessageAttribute_NumberValue{NumberValue: 5}},\n        },\n    }\n\n    resp, err := client.SendMessage(context.Background(), req)\n    if err != nil {\n        return fmt.Errorf("failed to send message: %w", err)\n    }\n\n    log.Printf("Job submitted: %s", resp.MessageId)\n    return nil\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Consumer"})," (process jobs from queue):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func processJobs(client pb.QueueServiceClient) {\n    for {\n        // Receive messages (long polling with 20s wait)\n        req := &pb.ReceiveMessageRequest{\n            QueueName:         "image-processing-queue",\n            MaxMessages:       10,  // Batch of 10\n            VisibilityTimeout: 300, // 5 minutes to process\n            WaitTimeSeconds:   20,  // Long polling\n        }\n\n        resp, err := client.ReceiveMessage(context.Background(), req)\n        if err != nil {\n            log.Printf("Error receiving messages: %v", err)\n            continue\n        }\n\n        // Process each message\n        for _, msg := range resp.Messages {\n            if err := processMessage(msg); err != nil {\n                log.Printf("Failed to process message %s: %v", msg.MessageId, err)\n                continue  // Message will be redelivered after visibility timeout\n            }\n\n            // Delete message after successful processing\n            deleteReq := &pb.DeleteMessageRequest{\n                QueueName:     "image-processing-queue",\n                ReceiptHandle: msg.ReceiptHandle,\n            }\n            client.DeleteMessage(context.Background(), deleteReq)\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"plugin-architecture",children:"Plugin Architecture"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// patterns/sqs/plugin.go\npackage sqs\n\nimport (\n    "context"\n    "github.com/aws/aws-sdk-go-v2/aws"\n    "github.com/aws/aws-sdk-go-v2/service/sqs"\n)\n\ntype SQSPlugin struct {\n    config    *SQSConfig\n    client    *sqs.Client\n    namespace string\n}\n\ntype SQSConfig struct {\n    Region         string\n    QueuePrefix    string  // Prefix for queue names (e.g., "prism-prod-")\n    EnableDLQ      bool    // Enable dead letter queues\n    MaxRetries     int     // Max receive count before DLQ\n    FifoEnabled    bool    // Use FIFO queues by default\n}\n\nfunc (p *SQSPlugin) SendMessage(ctx context.Context, req *SendMessageRequest) (*SendMessageResponse, error) {\n    queueURL, err := p.getQueueURL(ctx, req.QueueName)\n    if err != nil {\n        return nil, fmt.Errorf("failed to get queue URL: %w", err)\n    }\n\n    input := &sqs.SendMessageInput{\n        QueueUrl:    aws.String(queueURL),\n        MessageBody: aws.String(req.MessageBody),\n    }\n\n    // Optional delay\n    if req.DelaySeconds > 0 {\n        input.DelaySeconds = aws.Int32(req.DelaySeconds)\n    }\n\n    // Message attributes\n    if len(req.Attributes) > 0 {\n        input.MessageAttributes = p.convertAttributes(req.Attributes)\n    }\n\n    // FIFO-specific\n    if req.MessageGroupId != "" {\n        input.MessageGroupId = aws.String(req.MessageGroupId)\n    }\n    if req.MessageDeduplicationId != "" {\n        input.MessageDeduplicationId = aws.String(req.MessageDeduplicationId)\n    }\n\n    result, err := p.client.SendMessage(ctx, input)\n    if err != nil {\n        return nil, fmt.Errorf("failed to send message: %w", err)\n    }\n\n    return &SendMessageResponse{\n        MessageId:      aws.ToString(result.MessageId),\n        Md5OfBody:      aws.ToString(result.MD5OfMessageBody),\n        SequenceNumber: aws.ToString(result.SequenceNumber),\n    }, nil\n}\n\nfunc (p *SQSPlugin) ReceiveMessage(ctx context.Context, req *ReceiveMessageRequest) (*ReceiveMessageResponse, error) {\n    queueURL, err := p.getQueueURL(ctx, req.QueueName)\n    if err != nil {\n        return nil, fmt.Errorf("failed to get queue URL: %w", err)\n    }\n\n    input := &sqs.ReceiveMessageInput{\n        QueueUrl:            aws.String(queueURL),\n        MaxNumberOfMessages: aws.Int32(req.MaxMessages),\n        VisibilityTimeout:   aws.Int32(req.VisibilityTimeout),\n        WaitTimeSeconds:     aws.Int32(req.WaitTimeSeconds),  // Long polling\n        AttributeNames:      []types.QueueAttributeName{types.QueueAttributeNameAll},\n        MessageAttributeNames: []string{"All"},\n    }\n\n    result, err := p.client.ReceiveMessage(ctx, input)\n    if err != nil {\n        return nil, fmt.Errorf("failed to receive messages: %w", err)\n    }\n\n    messages := make([]*Message, len(result.Messages))\n    for i, msg := range result.Messages {\n        messages[i] = &Message{\n            MessageId:     aws.ToString(msg.MessageId),\n            ReceiptHandle: aws.ToString(msg.ReceiptHandle),\n            Body:          aws.ToString(msg.Body),\n            Attributes:    p.convertMessageAttributes(msg.MessageAttributes),\n        }\n    }\n\n    return &ReceiveMessageResponse{Messages: messages}, nil\n}\n\nfunc (p *SQSPlugin) DeleteMessage(ctx context.Context, req *DeleteMessageRequest) (*DeleteMessageResponse, error) {\n    queueURL, err := p.getQueueURL(ctx, req.QueueName)\n    if err != nil {\n        return nil, fmt.Errorf("failed to get queue URL: %w", err)\n    }\n\n    _, err = p.client.DeleteMessage(ctx, &sqs.DeleteMessageInput{\n        QueueUrl:      aws.String(queueURL),\n        ReceiptHandle: aws.String(req.ReceiptHandle),\n    })\n\n    return &DeleteMessageResponse{Success: err == nil}, err\n}\n\nfunc (p *SQSPlugin) SendMessageBatch(ctx context.Context, req *SendMessageBatchRequest) (*SendMessageBatchResponse, error) {\n    queueURL, err := p.getQueueURL(ctx, req.QueueName)\n    if err != nil {\n        return nil, fmt.Errorf("failed to get queue URL: %w", err)\n    }\n\n    // Build batch entries (max 10 per request)\n    entries := make([]types.SendMessageBatchRequestEntry, len(req.Messages))\n    for i, msg := range req.Messages {\n        entries[i] = types.SendMessageBatchRequestEntry{\n            Id:          aws.String(fmt.Sprintf("msg-%d", i)),\n            MessageBody: aws.String(msg.MessageBody),\n        }\n\n        if msg.DelaySeconds > 0 {\n            entries[i].DelaySeconds = aws.Int32(msg.DelaySeconds)\n        }\n\n        if msg.MessageGroupId != "" {\n            entries[i].MessageGroupId = aws.String(msg.MessageGroupId)\n        }\n    }\n\n    result, err := p.client.SendMessageBatch(ctx, &sqs.SendMessageBatchInput{\n        QueueUrl: aws.String(queueURL),\n        Entries:  entries,\n    })\n\n    if err != nil {\n        return nil, fmt.Errorf("failed to send batch: %w", err)\n    }\n\n    // Map results\n    responses := make([]*SendMessageResponse, len(result.Successful))\n    for i, success := range result.Successful {\n        responses[i] = &SendMessageResponse{\n            MessageId:      aws.ToString(success.MessageId),\n            Md5OfBody:      aws.ToString(success.MD5OfMessageBody),\n            SequenceNumber: aws.ToString(success.SequenceNumber),\n        }\n    }\n\n    return &SendMessageBatchResponse{\n        Successful: responses,\n        Failed:     len(result.Failed),\n    }, nil\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"queue-creation-with-dead-letter-queue",children:"Queue Creation with Dead Letter Queue"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func (p *SQSPlugin) CreateQueue(ctx context.Context, req *CreateQueueRequest) (*CreateQueueResponse, error) {\n    queueName := p.config.QueuePrefix + req.QueueName\n\n    // Determine queue type (standard or FIFO)\n    if req.FifoQueue || p.config.FifoEnabled {\n        queueName += ".fifo"\n    }\n\n    attributes := map[string]string{\n        "VisibilityTimeout":            "300",  // 5 minutes\n        "MessageRetentionPeriod":       "345600",  // 4 days\n        "ReceiveMessageWaitTimeSeconds": "20",  // Long polling\n    }\n\n    // FIFO-specific attributes\n    if req.FifoQueue {\n        attributes["FifoQueue"] = "true"\n        attributes["ContentBasedDeduplication"] = "true"  // Auto-generate dedup IDs\n    }\n\n    // Create main queue\n    createResult, err := p.client.CreateQueue(ctx, &sqs.CreateQueueInput{\n        QueueName:  aws.String(queueName),\n        Attributes: attributes,\n    })\n    if err != nil {\n        return nil, fmt.Errorf("failed to create queue: %w", err)\n    }\n\n    queueURL := aws.ToString(createResult.QueueUrl)\n\n    // Create dead letter queue if enabled\n    if p.config.EnableDLQ {\n        dlqName := queueName + "-dlq"\n        dlqResult, err := p.client.CreateQueue(ctx, &sqs.CreateQueueInput{\n            QueueName:  aws.String(dlqName),\n            Attributes: attributes,  // Same config as main queue\n        })\n        if err != nil {\n            return nil, fmt.Errorf("failed to create DLQ: %w", err)\n        }\n\n        // Get DLQ ARN\n        dlqAttrs, err := p.client.GetQueueAttributes(ctx, &sqs.GetQueueAttributesInput{\n            QueueUrl:       dlqResult.QueueUrl,\n            AttributeNames: []types.QueueAttributeName{types.QueueAttributeNameQueueArn},\n        })\n        if err != nil {\n            return nil, fmt.Errorf("failed to get DLQ ARN: %w", err)\n        }\n\n        dlqArn := dlqAttrs.Attributes[string(types.QueueAttributeNameQueueArn)]\n\n        // Configure redrive policy on main queue\n        redrivePolicy := fmt.Sprintf(`{"maxReceiveCount":"%d","deadLetterTargetArn":"%s"}`,\n            p.config.MaxRetries, dlqArn)\n\n        _, err = p.client.SetQueueAttributes(ctx, &sqs.SetQueueAttributesInput{\n            QueueUrl: aws.String(queueURL),\n            Attributes: map[string]string{\n                "RedrivePolicy": redrivePolicy,\n            },\n        })\n        if err != nil {\n            return nil, fmt.Errorf("failed to set redrive policy: %w", err)\n        }\n    }\n\n    return &CreateQueueResponse{\n        QueueUrl:  queueURL,\n        QueueName: queueName,\n    }, nil\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"1-batch-operations",children:"1. Batch Operations"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Always batch when possible"})," to reduce API calls and costs:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Bad: Individual sends (10 API calls)\nfor i := 0; i < 10; i++ {\n    client.SendMessage(ctx, &SendMessageRequest{...})\n}\n\n// Good: Batch send (1 API call)\nclient.SendMessageBatch(ctx, &SendMessageBatchRequest{\n    Messages: [...10 messages...],\n})\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cost savings"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Individual sends: 10 \xd7 $0.0000004 = $0.000004"}),"\n",(0,r.jsx)(n.li,{children:"Batch send: 1 \xd7 $0.0000004 = $0.0000004 (10x cheaper)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-long-polling",children:"2. Long Polling"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Use long polling"})," to reduce empty receives:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Bad: Short polling (immediate return if empty)\nreq := &ReceiveMessageRequest{\n    QueueName:       "jobs",\n    WaitTimeSeconds: 0,  // Short polling\n}\n\n// Good: Long polling (wait up to 20s for messages)\nreq := &ReceiveMessageRequest{\n    QueueName:       "jobs",\n    WaitTimeSeconds: 20,  // Long polling\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Benefits"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reduces empty receives by up to 99%"}),"\n",(0,r.jsx)(n.li,{children:"Lowers API costs"}),"\n",(0,r.jsx)(n.li,{children:"Lowers latency (immediate notification of new messages)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-visibility-timeout-tuning",children:"3. Visibility Timeout Tuning"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Set visibility timeout based on processing time"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Processing takes ~2 minutes on average\nreq := &ReceiveMessageRequest{\n    QueueName:         "jobs",\n    VisibilityTimeout: 300,  // 5 minutes (2x processing time)\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Too short"}),": Message redelivered before processing completes\n",(0,r.jsx)(n.strong,{children:"Too long"}),": Failed messages delayed unnecessarily"]}),"\n",(0,r.jsx)(n.h3,{id:"4-message-prefetching",children:"4. Message Prefetching"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Prefetch multiple messages"})," to keep workers busy:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// Worker pool with 10 workers\nconst numWorkers = 10\n\nfor {\n    req := &ReceiveMessageRequest{\n        QueueName:   "jobs",\n        MaxMessages: 10,  // Fetch 10 messages (one per worker)\n    }\n\n    resp, err := client.ReceiveMessage(ctx, req)\n    for _, msg := range resp.Messages {\n        workerPool.Submit(func() {\n            processMessage(msg)\n        })\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"cost-optimization",children:"Cost Optimization"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"SQS Pricing"})," (us-east-1, as of 2025):"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Standard Queue"}),": $0.40 per million requests (first 1M free/month)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"FIFO Queue"}),": $0.50 per million requests (no free tier)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Data Transfer"}),": $0.09/GB out to internet (free within AWS)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Optimization Strategies"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use batch operations"})," (10x cheaper per message)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Enable long polling"})," (reduces empty receives)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Delete messages promptly"})," (avoid unnecessary receives)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Use standard queues"})," unless ordering is critical"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Leverage free tier"})," (1M requests/month)"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example Cost"})," (standard queue):"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Sends"}),": 10M messages/month = 10 requests = $0.004"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Receives"}),": 10M long polls = 10 requests = $0.004"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deletes"}),": 10M deletes = 10 requests = $0.004"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Total"}),": $0.012/month for 10M messages (with batching)"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Compare to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Without batching"}),": 30M requests = $12/month (1000x more!)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"monitoring",children:"Monitoring"}),"\n",(0,r.jsx)(n.h3,{id:"cloudwatch-metrics",children:"CloudWatch Metrics"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"metrics:\n  - sqs_approximate_number_of_messages_visible      # Messages in queue\n  - sqs_approximate_age_of_oldest_message          # Age of oldest message\n  - sqs_number_of_messages_sent                    # Send rate\n  - sqs_number_of_messages_received                # Receive rate\n  - sqs_number_of_messages_deleted                 # Delete rate\n  - sqs_approximate_number_of_messages_not_visible # In-flight messages\n\nalerts:\n  - metric: sqs_approximate_number_of_messages_visible\n    threshold: 1000\n    action: scale_up_workers\n\n  - metric: sqs_approximate_age_of_oldest_message\n    threshold: 3600  # 1 hour\n    action: alert_ops_team\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dead-letter-queue-monitoring",children:"Dead Letter Queue Monitoring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'dlq_alerts:\n  - queue: image-processing-dlq\n    metric: sqs_approximate_number_of_messages_visible\n    threshold: 10\n    action: alert_devops_team\n    message: "10+ messages in DLQ, investigate failures"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"1-iam-authentication",children:"1. IAM Authentication"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "Version": "2012-10-17",\n  "Statement": [\n    {\n      "Effect": "Allow",\n      "Action": [\n        "sqs:SendMessage",\n        "sqs:ReceiveMessage",\n        "sqs:DeleteMessage",\n        "sqs:GetQueueAttributes"\n      ],\n      "Resource": "arn:aws:sqs:us-east-1:123456789012:prism-*"\n    }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-encryption-at-rest",children:"2. Encryption at Rest"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'attributes := map[string]string{\n    "KmsMasterKeyId": "arn:aws:kms:us-east-1:123456789012:key/abc-123",  // Use KMS\n    "KmsDataKeyReusePeriodSeconds": "300",  // 5 minutes\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-encryption-in-transit",children:"3. Encryption in Transit"}),"\n",(0,r.jsx)(n.p,{children:"All SQS communication uses HTTPS (TLS 1.2+)."}),"\n",(0,r.jsx)(n.h3,{id:"4-vpc-endpoints",children:"4. VPC Endpoints"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# Deploy SQS VPC endpoint for private access\nvpc_endpoint:\n  service_name: com.amazonaws.us-east-1.sqs\n  vpc_id: vpc-abc123\n  subnet_ids: [subnet-1, subnet-2]\n  security_groups: [sg-prism]\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,r.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func TestSendMessage(t *testing.T) {\n    mockSQS := &MockSQSClient{}\n    plugin := &SQSPlugin{client: mockSQS}\n\n    req := &SendMessageRequest{\n        QueueName:   "test-queue",\n        MessageBody: "test message",\n    }\n\n    resp, err := plugin.SendMessage(context.Background(), req)\n    require.NoError(t, err)\n    assert.NotEmpty(t, resp.MessageId)\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func TestQueueRoundTrip(t *testing.T) {\n    plugin := setupRealSQS(t)  // Connect to test SQS queue\n\n    // Send message\n    sendReq := &SendMessageRequest{\n        QueueName:   "test-queue",\n        MessageBody: "integration test",\n    }\n    sendResp, err := plugin.SendMessage(context.Background(), sendReq)\n    require.NoError(t, err)\n\n    // Receive message\n    recvReq := &ReceiveMessageRequest{\n        QueueName:   "test-queue",\n        MaxMessages: 1,\n    }\n    recvResp, err := plugin.ReceiveMessage(context.Background(), recvReq)\n    require.NoError(t, err)\n    assert.Len(t, recvResp.Messages, 1)\n    assert.Equal(t, "integration test", recvResp.Messages[0].Body)\n\n    // Delete message\n    deleteReq := &DeleteMessageRequest{\n        QueueName:     "test-queue",\n        ReceiptHandle: recvResp.Messages[0].ReceiptHandle,\n    }\n    _, err = plugin.DeleteMessage(context.Background(), deleteReq)\n    require.NoError(t, err)\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"migration-path",children:"Migration Path"}),"\n",(0,r.jsx)(n.h3,{id:"phase-1-basic-operations-week-1",children:"Phase 1: Basic Operations (Week 1)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement SendMessage, ReceiveMessage, DeleteMessage"}),"\n",(0,r.jsx)(n.li,{children:"IAM authentication"}),"\n",(0,r.jsx)(n.li,{children:"Standard queues only"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-2-advanced-features-week-2",children:"Phase 2: Advanced Features (Week 2)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Batch operations"}),"\n",(0,r.jsx)(n.li,{children:"FIFO queue support"}),"\n",(0,r.jsx)(n.li,{children:"Long polling optimization"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-3-management-week-3",children:"Phase 3: Management (Week 3)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"CreateQueue with DLQ"}),"\n",(0,r.jsx)(n.li,{children:"Queue attribute management"}),"\n",(0,r.jsx)(n.li,{children:"Redrive messages from DLQ"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-4-production-week-4",children:"Phase 4: Production (Week 4)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"CloudWatch integration"}),"\n",(0,r.jsx)(n.li,{children:"Cost optimization"}),"\n",(0,r.jsx)(n.li,{children:"Performance tuning"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,r.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Fully managed (no queue server to operate)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Highly available (distributed architecture)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Cost-effective ($0.40 per million requests)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Simple API (easy to use)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Dead letter queues (automatic failure handling)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u274c At-least-once delivery (duplicates possible)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c No message routing (basic queue only)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c FIFO throughput limit (3,000 msg/sec)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c AWS vendor lock-in"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\ud83d\udd04 Two queue types (standard vs FIFO) adds complexity but flexibility"}),"\n",(0,r.jsx)(n.li,{children:"\ud83d\udd04 Visibility timeout requires tuning per use case"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/sqs/",children:"AWS SQS Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-best-practices.html",children:"SQS Best Practices"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/FIFO-queues.html",children:"SQS FIFO Queues"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-dead-letter-queues.html",children:"SQS Dead Letter Queues"})}),"\n",(0,r.jsx)(n.li,{children:"ADR-005: Backend Plugin Architecture"}),"\n",(0,r.jsx)(n.li,{children:"ADR-025: Container Plugin Model"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2025-10-09: Initial proposal for AWS SQS queue backend plugin"}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(96540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);