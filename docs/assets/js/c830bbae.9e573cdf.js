"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[7489],{28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>c});var s=r(96540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}},49319:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"adr-023","title":"gRPC-First Interface Design","description":"Context","source":"@site/../docs-cms/adr/adr-023-grpc-first-interface-design.md","sourceDirName":".","slug":"/adr-023","permalink":"/prism-data-layer/adr/adr-023","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-023-grpc-first-interface-design.md","tags":[{"inline":true,"label":"architecture","permalink":"/prism-data-layer/adr/tags/architecture"},{"inline":true,"label":"grpc","permalink":"/prism-data-layer/adr/tags/grpc"},{"inline":true,"label":"performance","permalink":"/prism-data-layer/adr/tags/performance"},{"inline":true,"label":"api-design","permalink":"/prism-data-layer/adr/tags/api-design"}],"version":"current","frontMatter":{"date":"2025-10-07T00:00:00.000Z","deciders":"Core Team","doc_uuid":"c58a9d5a-4fee-45d4-9825-51207d3de59b","id":"adr-023","project_id":"prism-data-layer","status":"Accepted","tags":["architecture","grpc","performance","api-design"],"title":"gRPC-First Interface Design"},"sidebar":"adrSidebar","previous":{"title":"Dynamic Client Configuration System \u2022 ADR-022","permalink":"/prism-data-layer/adr/adr-022"},"next":{"title":"Layered Interface Hierarchy \u2022 ADR-024","permalink":"/prism-data-layer/adr/adr-024"}}');var t=r(74848),i=r(28453);const a={date:new Date("2025-10-07T00:00:00.000Z"),deciders:"Core Team",doc_uuid:"c58a9d5a-4fee-45d4-9825-51207d3de59b",id:"adr-023",project_id:"prism-data-layer",status:"Accepted",tags:["architecture","grpc","performance","api-design"],title:"gRPC-First Interface Design"},c=void 0,o={},l=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why gRPC",id:"why-grpc",level:3},{value:"Architecture",id:"architecture",level:3}];function d(e){const n={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",readrequest:"readrequest",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,t.jsx)(n.p,{children:"Prism needs a high-performance, type-safe API for client-server communication:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Efficient binary protocol for low latency"}),"\n",(0,t.jsx)(n.li,{children:"Strong typing with code generation"}),"\n",(0,t.jsx)(n.li,{children:"Streaming support for large datasets"}),"\n",(0,t.jsx)(n.li,{children:"HTTP/2 multiplexing for concurrent requests"}),"\n",(0,t.jsx)(n.li,{children:"Cross-language client support"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance"}),": Sub-millisecond overhead, 10k+ RPS per connection"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Type safety"}),": Compile-time validation of requests/responses"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Streaming"}),": Bidirectional streaming for pub/sub and pagination"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Discoverability"}),": Self-documenting API via protobuf"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Evolution"}),": Backward-compatible API changes"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.strong,{children:"gRPC as the primary interface"})," for Prism data access layer:"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"gRPC over HTTP/2"}),": Binary protocol with multiplexing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Protobuf messages"}),": All requests/responses in protobuf"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Streaming first-class"}),": Unary, server-streaming, client-streaming, bidirectional"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"No REST initially"}),": Focus on gRPC, add REST gateway later if needed"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Service-per-pattern"}),": Separate gRPC services for each access pattern"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,t.jsx)(n.h3,{id:"why-grpc",children:"Why gRPC"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Performance benefits:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Binary serialization (smaller payloads than JSON)"}),"\n",(0,t.jsx)(n.li,{children:"HTTP/2 multiplexing (multiple requests per connection)"}),"\n",(0,t.jsx)(n.li,{children:"Header compression (reduces overhead)"}),"\n",(0,t.jsx)(n.li,{children:"Connection reuse (lower latency)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Developer experience:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Code generation for multiple languages"}),"\n",(0,t.jsx)(n.li,{children:"Type safety at compile time"}),"\n",(0,t.jsxs)(n.li,{children:["Self-documenting via ",(0,t.jsx)(n.code,{children:".proto"})," files"]}),"\n",(0,t.jsx)(n.li,{children:"Built-in deadline/timeout support"}),"\n",(0,t.jsx)(n.li,{children:"Rich error model with status codes"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Streaming support:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Server streaming for pagination and pub/sub"}),"\n",(0,t.jsx)(n.li,{children:"Client streaming for batch uploads"}),"\n",(0,t.jsx)(n.li,{children:"Bidirectional streaming for real-time communication"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,t.jsx)(n.p,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                  Prism gRPC Server                      \u2502\n\u2502                   (Port 8980)                           \u2502\n\u2502                                                           \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502              gRPC Services                       \u2502   \u2502\n\u2502  \u2502                                                   \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502   \u2502\n\u2502  \u2502  \u2502 ConfigService\u2502  \u2502 SessionService\u2502            \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502   \u2502\n\u2502  \u2502                                                   \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502   \u2502\n\u2502  \u2502  \u2502  QueueService\u2502  \u2502 PubSubService\u2502            \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502   \u2502\n\u2502  \u2502                                                   \u2502   \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502   \u2502\n\u2502  \u2502  \u2502 ReaderService\u2502  \u2502TransactService\u2502            \u2502   \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518            \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u2502 HTTP/2 + Protobuf\n\u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         \u2502\n\u2502                         \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Go Client       \u2502     \u2502   Rust Client     \u2502\n\u2502 (generated code)  \u2502     \u2502 (generated code)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n### Service Organization\n\nEach access pattern gets its own service:\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"// proto/prism/session/v1/session_service.proto\nservice SessionService {\nrpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);\nrpc CloseSession(CloseSessionRequest) returns (CloseSessionResponse);\nrpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);\n}"}),"\n",(0,t.jsx)(n.p,{children:"// proto/prism/queue/v1/queue_service.proto\nservice QueueService {\nrpc Publish(PublishRequest) returns (PublishResponse);\nrpc Subscribe(SubscribeRequest) returns (stream Message);\nrpc Acknowledge(AcknowledgeRequest) returns (AcknowledgeResponse);\nrpc Commit(CommitRequest) returns (CommitResponse);\n}"}),"\n",(0,t.jsx)(n.p,{children:"// proto/prism/pubsub/v1/pubsub_service.proto\nservice PubSubService {\nrpc Publish(PublishRequest) returns (PublishResponse);\nrpc Subscribe(SubscribeRequest) returns (stream Event);\nrpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse);\n}"}),"\n",(0,t.jsx)(n.p,{children:"// proto/prism/reader/v1/reader_service.proto\nservice ReaderService {\nrpc Read(ReadRequest) returns (stream Page);\nrpc Query(QueryRequest) returns (stream Row);\n}"}),"\n",(0,t.jsx)(n.p,{children:"// proto/prism/transact/v1/transact_service.proto\nservice TransactService {\nrpc Write(WriteRequest) returns (WriteResponse);\nrpc Transaction(stream TransactRequest) returns (stream TransactResponse);\n}"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n### Streaming Patterns\n\n**Server streaming** (pagination, pub/sub):\n"})}),"\n",(0,t.jsx)(n.p,{children:'service ReaderService {\n// Server streams pages to client\nrpc Read(ReadRequest) returns (stream Page) {\noption (google.api.http) = {\npost: "/v1/reader/read"\nbody: "*"\n};\n}\n}'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text"})}),"\n",(0,t.jsxs)(n.p,{children:["// Server implementation\nasync fn read(&self, req: Request",(0,t.jsxs)(n.readrequest,{children:[") -> Result<Response",(0,t.jsx)(n.a,{href:"Self::ReadStream",children:"Self::ReadStream"}),", Status> {\nlet (tx, rx) = mpsc::channel(100);"]})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"tokio::spawn(async move {\n    let mut offset = 0;\n    loop {\n        let page = fetch_page(offset, 100).await?;\n        if page.items.is_empty() {\n            break;\n        }\n        tx.send(Ok(page)).await?;\n        offset += 100;\n    }\n});\n\nOk(Response::new(ReceiverStream::new(rx)))\n"})}),"\n",(0,t.jsx)(n.p,{children:"}"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n**Client streaming** (batch writes):\n"})}),"\n",(0,t.jsx)(n.p,{children:"service TransactService {\n// Client streams write batches\nrpc BatchWrite(stream WriteRequest) returns (WriteResponse);\n}"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n**Bidirectional streaming** (pub/sub with acks):\n"})}),"\n",(0,t.jsx)(n.p,{children:"service PubSubService {\n// Client subscribes, server streams events, client sends acks\nrpc Stream(stream ClientMessage) returns (stream ServerMessage);\n}"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n### Error Handling\n\nUse gRPC status codes:\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"use tonic::{Code, Status};"}),"\n",(0,t.jsx)(n.p,{children:'// Not found\nreturn Err(Status::not_found(format!("namespace {} not found", namespace)));'}),"\n",(0,t.jsx)(n.p,{children:'// Invalid argument\nreturn Err(Status::invalid_argument("page size must be > 0"));'}),"\n",(0,t.jsx)(n.p,{children:'// Unavailable\nreturn Err(Status::unavailable("backend connection failed"));'}),"\n",(0,t.jsx)(n.p,{children:'// Deadline exceeded\nreturn Err(Status::deadline_exceeded("operation timed out"));'}),"\n",(0,t.jsx)(n.p,{children:'// Permission denied\nreturn Err(Status::permission_denied("insufficient permissions"));'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\nStructured error details:\n\n"})}),"\n",(0,t.jsx)(n.p,{children:'import "google/rpc/error_details.proto";'}),"\n",(0,t.jsx)(n.p,{children:"message ErrorInfo {\nstring reason = 1;\nstring domain = 2;\nmap<string, string> metadata = 3;\n}"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n### Metadata and Context\n\nUse gRPC metadata for cross-cutting concerns:\n\n"})}),"\n",(0,t.jsx)(n.p,{children:'// Server: extract session token from metadata\nlet session_token = req.metadata()\n.get("x-session-token")\n.and_then(|v| v.to_str().ok())\n.ok_or_else(|| Status::unauthenticated("missing session token"))?;'}),"\n",(0,t.jsx)(n.p,{children:'// Client: add session token to metadata\nlet mut request = Request::new(read_request);\nrequest.metadata_mut().insert(\n"x-session-token",\nsession_token.parse().unwrap(),\n);'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\nCommon metadata:\n- `x-session-token`: Session identifier\n- `x-namespace`: Namespace for multi-tenancy\n- `x-request-id`: Request tracing\n- `x-client-version`: Client version for compatibility\n\n### Performance Optimizations\n\n**Connection pooling:**\n"})}),"\n",(0,t.jsxs)(n.p,{children:['// Reuse connections\nlet channel = Channel::from_static("',(0,t.jsx)(n.a,{href:"http://localhost:8980",children:"http://localhost:8980"}),'")\n.connect_lazy();']}),"\n",(0,t.jsx)(n.p,{children:"let client = QueueServiceClient::new(channel.clone());"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n**Compression:**\n"})}),"\n",(0,t.jsxs)(n.p,{children:['// Enable gzip compression\nlet channel = Channel::from_static("',(0,t.jsx)(n.a,{href:"http://localhost:8980",children:"http://localhost:8980"}),'")\n.http2_keep_alive_interval(Duration::from_secs(30))\n.http2_adaptive_window(true)\n.connect_lazy();']}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n**Timeouts:**\n"})}),"\n",(0,t.jsx)(n.p,{children:'service QueueService {\nrpc Publish(PublishRequest) returns (PublishResponse) {\noption (google.api.method_signature) = "timeout=5s";\n}\n}'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n### Alternatives Considered\n\n1. **REST/HTTP JSON API**\n   - Pros: Simple, widespread tooling, human-readable\n   - Cons: Slower serialization, no streaming, manual typing\n   - Rejected: Performance critical for Prism\n\n2. **GraphQL**\n   - Pros: Flexible queries, single endpoint\n   - Cons: Complexity, performance overhead, limited streaming\n   - Rejected: Over-engineered for data access patterns\n\n3. **WebSockets**\n   - Pros: Bidirectional, real-time\n   - Cons: No type safety, manual protocol design\n   - Rejected: gRPC bidirectional streaming provides same benefits\n\n4. **Thrift or Avro**\n   - Pros: Binary protocols, similar performance\n   - Cons: Smaller ecosystems, less tooling\n   - Rejected: gRPC has better ecosystem and HTTP/2 benefits\n\n## Consequences\n\n### Positive\n\n- **High performance**: Binary protocol, HTTP/2 multiplexing\n- **Type safety**: Compile-time validation via protobuf\n- **Streaming**: First-class support for all streaming patterns\n- **Multi-language**: Generated clients for Go, Rust, Python, etc.\n- **Self-documenting**: `.proto` files serve as API documentation\n- **Evolution**: Backward-compatible changes via protobuf\n- **Observability**: Built-in tracing, metrics integration\n\n### Negative\n\n- **Debugging complexity**: Binary format harder to inspect than JSON\n- **Tooling required**: Need `grpcurl`, `grpcui` for manual testing\n- **Learning curve**: Teams unfamiliar with gRPC/protobuf\n- **Browser limitations**: No native browser support (need gRPC-Web)\n\n### Neutral\n\n- **HTTP/2 required**: Not compatible with HTTP/1.1-only infrastructure\n- **REST gateway optional**: Can add later with `grpc-gateway`\n\n## Implementation Notes\n\n### Server Implementation (Rust)\n\n"})}),"\n",(0,t.jsx)(n.p,{children:"// proxy/src/main.rs\nuse tonic::transport::Server;"}),"\n",(0,t.jsx)(n.p,{children:'#[tokio::main]\nasync fn main() -> Result<()> {\nlet addr = "0.0.0.0:8980".parse()?;'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"let session_service = SessionServiceImpl::default();\nlet queue_service = QueueServiceImpl::default();\nlet pubsub_service = PubSubServiceImpl::default();\n\nServer::builder()\n    .add_service(SessionServiceServer::new(session_service))\n    .add_service(QueueServiceServer::new(queue_service))\n    .add_service(PubSubServiceServer::new(pubsub_service))\n    .serve(addr)\n    .await?;\n\nOk(())\n"})}),"\n",(0,t.jsx)(n.p,{children:"}"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n### Client Implementation (Go)\n\n"})}),"\n",(0,t.jsx)(n.p,{children:'// Client connection\nconn, err := grpc.Dial(\n"localhost:8980",\ngrpc.WithTransportCredentials(insecure.NewCredentials()),\ngrpc.WithKeepaliveParams(keepalive.ClientParameters{\nTime:    30 * time.Second,\nTimeout: 10 * time.Second,\n}),\n)\ndefer conn.Close()'}),"\n",(0,t.jsx)(n.p,{children:"// Create typed client\nclient := queue.NewQueueServiceClient(conn)"}),"\n",(0,t.jsx)(n.p,{children:'// Make request\nresp, err := client.Publish(ctx, &queue.PublishRequest{\nTopic:   "events",\nPayload: data,\n})'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n### Testing with grpcurl\n\n"})}),"\n",(0,t.jsx)(n.h1,{id:"list-services",children:"List services"}),"\n",(0,t.jsx)(n.p,{children:"grpcurl -plaintext localhost:8980 list"}),"\n",(0,t.jsx)(n.h1,{id:"describe-service",children:"Describe service"}),"\n",(0,t.jsx)(n.p,{children:"grpcurl -plaintext localhost:8980 describe prism.queue.v1.QueueService"}),"\n",(0,t.jsx)(n.h1,{id:"make-request",children:"Make request"}),"\n",(0,t.jsxs)(n.p,{children:['grpcurl -plaintext -d \'{"topic":"events","payload":"dGVzdA=="}\' ',(0,t.jsx)(n.br,{}),"\nlocalhost:8980 prism.queue.v1.QueueService/Publish"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n### Code Generation\n\n"})}),"\n",(0,t.jsx)(n.h1,{id:"generate-rust-code",children:"Generate Rust code"}),"\n",(0,t.jsx)(n.p,{children:"buf generate --template proxy/buf.gen.rust.yaml"}),"\n",(0,t.jsx)(n.h1,{id:"generate-go-code",children:"Generate Go code"}),"\n",(0,t.jsx)(n.p,{children:"buf generate --template tools/buf.gen.go.yaml"}),"\n",(0,t.jsx)(n.h1,{id:"generate-python-code",children:"Generate Python code"}),"\n",(0,t.jsx)(n.p,{children:"buf generate --template clients/python/buf.gen.python.yaml"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-text",children:"\n## References\n\n- [gRPC Documentation](https://grpc.io/docs/)\n- [gRPC Performance Best Practices](https://grpc.io/docs/guides/performance/)\n- [tonic (Rust gRPC)](https://github.com/hyperium/tonic)\n- ADR-003: Protobuf as Single Source of Truth\n- ADR-019: Rust Async Concurrency Patterns\n\n## Revision History\n\n- 2025-10-07: Initial draft and acceptance\n\n"})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);