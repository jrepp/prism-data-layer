"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[32275],{28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var s=i(96540);const l={},r=s.createContext(l);function o(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),s.createElement(r.Provider,{value:n},e.children)}},96117:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"adr-026","title":"Distroless Base Images for Container Components","description":"Context","source":"@site/../docs-cms/adr/adr-026-distroless-container-images.md","sourceDirName":".","slug":"/adr-026","permalink":"/prism-data-layer/adr/adr-026","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-026-distroless-container-images.md","tags":[{"inline":true,"label":"containers","permalink":"/prism-data-layer/adr/tags/containers"},{"inline":true,"label":"security","permalink":"/prism-data-layer/adr/tags/security"},{"inline":true,"label":"deployment","permalink":"/prism-data-layer/adr/tags/deployment"},{"inline":true,"label":"docker","permalink":"/prism-data-layer/adr/tags/docker"}],"version":"current","frontMatter":{"date":"2025-10-07T00:00:00.000Z","deciders":"Core Team","doc_uuid":"346814c8-5c1c-4e66-9882-2b3b235c1c53","id":"adr-026","project_id":"prism-data-layer","status":"Accepted","tags":["containers","security","deployment","docker"],"title":"Distroless Base Images for Container Components"},"sidebar":"adrSidebar","previous":{"title":"Container Plugin Model \u2022 ADR-025","permalink":"/prism-data-layer/adr/adr-025"},"next":{"title":"Admin API via gRPC \u2022 ADR-027","permalink":"/prism-data-layer/adr/adr-027"}}');var l=i(74848),r=i(28453);const o={date:new Date("2025-10-07T00:00:00.000Z"),deciders:"Core Team",doc_uuid:"346814c8-5c1c-4e66-9882-2b3b235c1c53",id:"adr-026",project_id:"prism-data-layer",status:"Accepted",tags:["containers","security","deployment","docker"],title:"Distroless Base Images for Container Components"},c=void 0,t={},a=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why Distroless",id:"why-distroless",level:3},{value:"Distroless Variants",id:"distroless-variants",level:3},{value:"Rust Applications",id:"rust-applications",level:3},{value:"Go Applications (Tooling)",id:"go-applications-tooling",level:3},{value:"Debug Images",id:"debug-images",level:3},{value:"Example: Complete Multi-Stage Build",id:"example-complete-multi-stage-build",level:3},{value:"Plugin Containers",id:"plugin-containers",level:3},{value:"Security Hardening",id:"security-hardening",level:3},{value:"CI/CD Integration",id:"cicd-integration",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Image Naming Convention",id:"image-naming-convention",level:3},{value:"Required Files in Image",id:"required-files-in-image",level:3},{value:"Kubernetes Deployment",id:"kubernetes-deployment",level:3},{value:"Debugging Workflow",id:"debugging-workflow",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,l.jsx)(n.p,{children:"Prism deploys multiple container components:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Proxy core (Rust)"}),"\n",(0,l.jsx)(n.li,{children:"Backend plugins (Rust, potentially Go)"}),"\n",(0,l.jsx)(n.li,{children:"Tooling utilities"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Container base images impact:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Security"}),": Attack surface from included packages"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Image size"}),": Download time, storage, cost"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Vulnerabilities"}),": CVEs in OS packages"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Debugging"}),": Available tools for troubleshooting"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Minimal attack surface"}),"\n",(0,l.jsx)(n.li,{children:"Small image size"}),"\n",(0,l.jsx)(n.li,{children:"Fast build and deployment"}),"\n",(0,l.jsx)(n.li,{children:"Security scanning compliance"}),"\n",(0,l.jsx)(n.li,{children:"Sufficient tools for debugging when needed"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,l.jsxs)(n.p,{children:["Use ",(0,l.jsx)(n.strong,{children:"Google Distroless base images"})," for all Prism container components:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Production images"}),": Distroless (minimal, no shell, no package manager)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Debug variant"}),": Distroless debug (includes busybox for troubleshooting)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Multi-stage builds"}),": Build in full image, run in distroless"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Static binaries"}),": Compile to static linking where possible"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Runtime dependencies only"}),": Only include what's needed to run"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,l.jsx)(n.h3,{id:"why-distroless",children:"Why Distroless"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Security benefits:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"No shell (prevents shell-based attacks)"}),"\n",(0,l.jsx)(n.li,{children:"No package manager (can't install malware)"}),"\n",(0,l.jsx)(n.li,{children:"Minimal packages (reduced CVE exposure)"}),"\n",(0,l.jsx)(n.li,{children:"Small attack surface (fewer binaries to exploit)"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Image size:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Base image: ~20MB (vs. debian:slim ~80MB, ubuntu:22.04 ~77MB)"}),"\n",(0,l.jsx)(n.li,{children:"Final images: 30-50MB (application + distroless)"}),"\n",(0,l.jsx)(n.li,{children:"Faster pulls, lower bandwidth, less storage"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Vulnerability scanning:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Fewer packages = fewer CVEs"}),"\n",(0,l.jsx)(n.li,{children:"Google maintains and patches base images"}),"\n",(0,l.jsx)(n.li,{children:"Easier compliance with security policies"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"distroless-variants",children:"Distroless Variants"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Available variants:"})}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"static-debian12"})}),": Static binaries (Go, Rust static)"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Size: ~2MB"}),"\n",(0,l.jsx)(n.li,{children:"Contains: CA certs, tzdata, /etc/passwd"}),"\n",(0,l.jsx)(n.li,{children:"No libc"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"cc-debian12"})}),": C runtime (Rust dynamic)"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Size: ~20MB"}),"\n",(0,l.jsx)(n.li,{children:"Contains: glibc, libssl, CA certs"}),"\n",(0,l.jsx)(n.li,{children:"For dynamically-linked binaries"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"static-debian12:debug"})}),": Static + busybox"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Size: ~5MB"}),"\n",(0,l.jsx)(n.li,{children:"Includes: sh, cat, ls, netstat"}),"\n",(0,l.jsx)(n.li,{children:"For debugging"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:(0,l.jsx)(n.code,{children:"cc-debian12:debug"})}),": CC + busybox"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Size: ~22MB"}),"\n",(0,l.jsx)(n.li,{children:"For debugging dynamically-linked apps"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"rust-applications",children:"Rust Applications"}),"\n",(0,l.jsx)(n.p,{children:"Most Prism components are Rust:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dockerfile",children:'# Build stage - full Rust environment\nFROM rust:1.75 as builder\n\nWORKDIR /app\nCOPY . .\n\n# Build with static linking where possible\nRUN cargo build --release --bin prism-proxy\n\n# Runtime stage - distroless\nFROM gcr.io/distroless/cc-debian12:nonroot\n\nCOPY --from=builder /app/target/release/prism-proxy /usr/local/bin/\n\n# Non-root user (UID 65532)\nUSER nonroot:nonroot\n\nENTRYPOINT ["/usr/local/bin/prism-proxy"]\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsxs)(n.strong,{children:["Why ",(0,l.jsx)(n.code,{children:"cc-debian12"})," for Rust:"]})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Most Rust crates link dynamically to system libs (OpenSSL, etc.)"}),"\n",(0,l.jsxs)(n.li,{children:["Fully static build requires ",(0,l.jsx)(n.code,{children:"musl"})," target (more complex)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"cc-debian12"})," provides glibc and common C libraries"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"go-applications-tooling",children:"Go Applications (Tooling)"}),"\n",(0,l.jsx)(n.p,{children:"Go tooling can use fully static images:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dockerfile",children:'# Build stage\nFROM golang:1.22 as builder\n\nWORKDIR /app\nCOPY . .\n\n# Build static binary\nRUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o prism-cli cmd/prism-cli/main.go\n\n# Runtime stage - fully static\nFROM gcr.io/distroless/static-debian12:nonroot\n\nCOPY --from=builder /app/prism-cli /usr/local/bin/\n\nUSER nonroot:nonroot\n\nENTRYPOINT ["/usr/local/bin/prism-cli"]\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsxs)(n.strong,{children:["Why ",(0,l.jsx)(n.code,{children:"static-debian12"})," for Go:"]})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Go easily builds fully static binaries with ",(0,l.jsx)(n.code,{children:"CGO_ENABLED=0"})]}),"\n",(0,l.jsx)(n.li,{children:"No C dependencies needed"}),"\n",(0,l.jsx)(n.li,{children:"Smallest possible image"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"debug-images",children:"Debug Images"}),"\n",(0,l.jsx)(n.p,{children:"For troubleshooting, build debug variant:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dockerfile",children:'# Runtime stage - distroless debug\nFROM gcr.io/distroless/cc-debian12:debug-nonroot\n\nCOPY --from=builder /app/target/release/prism-proxy /usr/local/bin/\n\nUSER nonroot:nonroot\n\nENTRYPOINT ["/usr/local/bin/prism-proxy"]\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Access debug shell:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Override entrypoint to get shell\ndocker run -it --entrypoint /busybox/sh prism/proxy:debug\n\n# Or in Kubernetes\nkubectl exec -it prism-proxy-pod -- /busybox/sh\n"})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Debug tools available:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"sh"})," (shell)"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"ls"}),", ",(0,l.jsx)(n.code,{children:"cat"}),", ",(0,l.jsx)(n.code,{children:"grep"}),", ",(0,l.jsx)(n.code,{children:"ps"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"netstat"}),", ",(0,l.jsx)(n.code,{children:"ping"}),", ",(0,l.jsx)(n.code,{children:"wget"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"vi"})," (basic editor)"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"example-complete-multi-stage-build",children:"Example: Complete Multi-Stage Build"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dockerfile",children:'# Dockerfile.proxy\n# Build stage - full Rust toolchain\nFROM rust:1.75 as builder\n\nWORKDIR /app\n\n# Copy dependency manifests first (cache layer)\nCOPY Cargo.toml Cargo.lock ./\nCOPY proxy/Cargo.toml proxy/\nRUN mkdir proxy/src && echo "fn main() {}" > proxy/src/main.rs\nRUN cargo build --release\nRUN rm -rf proxy/src\n\n# Copy source and build\nCOPY proxy/src proxy/src\nRUN cargo build --release --bin prism-proxy\n\n# Production runtime - distroless cc (for glibc/openssl)\nFROM gcr.io/distroless/cc-debian12:nonroot as production\n\nCOPY --from=builder /app/target/release/prism-proxy /usr/local/bin/prism-proxy\n\n# Use non-root user\nUSER nonroot:nonroot\n\n# Health check metadata (not executed by distroless)\nEXPOSE 8980 9090\n\nENTRYPOINT ["/usr/local/bin/prism-proxy"]\n\n# Debug runtime - includes busybox\nFROM gcr.io/distroless/cc-debian12:debug-nonroot as debug\n\nCOPY --from=builder /app/target/release/prism-proxy /usr/local/bin/prism-proxy\n\nUSER nonroot:nonroot\n\nEXPOSE 8980 9090\n\nENTRYPOINT ["/usr/local/bin/prism-proxy"]\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Build both variants:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-bash",children:"# Production\ndocker build --target production -t prism/proxy:latest .\n\n# Debug\ndocker build --target debug -t prism/proxy:debug .\n"})}),"\n",(0,l.jsx)(n.h3,{id:"plugin-containers",children:"Plugin Containers"}),"\n",(0,l.jsx)(n.p,{children:"Each plugin follows same pattern:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-dockerfile",children:'# Dockerfile.kafka-publisher\nFROM rust:1.75 as builder\n\nWORKDIR /app\nCOPY . .\nRUN cargo build --release --bin kafka-publisher\n\nFROM gcr.io/distroless/cc-debian12:nonroot\n\nCOPY --from=builder /app/target/release/kafka-publisher /usr/local/bin/\n\nUSER nonroot:nonroot\n\nENTRYPOINT ["/usr/local/bin/kafka-publisher"]\n'})}),"\n",(0,l.jsx)(n.h3,{id:"security-hardening",children:"Security Hardening"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Non-root user:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Distroless images include ",(0,l.jsx)(n.code,{children:"nonroot"})," user (UID 65532)"]}),"\n",(0,l.jsx)(n.li,{children:"Never run as root"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Read-only filesystem:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'# Kubernetes pod spec\nsecurityContext:\n  runAsNonRoot: true\n  runAsUser: 65532\n  readOnlyRootFilesystem: true\n  allowPrivilegeEscalation: false\n  capabilities:\n    drop: ["ALL"]\n'})}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"No shell or package manager:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Prevents remote code execution via shell"}),"\n",(0,l.jsx)(n.li,{children:"Can't install malware or backdoors"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"cicd-integration",children:"CI/CD Integration"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Build pipeline:"})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/docker-build.yml\n- name: Build production image\n  run: |\n    docker build --target production \\\n      -t ghcr.io/prism/proxy:${{ github.sha }} \\\n      -t ghcr.io/prism/proxy:latest \\\n      .\n\n- name: Build debug image\n  run: |\n    docker build --target debug \\\n      -t ghcr.io/prism/proxy:${{ github.sha }}-debug \\\n      -t ghcr.io/prism/proxy:debug \\\n      .\n\n- name: Scan images\n  run: |\n    trivy image ghcr.io/prism/proxy:latest\n"})}),"\n",(0,l.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Alpine Linux"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Pros: Small (~5MB base), familiar, has package manager"}),"\n",(0,l.jsx)(n.li,{children:"Cons: musl libc (compatibility issues), still has shell/packages"}),"\n",(0,l.jsx)(n.li,{children:"Rejected: More attack surface than distroless"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Debian Slim"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Pros: Familiar, good docs, standard glibc"}),"\n",(0,l.jsx)(n.li,{children:"Cons: Large (~80MB), includes shell, package manager, many CVEs"}),"\n",(0,l.jsx)(n.li,{children:"Rejected: Too large, unnecessary packages"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Ubuntu"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Pros: Very familiar, enterprise support available"}),"\n",(0,l.jsx)(n.li,{children:"Cons: Large (77MB+), many packages, high CVE count"}),"\n",(0,l.jsx)(n.li,{children:"Rejected: Too large for minimal services"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Scratch (empty)"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Pros: Absolutely minimal (0 bytes)"}),"\n",(0,l.jsx)(n.li,{children:"Cons: No CA certs, no timezone data, hard to debug"}),"\n",(0,l.jsx)(n.li,{children:"Rejected: Too minimal, missing essential files"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Chainguard Images"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Pros: Similar to distroless, daily rebuilds, minimal CVEs"}),"\n",(0,l.jsx)(n.li,{children:"Cons: Requires subscription for some images"}),"\n",(0,l.jsx)(n.li,{children:"Deferred: Evaluate later if Google distroless insufficient"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,l.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Minimal attack surface"}),": No shell, no package manager"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Small images"}),": 30-50MB vs 200-300MB with full OS"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Fewer CVEs"}),": Minimal packages mean fewer vulnerabilities"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Fast deployments"}),": Smaller images pull faster"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Security compliance"}),": Easier to pass security audits"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Industry standard"}),": Google's recommended practice"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"No debugging in production"}),": Can't SSH and install tools"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Must use debug variant"}),": Need separate image for troubleshooting"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Learning curve"}),": Different from traditional Docker images"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Static linking complexity"}),": Some Rust crates harder to statically link"]}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Build time"}),": Multi-stage builds add complexity but cache well"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Observability"}),": Must rely on external logging/metrics (good practice anyway)"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,l.jsx)(n.h3,{id:"image-naming-convention",children:"Image Naming Convention"}),"\n",(0,l.jsx)(n.p,{children:"prism/proxy:latest              # Production\nprism/proxy:v1.2.3              # Specific version (production)\nprism/proxy:debug               # Debug variant (latest)\nprism/proxy:v1.2.3-debug        # Debug variant (specific version)"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-text",children:"\n### File Structure\n\nprism/\n\u251c\u2500\u2500 proxy/\n\u2502   \u251c\u2500\u2500 Dockerfile              # Proxy image (multi-stage)\n\u2502   \u2514\u2500\u2500 src/\n\u251c\u2500\u2500 containers/\n\u2502   \u251c\u2500\u2500 kafka-publisher/\n\u2502   \u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2502   \u2514\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 kafka-consumer/\n\u2502   \u2502   \u251c\u2500\u2500 Dockerfile\n\u2502   \u2502   \u2514\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 mailbox-listener/\n\u2502       \u251c\u2500\u2500 Dockerfile\n\u2502       \u2514\u2500\u2500 src/\n\u2514\u2500\u2500 tools/\n    \u2514\u2500\u2500 cmd/\n        \u251c\u2500\u2500 prism-cli/\n        \u2502   \u2514\u2500\u2500 Dockerfile\n        \u2514\u2500\u2500 prism-migrate/\n            \u2514\u2500\u2500 Dockerfile\n"})}),"\n",(0,l.jsx)(n.h3,{id:"required-files-in-image",children:"Required Files in Image"}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Always include:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Application binary"}),"\n",(0,l.jsx)(n.li,{children:"CA certificates (for TLS)"}),"\n",(0,l.jsx)(n.li,{children:"Timezone data (if using timestamps)"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Distroless provides:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"/etc/passwd"})," (nonroot user)"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"/etc/ssl/certs/ca-certificates.crt"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"/usr/share/zoneinfo/"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Never include:"})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Config files (use environment variables)"}),"\n",(0,l.jsx)(n.li,{children:"Secrets (inject at runtime)"}),"\n",(0,l.jsx)(n.li,{children:"Temporary files"}),"\n"]}),"\n",(0,l.jsx)(n.h3,{id:"kubernetes-deployment",children:"Kubernetes Deployment"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-yaml",children:'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prism-proxy\nspec:\n  template:\n    spec:\n      containers:\n      - name: proxy\n        image: prism/proxy:latest\n        securityContext:\n          runAsNonRoot: true\n          runAsUser: 65532\n          readOnlyRootFilesystem: true\n          allowPrivilegeEscalation: false\n          capabilities:\n            drop: ["ALL"]\n        env:\n        - name: RUST_LOG\n          value: info\n        ports:\n        - containerPort: 8980\n          name: grpc\n        - containerPort: 9090\n          name: metrics\n'})}),"\n",(0,l.jsx)(n.h3,{id:"debugging-workflow",children:"Debugging Workflow"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Production issue occurs"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Deploy debug image"})," to separate environment or pod"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Reproduce issue"})," with debug image"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Access shell"}),": ",(0,l.jsx)(n.code,{children:"kubectl exec -it pod -- /busybox/sh"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Investigate"}),": Use busybox tools to diagnose"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Fix and redeploy"})," production image"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:(0,l.jsx)(n.strong,{children:"Never deploy debug image to production"})}),"\n",(0,l.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/GoogleContainerTools/distroless",children:"Distroless GitHub"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://github.com/GoogleContainerTools/distroless#distroless-container-images",children:"Distroless Best Practices"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.a,{href:"https://docs.docker.com/build/building/multi-stage/",children:"Docker Multi-Stage Builds"})}),"\n",(0,l.jsx)(n.li,{children:"ADR-025: Container Plugin Model"}),"\n",(0,l.jsx)(n.li,{children:"ADR-008: Observability Strategy"}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"2025-10-07: Initial draft and acceptance"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);