"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[1683],{5926:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"namespace-multi-tenancy","title":"ADR-006: Namespace and Multi-Tenancy","description":"Context","source":"@site/../docs-cms/adr/006-namespace-multi-tenancy.md","sourceDirName":".","slug":"/namespace-multi-tenancy","permalink":"/prism-data-layer/adr/namespace-multi-tenancy","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/006-namespace-multi-tenancy.md","tags":[{"inline":true,"label":"architecture","permalink":"/prism-data-layer/adr/tags/architecture"},{"inline":true,"label":"backend","permalink":"/prism-data-layer/adr/tags/backend"},{"inline":true,"label":"operations","permalink":"/prism-data-layer/adr/tags/operations"}],"version":"current","sidebarPosition":6,"frontMatter":{"title":"ADR-006: Namespace and Multi-Tenancy","status":"Accepted","date":"2025-10-05T00:00:00.000Z","deciders":"Core Team","tags":["architecture","backend","operations"]},"sidebar":"adrSidebar","previous":{"title":"ADR-005: Backend Plugin Architecture","permalink":"/prism-data-layer/adr/backend-plugin-architecture"},"next":{"title":"ADR-007: Authentication and Authorization","permalink":"/prism-data-layer/adr/authentication-authorization"}}');var i=s(4848),r=s(8453);const t={title:"ADR-006: Namespace and Multi-Tenancy",status:"Accepted",date:new Date("2025-10-05T00:00:00.000Z"),deciders:"Core Team",tags:["architecture","backend","operations"]},c=void 0,l={},d=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Namespace Design",id:"namespace-design",level:3},{value:"Namespace Configuration",id:"namespace-configuration",level:3},{value:"Multi-Tenancy Strategies",id:"multi-tenancy-strategies",level:3},{value:"Namespace to Backend Mapping",id:"namespace-to-backend-mapping",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Namespace Lifecycle",id:"namespace-lifecycle",level:3},{value:"Namespace Metadata Store",id:"namespace-metadata-store",level:3},{value:"Namespace Discovery",id:"namespace-discovery",level:3},{value:"Co-Location Strategy",id:"co-location-strategy",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function o(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsx)(n.p,{children:"Multiple applications will use Prism, each with their own data. We need to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Isolate data"})," between applications (security, compliance)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prevent noisy neighbors"})," (one app's traffic shouldn't affect others)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enable self-service"})," (teams create their own datasets without platform team)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simplify operations"})," (consistent naming, easy to find data)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Netflix's Data Gateway uses ",(0,i.jsx)(n.strong,{children:"namespaces"})," as the abstraction layer between logical data models and physical storage."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": How do we achieve multi-tenancy with isolation, performance, and operational simplicity?"]}),"\n",(0,i.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.strong,{children:"namespaces"})," as the primary isolation boundary, with ",(0,i.jsx)(n.strong,{children:"sharded deployments"})," for fault isolation."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Namespace"}),": Logical name for a dataset (e.g., ",(0,i.jsx)(n.code,{children:"user-profiles"}),", ",(0,i.jsx)(n.code,{children:"video-events"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Shard"}),": Physical deployment serving one or more namespaces"]}),"\n",(0,i.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,i.jsx)(n.h3,{id:"namespace-design",children:"Namespace Design"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Namespace = Logical Dataset Name\n\nExamples:\n- user-profiles         (KeyValue, user data)\n- video-view-events     (TimeSeries, analytics)\n- social-graph          (Graph, relationships)\n- payment-transactions  (KeyValue, financial data)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Properties"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Globally unique within Prism"}),"\n",(0,i.jsx)(n.li,{children:"Maps to backend-specific storage (table, topic, keyspace)"}),"\n",(0,i.jsx)(n.li,{children:"Carries configuration (backend type, capacity, policies)"}),"\n",(0,i.jsx)(n.li,{children:"Unit of access control"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"namespace-configuration",children:"Namespace Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"namespace: user-profiles\n\n# What abstraction?\nabstraction: keyvalue\n\n# Which backend?\nbackend: postgres\n\n# Capacity estimates\ncapacity:\n  estimated_read_rps: 5000\n  estimated_write_rps: 500\n  estimated_data_size_gb: 100\n\n# Policies\npolicies:\n  retention_days: null  # Keep forever\n  consistency: strong\n  cache_enabled: true\n  cache_ttl_seconds: 300\n\n# Access control\naccess:\n  owners:\n    - team: user-service-team\n  consumers:\n    - service: user-api (read-write)\n    - service: analytics-pipeline (read-only)\n\n# Backend-specific config\nbackend_config:\n  postgres:\n    connection_string: postgres://prod-postgres-1/prism\n    pool_size: 20\n    table_name: user_profiles\n"})}),"\n",(0,i.jsx)(n.h3,{id:"multi-tenancy-strategies",children:"Multi-Tenancy Strategies"}),"\n",(0,i.jsxs)(n.p,{children:["Netflix uses ",(0,i.jsx)(n.strong,{children:"sharded deployments"})," (single-tenant architecture):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Prism Shard 1  \u2502      \u2502  Prism Shard 2  \u2502      \u2502  Prism Shard 3  \u2502\n\u2502                 \u2502      \u2502                 \u2502      \u2502                 \u2502\n\u2502  Namespaces:    \u2502      \u2502  Namespaces:    \u2502      \u2502  Namespaces:    \u2502\n\u2502  - user-profiles\u2502      \u2502  - video-events \u2502      \u2502  - social-graph \u2502\n\u2502  - user-sessions\u2502      \u2502  - play-events  \u2502      \u2502  - friend-graph \u2502\n\u2502                 \u2502      \u2502                 \u2502      \u2502                 \u2502\n\u2502    Backend:     \u2502      \u2502    Backend:     \u2502      \u2502    Backend:     \u2502\n\u2502    Postgres 1   \u2502      \u2502    Kafka 1      \u2502      \u2502    Neptune 1    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why sharding?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fault isolation"}),": Shard 1 crash doesn't affect Shard 2"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance isolation"}),": Heavy load on Shard 2 doesn't slow Shard 1"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Blast radius"}),": Security breach limited to one shard"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Capacity"}),": Add shards independently"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Shard Assignment"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// Deterministic shard selection\nfn select_shard(namespace: &str, shards: &[Shard]) -> &Shard {\n    let hash = hash_namespace(namespace);\n    &shards[hash % shards.len()]\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"namespace-to-backend-mapping",children:"Namespace to Backend Mapping"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Namespace: user-profiles\n    \u2193\nBackend: postgres\n    \u2193\nPhysical: prism_db.user_profiles table\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Namespace: video-events\n    \u2193\nBackend: kafka\n    \u2193\nPhysical: events-video topic (20 partitions)\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"Namespace: social-graph\n    \u2193\nBackend: neptune\n    \u2193\nPhysical: social-graph-prod instance\n"})}),"\n",(0,i.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Shared Database, Schema-per-Tenant"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pros: Simple, fewer resources"}),"\n",(0,i.jsx)(n.li,{children:"Cons: Noisy neighbors, blast radius issues"}),"\n",(0,i.jsx)(n.li,{children:"Rejected: Doesn't scale, risky"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Database-per-Namespace"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pros: Complete isolation"}),"\n",(0,i.jsx)(n.li,{children:"Cons: Operational nightmare (1000s of databases)"}),"\n",(0,i.jsx)(n.li,{children:"Rejected: Too many moving parts"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Multi-Tenant Prism with Row-Level Security"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pros: Efficient resource usage"}),"\n",(0,i.jsx)(n.li,{children:"Cons: One bug = all data leaked"}),"\n",(0,i.jsx)(n.li,{children:"Rejected: Security risk too high"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Kubernetes Namespaces"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pros: Leverages K8s multi-tenancy"}),"\n",(0,i.jsx)(n.li,{children:"Cons: We're not using K8s (see ADR-001)"}),"\n",(0,i.jsx)(n.li,{children:"Rejected: Doesn't apply"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,i.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strong Isolation"}),": Each shard is independent"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Predictable Performance"}),": No noisy neighbors"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Operational Clarity"}),": Easy to reason about deployments"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security"}),": Blast radius limited to shard"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scalability"}),": Add shards as needed"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Resource Usage"}),": More instances than multi-tenant approach","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Mitigation"}),": Right-size instances; co-locate small namespaces"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complexity"}),": More deployments to manage","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Mitigation"}),": Automation, declarative config"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Shard Rebalancing"}),": Moving namespaces between shards is hard","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use shadow traffic (ADR-009) for migrations"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,i.jsx)(n.h3,{id:"namespace-lifecycle",children:"Namespace Lifecycle"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Creation"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Via protobuf definition\nmessage UserProfile {\n  option (prism.namespace) = "user-profiles";\n  option (prism.backend) = "postgres";\n  // ...\n}\n\n# Or via API\nprism-cli create-namespace \\\n  --name user-profiles \\\n  --abstraction keyvalue \\\n  --backend postgres \\\n  --capacity-estimate-rps 5000\n'})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Provisioning"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Capacity planner calculates requirements"}),"\n",(0,i.jsx)(n.li,{children:"Backend resources created (tables, topics, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Namespace registered in control plane"}),"\n",(0,i.jsx)(n.li,{children:"Monitoring and alerts configured"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Access Control"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// Check if service can access namespace\nif !authz.can_access(service_id, namespace, AccessLevel::ReadWrite) {\n    return Err(Error::Forbidden);\n}\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Deletion"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Mark namespace as deleted"}),"\n",(0,i.jsx)(n.li,{children:"Stop accepting new requests"}),"\n",(0,i.jsx)(n.li,{children:"Drain existing requests"}),"\n",(0,i.jsx)(n.li,{children:"Delete backend resources"}),"\n",(0,i.jsx)(n.li,{children:"Archive audit logs"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"namespace-metadata-store",children:"Namespace Metadata Store"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"pub struct NamespaceMetadata {\n    pub name: String,\n    pub abstraction: AbstractionType,\n    pub backend: String,\n    pub shard_id: String,\n    pub capacity: CapacitySpec,\n    pub policies: NamespacePolicies,\n    pub access_control: AccessControl,\n    pub backend_config: serde_json::Value,\n    pub created_at: Timestamp,\n    pub status: NamespaceStatus,\n}\n\npub enum NamespaceStatus {\n    Provisioning,\n    Active,\n    Degraded,\n    Deleting,\n    Deleted,\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Stored in:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Control plane database"})," (Postgres)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"In-memory cache"})," in each shard (fast lookups)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Watch for updates"})," (long-polling or pub/sub)"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"namespace-discovery",children:"Namespace Discovery"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Client discovers which shard serves a namespace\npub struct DiscoveryClient {\n    control_plane_url: String,\n}\n\nimpl DiscoveryClient {\n    pub async fn resolve(&self, namespace: &str) -> Result<ShardInfo> {\n        let response = self.http_client\n            .get(&format!("{}/namespaces/{}", self.control_plane_url, namespace))\n            .send()\n            .await?;\n\n        let metadata: NamespaceMetadata = response.json().await?;\n        Ok(ShardInfo {\n            endpoints: metadata.shard_endpoints(),\n            backend: metadata.backend,\n        })\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"co-location-strategy",children:"Co-Location Strategy"}),"\n",(0,i.jsx)(n.p,{children:"Small namespaces can share a shard:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"shard: prod-shard-1\nnamespaces:\n  - user-profiles       (5000 RPS)\n  - user-preferences    (500 RPS)   # Co-located\n  - user-settings       (200 RPS)   # Co-located\n"})}),"\n",(0,i.jsx)(n.p,{children:"Large namespaces get dedicated shards:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"shard: prod-shard-video-events\nnamespaces:\n  - video-events        (200,000 RPS)  # Dedicated shard\n"})}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Netflix Data Gateway: Namespace Abstraction"}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://aws.amazon.com/blogs/architecture/multi-tenant-saas-architecture/",children:"AWS Multi-Tenancy Strategies"})}),"\n",(0,i.jsx)(n.li,{children:"ADR-002: Client-Originated Configuration"}),"\n",(0,i.jsx)(n.li,{children:"ADR-005: Backend Plugin Architecture"}),"\n",(0,i.jsx)(n.li,{children:"ADR-007: Authentication and Authorization"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2025-10-05: Initial draft and acceptance"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var a=s(6540);const i={},r=a.createContext(i);function t(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);