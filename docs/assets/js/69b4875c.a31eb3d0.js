"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[6813],{1232:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"rfc-006","title":"RFC-006 Python Admin CLI","description":"Author: System","source":"@site/../docs-cms/rfcs/RFC-006-python-admin-cli.md","sourceDirName":".","slug":"/rfc-006","permalink":"/prism-data-layer/rfc/rfc-006","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/RFC-006-python-admin-cli.md","tags":[],"version":"current","frontMatter":{"id":"rfc-006","title":"RFC-006 Python Admin CLI","sidebar_label":"RFC-006 Admin CLI","status":"Draft"},"sidebar":"rfcSidebar","previous":{"title":"RFC-005: ClickHouse Integration for Time Series Analytics","permalink":"/prism-data-layer/rfc/RFC-005-clickhouse-integration"},"next":{"title":"RFC-007 Cache Strategies","permalink":"/prism-data-layer/rfc/rfc-007"}}');var a=s(4848),t=s(8453);const r={id:"rfc-006",title:"RFC-006 Python Admin CLI",sidebar_label:"RFC-006 Admin CLI",status:"Draft"},c="RFC-006: Python Admin CLI",l={},o=[{value:"Abstract",id:"abstract",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Why CLI First?",id:"why-cli-first",level:3},{value:"Real-World Use Cases",id:"real-world-use-cases",level:3},{value:"Goals",id:"goals",level:2},{value:"Non-Goals",id:"non-goals",level:2},{value:"Architecture",id:"architecture",level:2},{value:"High-Level Design",id:"high-level-design",level:3},{value:"Command Structure",id:"command-structure",level:3},{value:"Command Specifications",id:"command-specifications",level:2},{value:"Namespace Management",id:"namespace-management",level:3},{value:"Create Namespace",id:"create-namespace",level:4},{value:"List Namespaces",id:"list-namespaces",level:4},{value:"Describe Namespace",id:"describe-namespace",level:4},{value:"Backend Management",id:"backend-management",level:3},{value:"Health Check",id:"health-check",level:4},{value:"Backend Statistics",id:"backend-statistics",level:4},{value:"Session Management",id:"session-management",level:3},{value:"List Sessions",id:"list-sessions",level:4},{value:"Trace Session",id:"trace-session",level:4},{value:"Configuration Management",id:"configuration-management",level:3},{value:"Show Configuration",id:"show-configuration",level:4},{value:"Validate Configuration",id:"validate-configuration",level:4},{value:"Metrics and Monitoring",id:"metrics-and-monitoring",level:3},{value:"Metrics Summary",id:"metrics-summary",level:4},{value:"Export Metrics",id:"export-metrics",level:4},{value:"Shadow Traffic",id:"shadow-traffic",level:3},{value:"Enable Shadow Traffic",id:"enable-shadow-traffic",level:4},{value:"Shadow Status",id:"shadow-status",level:4},{value:"Protobuf Integration",id:"protobuf-integration",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Technology Stack",id:"technology-stack",level:3},{value:"Project Structure",id:"project-structure",level:3},{value:"Example Implementation (Namespace Commands)",id:"example-implementation-namespace-commands",level:3},{value:"Admin gRPC Client Wrapper",id:"admin-grpc-client-wrapper",level:3},{value:"Use-Case Recommendations",id:"use-case-recommendations",level:2},{value:"\u2705 When to Use CLI",id:"-when-to-use-cli",level:3},{value:"\u274c When CLI is Less Suitable",id:"-when-cli-is-less-suitable",level:3},{value:"Migration to Web UI",id:"migration-to-web-ui",level:3},{value:"Configuration",id:"configuration",level:2},{value:"CLI Configuration File",id:"cli-configuration-file",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Performance and UX",id:"performance-and-ux",level:2},{value:"Performance Targets",id:"performance-targets",level:3},{value:"UX Enhancements",id:"ux-enhancements",level:3},{value:"Testing Strategy",id:"testing-strategy",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Deployment",id:"deployment",level:2},{value:"Installation",id:"installation",level:3},{value:"Shell Completion",id:"shell-completion",level:3},{value:"Migration Path",id:"migration-path",level:2},{value:"Phase 1: Core CLI (Week 1-2)",id:"phase-1-core-cli-week-1-2",level:3},{value:"Phase 2: Advanced Features (Week 3-4)",id:"phase-2-advanced-features-week-3-4",level:3},{value:"Phase 3: Polish and Documentation (Week 5-6)",id:"phase-3-polish-and-documentation-week-5-6",level:3},{value:"Phase 4: Web UI Development (Parallel)",id:"phase-4-web-ui-development-parallel",level:3},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"CLI Usage Metrics",id:"cli-usage-metrics",level:3},{value:"Logging",id:"logging",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"Open Questions",id:"open-questions",level:2},{value:"References",id:"references",level:2},{value:"Appendix: Command Reference",id:"appendix-command-reference",level:2},{value:"All Commands",id:"all-commands",level:3},{value:"Global Options",id:"global-options",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"rfc-006-python-admin-cli",children:"RFC-006: Python Admin CLI"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Author"}),": System\n",(0,a.jsx)(n.strong,{children:"Created"}),": 2025-10-08\n",(0,a.jsx)(n.strong,{children:"Updated"}),": 2025-10-08"]}),"\n",(0,a.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,a.jsx)(n.p,{children:"This RFC proposes a comprehensive Python-based command-line interface (CLI) for administering Prism data access gateway. The CLI provides operational visibility, configuration management, and troubleshooting capabilities before building a full web-based admin UI. By delivering CLI-first tooling, we enable automation, scripting, and CI/CD integration while validating the admin API design."}),"\n",(0,a.jsx)(n.p,{children:"The CLI will interact with Prism's admin gRPC services (RFC-003) to manage namespaces, monitor sessions, inspect backend health, and configure data access patterns across all supported backends (Kafka, NATS, PostgreSQL, Redis, ClickHouse)."}),"\n",(0,a.jsx)(n.h2,{id:"motivation",children:"Motivation"}),"\n",(0,a.jsx)(n.h3,{id:"why-cli-first",children:"Why CLI First?"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Faster Time to Value"}),": CLI tools can be developed and iterated faster than full UIs"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Automation Ready"}),": Enable scripting and CI/CD integration from day one"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"API Validation"}),": Using the CLI validates admin API design before UI investment"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"DevOps Friendly"}),": Operators prefer CLI tools for troubleshooting and automation"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Low Barrier"}),": Python + Click/Typer = rapid development with excellent UX"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"real-world-use-cases",children:"Real-World Use Cases"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Namespace Management"}),": Create, configure, and delete namespaces"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Health Monitoring"}),": Check backend connectivity and performance metrics"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Session Inspection"}),": Debug active client sessions and connection pools"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Configuration Changes"}),": Update backend settings, capacity limits, consistency levels"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Traffic Analysis"}),": Inspect request rates, latency distributions, error rates"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Migration Support"}),": Shadow traffic configuration, backend switching, rollback"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"goals",children:"Goals"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Provide complete admin functionality via CLI before building web UI"}),"\n",(0,a.jsx)(n.li,{children:"Support all operations defined in RFC-003 Admin gRPC API"}),"\n",(0,a.jsx)(n.li,{children:"Enable automation and scripting for operational workflows"}),"\n",(0,a.jsx)(n.li,{children:"Deliver excellent developer experience with rich formatting and feedback"}),"\n",(0,a.jsx)(n.li,{children:"Support both interactive and non-interactive (CI/CD) usage modes"}),"\n",(0,a.jsx)(n.li,{children:"Integrate with existing Python tooling ecosystem (uv, pytest)"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"non-goals",children:"Non-Goals"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Not replacing web UI"}),": CLI is a stepping stone and complementary tool"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Not a data client"}),": Use language-specific client SDKs for data access"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Not a full TUI"}),": Keep it simple; use Rich for formatting, not full-screen apps"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,a.jsx)(n.h3,{id:"high-level-design",children:"High-Level Design"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mermaid",children:'graph TB\n    subgraph "Admin CLI"\n        CLI[prism CLI<br/>Click/Typer]\n        Formatter[Rich Formatter<br/>Tables/Trees/JSON]\n        Client[gRPC Client<br/>Admin Service]\n    end\n\n    subgraph "Prism Proxy"\n        AdminAPI[Admin gRPC API<br/>RFC-003]\n        ConfigMgr[Config Manager]\n        Metrics[Metrics Collector]\n        Health[Health Checker]\n    end\n\n    subgraph "Backends"\n        Kafka[Kafka]\n        Redis[Redis]\n        ClickHouse[ClickHouse]\n        Postgres[PostgreSQL]\n        NATS[NATS]\n    end\n\n    CLI --\x3e Formatter\n    CLI --\x3e Client\n    Client --\x3e|gRPC| AdminAPI\n    AdminAPI --\x3e ConfigMgr\n    AdminAPI --\x3e Metrics\n    AdminAPI --\x3e Health\n    Health --\x3e Kafka\n    Health --\x3e Redis\n    Health --\x3e ClickHouse\n    Health --\x3e Postgres\n    Health --\x3e NATS\n'})}),"\n",(0,a.jsx)(n.h3,{id:"command-structure",children:"Command Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"prism\n\u251c\u2500\u2500 namespace\n\u2502   \u251c\u2500\u2500 create      # Create new namespace\n\u2502   \u251c\u2500\u2500 list        # List all namespaces\n\u2502   \u251c\u2500\u2500 describe    # Show namespace details\n\u2502   \u251c\u2500\u2500 update      # Update namespace config\n\u2502   \u2514\u2500\u2500 delete      # Delete namespace\n\u251c\u2500\u2500 backend\n\u2502   \u251c\u2500\u2500 list        # List configured backends\n\u2502   \u251c\u2500\u2500 health      # Check backend health\n\u2502   \u251c\u2500\u2500 stats       # Show backend statistics\n\u2502   \u2514\u2500\u2500 test        # Test backend connectivity\n\u251c\u2500\u2500 session\n\u2502   \u251c\u2500\u2500 list        # List active sessions\n\u2502   \u251c\u2500\u2500 describe    # Show session details\n\u2502   \u251c\u2500\u2500 kill        # Terminate session\n\u2502   \u2514\u2500\u2500 trace       # Trace session requests\n\u251c\u2500\u2500 config\n\u2502   \u251c\u2500\u2500 show        # Display current config\n\u2502   \u251c\u2500\u2500 validate    # Validate config file\n\u2502   \u2514\u2500\u2500 apply       # Apply config changes\n\u251c\u2500\u2500 metrics\n\u2502   \u251c\u2500\u2500 summary     # Overall metrics summary\n\u2502   \u251c\u2500\u2500 namespace   # Namespace-level metrics\n\u2502   \u2514\u2500\u2500 export      # Export metrics (Prometheus format)\n\u2514\u2500\u2500 shadow\n    \u251c\u2500\u2500 enable      # Enable shadow traffic\n    \u251c\u2500\u2500 disable     # Disable shadow traffic\n    \u2514\u2500\u2500 status      # Show shadow traffic status\n"})}),"\n",(0,a.jsx)(n.h2,{id:"command-specifications",children:"Command Specifications"}),"\n",(0,a.jsx)(n.h3,{id:"namespace-management",children:"Namespace Management"}),"\n",(0,a.jsx)(n.h4,{id:"create-namespace",children:"Create Namespace"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Interactive mode with prompts\nprism namespace create --interactive\n\n# Declarative mode from config file\nprism namespace create --config namespace.yaml\n\n# Inline configuration\nprism namespace create my-app \\\n  --backend postgres \\\n  --pattern keyvalue \\\n  --consistency strong \\\n  --cache-ttl 300\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Output (Rich table)"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Namespace  \u2503 Backend  \u2503 Pattern    \u2503 Status       \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 my-app     \u2502 postgres \u2502 keyvalue   \u2502 \u2713 Created    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nCreated namespace 'my-app' successfully\ngRPC endpoint: localhost:50051\nAdmin endpoint: localhost:50052\n"})}),"\n",(0,a.jsx)(n.h4,{id:"list-namespaces",children:"List Namespaces"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Default table view\nprism namespace list\n\n# JSON output for scripting\nprism namespace list --output json\n\n# Filter by backend\nprism namespace list --backend redis\n\n# Show inactive namespaces\nprism namespace list --include-inactive\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Namespace      \u2503 Backend    \u2503 Pattern    \u2503 Sessions \u2503 RPS        \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 user-profiles  \u2502 postgres   \u2502 keyvalue   \u2502 24       \u2502 1,234      \u2502\n\u2502 event-stream   \u2502 kafka      \u2502 stream     \u2502 8        \u2502 45,678     \u2502\n\u2502 session-cache  \u2502 redis      \u2502 cache      \u2502 156      \u2502 89,012     \u2502\n\u2502 metrics-olap   \u2502 clickhouse \u2502 timeseries \u2502 4        \u2502 12,345     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,a.jsx)(n.h4,{id:"describe-namespace",children:"Describe Namespace"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"prism namespace describe my-app\n\n# Include recent errors\nprism namespace describe my-app --show-errors\n\n# Include configuration\nprism namespace describe my-app --show-config\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Namespace: my-app\nStatus: Active\nCreated: 2025-10-01 14:23:45 UTC\nUpdated: 2025-10-08 09:12:34 UTC\n\nBackend Configuration:\n  Type: PostgreSQL\n  Pattern: KeyValue\n  Connection: postgres://prism-pg-1:5432/prism_my_app\n  Consistency: Strong\n  Connection Pool: 20 max connections\n\nPerformance:\n  Current RPS: 1,234\n  P50 Latency: 2.3ms\n  P99 Latency: 12.7ms\n  Error Rate: 0.02%\n\nActive Sessions: 24\n  \u251c\u2500 session-abc123: 2 connections, 45 RPS\n  \u251c\u2500 session-def456: 5 connections, 234 RPS\n  \u2514\u2500 ... (22 more)\n\nRecent Errors (last 10):\n  [2025-10-08 09:05:12] Connection timeout (1 occurrence)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"backend-management",children:"Backend Management"}),"\n",(0,a.jsx)(n.h4,{id:"health-check",children:"Health Check"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Check all backends\nprism backend health\n\n# Check specific backend\nprism backend health --backend postgres\n\n# Detailed health check with diagnostics\nprism backend health --detailed\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Backend Health Status\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n\n\u2713 PostgreSQL (postgres-1)\n  Status: Healthy\n  Latency: 1.2ms\n  Connections: 45/100 used\n  Last Check: 2s ago\n\n\u2713 Redis (redis-cache-1)\n  Status: Healthy\n  Latency: 0.3ms\n  Memory: 2.1GB / 8GB\n  Last Check: 2s ago\n\n\u2713 ClickHouse (clickhouse-1)\n  Status: Healthy\n  Latency: 3.4ms\n  Queries: 234 active\n  Last Check: 2s ago\n\n\u2717 Kafka (kafka-1)\n  Status: Degraded\n  Error: Connection refused to broker-3\n  Last Success: 5m ago\n  Action: Check broker-3 connectivity\n"})}),"\n",(0,a.jsx)(n.h4,{id:"backend-statistics",children:"Backend Statistics"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Show stats for all backends\nprism backend stats\n\n# Stats for specific namespace\nprism backend stats --namespace my-app\n\n# Export to JSON\nprism backend stats --output json\n"})}),"\n",(0,a.jsx)(n.h3,{id:"session-management",children:"Session Management"}),"\n",(0,a.jsx)(n.h4,{id:"list-sessions",children:"List Sessions"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# List all active sessions\nprism session list\n\n# Filter by namespace\nprism session list --namespace my-app\n\n# Show long-running sessions\nprism session list --duration ">1h"\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"\u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n\u2503 Session ID    \u2503 Namespace      \u2503 Duration   \u2503 Requests   \u2503 RPS        \u2503\n\u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n\u2502 sess-abc123   \u2502 user-profiles  \u2502 2h 34m     \u2502 456,789    \u2502 45         \u2502\n\u2502 sess-def456   \u2502 event-stream   \u2502 45m        \u2502 123,456    \u2502 234        \u2502\n\u2502 sess-ghi789   \u2502 session-cache  \u2502 12m        \u2502 89,012     \u2502 567        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,a.jsx)(n.h4,{id:"trace-session",children:"Trace Session"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Live trace of session requests\nprism session trace sess-abc123\n\n# Trace with filtering\nprism session trace sess-abc123 --min-latency 100ms\n\n# Export trace to file\nprism session trace sess-abc123 --duration 60s --output trace.json\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Output (live streaming)"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Tracing session sess-abc123 (Ctrl+C to stop)\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n\n09:15:23.456 | GET    | user_profiles:user:12345    | 2.3ms  | \u2713\n09:15:23.489 | SET    | user_profiles:user:12345    | 3.1ms  | \u2713\n09:15:23.512 | GET    | user_profiles:user:67890    | 1.8ms  | \u2713\n09:15:23.534 | DELETE | user_profiles:user:11111    | 145ms  | \u2717 Not Found\n\nStatistics:\n  Requests: 4\n  Success: 3 (75%)\n  Avg Latency: 38.05ms\n  P99 Latency: 145ms\n"})}),"\n",(0,a.jsx)(n.h3,{id:"configuration-management",children:"Configuration Management"}),"\n",(0,a.jsx)(n.h4,{id:"show-configuration",children:"Show Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Show proxy configuration\nprism config show\n\n# Show namespace-specific config\nprism config show --namespace my-app\n\n# Export configuration\nprism config show --output yaml > prism-config.yaml\n"})}),"\n",(0,a.jsx)(n.h4,{id:"validate-configuration",children:"Validate Configuration"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Validate config file before applying\nprism config validate prism-config.yaml\n\n# Dry-run mode\nprism config validate prism-config.yaml --dry-run\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Validating configuration: prism-config.yaml\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n\n\u2713 YAML syntax valid\n\u2713 Schema validation passed\n\u2713 Backend connections verified (3/3)\n\u2713 Namespace uniqueness verified\n\u2713 Capacity limits within bounds\n\u2717 Warning: Redis memory limit (16GB) exceeds available (12GB)\n\nValidation: PASSED (1 warning)\nSafe to apply: Yes (with warnings)\n"})}),"\n",(0,a.jsx)(n.h3,{id:"metrics-and-monitoring",children:"Metrics and Monitoring"}),"\n",(0,a.jsx)(n.h4,{id:"metrics-summary",children:"Metrics Summary"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Overall metrics\nprism metrics summary\n\n# Namespace-specific metrics\nprism metrics namespace my-app\n\n# Time range\nprism metrics summary --since "1h ago"\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Prism Metrics Summary (Last 1 hour)\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n\nRequest Volume:\n  Total Requests: 12,456,789\n  Success Rate: 99.98%\n  Error Rate: 0.02%\n\nPerformance:\n  P50 Latency: 2.3ms\n  P95 Latency: 8.7ms\n  P99 Latency: 23.4ms\n\nTop Namespaces by RPS:\n  1. event-stream      45,678 RPS\n  2. session-cache     12,345 RPS\n  3. user-profiles      1,234 RPS\n\nBackend Health:\n  \u2713 PostgreSQL    (5 instances)\n  \u2713 Redis         (3 instances)\n  \u2713 ClickHouse    (2 instances)\n  \u2717 Kafka         (1 degraded)\n"})}),"\n",(0,a.jsx)(n.h4,{id:"export-metrics",children:"Export Metrics"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Prometheus format\nprism metrics export --format prometheus > metrics.prom\n\n# JSON format with metadata\nprism metrics export --format json --include-metadata > metrics.json\n"})}),"\n",(0,a.jsx)(n.h3,{id:"shadow-traffic",children:"Shadow Traffic"}),"\n",(0,a.jsx)(n.h4,{id:"enable-shadow-traffic",children:"Enable Shadow Traffic"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Enable shadow traffic for migration\nprism shadow enable my-app \\\n  --source postgres \\\n  --target redis \\\n  --percentage 10\n\n# Gradual rollout\nprism shadow enable my-app \\\n  --source postgres \\\n  --target redis \\\n  --ramp-up "10%,25%,50%,100%" \\\n  --interval 1h\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Enabling shadow traffic for namespace 'my-app'\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n\nConfiguration:\n  Source: postgres\n  Target: redis\n  Initial Percentage: 10%\n  Ramp-up Schedule:\n    \u2022 10% at 09:15:00 (now)\n    \u2022 25% at 10:15:00 (+1h)\n    \u2022 50% at 11:15:00 (+2h)\n    \u2022 100% at 12:15:00 (+3h)\n\n\u2713 Shadow traffic enabled\n  Monitor: prism shadow status my-app\n  Disable: prism shadow disable my-app\n"})}),"\n",(0,a.jsx)(n.h4,{id:"shadow-status",children:"Shadow Status"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"prism shadow status my-app\n"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Output"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"Shadow Traffic Status: my-app\n\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\n\nStatus: Active\nCurrent Stage: 25% traffic to target\nNext Stage: 50% at 11:15:00 (+45m)\n\nBackends:\n  Source: postgres\n  Target: redis\n\nTraffic Distribution:\n  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n  \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588           \u2502 75% \u2192 postgres (source)\n  \u2502 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588                               \u2502 25% \u2192 redis (target)\n  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\nComparison Metrics:\n  \u250f\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2533\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2513\n  \u2503 Metric     \u2503 Source     \u2503 Target     \u2503 Delta      \u2503\n  \u2521\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2547\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2529\n  \u2502 P50        \u2502 2.3ms      \u2502 0.8ms      \u2502 -65%       \u2502\n  \u2502 P99        \u2502 12.7ms     \u2502 3.2ms      \u2502 -75%       \u2502\n  \u2502 Error Rate \u2502 0.02%      \u2502 0.01%      \u2502 -50%       \u2502\n  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\n\u2713 Target performing well, ready for next stage\n"})}),"\n",(0,a.jsx)(n.h2,{id:"protobuf-integration",children:"Protobuf Integration"}),"\n",(0,a.jsx)(n.p,{children:"The CLI communicates with Prism via the Admin gRPC API defined in RFC-003:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-protobuf",children:"// CLI uses these services from RFC-003\nservice AdminService {\n  // Namespace operations\n  rpc CreateNamespace(CreateNamespaceRequest) returns (Namespace);\n  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse);\n  rpc DescribeNamespace(DescribeNamespaceRequest) returns (Namespace);\n  rpc UpdateNamespace(UpdateNamespaceRequest) returns (Namespace);\n  rpc DeleteNamespace(DeleteNamespaceRequest) returns (DeleteNamespaceResponse);\n\n  // Backend operations\n  rpc ListBackends(ListBackendsRequest) returns (ListBackendsResponse);\n  rpc CheckBackendHealth(HealthCheckRequest) returns (HealthCheckResponse);\n  rpc GetBackendStats(BackendStatsRequest) returns (BackendStatsResponse);\n\n  // Session operations\n  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse);\n  rpc DescribeSession(DescribeSessionRequest) returns (Session);\n  rpc KillSession(KillSessionRequest) returns (KillSessionResponse);\n  rpc TraceSession(TraceSessionRequest) returns (stream TraceEvent);\n\n  // Configuration operations\n  rpc GetConfig(GetConfigRequest) returns (Config);\n  rpc ValidateConfig(ValidateConfigRequest) returns (ValidationResult);\n  rpc ApplyConfig(ApplyConfigRequest) returns (ApplyConfigResponse);\n\n  // Metrics operations\n  rpc GetMetrics(MetricsRequest) returns (MetricsResponse);\n  rpc ExportMetrics(ExportMetricsRequest) returns (ExportMetricsResponse);\n\n  // Shadow traffic operations\n  rpc EnableShadowTraffic(ShadowTrafficRequest) returns (ShadowTrafficResponse);\n  rpc DisableShadowTraffic(DisableShadowTrafficRequest) returns (ShadowTrafficResponse);\n  rpc GetShadowStatus(ShadowStatusRequest) returns (ShadowStatus);\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,a.jsx)(n.h3,{id:"technology-stack",children:"Technology Stack"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"CLI Framework"}),": Click or Typer (Typer preferred for type safety)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"gRPC Client"}),": grpcio + protobuf-generated stubs"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Formatting"}),": Rich (tables, progress bars, colors, trees)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Configuration"}),": YAML via PyYAML"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Testing"}),": pytest with fixtures for gRPC mocking"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Packaging"}),": Python package with entry point, distributed via uv"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"project-structure",children:"Project Structure"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"prism-cli/\n\u251c\u2500\u2500 pyproject.toml           # Package definition\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 prism_cli/\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 main.py          # CLI entry point\n\u2502       \u251c\u2500\u2500 commands/\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 namespace.py # Namespace commands\n\u2502       \u2502   \u251c\u2500\u2500 backend.py   # Backend commands\n\u2502       \u2502   \u251c\u2500\u2500 session.py   # Session commands\n\u2502       \u2502   \u251c\u2500\u2500 config.py    # Config commands\n\u2502       \u2502   \u251c\u2500\u2500 metrics.py   # Metrics commands\n\u2502       \u2502   \u2514\u2500\u2500 shadow.py    # Shadow traffic commands\n\u2502       \u251c\u2500\u2500 client/\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 admin.py     # Admin gRPC client wrapper\n\u2502       \u2502   \u2514\u2500\u2500 auth.py      # Authentication helpers\n\u2502       \u251c\u2500\u2500 formatters/\n\u2502       \u2502   \u251c\u2500\u2500 __init__.py\n\u2502       \u2502   \u251c\u2500\u2500 table.py     # Rich table formatters\n\u2502       \u2502   \u251c\u2500\u2500 tree.py      # Tree formatters\n\u2502       \u2502   \u2514\u2500\u2500 json.py      # JSON output\n\u2502       \u2514\u2500\u2500 proto/           # Generated protobuf stubs\n\u2502           \u2514\u2500\u2500 admin_pb2.py\n\u2514\u2500\u2500 tests/\n    \u251c\u2500\u2500 test_namespace.py\n    \u251c\u2500\u2500 test_backend.py\n    \u2514\u2500\u2500 fixtures/\n        \u2514\u2500\u2500 mock_grpc.py\n"})}),"\n",(0,a.jsx)(n.h3,{id:"example-implementation-namespace-commands",children:"Example Implementation (Namespace Commands)"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# src/prism_cli/commands/namespace.py\nimport typer\nfrom rich.console import Console\nfrom rich.table import Table\nfrom typing import Optional\nfrom ..client.admin import AdminClient\nfrom ..formatters.table import format_namespace_table\n\napp = typer.Typer(help="Namespace management commands")\nconsole = Console()\n\n@app.command()\ndef create(\n    name: str = typer.Argument(..., help="Namespace name"),\n    backend: str = typer.Option(..., help="Backend type (postgres, redis, etc.)"),\n    pattern: str = typer.Option(..., help="Data access pattern"),\n    consistency: str = typer.Option("eventual", help="Consistency level"),\n    cache_ttl: Optional[int] = typer.Option(None, help="Cache TTL in seconds"),\n    config: Optional[str] = typer.Option(None, help="Path to config file"),\n    interactive: bool = typer.Option(False, help="Interactive mode"),\n):\n    """Create a new namespace."""\n    client = AdminClient()\n\n    try:\n        namespace = client.create_namespace(\n            name=name,\n            backend=backend,\n            pattern=pattern,\n            consistency=consistency,\n            cache_ttl=cache_ttl,\n        )\n\n        # Display result\n        table = Table(title="Namespace Created")\n        table.add_column("Namespace", style="cyan")\n        table.add_column("Backend", style="green")\n        table.add_column("Pattern", style="yellow")\n        table.add_column("Status", style="green")\n\n        table.add_row(\n            namespace.name,\n            namespace.backend,\n            namespace.pattern,\n            "\u2713 Created"\n        )\n\n        console.print(table)\n        console.print(f"\\nCreated namespace \'{name}\' successfully")\n        console.print(f"gRPC endpoint: {namespace.grpc_endpoint}")\n        console.print(f"Admin endpoint: {namespace.admin_endpoint}")\n\n    except Exception as e:\n        console.print(f"[red]Error creating namespace: {e}[/red]")\n        raise typer.Exit(1)\n\n@app.command()\ndef list(\n    output: str = typer.Option("table", help="Output format (table, json)"),\n    backend: Optional[str] = typer.Option(None, help="Filter by backend"),\n    include_inactive: bool = typer.Option(False, help="Include inactive namespaces"),\n):\n    """List all namespaces."""\n    client = AdminClient()\n\n    try:\n        namespaces = client.list_namespaces(\n            backend=backend,\n            include_inactive=include_inactive,\n        )\n\n        if output == "json":\n            console.print_json([ns.to_dict() for ns in namespaces])\n        else:\n            table = format_namespace_table(namespaces)\n            console.print(table)\n\n    except Exception as e:\n        console.print(f"[red]Error listing namespaces: {e}[/red]")\n        raise typer.Exit(1)\n\n@app.command()\ndef describe(\n    name: str = typer.Argument(..., help="Namespace name"),\n    show_errors: bool = typer.Option(False, help="Show recent errors"),\n    show_config: bool = typer.Option(False, help="Show configuration"),\n):\n    """Describe a namespace in detail."""\n    client = AdminClient()\n\n    try:\n        namespace = client.describe_namespace(\n            name=name,\n            include_errors=show_errors,\n            include_config=show_config,\n        )\n\n        # Rich formatted output\n        console.print(f"\\n[bold cyan]Namespace: {namespace.name}[/bold cyan]")\n        console.print(f"Status: [green]{namespace.status}[/green]")\n        console.print(f"Created: {namespace.created_at}")\n        console.print(f"Updated: {namespace.updated_at}")\n\n        console.print("\\n[bold]Backend Configuration:[/bold]")\n        console.print(f"  Type: {namespace.backend}")\n        console.print(f"  Pattern: {namespace.pattern}")\n        console.print(f"  Connection: {namespace.connection_string}")\n        console.print(f"  Consistency: {namespace.consistency}")\n\n        console.print("\\n[bold]Performance:[/bold]")\n        console.print(f"  Current RPS: {namespace.current_rps:,}")\n        console.print(f"  P50 Latency: {namespace.p50_latency}ms")\n        console.print(f"  P99 Latency: {namespace.p99_latency}ms")\n        console.print(f"  Error Rate: {namespace.error_rate:.2%}")\n\n        if namespace.sessions:\n            console.print(f"\\n[bold]Active Sessions: {len(namespace.sessions)}[/bold]")\n            for session in namespace.sessions[:3]:\n                console.print(f"  \u251c\u2500 {session.id}: {session.connections} connections, {session.rps} RPS")\n            if len(namespace.sessions) > 3:\n                console.print(f"  \u2514\u2500 ... ({len(namespace.sessions) - 3} more)")\n\n        if show_errors and namespace.errors:\n            console.print("\\n[bold]Recent Errors (last 10):[/bold]")\n            for error in namespace.errors[:10]:\n                console.print(f"  [{error.timestamp}] {error.message} ({error.count} occurrence(s))")\n\n    except Exception as e:\n        console.print(f"[red]Error describing namespace: {e}[/red]")\n        raise typer.Exit(1)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"admin-grpc-client-wrapper",children:"Admin gRPC Client Wrapper"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# src/prism_cli/client/admin.py\nimport grpc\nfrom typing import List, Optional\nfrom ..proto import admin_pb2, admin_pb2_grpc\nfrom .auth import get_credentials\n\nclass AdminClient:\n    """Wrapper around Admin gRPC client for CLI operations."""\n\n    def __init__(self, endpoint: str = "localhost:50052"):\n        self.endpoint = endpoint\n        self.credentials = get_credentials()\n        self.channel = grpc.secure_channel(\n            endpoint,\n            self.credentials,\n        )\n        self.stub = admin_pb2_grpc.AdminServiceStub(self.channel)\n\n    def create_namespace(\n        self,\n        name: str,\n        backend: str,\n        pattern: str,\n        consistency: str = "eventual",\n        cache_ttl: Optional[int] = None,\n    ) -> Namespace:\n        """Create a new namespace."""\n        request = admin_pb2.CreateNamespaceRequest(\n            name=name,\n            backend=backend,\n            pattern=pattern,\n            consistency=consistency,\n            cache_ttl=cache_ttl,\n        )\n        response = self.stub.CreateNamespace(request)\n        return Namespace.from_proto(response)\n\n    def list_namespaces(\n        self,\n        backend: Optional[str] = None,\n        include_inactive: bool = False,\n    ) -> List[Namespace]:\n        """List all namespaces."""\n        request = admin_pb2.ListNamespacesRequest(\n            backend=backend,\n            include_inactive=include_inactive,\n        )\n        response = self.stub.ListNamespaces(request)\n        return [Namespace.from_proto(ns) for ns in response.namespaces]\n\n    def describe_namespace(\n        self,\n        name: str,\n        include_errors: bool = False,\n        include_config: bool = False,\n    ) -> Namespace:\n        """Get detailed namespace information."""\n        request = admin_pb2.DescribeNamespaceRequest(\n            name=name,\n            include_errors=include_errors,\n            include_config=include_config,\n        )\n        response = self.stub.DescribeNamespace(request)\n        return Namespace.from_proto(response)\n\n    def check_backend_health(\n        self,\n        backend: Optional[str] = None,\n    ) -> List[BackendHealth]:\n        """Check health of backends."""\n        request = admin_pb2.HealthCheckRequest(backend=backend)\n        response = self.stub.CheckBackendHealth(request)\n        return [BackendHealth.from_proto(h) for h in response.backends]\n\n    def trace_session(\n        self,\n        session_id: str,\n        min_latency_ms: Optional[int] = None,\n    ):\n        """Stream trace events for a session."""\n        request = admin_pb2.TraceSessionRequest(\n            session_id=session_id,\n            min_latency_ms=min_latency_ms,\n        )\n        for event in self.stub.TraceSession(request):\n            yield TraceEvent.from_proto(event)\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        self.channel.close()\n'})}),"\n",(0,a.jsx)(n.h2,{id:"use-case-recommendations",children:"Use-Case Recommendations"}),"\n",(0,a.jsx)(n.h3,{id:"-when-to-use-cli",children:"\u2705 When to Use CLI"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Operational Tasks"}),": Health checks, session management, troubleshooting"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Automation"}),": CI/CD pipelines, infrastructure-as-code, scripting"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Quick Checks"}),": Rapid inspection without opening web UI"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"SSH Sessions"}),": Remote administration without GUI requirements"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Development"}),": Local testing and debugging during development"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"-when-cli-is-less-suitable",children:"\u274c When CLI is Less Suitable"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Complex Visualizations"}),": Graphs, charts, time-series plots (use web UI)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Interactive Exploration"}),": Clicking through related entities (web UI better)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Long-Running Monitoring"}),": Real-time dashboards (use web UI or Grafana)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Non-Technical Users"}),": Prefer graphical interfaces"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"migration-to-web-ui",children:"Migration to Web UI"}),"\n",(0,a.jsx)(n.p,{children:"The CLI validates the admin API design and provides immediate value. Web UI development can proceed in parallel:"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Phase 1"}),": CLI delivers all admin functionality"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Phase 2"}),": Web UI built using same Admin gRPC API"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Phase 3"}),": Both CLI and Web UI coexist (CLI for automation, UI for exploration)"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(n.h3,{id:"cli-configuration-file",children:"CLI Configuration File"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"# ~/.prism/config.yaml\ndefault_endpoint: localhost:50052\nauth:\n  method: mtls\n  cert_path: ~/.prism/client.crt\n  key_path: ~/.prism/client.key\n  ca_path: ~/.prism/ca.crt\n\noutput:\n  format: table  # table, json, yaml\n  color: auto    # auto, always, never\n\ntimeouts:\n  connect: 5s\n  request: 30s\n\nlogging:\n  level: info\n  file: ~/.prism/cli.log\n"})}),"\n",(0,a.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:'# Override config file settings\nexport PRISM_ENDPOINT="prism.example.com:50052"\nexport PRISM_AUTH_METHOD="oauth2"\nexport PRISM_OUTPUT_FORMAT="json"\n'})}),"\n",(0,a.jsx)(n.h2,{id:"performance-and-ux",children:"Performance and UX"}),"\n",(0,a.jsx)(n.h3,{id:"performance-targets",children:"Performance Targets"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Command Startup"}),": <100ms cold start, <50ms warm start"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"gRPC Calls"}),": <10ms for simple queries, <100ms for complex operations"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Streaming"}),": Live trace output with <10ms latency"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Large Lists"}),": Pagination and streaming for 1000+ items"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"ux-enhancements",children:"UX Enhancements"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Rich Formatting"}),": Colors, tables, trees, progress bars"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Interactive Prompts"}),": When ",(0,a.jsx)(n.code,{children:"--interactive"})," flag used"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Smart Defaults"}),": Sensible defaults for all optional parameters"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Helpful Errors"}),": Clear error messages with suggested fixes"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Autocomplete"}),": Shell completion for commands and options"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Aliases"}),": Common shortcuts (e.g., ",(0,a.jsx)(n.code,{children:"ns"})," for ",(0,a.jsx)(n.code,{children:"namespace"}),", ",(0,a.jsx)(n.code,{children:"be"})," for ",(0,a.jsx)(n.code,{children:"backend"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,a.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# tests/test_namespace.py\nfrom typer.testing import CliRunner\nfrom prism_cli.main import app\nfrom .fixtures.mock_grpc import MockAdminService\n\nrunner = CliRunner()\n\ndef test_namespace_create():\n    with MockAdminService() as mock:\n        mock.set_response("CreateNamespace", Namespace(\n            name="test-ns",\n            backend="postgres",\n            pattern="keyvalue",\n        ))\n\n        result = runner.invoke(app, [\n            "namespace", "create", "test-ns",\n            "--backend", "postgres",\n            "--pattern", "keyvalue",\n        ])\n\n        assert result.exit_code == 0\n        assert "Created namespace \'test-ns\'" in result.stdout\n\ndef test_namespace_list_json():\n    with MockAdminService() as mock:\n        mock.set_response("ListNamespaces", ListNamespacesResponse(\n            namespaces=[\n                Namespace(name="ns1", backend="postgres"),\n                Namespace(name="ns2", backend="redis"),\n            ]\n        ))\n\n        result = runner.invoke(app, ["namespace", "list", "--output", "json"])\n\n        assert result.exit_code == 0\n        data = json.loads(result.stdout)\n        assert len(data) == 2\n        assert data[0]["name"] == "ns1"\n'})}),"\n",(0,a.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# tests/integration/test_admin_client.py\nimport pytest\nfrom prism_cli.client.admin import AdminClient\n\n@pytest.fixture\ndef admin_client():\n    """Connect to local test proxy."""\n    return AdminClient(endpoint="localhost:50052")\n\ndef test_create_and_list_namespace(admin_client):\n    # Create namespace\n    ns = admin_client.create_namespace(\n        name="test-integration",\n        backend="sqlite",\n        pattern="keyvalue",\n    )\n    assert ns.name == "test-integration"\n\n    # List and verify\n    namespaces = admin_client.list_namespaces()\n    names = [ns.name for ns in namespaces]\n    assert "test-integration" in names\n\n    # Cleanup\n    admin_client.delete_namespace("test-integration")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"deployment",children:"Deployment"}),"\n",(0,a.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Install via uv (development)\ncd prism-cli\nuv pip install -e .\n\n# Install from package (production)\nuv pip install prism-cli\n\n# Verify installation\nprism --version\nprism --help\n"})}),"\n",(0,a.jsx)(n.h3,{id:"shell-completion",children:"Shell Completion"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Bash\nprism --install-completion bash\n\n# Zsh\nprism --install-completion zsh\n\n# Fish\nprism --install-completion fish\n"})}),"\n",(0,a.jsx)(n.h2,{id:"migration-path",children:"Migration Path"}),"\n",(0,a.jsx)(n.h3,{id:"phase-1-core-cli-week-1-2",children:"Phase 1: Core CLI (Week 1-2)"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Namespace CRUD operations"}),"\n",(0,a.jsx)(n.li,{children:"Backend health checks"}),"\n",(0,a.jsx)(n.li,{children:"Session listing"}),"\n",(0,a.jsx)(n.li,{children:"Basic metrics"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Deliverable"}),": Functional CLI covering 80% of admin use cases"]}),"\n",(0,a.jsx)(n.h3,{id:"phase-2-advanced-features-week-3-4",children:"Phase 2: Advanced Features (Week 3-4)"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Session tracing (streaming)"}),"\n",(0,a.jsx)(n.li,{children:"Shadow traffic management"}),"\n",(0,a.jsx)(n.li,{children:"Configuration validation"}),"\n",(0,a.jsx)(n.li,{children:"Metrics export"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Deliverable"}),": Complete feature parity with Admin gRPC API"]}),"\n",(0,a.jsx)(n.h3,{id:"phase-3-polish-and-documentation-week-5-6",children:"Phase 3: Polish and Documentation (Week 5-6)"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Comprehensive tests (unit + integration)"}),"\n",(0,a.jsx)(n.li,{children:"Shell completion"}),"\n",(0,a.jsx)(n.li,{children:"Man pages and documentation"}),"\n",(0,a.jsx)(n.li,{children:"CI/CD integration examples"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Deliverable"}),": Production-ready CLI with excellent docs"]}),"\n",(0,a.jsx)(n.h3,{id:"phase-4-web-ui-development-parallel",children:"Phase 4: Web UI Development (Parallel)"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"RFC-007: Web Admin UI specification"}),"\n",(0,a.jsx)(n.li,{children:"Ember.js application using same Admin gRPC API"}),"\n",(0,a.jsx)(n.li,{children:"CLI and web UI coexist and complement each other"}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,a.jsx)(n.h3,{id:"cli-usage-metrics",children:"CLI Usage Metrics"}),"\n",(0,a.jsx)(n.p,{children:"Track CLI adoption and usage patterns:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Command Usage"}),": Which commands are most popular"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Error Rates"}),": Which commands fail most often"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Latency"}),": gRPC call latency from CLI"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Authentication"}),": Success/failure rates for auth"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,a.jsx)(n.p,{children:"CLI logs structured events:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-json",children:'{\n  "timestamp": "2025-10-08T09:15:23.456Z",\n  "level": "info",\n  "command": "namespace create",\n  "args": {"name": "my-app", "backend": "postgres"},\n  "duration_ms": 234,\n  "status": "success"\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"mTLS by Default"}),": All gRPC connections use mutual TLS"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Credential Storage"}),": Secure storage for certificates and tokens"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Audit Logging"}),": All admin operations logged server-side"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Least Privilege"}),": Role-based access control (RBAC) enforced by proxy"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"No Secrets in Logs"}),": Sanitize sensitive data from CLI logs"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"OAuth2 Integration"}),": Should CLI support OAuth2 device flow for cloud deployments?"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Plugin System"}),": Allow third-party commands to extend CLI?"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"TUI Mode"}),": Add full-screen TUI for real-time monitoring?"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Multi-Proxy"}),": Manage multiple Prism proxies from single CLI?"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"RFC-003: Admin gRPC API specification"}),"\n",(0,a.jsxs)(n.li,{children:["Typer Documentation: ",(0,a.jsx)(n.a,{href:"https://typer.tiangolo.com/",children:"https://typer.tiangolo.com/"})]}),"\n",(0,a.jsxs)(n.li,{children:["Rich Documentation: ",(0,a.jsx)(n.a,{href:"https://rich.readthedocs.io/",children:"https://rich.readthedocs.io/"})]}),"\n",(0,a.jsxs)(n.li,{children:["Click Documentation: ",(0,a.jsx)(n.a,{href:"https://click.palletsprojects.com/",children:"https://click.palletsprojects.com/"})]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"appendix-command-reference",children:"Appendix: Command Reference"}),"\n",(0,a.jsx)(n.h3,{id:"all-commands",children:"All Commands"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"prism namespace create <name> [options]\nprism namespace list [options]\nprism namespace describe <name> [options]\nprism namespace update <name> [options]\nprism namespace delete <name> [options]\n\nprism backend list [options]\nprism backend health [options]\nprism backend stats [options]\nprism backend test <backend> [options]\n\nprism session list [options]\nprism session describe <session-id>\nprism session kill <session-id>\nprism session trace <session-id> [options]\n\nprism config show [options]\nprism config validate <file> [options]\nprism config apply <file> [options]\n\nprism metrics summary [options]\nprism metrics namespace <name> [options]\nprism metrics export [options]\n\nprism shadow enable <namespace> [options]\nprism shadow disable <namespace>\nprism shadow status <namespace>\n\nprism version\nprism help [command]\n"})}),"\n",(0,a.jsx)(n.h3,{id:"global-options",children:"Global Options"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"--endpoint <url>        # Proxy endpoint (default: localhost:50052)\n--output <format>       # Output format: table, json, yaml\n--no-color              # Disable colored output\n--verbose, -v           # Verbose logging\n--quiet, -q             # Suppress non-error output\n--config <file>         # CLI config file\n--help, -h              # Show help\n"})}),"\n",(0,a.jsx)(n.hr,{}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status"}),": Ready for Implementation\n",(0,a.jsx)(n.strong,{children:"Next Steps"}),":"]}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsx)(n.li,{children:"Implement core CLI structure with Typer"}),"\n",(0,a.jsx)(n.li,{children:"Add namespace commands as proof-of-concept"}),"\n",(0,a.jsx)(n.li,{children:"Test against local Prism proxy"}),"\n",(0,a.jsx)(n.li,{children:"Iterate based on user feedback"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var i=s(6540);const a={},t=i.createContext(a);function r(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);