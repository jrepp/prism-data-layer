"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[2194],{3790:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"observability-strategy","title":"ADR-008: Observability Strategy","description":"Context","source":"@site/../docs-cms/adr/008-observability-strategy.md","sourceDirName":".","slug":"/observability-strategy","permalink":"/prism-data-layer/adr/observability-strategy","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/008-observability-strategy.md","tags":[{"inline":true,"label":"operations","permalink":"/prism-data-layer/adr/tags/operations"},{"inline":true,"label":"performance","permalink":"/prism-data-layer/adr/tags/performance"},{"inline":true,"label":"reliability","permalink":"/prism-data-layer/adr/tags/reliability"}],"version":"current","sidebarPosition":8,"frontMatter":{"title":"ADR-008: Observability Strategy","status":"Accepted","date":"2025-10-05T00:00:00.000Z","deciders":"Core Team","tags":["operations","performance","reliability"]},"sidebar":"adrSidebar","previous":{"title":"ADR-007: Authentication and Authorization","permalink":"/prism-data-layer/adr/authentication-authorization"},"next":{"title":"ADR-009: Shadow Traffic for Migrations","permalink":"/prism-data-layer/adr/shadow-traffic-migrations"}}');var t=r(4848),i=r(8453);const a={title:"ADR-008: Observability Strategy",status:"Accepted",date:new Date("2025-10-05T00:00:00.000Z"),deciders:"Core Team",tags:["operations","performance","reliability"]},l=void 0,o={},c=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why OpenTelemetry?",id:"why-opentelemetry",level:3},{value:"Architecture",id:"architecture",level:3},{value:"Metrics",id:"metrics",level:3},{value:"Structured Logging",id:"structured-logging",level:3},{value:"Distributed Tracing",id:"distributed-tracing",level:3},{value:"Sampling",id:"sampling",level:3},{value:"Alerts",id:"alerts",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"OpenTelemetry Setup",id:"opentelemetry-setup",level:3},{value:"Context Propagation",id:"context-propagation",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,t.jsx)(n.p,{children:"Prism is critical infrastructure sitting in the data path. We must be able to:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Debug issues quickly"}),": When things go wrong, understand why"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Monitor health"}),": Know if Prism is operating correctly"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Track performance"}),": Measure latency, throughput, errors"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Capacity planning"}),": Understand resource usage trends"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Compliance"}),": Audit logging for regulatory requirements"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Observability has three pillars:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Metrics"}),": Numerical measurements (latency, RPS, error rate)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Logs"}),": Structured events (request details, errors)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Traces"}),": Request flow through distributed system"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,t.jsxs)(n.p,{children:["Adopt ",(0,t.jsx)(n.strong,{children:"OpenTelemetry"})," from day one for metrics, logs, and traces. Use ",(0,t.jsx)(n.strong,{children:"Prometheus"})," for metrics storage, ",(0,t.jsx)(n.strong,{children:"Loki"})," for logs, and ",(0,t.jsx)(n.strong,{children:"Jaeger/Tempo"})," for traces."]}),"\n",(0,t.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,t.jsx)(n.h3,{id:"why-opentelemetry",children:"Why OpenTelemetry?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Vendor neutral"}),": Not locked into specific backend"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Industry standard"}),": Wide adoption, good tooling"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Unified SDK"}),": One library for metrics, logs, traces"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Rust support"}),": Excellent ",(0,t.jsx)(n.code,{children:"opentelemetry-rust"})," crate"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Future-proof"}),": CNCF graduated project"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"architecture",children:"Architecture"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Prism Proxy \u2502\n\u2502             \u2502\n\u2502 OpenTelemetry SDK\n\u2502   \u251c\u2500 Metrics \u2500\u2500\u2500\u2500\u2500\u25ba Prometheus\n\u2502   \u251c\u2500 Logs \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba Loki\n\u2502   \u2514\u2500 Traces \u2500\u2500\u2500\u2500\u2500\u2500\u25ba Jaeger/Tempo\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(n.h3,{id:"metrics",children:"Metrics"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Key Metrics"})," (Prometheus format):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use prometheus::{\n    register_histogram_vec, register_counter_vec,\n    HistogramVec, CounterVec,\n};\n\nlazy_static! {\n    // Request latency\n    static ref REQUEST_DURATION: HistogramVec = register_histogram_vec!(\n        "prism_request_duration_seconds",\n        "Request latency in seconds",\n        &["namespace", "operation", "backend"],\n        vec![0.001, 0.005, 0.01, 0.025, 0.05, 0.1, 0.25, 0.5, 1.0, 2.5, 5.0]\n    ).unwrap();\n\n    // Request count\n    static ref REQUEST_COUNT: CounterVec = register_counter_vec!(\n        "prism_requests_total",\n        "Total requests",\n        &["namespace", "operation", "status"]\n    ).unwrap();\n\n    // Backend connection pool\n    static ref POOL_SIZE: GaugeVec = register_gauge_vec!(\n        "prism_backend_pool_size",\n        "Backend connection pool size",\n        &["backend"]\n    ).unwrap();\n}\n\n// Usage\nlet timer = REQUEST_DURATION\n    .with_label_values(&[namespace, "get", "postgres"])\n    .start_timer();\n\n// ... do work ...\n\ntimer.observe_duration();\n\nREQUEST_COUNT\n    .with_label_values(&[namespace, "get", "success"])\n    .inc();\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Dashboards"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Golden Signals"}),": Latency, Traffic, Errors, Saturation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Per-Namespace"}),": Breakdown by namespace"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Per-Backend"}),": Backend-specific metrics"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"structured-logging",children:"Structured Logging"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Format"}),": JSON for machine parsing"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use tracing::{info, error, instrument};\nuse tracing_subscriber::fmt::format::json;\n\n#[instrument(\n    skip(request),\n    fields(\n        request_id = %request.id,\n        namespace = %request.namespace,\n        operation = %request.operation,\n    )\n)]\nasync fn handle_request(request: Request) -> Result<Response> {\n    info!("Processing request");\n\n    match process(&request).await {\n        Ok(response) => {\n            info!(\n                latency_ms = response.latency_ms,\n                backend = %response.backend,\n                "Request succeeded"\n            );\n            Ok(response)\n        }\n        Err(e) => {\n            error!(\n                error = %e,\n                error_kind = ?e.kind(),\n                "Request failed"\n            );\n            Err(e)\n        }\n    }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Log Output"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "timestamp": "2025-10-05T12:34:56.789Z",\n  "level": "INFO",\n  "message": "Request succeeded",\n  "request_id": "req-abc-123",\n  "namespace": "user-profiles",\n  "operation": "get",\n  "latency_ms": 2.3,\n  "backend": "postgres",\n  "span": {\n    "name": "handle_request",\n    "trace_id": "0af7651916cd43dd8448eb211c80319c"\n  }\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Log Levels"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"ERROR"}),": Something failed, needs immediate attention"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"WARN"}),": Something unexpected, may need attention"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"INFO"}),": Important events (requests, config changes)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"DEBUG"}),": Detailed events (SQL queries, cache hits)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"TRACE"}),": Very verbose (every function call)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Production: ",(0,t.jsx)(n.code,{children:"INFO"})," level\nDevelopment: ",(0,t.jsx)(n.code,{children:"DEBUG"})," level"]}),"\n",(0,t.jsx)(n.h3,{id:"distributed-tracing",children:"Distributed Tracing"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Trace Example"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"GET /namespaces/user-profiles/items/user123\n\u2502\n\u251c\u2500 [2.5ms] prism.proxy.handle_request\n\u2502  \u2502\n\u2502  \u251c\u2500 [0.1ms] prism.authz.authorize\n\u2502  \u2502\n\u2502  \u251c\u2500 [0.2ms] prism.router.route\n\u2502  \u2502\n\u2502  \u2514\u2500 [2.1ms] prism.backend.postgres.get\n\u2502     \u2502\n\u2502     \u251c\u2500 [0.3ms] postgres.acquire_connection\n\u2502     \u2502\n\u2502     \u2514\u2500 [1.7ms] postgres.execute_query\n\u2502        \u2502\n\u2502        \u2514\u2500 [1.5ms] SELECT FROM user_profiles WHERE id = $1\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Implementation"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use opentelemetry::trace::{Tracer, SpanKind};\nuse tracing_opentelemetry::OpenTelemetryLayer;\n\n#[instrument]\nasync fn handle_request(request: Request) -> Result<Response> {\n    let span = tracing::Span::current();\n\n    // Add attributes\n    span.record("namespace", &request.namespace);\n    span.record("operation", &request.operation);\n\n    // Child span for backend call\n    let response = {\n        let _guard = tracing::info_span!("backend.get",\n            backend = "postgres"\n        ).entered();\n\n        backend.get(&request).await?\n    };\n\n    span.record("latency_ms", response.latency_ms);\n    Ok(response)\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"sampling",children:"Sampling"}),"\n",(0,t.jsx)(n.p,{children:"Full traces are expensive. Sample based on:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"use opentelemetry::sdk::trace::{Sampler, SamplingDecision};\n\npub struct AdaptiveSampler {\n    // Always sample errors\n    // Always sample slow requests (> 100ms)\n    // Sample 1% of normal requests\n}\n\nimpl Sampler for AdaptiveSampler {\n    fn should_sample(&self, context: &SamplingContext) -> SamplingDecision {\n        // Error? Always sample\n        if context.has_error {\n            return SamplingDecision::RecordAndSample;\n        }\n\n        // Slow? Always sample\n        if context.duration > Duration::from_millis(100) {\n            return SamplingDecision::RecordAndSample;\n        }\n\n        // Otherwise, 1% sample rate\n        if rand::random::<f64>() < 0.01 {\n            return SamplingDecision::RecordAndSample;\n        }\n\n        SamplingDecision::Drop\n    }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"alerts",children:"Alerts"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Critical Alerts"})," (page on-call):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'- alert: PrismHighErrorRate\n  expr: |\n    (\n      sum(rate(prism_requests_total{status="error"}[5m]))\n      /\n      sum(rate(prism_requests_total[5m]))\n    ) > 0.01\n  for: 2m\n  annotations:\n    summary: "Prism error rate > 1%"\n\n- alert: PrismHighLatency\n  expr: |\n    histogram_quantile(0.99,\n      rate(prism_request_duration_seconds_bucket[5m])\n    ) > 0.1\n  for: 5m\n  annotations:\n    summary: "Prism P99 latency > 100ms"\n\n- alert: PrismDown\n  expr: up{job="prism"} == 0\n  for: 1m\n  annotations:\n    summary: "Prism instance is down"\n'})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Warning Alerts"})," (Slack notification):"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:'- alert: PrismElevatedLatency\n  expr: |\n    histogram_quantile(0.99,\n      rate(prism_request_duration_seconds_bucket[5m])\n    ) > 0.05\n  for: 10m\n  annotations:\n    summary: "Prism P99 latency > 50ms"\n\n- alert: PrismHighCacheEvictionRate\n  expr: rate(prism_cache_evictions_total[5m]) > 100\n  for: 5m\n  annotations:\n    summary: "High cache eviction rate"\n'})}),"\n",(0,t.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Roll Our Own Metrics"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pros: Full control"}),"\n",(0,t.jsx)(n.li,{children:"Cons: Reinventing the wheel, no ecosystem"}),"\n",(0,t.jsx)(n.li,{children:"Rejected: Not worth the effort"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Datadog/New Relic (Commercial)"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pros: Turnkey solution, great UI"}),"\n",(0,t.jsx)(n.li,{children:"Cons: Expensive, vendor lock-in"}),"\n",(0,t.jsx)(n.li,{children:"Rejected: Prefer open source"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Jaeger Only"})," (no Prometheus)"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pros: Simpler stack"}),"\n",(0,t.jsx)(n.li,{children:"Cons: Traces alone insufficient for monitoring"}),"\n",(0,t.jsx)(n.li,{children:"Rejected: Need metrics for alerts"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"No Structured Logging"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pros: Simpler"}),"\n",(0,t.jsx)(n.li,{children:"Cons: Hard to query, no context"}),"\n",(0,t.jsx)(n.li,{children:"Rejected: Structured logs essential"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,t.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Comprehensive Visibility"}),": Metrics, logs, traces cover all aspects"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Vendor Neutral"}),": Can switch backends (Tempo, Grafana Cloud, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Industry Standard"}),": OpenTelemetry is well-supported"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Debugging Power"}),": Distributed traces show exact request flow"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Resource Overhead"}),": Metrics/traces use CPU/memory","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"Mitigation"}),": Sampling, async export"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Operational Complexity"}),": More services to run (Prometheus, Loki, Jaeger)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"Mitigation"}),": Use managed services or existing infrastructure"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Learning Curve"}),": Team must learn OpenTelemetry","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Good investment; transferable skill"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,t.jsx)(n.h3,{id:"opentelemetry-setup",children:"OpenTelemetry Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:'use opentelemetry::sdk::trace::{self, Tracer};\nuse opentelemetry::global;\nuse tracing_subscriber::{layer::SubscriberExt, Registry};\nuse tracing_opentelemetry::OpenTelemetryLayer;\n\nfn init_telemetry() -> Result<()> {\n    // Tracer\n    let tracer = opentelemetry_jaeger::new_pipeline()\n        .with_service_name("prism-proxy")\n        .with_agent_endpoint("jaeger:6831")\n        .install_batch(opentelemetry::runtime::Tokio)?;\n\n    // Logging + tracing layer\n    let telemetry_layer = OpenTelemetryLayer::new(tracer);\n\n    let subscriber = Registry::default()\n        .with(tracing_subscriber::fmt::layer().json())\n        .with(telemetry_layer);\n\n    tracing::subscriber::set_global_default(subscriber)?;\n\n    // Metrics\n    let prometheus_exporter = opentelemetry_prometheus::exporter()\n        .with_registry(prometheus::default_registry().clone())\n        .init();\n\n    global::set_meter_provider(prometheus_exporter);\n\n    Ok(())\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"context-propagation",children:"Context Propagation"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-rust",children:"// Extract trace context from gRPC metadata\nuse tonic::metadata::MetadataMap;\nuse opentelemetry::propagation::TextMapPropagator;\n\nfn extract_trace_context(metadata: &MetadataMap) -> Context {\n    let propagator = TraceContextPropagator::new();\n    let extractor = MetadataExtractor(metadata);\n    propagator.extract(&extractor)\n}\n\n// Inject trace context when calling backend\nfn inject_trace_context(context: &Context) -> MetadataMap {\n    let propagator = TraceContextPropagator::new();\n    let mut metadata = MetadataMap::new();\n    let mut injector = MetadataInjector(&mut metadata);\n    propagator.inject_context(context, &mut injector);\n    metadata\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://opentelemetry.io/docs/specs/otel/",children:"OpenTelemetry Specification"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://prometheus.io/docs/practices/naming/",children:"Prometheus Best Practices"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://sre.google/sre-book/monitoring-distributed-systems/",children:"Google SRE - Monitoring Distributed Systems"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://tokio.rs/tokio/topics/tracing",children:"Tracing in Rust"})}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"2025-10-05: Initial draft and acceptance"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>l});var s=r(6540);const t={},i=s.createContext(t);function a(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);