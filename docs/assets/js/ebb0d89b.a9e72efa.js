"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[5145],{28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>o});var s=i(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}},93867:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"adr-046","title":"Dex IDP for Local Identity Testing","description":"Context","source":"@site/../docs-cms/adr/adr-046-dex-idp-local-testing.md","sourceDirName":".","slug":"/adr-046","permalink":"/prism-data-layer/adr/adr-046","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-046-dex-idp-local-testing.md","tags":[{"inline":true,"label":"authentication","permalink":"/prism-data-layer/adr/tags/authentication"},{"inline":true,"label":"oidc","permalink":"/prism-data-layer/adr/tags/oidc"},{"inline":true,"label":"testing","permalink":"/prism-data-layer/adr/tags/testing"},{"inline":true,"label":"local-development","permalink":"/prism-data-layer/adr/tags/local-development"},{"inline":true,"label":"dex","permalink":"/prism-data-layer/adr/tags/dex"}],"version":"current","frontMatter":{"date":"2025-10-09T00:00:00.000Z","deciders":"Platform Team","doc_uuid":"d9984f7d-1227-4a10-8675-f80c71e3adc2","id":"adr-046","project_id":"prism-data-layer","status":"Accepted","tags":["authentication","oidc","testing","local-development","dex"],"title":"Dex IDP for Local Identity Testing"},"sidebar":"adrSidebar","previous":{"title":"prismctl Stack Management Subcommand \u2022 ADR-045","permalink":"/prism-data-layer/adr/adr-045"},"next":{"title":"OpenTelemetry Tracing Integration \u2022 ADR-047","permalink":"/prism-data-layer/adr/adr-047"}}');var r=i(74848),t=i(28453);const l={date:new Date("2025-10-09T00:00:00.000Z"),deciders:"Platform Team",doc_uuid:"d9984f7d-1227-4a10-8675-f80c71e3adc2",id:"adr-046",project_id:"prism-data-layer",status:"Accepted",tags:["authentication","oidc","testing","local-development","dex"],title:"Dex IDP for Local Identity Testing"},o=void 0,a={},d=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Implementation",id:"implementation",level:2},{value:"1. Docker Compose Integration",id:"1-docker-compose-integration",level:3},{value:"2. Dex Configuration",id:"2-dex-configuration",level:3},{value:"3. Test Users and Groups",id:"3-test-users-and-groups",level:3},{value:"4. CLI Integration",id:"4-cli-integration",level:3},{value:"5. Testing Integration",id:"5-testing-integration",level:3},{value:"6. JWT Claims Structure",id:"6-jwt-claims-structure",level:3},{value:"7. Development Workflow",id:"7-development-workflow",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Usage Examples",id:"usage-examples",level:2},{value:"Example 1: Admin API Testing",id:"example-1-admin-api-testing",level:3},{value:"Example 2: RBAC Testing",id:"example-2-rbac-testing",level:3},{value:"Example 3: Integration Tests",id:"example-3-integration-tests",level:3},{value:"Example 4: Data Proxy mTLS + OIDC",id:"example-4-data-proxy-mtls--oidc",level:3},{value:"Migration Path",id:"migration-path",level:2},{value:"Phase 1: Local Development (Immediate)",id:"phase-1-local-development-immediate",level:3},{value:"Phase 2: Integration Tests (1-2 weeks)",id:"phase-2-integration-tests-1-2-weeks",level:3},{value:"Phase 3: Documentation (Ongoing)",id:"phase-3-documentation-ongoing",level:3},{value:"Documentation Requirements",id:"documentation-requirements",level:2},{value:"References",id:"references",level:2},{value:"Open Questions",id:"open-questions",level:2},{value:"Revision History",id:"revision-history",level:2}];function c(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(n.p,{children:"Prism uses OIDC authentication for both the Admin API (RFC-010) and Data Proxy (RFC-011). During local development and testing, developers need:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Local OIDC Provider"}),": Test authentication flows without external dependencies"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multiple Identity Scenarios"}),": Simulate different users, groups, and permissions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fast Iteration"}),": No cloud setup or API keys required"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Realistic Testing"}),": Same OIDC flows as production"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"CI/CD Integration"}),": Run authentication tests in GitHub Actions"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Current Problems"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Mocking OIDC flows doesn't test real JWT validation"}),"\n",(0,r.jsx)(n.li,{children:"Using cloud providers (Auth0, Okta) requires API keys and network access"}),"\n",(0,r.jsx)(n.li,{children:"Hard to test edge cases (expired tokens, invalid signatures, missing claims)"}),"\n",(0,r.jsx)(n.li,{children:"Developers can't test authentication without cloud credentials"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Requirements"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Self-hosted OIDC provider for local development"}),"\n",(0,r.jsx)(n.li,{children:"Supports standard OIDC flows (device code, authorization code, client credentials)"}),"\n",(0,r.jsx)(n.li,{children:"Lightweight (can run in Docker Compose alongside Prism)"}),"\n",(0,r.jsx)(n.li,{children:"Configurable users, groups, and scopes"}),"\n",(0,r.jsx)(n.li,{children:"Compatible with Prism's JWT validation (RFC-010, RFC-011)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsxs)(n.p,{children:["We will use ",(0,r.jsx)(n.strong,{children:"Dex"})," as the local OIDC provider for development and testing."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What is Dex?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Open-source federated OIDC provider by CoreOS (now part of CNCF)"}),"\n",(0,r.jsx)(n.li,{children:"Lightweight (single Go binary, ~20MB Docker image)"}),"\n",(0,r.jsx)(n.li,{children:"Supports multiple authentication connectors (static users, LDAP, SAML, GitHub, Google)"}),"\n",(0,r.jsx)(n.li,{children:"Full OIDC 1.0 support (including device code flow for CLI testing)"}),"\n",(0,r.jsx)(n.li,{children:"Kubernetes-native but works standalone"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why Dex?"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Self-Hosted"}),": No cloud dependencies, runs in Docker Compose"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OIDC Compliant"}),": Full spec support, works with standard libraries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flexible Configuration"}),": YAML-based config for users, groups, clients"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Well-Maintained"}),": Active CNCF project, used by Kubernetes ecosystem"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fast"}),": Go-based, starts in <1 second"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documented"}),": Extensive docs and examples"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Alternatives Considered"}),":"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Provider"}),(0,r.jsx)(n.th,{children:"Pros"}),(0,r.jsx)(n.th,{children:"Cons"}),(0,r.jsx)(n.th,{children:"Verdict"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Dex"})}),(0,r.jsx)(n.td,{children:"Lightweight, OIDC compliant, self-hosted"}),(0,r.jsx)(n.td,{children:"Requires configuration"}),(0,r.jsxs)(n.td,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Chosen"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Keycloak"})}),(0,r.jsx)(n.td,{children:"Feature-rich, admin UI"}),(0,r.jsx)(n.td,{children:"Heavy (Java, 2GB RAM), slow startup"}),(0,r.jsx)(n.td,{children:"\u274c Too heavy for local dev"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"mock-oidc"})}),(0,r.jsx)(n.td,{children:"Minimal, fast"}),(0,r.jsx)(n.td,{children:"Not full OIDC spec, less realistic"}),(0,r.jsx)(n.td,{children:"\u274c Insufficient fidelity"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Okta/Auth0"})}),(0,r.jsx)(n.td,{children:"Production-grade"}),(0,r.jsx)(n.td,{children:"Requires cloud account, API keys, slow"}),(0,r.jsx)(n.td,{children:"\u274c Not self-hosted"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Hydra (Ory)"})}),(0,r.jsx)(n.td,{children:"OAuth2 focused, cloud-native"}),(0,r.jsx)(n.td,{children:"More complex setup, overkill"}),(0,r.jsx)(n.td,{children:"\u274c Over-engineered"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsx)(n.h3,{id:"1-docker-compose-integration",children:"1. Docker Compose Integration"}),"\n",(0,r.jsx)(n.p,{children:"Add Dex to local development stack:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.yaml\nservices:\n  dex:\n    image: ghcr.io/dexidp/dex:v2.38.0\n    ports:\n      - "5556:5556"  # HTTP\n      - "5557:5557"  # gRPC (optional)\n    volumes:\n      - ./local/dex/config.yaml:/etc/dex/config.yaml:ro\n    command: ["serve", "/etc/dex/config.yaml"]\n    networks:\n      - prism-dev\n\n  prism-proxy:\n    image: prism/proxy:dev\n    environment:\n      PRISM_OIDC_ISSUER: http://dex:5556\n      PRISM_OIDC_AUDIENCE: prismctl-api\n      PRISM_OIDC_JWKS_URI: http://dex:5556/keys\n    depends_on:\n      - dex\n    networks:\n      - prism-dev\n'})}),"\n",(0,r.jsx)(n.h3,{id:"2-dex-configuration",children:"2. Dex Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["Create ",(0,r.jsx)(n.code,{children:"local/dex/config.yaml"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'issuer: http://localhost:5556\n\nstorage:\n  type: memory  # Ephemeral for local dev\n\nweb:\n  http: 0.0.0.0:5556\n\n# Static users for testing\nstaticPasswords:\n  - email: alice@prism.local\n    hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"  # bcrypt("password")\n    username: alice\n    userID: "08a8684b-db88-4b73-90a9-3cd1661f5466"\n\n  - email: bob@prism.local\n    hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"\n    username: bob\n    userID: "41331323-6f44-45e6-b3b9-2c4b2b6e2e4"\n\n# OAuth2 clients\nstaticClients:\n  # Prism Admin CLI\n  - id: prismctl\n    name: Prism Admin CLI\n    secret: prismctl-secret\n    redirectURIs:\n      - http://localhost:8000/callback  # For web-based flows\n      - http://127.0.0.1:8000/callback\n    public: true  # Allow device code flow without secret\n\n  # Prism Data Proxy\n  - id: prism-proxy\n    name: Prism Data Proxy\n    secret: prism-proxy-secret\n    redirectURIs:\n      - http://localhost:8980/callback\n\n# OIDC configuration\noauth2:\n  skipApprovalScreen: true  # Auto-approve for local testing\n\n# Enable device code flow for CLI testing\nenablePasswordDB: true\n'})}),"\n",(0,r.jsx)(n.h3,{id:"3-test-users-and-groups",children:"3. Test Users and Groups"}),"\n",(0,r.jsx)(n.p,{children:"For testing RBAC scenarios:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# local/dex/config.yaml (extended)\nstaticPasswords:\n  # Admin user\n  - email: admin@prism.local\n    hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"\n    username: admin\n    userID: "admin-001"\n    groups:\n      - platform-team\n      - admins\n\n  # Operator user\n  - email: operator@prism.local\n    hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"\n    username: operator\n    userID: "operator-001"\n    groups:\n      - platform-team\n\n  # Viewer user (read-only)\n  - email: viewer@prism.local\n    hash: "$2a$10$2b2cU8CPhOTaGrs1HRQuAueS7JTT5ZHsHSzYiFPm1leZck7Mc8T4W"\n    username: viewer\n    userID: "viewer-001"\n    groups:\n      - viewers\n'})}),"\n",(0,r.jsx)(n.h3,{id:"4-cli-integration",children:"4. CLI Integration"}),"\n",(0,r.jsxs)(n.p,{children:["Update ",(0,r.jsx)(n.code,{children:"prismctl"})," to support Dex for local testing:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Local development\nprismctl login --issuer http://localhost:5556 --client-id prismctl\n\n# Will open browser to:\n# http://localhost:5556/auth?client_id=prismctl&...\n\n# User logs in with:\n# Email: admin@prism.local\n# Password: password\n\n# CLI receives token and caches to ~/.prism/token\n"})}),"\n",(0,r.jsx)(n.h3,{id:"5-testing-integration",children:"5. Testing Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// tests/integration/auth_test.go\nfunc TestAdminAuthWithDex(t *testing.T) {\n    // Start Dex in test mode\n    dex := startDexServer(t)\n    defer dex.Close()\n\n    // Configure Prism to use Dex\n    proxy := startProxyWithOIDC(t, ProxyConfig{\n        OIDCIssuer:   dex.URL(),\n        OIDCAudience: "prismctl-api",\n    })\n    defer proxy.Close()\n\n    // Acquire token from Dex\n    token := dex.AcquireToken(t, DexUser{\n        Email:  "admin@prism.local",\n        Groups: []string{"platform-team", "admins"},\n    })\n\n    // Call Admin API with token\n    client := admin.NewClient(proxy.AdminURL(), token)\n    namespaces, err := client.ListNamespaces(context.Background())\n    require.NoError(t, err)\n    assert.NotEmpty(t, namespaces)\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"6-jwt-claims-structure",children:"6. JWT Claims Structure"}),"\n",(0,r.jsx)(n.p,{children:"Dex issues JWTs with this structure (matches RFC-010 expectations):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "iss": "http://localhost:5556",\n  "sub": "admin-001",\n  "aud": "prismctl-api",\n  "exp": 1696867200,\n  "iat": 1696863600,\n  "email": "admin@prism.local",\n  "email_verified": true,\n  "groups": ["platform-team", "admins"],\n  "name": "admin"\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"7-development-workflow",children:"7. Development Workflow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# 1. Start local stack (includes Dex)\ndocker-compose up -d\n\n# 2. Login with Dex\nprismctl login --local  # Shorthand for --issuer http://localhost:5556\n\n# Browser opens, login with:\n# Email: admin@prism.local\n# Password: password\n\n# 3. Use Prism normally\nprismctl namespace list\nprismctl namespace create test-namespace\n\n# 4. JWT validation happens locally against Dex\n# No external network calls, no cloud dependencies\n"})}),"\n",(0,r.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,r.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Zero External Dependencies"}),": Developers can test authentication without internet"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Fast Iteration"}),": Start Dex in <1 second, test immediately"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Realistic Testing"}),": Full OIDC flows, not mocks"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Flexible Scenarios"}),": Easy to add test users with different permissions"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"CI/CD Ready"}),": Dex runs in GitHub Actions, no secrets required"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Production Parity"}),": Same OIDC libraries used locally and in prod"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Multi-User Testing"}),": Simulate multiple users in integration tests"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Well-Documented"}),": Dex has extensive docs and examples"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Extra Service"}),": One more container in Docker Compose\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Mitigation"}),": Dex is lightweight (20MB image, <50MB RAM)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Configuration Required"}),": Need to maintain ",(0,r.jsx)(n.code,{children:"dex/config.yaml"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Mitigation"}),": Provide sensible defaults, document patterns"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Learning Curve"}),": Developers must understand OIDC basics\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Mitigation"}),": Provide quick start guide, pre-configured users"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Static Users"}),": Local Dex uses static user database\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.em,{children:"Mitigation"}),": Sufficient for testing, not meant for production"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not for Production"}),": Dex is for local/test only, production uses real IdP (Auth0/Okta/Azure AD)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Additional Docs"}),": Need to document Dex setup and test user credentials"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Token Expiry"}),": Tokens expire after 1 hour (can be configured)"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage-examples",children:"Usage Examples"}),"\n",(0,r.jsx)(n.h3,{id:"example-1-admin-api-testing",children:"Example 1: Admin API Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Start stack with Dex\ndocker-compose up -d\n\n# Login as admin\nprismctl login --local\n# Email: admin@prism.local\n# Password: password\n\n# Admin operations work\nprismctl namespace create prod-analytics\n# \u2713 Success (admin has admin:write permission)\n"})}),"\n",(0,r.jsx)(n.h3,{id:"example-2-rbac-testing",children:"Example 2: RBAC Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Login as viewer\nprismctl login --local\n# Email: viewer@prism.local\n# Password: password\n\n# Viewer can list but not create\nprismctl namespace list\n# \u2713 Success (viewer has admin:read permission)\n\nprismctl namespace create test\n# \u2717 PermissionDenied: viewer lacks admin:write permission\n"})}),"\n",(0,r.jsx)(n.h3,{id:"example-3-integration-tests",children:"Example 3: Integration Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'func TestNamespaceRBAC(t *testing.T) {\n    dex := startDexServer(t)\n    proxy := startProxyWithOIDC(t, dex.URL())\n\n    // Test admin can create\n    adminToken := dex.AcquireToken(t, "admin@prism.local")\n    adminClient := admin.NewClient(proxy.AdminURL(), adminToken)\n\n    _, err := adminClient.CreateNamespace(ctx, "test")\n    require.NoError(t, err)\n\n    // Test viewer cannot create\n    viewerToken := dex.AcquireToken(t, "viewer@prism.local")\n    viewerClient := admin.NewClient(proxy.AdminURL(), viewerToken)\n\n    _, err = viewerClient.CreateNamespace(ctx, "test2")\n    require.Error(t, err)\n    assert.Contains(t, err.Error(), "PermissionDenied")\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"example-4-data-proxy-mtls--oidc",children:"Example 4: Data Proxy mTLS + OIDC"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Data proxy uses mTLS for clients, but services might use OIDC internally\n# Example: Prism service-to-service authentication\n\n# Service A gets token from Dex\nexport TOKEN=$(curl -X POST http://localhost:5556/token \\\n  -d grant_type=client_credentials \\\n  -d client_id=prism-proxy \\\n  -d client_secret=prism-proxy-secret)\n\n# Service A calls Prism proxy with token\ngrpcurl -H "Authorization: Bearer $TOKEN" \\\n  localhost:8980 prism.data.v1.DataService/Get\n'})}),"\n",(0,r.jsx)(n.h2,{id:"migration-path",children:"Migration Path"}),"\n",(0,r.jsx)(n.h3,{id:"phase-1-local-development-immediate",children:"Phase 1: Local Development (Immediate)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Add Dex to ",(0,r.jsx)(n.code,{children:"docker-compose.yaml"})]}),"\n",(0,r.jsxs)(n.li,{children:["Create ",(0,r.jsx)(n.code,{children:"local/dex/config.yaml"})," with test users"]}),"\n",(0,r.jsxs)(n.li,{children:["Update ",(0,r.jsx)(n.code,{children:"prismctl"})," to support ",(0,r.jsx)(n.code,{children:"--local"})," flag"]}),"\n",(0,r.jsx)(n.li,{children:"Document quick start guide"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-2-integration-tests-1-2-weeks",children:"Phase 2: Integration Tests (1-2 weeks)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Create Dex test helper library"}),"\n",(0,r.jsx)(n.li,{children:"Update integration tests to use Dex"}),"\n",(0,r.jsx)(n.li,{children:"Remove mock OIDC code"}),"\n",(0,r.jsx)(n.li,{children:"Add CI/CD Dex setup"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-3-documentation-ongoing",children:"Phase 3: Documentation (Ongoing)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:'Add "Local Authentication" section to docs'}),"\n",(0,r.jsx)(n.li,{children:"Document test users and their permissions"}),"\n",(0,r.jsx)(n.li,{children:"Provide troubleshooting guide"}),"\n",(0,r.jsx)(n.li,{children:"Create video walkthrough"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"documentation-requirements",children:"Documentation Requirements"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Quick Start Guide"}),": ",(0,r.jsx)(n.code,{children:"docs/local-development/authentication.md"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"How to start Dex"}),"\n",(0,r.jsx)(n.li,{children:"Default test users"}),"\n",(0,r.jsx)(n.li,{children:"Login flow walkthrough"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Test User Reference"}),": ",(0,r.jsx)(n.code,{children:"docs/local-development/test-users.md"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User credentials"}),"\n",(0,r.jsx)(n.li,{children:"Group memberships"}),"\n",(0,r.jsx)(n.li,{children:"Permission matrix"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Integration Test Examples"}),": ",(0,r.jsx)(n.code,{children:"tests/integration/README.md"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Using Dex in tests"}),"\n",(0,r.jsx)(n.li,{children:"Custom test users"}),"\n",(0,r.jsx)(n.li,{children:"Token acquisition patterns"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Troubleshooting"}),": ",(0,r.jsx)(n.code,{children:"docs/troubleshooting/dex.md"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Common Dex errors"}),"\n",(0,r.jsx)(n.li,{children:"Token validation issues"}),"\n",(0,r.jsx)(n.li,{children:"Browser not opening"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://dexidp.io/docs/",children:"Dex Official Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/dexidp/dex",children:"Dex GitHub Repository"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc8628",children:"OIDC Device Code Flow"})}),"\n",(0,r.jsx)(n.li,{children:"RFC-010: Admin Protocol with OIDC Authentication"}),"\n",(0,r.jsx)(n.li,{children:"RFC-011: Data Proxy Authentication"}),"\n",(0,r.jsx)(n.li,{children:"ADR-007: Authentication and Authorization"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Production Connector"}),": Should Dex connect to production IdP (Azure AD/Okta) for staging environment?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Leaning"}),": No, use real IdP for staging. Dex only for local/test."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Connector Support"}),": Should we configure Dex to support GitHub/Google login for convenience?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Leaning"}),": Not initially. Static users sufficient for testing."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Token Caching"}),": How long should Dex tokens be cached in ",(0,r.jsx)(n.code,{children:"~/.prism/token"}),"?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Leaning"}),": Match RFC-010 recommendation (24 hours, with refresh token support)"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Multi-Tenancy"}),": Should Dex support multiple tenants for testing namespace isolation?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Leaning"}),": Use groups for RBAC testing, not multi-tenant Dex setup"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Performance Testing"}),": Can Dex handle high-volume token issuance for load tests?"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Leaning"}),": For load testing, use production-grade IdP or mock. Dex for functional tests only."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2025-10-09: Initial ADR proposing Dex for local OIDC testing"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}}}]);