"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[122],{8020:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"RFC-004-redis-integration","title":"RFC-004: Redis Integration for Cache, PubSub, and Vector Search","description":"Abstract","source":"@site/../docs-cms/rfcs/RFC-004-redis-integration.md","sourceDirName":".","slug":"/RFC-004-redis-integration","permalink":"/prism-data-layer/rfc/RFC-004-redis-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/RFC-004-redis-integration.md","tags":[],"version":"current","frontMatter":{"title":"RFC-004: Redis Integration for Cache, PubSub, and Vector Search","status":"Proposed","author":"Core Team","created":"2025-10-08T00:00:00.000Z","updated":"2025-10-08T00:00:00.000Z","related":"RFC-001, RFC-002, ADR-003"},"sidebar":"rfcSidebar","previous":{"title":"RFC-003: Admin Interface for Prism","permalink":"/prism-data-layer/rfc/RFC-003-admin-interface"},"next":{"title":"Request for Comments (RFCs)","permalink":"/prism-data-layer/rfc/"}}');var r=s(4848),t=s(8453);const c={title:"RFC-004: Redis Integration for Cache, PubSub, and Vector Search",status:"Proposed",author:"Core Team",created:new Date("2025-10-08T00:00:00.000Z"),updated:new Date("2025-10-08T00:00:00.000Z"),related:"RFC-001, RFC-002, ADR-003"},a=void 0,l={},o=[{value:"Abstract",id:"abstract",level:2},{value:"1. Introduction",id:"1-introduction",level:2},{value:"1.1 Purpose",id:"11-purpose",level:3},{value:"1.2 Goals",id:"12-goals",level:3},{value:"1.3 Non-Goals",id:"13-non-goals",level:3},{value:"2. Architecture Overview",id:"2-architecture-overview",level:2},{value:"2.1 Redis Access Patterns",id:"21-redis-access-patterns",level:3},{value:"2.2 Deployment Models",id:"22-deployment-models",level:3},{value:"3. Cache (HashMap) Access Pattern",id:"3-cache-hashmap-access-pattern",level:2},{value:"3.1 Use Cases",id:"31-use-cases",level:3},{value:"3.2 Interface",id:"32-interface",level:3},{value:"3.3 Performance Targets",id:"33-performance-targets",level:3},{value:"3.4 Implementation Flow",id:"34-implementation-flow",level:3},{value:"4. PubSub Access Pattern",id:"4-pubsub-access-pattern",level:2},{value:"4.1 Use Cases",id:"41-use-cases",level:3},{value:"4.2 Interface",id:"42-interface",level:3},{value:"4.3 Characteristics",id:"43-characteristics",level:3},{value:"4.4 Implementation Flow",id:"44-implementation-flow",level:3},{value:"5. Vector Search Access Pattern",id:"5-vector-search-access-pattern",level:2},{value:"5.1 Use Cases",id:"51-use-cases",level:3},{value:"5.2 Interface",id:"52-interface",level:3},{value:"5.3 Redis VSS Configuration",id:"53-redis-vss-configuration",level:3},{value:"5.4 Implementation Flow",id:"54-implementation-flow",level:3},{value:"6. Configuration",id:"6-configuration",level:2},{value:"6.1 Client Configuration",id:"61-client-configuration",level:3},{value:"6.2 Server Configuration",id:"62-server-configuration",level:3},{value:"7. Operational Considerations",id:"7-operational-considerations",level:2},{value:"7.1 Persistence",id:"71-persistence",level:3},{value:"7.2 Monitoring",id:"72-monitoring",level:3},{value:"7.3 Capacity Planning",id:"73-capacity-planning",level:3},{value:"8. Migration Path",id:"8-migration-path",level:2},{value:"8.1 Phase 1: Cache (Week 1-2)",id:"81-phase-1-cache-week-1-2",level:3},{value:"8.2 Phase 2: PubSub (Week 3-4)",id:"82-phase-2-pubsub-week-3-4",level:3},{value:"8.3 Phase 3: Vector Search (Week 5-8)",id:"83-phase-3-vector-search-week-5-8",level:3},{value:"9. Use Case Recommendations",id:"9-use-case-recommendations",level:2},{value:"9.1 When to Use Redis Cache",id:"91-when-to-use-redis-cache",level:3},{value:"9.2 When to Use Redis PubSub",id:"92-when-to-use-redis-pubsub",level:3},{value:"9.3 When to Use Redis Vector Search",id:"93-when-to-use-redis-vector-search",level:3},{value:"10. References",id:"10-references",level:2},{value:"11. Revision History",id:"11-revision-history",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,r.jsx)(n.p,{children:"This RFC specifies the integration of Redis into Prism as a high-performance backend for three distinct use cases: key-value caching (HashMap), publish-subscribe messaging, and vector similarity search. Redis provides sub-millisecond latency for hot data paths while maintaining operational simplicity through a single backend technology."}),"\n",(0,r.jsx)(n.h2,{id:"1-introduction",children:"1. Introduction"}),"\n",(0,r.jsx)(n.h3,{id:"11-purpose",children:"1.1 Purpose"}),"\n",(0,r.jsx)(n.p,{children:"Redis integration addresses three critical data access patterns:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cache (HashMap)"}),": In-memory key-value store with TTL support for application-level caching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PubSub"}),": High-throughput message broadcasting for event distribution and real-time updates"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Vector Database"}),": Similarity search using Redis Vector Similarity Search (VSS) for ML/AI workloads"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"12-goals",children:"1.2 Goals"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Performance"}),": P50 latency ",(0,r.jsx)(n.code,{children:"<1ms"}),", P99 ",(0,r.jsx)(n.code,{children:"<5ms"})," for cache operations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Throughput"}),": Support 100k+ ops/sec per Redis instance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Flexibility"}),": Single Redis deployment serves multiple access patterns"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scalability"}),": Redis Cluster support for horizontal scaling"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Persistence"}),": Configurable persistence (AOF/RDB) per use case"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"13-non-goals",children:"1.3 Non-Goals"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not a primary database"}),": Redis is for hot paths, not source of truth"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not for large objects"}),": Objects ",(0,r.jsx)(n.code,{children:">1MB"})," should use blob storage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not for complex queries"}),": Use ClickHouse or Postgres for analytics"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Not for transactions"}),": Use Postgres for ACID requirements"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"2-architecture-overview",children:"2. Architecture Overview"}),"\n",(0,r.jsx)(n.h3,{id:"21-redis-access-patterns",children:"2.1 Redis Access Patterns"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:'graph TB\n    Client[Client Application]\n    Proxy[Prism Proxy]\n\n    subgraph "Redis Backends"\n        Cache[Redis Cache<br/>HashMap Operations]\n        PubSub[Redis PubSub<br/>Broadcasting]\n        Vector[Redis VSS<br/>Vector Search]\n    end\n\n    Client --\x3e|gRPC| Proxy\n    Proxy --\x3e|GET/SET/DEL| Cache\n    Proxy --\x3e|PUBLISH/SUBSCRIBE| PubSub\n    Proxy --\x3e|FT.SEARCH| Vector\n\n    Cache -.->|Optional AOF| Persistence[(Persistence)]\n    Vector -.->|RDB Snapshots| Persistence\n'})}),"\n",(0,r.jsx)(n.h3,{id:"22-deployment-models",children:"2.2 Deployment Models"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Single Redis (Development)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:"graph LR\n    Prism[Prism Proxy] --\x3e Redis[Redis Standalone<br/>Cache + PubSub + Vector]\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Redis Cluster (Production)"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:'graph TB\n    Prism[Prism Proxy]\n\n    subgraph "Redis Cluster"\n        M1[Master 1<br/>Slots 0-5460]\n        M2[Master 2<br/>Slots 5461-10922]\n        M3[Master 3<br/>Slots 10923-16383]\n\n        S1[Replica 1]\n        S2[Replica 2]\n        S3[Replica 3]\n    end\n\n    Prism --\x3e M1\n    Prism --\x3e M2\n    Prism --\x3e M3\n\n    M1 -.->|Replication| S1\n    M2 -.->|Replication| S2\n    M3 -.->|Replication| S3\n'})}),"\n",(0,r.jsx)(n.h2,{id:"3-cache-hashmap-access-pattern",children:"3. Cache (HashMap) Access Pattern"}),"\n",(0,r.jsx)(n.h3,{id:"31-use-cases",children:"3.1 Use Cases"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Session storage"}),": User sessions, JWT tokens"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"API response caching"}),": Computed results, aggregations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Configuration caching"}),": Feature flags, application settings"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Rate limiting"}),": Request counters with TTL"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Temporary data"}),": Job results, computation intermediates"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"32-interface",children:"3.2 Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.cache.v1;\n\nservice CacheService {\n  // Get value by key\n  rpc Get(GetRequest) returns (GetResponse);\n\n  // Set value with optional TTL\n  rpc Set(SetRequest) returns (SetResponse);\n\n  // Delete key\n  rpc Delete(DeleteRequest) returns (DeleteResponse);\n\n  // Get multiple keys (batch)\n  rpc GetMulti(GetMultiRequest) returns (GetMultiRequest);\n\n  // Check if key exists\n  rpc Exists(ExistsRequest) returns (ExistsResponse);\n\n  // Set with expiration (atomic)\n  rpc SetEx(SetExRequest) returns (SetExResponse);\n\n  // Increment/Decrement (atomic counters)\n  rpc Increment(IncrementRequest) returns (IncrementResponse);\n}\n\nmessage SetRequest {\n  string session_id = 1;\n  string namespace = 2;\n  string key = 3;\n  bytes value = 4;\n\n  // Optional TTL in seconds (0 = no expiration)\n  int32 ttl_seconds = 5;\n\n  // Optional flags\n  bool only_if_not_exists = 6;  // SET NX\n  bool only_if_exists = 7;      // SET XX\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"33-performance-targets",children:"3.3 Performance Targets"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Latency"}),": P50 ",(0,r.jsx)(n.code,{children:"<500\xb5s"}),", P99 ",(0,r.jsx)(n.code,{children:"<2ms"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Throughput"}),": 100k ops/sec per instance"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Hit Rate"}),": Track and expose cache hit ratio"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory"}),": Eviction policies (LRU, LFU, TTL)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"34-implementation-flow",children:"3.4 Implementation Flow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:'sequenceDiagram\n    participant Client\n    participant Proxy\n    participant Redis\n\n    Client->>Proxy: Set("user:123", data, ttl=3600)\n    Proxy->>Redis: SETEX user:123 3600 <data>\n    Redis--\x3e>Proxy: OK\n    Proxy--\x3e>Client: SetResponse{success: true}\n\n    Client->>Proxy: Get("user:123")\n    Proxy->>Redis: GET user:123\n    Redis--\x3e>Proxy: <data>\n    Proxy--\x3e>Client: GetResponse{value: data}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"4-pubsub-access-pattern",children:"4. PubSub Access Pattern"}),"\n",(0,r.jsx)(n.h3,{id:"41-use-cases",children:"4.1 Use Cases"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Event broadcasting"}),": Notify all subscribers of system events"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Real-time updates"}),": Push notifications, live dashboards"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cache invalidation"}),": Notify caches to evict stale data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Webhook fanout"}),": Distribute webhooks to multiple consumers"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Presence detection"}),": Online/offline user status"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"42-interface",children:"4.2 Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.pubsub.v1;\n\nservice PubSubService {\n  // Publish message to channel\n  rpc Publish(PublishRequest) returns (PublishResponse);\n\n  // Subscribe to channels (streaming)\n  rpc Subscribe(SubscribeRequest) returns (stream Message);\n\n  // Pattern-based subscription\n  rpc PatternSubscribe(PatternSubscribeRequest) returns (stream Message);\n\n  // Unsubscribe from channels\n  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse);\n}\n\nmessage PublishRequest {\n  string session_id = 1;\n  string namespace = 2;\n  string channel = 3;\n  bytes payload = 4;\n\n  // Optional metadata\n  map<string, string> headers = 5;\n}\n\nmessage Message {\n  string channel = 1;\n  bytes payload = 2;\n  google.protobuf.Timestamp published_at = 3;\n  map<string, string> headers = 4;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"43-characteristics",children:"4.3 Characteristics"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fire-and-forget"}),": No message persistence (use Kafka/NATS for durability)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fan-out"}),": All subscribers receive all messages"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"No ordering guarantees"}),": Use Kafka for ordered streams"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pattern matching"}),": Subscribe to ",(0,r.jsx)(n.code,{children:"user:*"})," for all user events"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"44-implementation-flow",children:"4.4 Implementation Flow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:'sequenceDiagram\n    participant Pub as Publisher\n    participant Proxy\n    participant Redis\n    participant Sub1 as Subscriber 1\n    participant Sub2 as Subscriber 2\n\n    Sub1->>Proxy: Subscribe("events:user")\n    Proxy->>Redis: SUBSCRIBE events:user\n\n    Sub2->>Proxy: Subscribe("events:*")\n    Proxy->>Redis: PSUBSCRIBE events:*\n\n    Pub->>Proxy: Publish("events:user", {action: "login"})\n    Proxy->>Redis: PUBLISH events:user <data>\n    Redis--\x3e>Proxy: 2 subscribers\n\n    Redis--\x3e>Sub1: Message{channel: "events:user", ...}\n    Redis--\x3e>Sub2: Message{pattern: "events:*", ...}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"5-vector-search-access-pattern",children:"5. Vector Search Access Pattern"}),"\n",(0,r.jsx)(n.h3,{id:"51-use-cases",children:"5.1 Use Cases"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Semantic search"}),": Find similar documents, products, images"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Recommendation systems"}),": Similar items, collaborative filtering"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Anomaly detection"}),": Find outliers in embedding space"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Duplicate detection"}),": Near-duplicate content identification"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"RAG (Retrieval Augmented Generation)"}),": Context retrieval for LLMs"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"52-interface",children:"5.2 Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.vector.v1;\n\nservice VectorService {\n  // Index a vector with metadata\n  rpc IndexVector(IndexVectorRequest) returns (IndexVectorResponse);\n\n  // Search for similar vectors (KNN)\n  rpc SearchSimilar(SearchRequest) returns (SearchResponse);\n\n  // Batch index vectors\n  rpc BatchIndex(stream IndexVectorRequest) returns (BatchIndexResponse);\n\n  // Delete vector by ID\n  rpc DeleteVector(DeleteVectorRequest) returns (DeleteVectorResponse);\n\n  // Get vector by ID\n  rpc GetVector(GetVectorRequest) returns (GetVectorResponse);\n}\n\nmessage IndexVectorRequest {\n  string session_id = 1;\n  string namespace = 2;\n  string vector_id = 3;\n\n  // Vector embeddings (float32)\n  repeated float vector = 4;\n\n  // Optional metadata for filtering\n  map<string, string> metadata = 5;\n}\n\nmessage SearchRequest {\n  string session_id = 1;\n  string namespace = 2;\n\n  // Query vector\n  repeated float query_vector = 3;\n\n  // Number of results\n  int32 top_k = 4;\n\n  // Optional filters\n  map<string, string> filters = 5;\n\n  // Distance metric (COSINE, L2, IP)\n  string metric = 6;\n}\n\nmessage SearchResponse {\n  repeated SearchResult results = 1;\n}\n\nmessage SearchResult {\n  string vector_id = 1;\n  float score = 2;\n  map<string, string> metadata = 3;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"53-redis-vss-configuration",children:"5.3 Redis VSS Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-redis",children:'# Create vector index\nFT.CREATE idx:vectors\n  ON HASH\n  PREFIX 1 "vec:"\n  SCHEMA\n    embedding VECTOR HNSW 6\n      TYPE FLOAT32\n      DIM 768\n      DISTANCE_METRIC COSINE\n    metadata TAG\n'})}),"\n",(0,r.jsx)(n.h3,{id:"54-implementation-flow",children:"5.4 Implementation Flow"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-mermaid",children:'sequenceDiagram\n    participant Client\n    participant Proxy\n    participant Redis\n\n    Client->>Proxy: IndexVector(id="doc:1", vector=[...], metadata={...})\n    Proxy->>Redis: HSET vec:doc:1 embedding <vector> metadata <json>\n    Redis--\x3e>Proxy: OK\n    Proxy--\x3e>Client: IndexVectorResponse{indexed: true}\n\n    Client->>Proxy: SearchSimilar(query=[...], top_k=10)\n    Proxy->>Redis: FT.SEARCH idx:vectors "*=>[KNN 10 @embedding $query]"\n    Redis--\x3e>Proxy: [doc:5, doc:12, doc:3, ...]\n    Proxy--\x3e>Client: SearchResponse{results: [...]}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"6-configuration",children:"6. Configuration"}),"\n",(0,r.jsx)(n.h3,{id:"61-client-configuration",children:"6.1 Client Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'message RedisBackendConfig {\n  // Backend type\n  BackendType type = 1;\n\n  enum BackendType {\n    CACHE = 0;\n    PUBSUB = 1;\n    VECTOR = 2;\n  }\n\n  // Connection settings\n  string host = 2;\n  int32 port = 3;\n  int32 db = 4;\n\n  // Cluster mode\n  bool cluster_mode = 5;\n  repeated string cluster_nodes = 6;\n\n  // Cache-specific\n  int32 default_ttl_seconds = 7;\n  string eviction_policy = 8;  // "allkeys-lru", "volatile-ttl"\n\n  // Vector-specific\n  int32 vector_dimensions = 9;\n  string distance_metric = 10;  // "COSINE", "L2", "IP"\n\n  // Performance\n  int32 pool_size = 11;\n  google.protobuf.Duration timeout = 12;\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"62-server-configuration",children:"6.2 Server Configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# config/redis.yaml\nredis:\n  cache:\n    host: redis-cache.internal\n    port: 6379\n    db: 0\n    pool_size: 50\n    default_ttl: 3600\n    max_memory: "4gb"\n    eviction_policy: "allkeys-lru"\n\n  pubsub:\n    host: redis-pubsub.internal\n    port: 6379\n    db: 1\n    pool_size: 100\n\n  vector:\n    cluster_mode: true\n    cluster_nodes:\n      - "redis-vec-1.internal:6379"\n      - "redis-vec-2.internal:6379"\n      - "redis-vec-3.internal:6379"\n    dimensions: 768\n    metric: "COSINE"\n'})}),"\n",(0,r.jsx)(n.h2,{id:"7-operational-considerations",children:"7. Operational Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"71-persistence",children:"7.1 Persistence"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Cache"}),": ",(0,r.jsx)(n.code,{children:"appendonly no"})," (ephemeral, repopulate from source)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"PubSub"}),": No persistence (fire-and-forget)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Vector"}),": ",(0,r.jsx)(n.code,{children:"appendonly yes"})," + RDB snapshots (vectors expensive to recompute)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"72-monitoring",children:"7.2 Monitoring"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"metrics:\n  cache:\n    - hit_rate\n    - miss_rate\n    - eviction_count\n    - memory_usage\n    - avg_ttl\n\n  pubsub:\n    - messages_published\n    - subscriber_count\n    - channel_count\n    - message_rate\n\n  vector:\n    - index_size\n    - search_latency_p99\n    - index_throughput\n    - memory_per_vector\n"})}),"\n",(0,r.jsx)(n.h3,{id:"73-capacity-planning",children:"7.3 Capacity Planning"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Cache"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Memory: ",(0,r.jsx)(n.code,{children:"(avg_key_size + avg_value_size) \xd7 expected_keys \xd7 1.2"})," (20% overhead)"]}),"\n",(0,r.jsx)(n.li,{children:"Example: 1KB avg \xd7 1M keys \xd7 1.2 = ~1.2GB"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Vector"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Memory: ",(0,r.jsx)(n.code,{children:"vector_dimensions \xd7 4 bytes \xd7 num_vectors \xd7 2"})," (HNSW overhead)"]}),"\n",(0,r.jsx)(n.li,{children:"Example: 768 dim \xd7 4 bytes \xd7 1M vectors \xd7 2 = ~6GB"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"8-migration-path",children:"8. Migration Path"}),"\n",(0,r.jsx)(n.h3,{id:"81-phase-1-cache-week-1-2",children:"8.1 Phase 1: Cache (Week 1-2)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Deploy Redis standalone"}),"\n",(0,r.jsx)(n.li,{children:"Implement CacheService gRPC interface"}),"\n",(0,r.jsx)(n.li,{children:"Add Redis connection pool to proxy"}),"\n",(0,r.jsx)(n.li,{children:"Integration tests with real Redis"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"82-phase-2-pubsub-week-3-4",children:"8.2 Phase 2: PubSub (Week 3-4)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Implement PubSubService with streaming"}),"\n",(0,r.jsx)(n.li,{children:"Add Redis SUBSCRIBE/PUBLISH support"}),"\n",(0,r.jsx)(n.li,{children:"Pattern subscription support"}),"\n",(0,r.jsx)(n.li,{children:"Load testing (100k msg/sec)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"83-phase-3-vector-search-week-5-8",children:"8.3 Phase 3: Vector Search (Week 5-8)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enable Redis Stack (RedisSearch module)"}),"\n",(0,r.jsx)(n.li,{children:"Implement VectorService"}),"\n",(0,r.jsx)(n.li,{children:"Create vector indices"}),"\n",(0,r.jsx)(n.li,{children:"Benchmark with real embeddings (OpenAI, etc.)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"9-use-case-recommendations",children:"9. Use Case Recommendations"}),"\n",(0,r.jsx)(n.h3,{id:"91-when-to-use-redis-cache",children:"9.1 When to Use Redis Cache"}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Use When"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Sub-millisecond latency required"}),"\n",(0,r.jsx)(n.li,{children:"Data can be recomputed if lost"}),"\n",(0,r.jsx)(n.li,{children:"Working set fits in memory"}),"\n",(0,r.jsx)(n.li,{children:"Simple key-value access pattern"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Avoid When"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Data must be durable (use Postgres)"}),"\n",(0,r.jsx)(n.li,{children:"Complex queries needed (use ClickHouse)"}),"\n",(0,r.jsxs)(n.li,{children:["Objects ",(0,r.jsx)(n.code,{children:">1MB"})," (use S3/blob storage)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"92-when-to-use-redis-pubsub",children:"9.2 When to Use Redis PubSub"}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Use When"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Broadcasting to multiple subscribers"}),"\n",(0,r.jsx)(n.li,{children:"Fire-and-forget messaging acceptable"}),"\n",(0,r.jsx)(n.li,{children:"Real-time updates needed"}),"\n",(0,r.jsx)(n.li,{children:"Message loss acceptable"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Avoid When"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Message durability required (use Kafka)"}),"\n",(0,r.jsx)(n.li,{children:"Ordered processing needed (use Kafka)"}),"\n",(0,r.jsx)(n.li,{children:"Point-to-point messaging (use queues)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"93-when-to-use-redis-vector-search",children:"9.3 When to Use Redis Vector Search"}),"\n",(0,r.jsxs)(n.p,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Use When"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Similarity search on embeddings"}),"\n",(0,r.jsxs)(n.li,{children:["Low-latency retrieval (",(0,r.jsx)(n.code,{children:"<10ms"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Moderate dataset size (",(0,r.jsx)(n.code,{children:"<10M"})," vectors)"]}),"\n",(0,r.jsx)(n.li,{children:"Real-time recommendations"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Avoid When"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:">50M"})," vectors (use dedicated vector DB)"]}),"\n",(0,r.jsx)(n.li,{children:"Complex metadata filtering (use Postgres with pgvector)"}),"\n",(0,r.jsx)(n.li,{children:"Training ML models (use analytical DB)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"10-references",children:"10. References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://redis.io/docs/",children:"Redis Documentation"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://redis.io/docs/stack/search/reference/vectors/",children:"Redis Vector Similarity Search"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://redis.io/docs/reference/cluster-spec/",children:"Redis Cluster Specification"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://redis.io/docs/manual/persistence/",children:"Redis Persistence"})}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"11-revision-history",children:"11. Revision History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2025-10-08: Initial draft"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>a});var i=s(6540);const r={},t=i.createContext(r);function c(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);