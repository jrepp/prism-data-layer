"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[33e3],{15242:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"adr-003","title":"Protobuf as Single Source of Truth","description":"Context","source":"@site/../docs-cms/adr/adr-003-protobuf-single-source-of-truth.md","sourceDirName":".","slug":"/adr-003","permalink":"/prism-data-layer/adr/adr-003","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-003-protobuf-single-source-of-truth.md","tags":[{"inline":true,"label":"architecture","permalink":"/prism-data-layer/adr/tags/architecture"},{"inline":true,"label":"codegen","permalink":"/prism-data-layer/adr/tags/codegen"},{"inline":true,"label":"dx","permalink":"/prism-data-layer/adr/tags/dx"},{"inline":true,"label":"dry","permalink":"/prism-data-layer/adr/tags/dry"}],"version":"current","frontMatter":{"date":"2025-10-05T00:00:00.000Z","deciders":"Core Team","doc_uuid":"24c6dbaf-8d7a-4029-a38f-f7f2522de45b","id":"adr-003","project_id":"prism-data-layer","status":"Accepted","tags":["architecture","codegen","dx","dry"],"title":"Protobuf as Single Source of Truth"},"sidebar":"adrSidebar","previous":{"title":"Client-Originated Configuration \u2022 ADR-002","permalink":"/prism-data-layer/adr/adr-002"},"next":{"title":"Local-First Testing Strategy \u2022 ADR-004","permalink":"/prism-data-layer/adr/adr-004"}}');var r=t(74848),s=t(28453);const o={date:new Date("2025-10-05T00:00:00.000Z"),deciders:"Core Team",doc_uuid:"24c6dbaf-8d7a-4029-a38f-f7f2522de45b",id:"adr-003",project_id:"prism-data-layer",status:"Accepted",tags:["architecture","codegen","dx","dry"],title:"Protobuf as Single Source of Truth"},a=void 0,l={},d=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why Protobuf?",id:"why-protobuf",level:3},{value:"Custom Options for Prism",id:"custom-options-for-prism",level:3},{value:"Code Generation Pipeline",id:"code-generation-pipeline",level:3},{value:"Code Generation Tool",id:"code-generation-tool",level:3},{value:"CI Integration",id:"ci-integration",level:3},{value:"Migration Strategy",id:"migration-strategy",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function c(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(n.p,{children:"In a data gateway system, multiple components need consistent understanding of data models:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Proxy"}),": Routes requests, validates data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backends"}),": Store and retrieve data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Client libraries"}),": Make requests"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Admin UI"}),": Display and manage data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Documentation"}),": Describe APIs"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Traditionally, these are defined separately:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Database schemas (SQL DDL)"}),"\n",(0,r.jsx)(n.li,{children:"API schemas (OpenAPI/Swagger)"}),"\n",(0,r.jsx)(n.li,{children:"Client code (hand-written)"}),"\n",(0,r.jsx)(n.li,{children:"Documentation (hand-written)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This leads to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Drift"}),": Schemas get out of sync"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Duplication"}),": Same model defined 4+ times"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Errors"}),": Manual synchronization fails"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Slow iteration"}),": Every change requires updating multiple files"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Problem"}),": How do we maintain consistency across all components while keeping the architecture DRY (Don't Repeat Yourself)?"]}),"\n",(0,r.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsxs)(n.p,{children:["Use ",(0,r.jsx)(n.strong,{children:"Protocol Buffers (protobuf)"})," as the single source of truth for all data models, with custom options for Prism-specific metadata. Generate all code, schemas, and configuration from proto definitions."]}),"\n",(0,r.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,r.jsx)(n.h3,{id:"why-protobuf",children:"Why Protobuf?"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Language Agnostic"}),": Generate code for Rust, Python, JavaScript, TypeScript"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Strong Typing"}),": Catch errors at compile time"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backward Compatible"}),": Evolve schemas without breaking clients"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Compact"}),": Efficient binary serialization"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Extensible"}),": Custom options for domain-specific metadata"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tooling"}),": Excellent IDE support, linters, formatters"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"custom-options-for-prism",children:"Custom Options for Prism"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'// prism/options.proto\nsyntax = "proto3";\npackage prism;\n\nimport "google/protobuf/descriptor.proto";\n\n// Message-level options\nextend google.protobuf.MessageOptions {\n  string access_pattern = 50001;      // read_heavy | write_heavy | append_heavy\n  int64 estimated_read_rps = 50002;   // Capacity planning\n  int64 estimated_write_rps = 50003;\n  string backend = 50004;             // postgres | kafka | nats | sqlite | neptune\n  string consistency = 50005;         // strong | eventual | causal\n  int32 retention_days = 50006;       // Auto-delete policy\n  bool enable_cache = 50007;          // Add caching layer\n}\n\n// Field-level options\nextend google.protobuf.FieldOptions {\n  string index = 50101;               // primary | secondary | partition_key | clustering_key\n  string pii = 50102;                 // email | name | ssn | phone | address\n  bool encrypt_at_rest = 50103;       // Field-level encryption\n  string validation = 50104;          // email | uuid | url | regex:...\n  int32 max_length = 50105;           // String length validation\n}\n\n// Service-level options (for future gRPC services)\nextend google.protobuf.ServiceOptions {\n  bool require_auth = 50201;          // All RPCs require auth\n  int32 rate_limit_rps = 50202;       // Service-wide rate limit\n}\n\n// RPC-level options\nextend google.protobuf.MethodOptions {\n  bool idempotent = 50301;            // Safe to retry\n  int32 timeout_ms = 50302;           // RPC timeout\n  string cache_ttl = 50303;           // Cache responses\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"code-generation-pipeline",children:"Code Generation Pipeline"}),"\n",(0,r.jsx)(n.p,{children:"proto/*.proto\n\u2502\n\u251c\u2500\u2500> Rust code (prost)\n\u2502    \u251c\u2500\u2500 Data structures\n\u2502    \u251c\u2500\u2500 gRPC server traits\n\u2502    \u2514\u2500\u2500 Validation logic\n\u2502\n\u251c\u2500\u2500> Python code (protoc)\n\u2502    \u251c\u2500\u2500 Data classes\n\u2502    \u2514\u2500\u2500 gRPC clients\n\u2502\n\u251c\u2500\u2500> TypeScript code (ts-proto)\n\u2502    \u251c\u2500\u2500 Types for admin UI\n\u2502    \u2514\u2500\u2500 API client\n\u2502\n\u251c\u2500\u2500> SQL schemas\n\u2502    \u251c\u2500\u2500 CREATE TABLE statements\n\u2502    \u251c\u2500\u2500 Indexes\n\u2502    \u2514\u2500\u2500 Constraints\n\u2502\n\u251c\u2500\u2500> Kafka schemas\n\u2502    \u251c\u2500\u2500 Topic configurations\n\u2502    \u2514\u2500\u2500 Serialization\n\u2502\n\u251c\u2500\u2500> OpenAPI docs\n\u2502    \u2514\u2500\u2500 REST API documentation\n\u2502\n\u2514\u2500\u2500> Deployment configs\n\u251c\u2500\u2500 Capacity specs\n\u2514\u2500\u2500 Backend routing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n### Example: Complete Data Model\n\n"})}),"\n",(0,r.jsx)(n.p,{children:'// user_profile.proto\nsyntax = "proto3";'}),"\n",(0,r.jsx)(n.p,{children:"package prism.example;"}),"\n",(0,r.jsx)(n.p,{children:'import "prism/options.proto";'}),"\n",(0,r.jsx)(n.p,{children:'message UserProfile {\noption (prism.backend) = "postgres";\noption (prism.consistency) = "strong";\noption (prism.estimated_read_rps) = "5000";\noption (prism.estimated_write_rps) = "500";\noption (prism.enable_cache) = true;'}),"\n",(0,r.jsx)(n.p,{children:'// Primary key\nstring user_id = 1 [\n(prism.index) = "primary",\n(prism.validation) = "uuid"\n];'}),"\n",(0,r.jsx)(n.p,{children:'// PII fields\nstring email = 2 [\n(prism.pii) = "email",\n(prism.index) = "secondary",\n(prism.validation) = "email"\n];'}),"\n",(0,r.jsx)(n.p,{children:'string full_name = 3 [\n(prism.pii) = "name",\n(prism.max_length) = 256\n];'}),"\n",(0,r.jsx)(n.p,{children:'// Encrypted field\nstring ssn = 4 [\n(prism.pii) = "ssn",\n(prism.encrypt_at_rest) = true\n];'}),"\n",(0,r.jsx)(n.p,{children:"// Metadata\nint64 created_at = 5;\nint64 updated_at = 6;"}),"\n",(0,r.jsx)(n.p,{children:"// Nested message\nProfileSettings settings = 7;\n}"}),"\n",(0,r.jsx)(n.p,{children:"message ProfileSettings {\nbool email_notifications = 1;\nstring timezone = 2;\nstring language = 3;\n}"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\nThis **single file** generates:\n\n1. **Rust structs** with validation:\n"})}),"\n",(0,r.jsx)(n.p,{children:'#[derive(Clone, PartialEq, Message)]\npub struct UserProfile {\n#[prost(string, tag = "1")]\npub user_id: String,\n#[prost(string, tag = "2")]\npub email: String,\n// ... with validation methods\n}'}),"\n",(0,r.jsx)(n.p,{children:"impl UserProfile {\npub fn validate(&self) -> Result<(), ValidationError> {\nvalidate_uuid(&self.user_id)?;\nvalidate_email(&self.email)?;\n// ...\n}\n}"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n2. **Postgres schema**:\n"})}),"\n",(0,r.jsx)(n.p,{children:"CREATE TABLE user_profile (\nuser_id UUID PRIMARY KEY,\nemail VARCHAR(255) NOT NULL,\nfull_name VARCHAR(256),\nssn_encrypted BYTEA,  -- Encrypted at application layer\ncreated_at BIGINT NOT NULL,\nupdated_at BIGINT NOT NULL,\nsettings JSONB\n);"}),"\n",(0,r.jsx)(n.p,{children:"CREATE INDEX idx_user_profile_email ON user_profile(email);"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n3. **TypeScript types** for admin UI:\n"})}),"\n",(0,r.jsx)(n.p,{children:"export interface UserProfile {\nuserId: string;\nemail: string;\nfullName: string;\nssn: string;\ncreatedAt: number;\nupdatedAt: number;\nsettings?: ProfileSettings;\n}"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n4. **Deployment config** (auto-generated):\n"})}),"\n",(0,r.jsx)(n.p,{children:"name: user-profile\nbackend: postgres\ncapacity:\nread_rps: 5000\nwrite_rps: 500\nestimated_data_size_mb: 1000\ncache:\nenabled: true\nttl_seconds: 300"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\n### Alternatives Considered\n\n1. **OpenAPI/Swagger as Source of Truth**\n   - Pros:\n     - HTTP-first\n     - Good tooling\n     - Popular\n   - Cons:\n     - Doesn't support binary protocols (Kafka, NATS)\n     - Weaker typing than protobuf\n     - No field-level metadata\n   - Rejected because: Doesn't cover all our use cases\n\n2. **SQL DDL as Source of Truth**\n   - Pros:\n     - Natural for database-first design\n     - DBAs comfortable with it\n   - Cons:\n     - Only works for SQL backends\n     - Doesn't describe APIs\n     - Poor code generation for clients\n   - Rejected because: Too backend-specific\n\n3. **JSON Schema**\n   - Pros:\n     - Simple\n     - Widely understood\n     - Works with HTTP APIs\n   - Cons:\n     - Runtime validation only\n     - No compile-time safety\n     - Verbose\n   - Rejected because: Lack of strong typing\n\n4. **Hand-Written Code**\n   - Pros:\n     - Full control\n     - No code generation complexity\n   - Cons:\n     - Massive duplication\n     - Drift between components\n     - Error-prone\n   - Rejected because: Doesn't scale\n\n## Consequences\n\n### Positive\n\n- **Single Source of Truth**: One place to change data models\n- **Consistency**: All components guaranteed to have same understanding\n- **Type Safety**: Compile-time errors across all languages\n- **Fast Iteration**: Change proto, regenerate, done\n- **Documentation**: Proto files are self-documenting\n- **Validation**: Generated validators ensure data integrity\n- **Backward Compatibility**: Protobuf's rules prevent breaking changes\n\n### Negative\n\n- **Code Generation Complexity**: Must maintain codegen tooling\n  - *Mitigation*: Use existing tools (prost, ts-proto); only customize for Prism options\n- **Learning Curve**: Team must learn protobuf\n  - *Mitigation*: Good documentation; protobuf is simpler than alternatives\n- **Build Step Required**: Can't edit generated code directly\n  - *Mitigation*: Fast build times; clear separation of generated vs. hand-written\n\n### Neutral\n\n- **Proto Language Limitations**: Can't express all constraints\n  - Use custom options for Prism-specific needs\n  - Complex validation logic in hand-written code\n- **Version Management**: Proto file changes must be carefully reviewed\n  - Enforce backward compatibility checks in CI\n\n## Implementation Notes\n\n### Project Structure\n\nproto/\n\u251c\u2500\u2500 prism/\n\u2502   \u251c\u2500\u2500 options.proto          # Custom Prism options\n\u2502   \u2514\u2500\u2500 common/\n\u2502       \u251c\u2500\u2500 types.proto        # Common types (timestamps, UUIDs, etc.)\n\u2502       \u2514\u2500\u2500 errors.proto       # Error definitions\n\u251c\u2500\u2500 examples/\n\u2502   \u251c\u2500\u2500 user_profile.proto     # Example from above\n\u2502   \u251c\u2500\u2500 user_events.proto      # Kafka example\n\u2502   \u2514\u2500\u2500 social_graph.proto     # Neptune example\n\u2514\u2500\u2500 BUILD.bazel                # Or build.rs for Rust\n"})}),"\n",(0,r.jsx)(n.h3,{id:"code-generation-tool",children:"Code Generation Tool"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# tooling/codegen/__main__.py\n\npython -m tooling.codegen \\\n  --proto-path proto \\\n  --out-rust proxy/src/generated \\\n  --out-python tooling/generated \\\n  --out-typescript admin/app/models/generated \\\n  --out-sql backends/postgres/migrations \\\n  --out-docs docs/api\n"})}),"\n",(0,r.jsx)(n.h3,{id:"ci-integration",children:"CI Integration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# .github/workflows/proto.yml\nname: Protobuf\n\non: [push, pull_request]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Check backward compatibility\n        run: buf breaking --against '.git#branch=main'\n      - name: Lint proto files\n        run: buf lint\n      - name: Generate code\n        run: python -m tooling.codegen\n      - name: Verify no changes\n        run: git diff --exit-code  # Fail if generated code is stale\n"})}),"\n",(0,r.jsx)(n.h3,{id:"migration-strategy",children:"Migration Strategy"}),"\n",(0,r.jsx)(n.p,{children:"When changing proto definitions:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Additive changes"})," (new fields): Safe, just regenerate"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Renaming fields"}),": Use ",(0,r.jsx)(n.code,{children:"json_name"})," option for backward compat"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Removing fields"}),": Mark as ",(0,r.jsx)(n.code,{children:"reserved"})," instead"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Changing types"}),": Create new field, migrate data, deprecate old"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://protobuf.dev/programming-guides/proto3/",children:"Protocol Buffers Language Guide"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://buf.build/",children:"Buf Schema Registry"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/tokio-rs/prost",children:"prost (Rust protobuf)"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://github.com/stephenh/ts-proto",children:"ts-proto (TypeScript)"})}),"\n",(0,r.jsx)(n.li,{children:"ADR-002: Client-Originated Configuration"}),"\n",(0,r.jsx)(n.li,{children:"ADR-004: Local-First Testing Strategy"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2025-10-05: Initial draft and acceptance"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(96540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);