"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[71007],{28453:(n,e,i)=>{i.d(e,{R:()=>t,x:()=>l});var s=i(96540);const r={},a=s.createContext(r);function t(n){const e=s.useContext(a);return s.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:t(n.components),s.createElement(a.Provider,{value:e},n.children)}},62995:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"memo-007","title":"Podman Demo for Scratch-Based Containers with Native Runtime","description":"Purpose","source":"@site/../docs-cms/memos/memo-007-podman-scratch-container-demo.md","sourceDirName":".","slug":"/memo-007","permalink":"/prism-data-layer/memos/memo-007","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/memo-007-podman-scratch-container-demo.md","tags":[{"inline":true,"label":"containers","permalink":"/prism-data-layer/memos/tags/containers"},{"inline":true,"label":"podman","permalink":"/prism-data-layer/memos/tags/podman"},{"inline":true,"label":"scratch","permalink":"/prism-data-layer/memos/tags/scratch"},{"inline":true,"label":"demo","permalink":"/prism-data-layer/memos/tags/demo"},{"inline":true,"label":"runtime","permalink":"/prism-data-layer/memos/tags/runtime"},{"inline":true,"label":"optimization","permalink":"/prism-data-layer/memos/tags/optimization"},{"inline":true,"label":"patterns","permalink":"/prism-data-layer/memos/tags/patterns"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-09T00:00:00.000Z","doc_uuid":"9c42fe80-9b2c-4720-a21d-831743c2e47b","id":"memo-007","project_id":"prism-data-layer","tags":["containers","podman","scratch","demo","runtime","optimization","patterns"],"title":"Podman Demo for Scratch-Based Containers with Native Runtime","updated":"2025-10-10T00:00:00.000Z"},"sidebar":"memosSidebar","previous":{"title":"Backend Interface Decomposition and Schema Registry \u2022 MEMO-006","permalink":"/prism-data-layer/memos/memo-006"},"next":{"title":"Vault Token Exchange Flow for Plugin Authentication \u2022 MEMO-008","permalink":"/prism-data-layer/memos/memo-008"}}');var r=i(74848),a=i(28453);const t={author:"Platform Team",created:new Date("2025-10-09T00:00:00.000Z"),doc_uuid:"9c42fe80-9b2c-4720-a21d-831743c2e47b",id:"memo-007",project_id:"prism-data-layer",tags:["containers","podman","scratch","demo","runtime","optimization","patterns"],title:"Podman Demo for Scratch-Based Containers with Native Runtime",updated:new Date("2025-10-10T00:00:00.000Z")},l="MEMO-007: Podman Demo for Scratch-Based Containers with Native Runtime",o={},d=[{value:"Purpose",id:"purpose",level:2},{value:"Context",id:"context",level:2},{value:"What is Scratch-Based?",id:"what-is-scratch-based",level:3},{value:"Why Podman?",id:"why-podman",level:3},{value:"Native Container Runtime",id:"native-container-runtime",level:3},{value:"Demo Architecture",id:"demo-architecture",level:2},{value:"Prism Component Images",id:"prism-component-images",level:3},{value:"Implementation: Scratch-Based Containerfiles",id:"implementation-scratch-based-containerfiles",level:2},{value:"1. Prism Proxy (Rust, Scratch)",id:"1-prism-proxy-rust-scratch",level:3},{value:"2. Redis KeyValue Implementation (Go, Scratch)",id:"2-redis-keyvalue-implementation-go-scratch",level:3},{value:"3. Admin Service (Python, Alpine-Minimal)",id:"3-admin-service-python-alpine-minimal",level:3},{value:"Build and Run with Podman",id:"build-and-run-with-podman",level:2},{value:"Install Podman",id:"install-podman",level:3},{value:"Build Demo Images",id:"build-demo-images",level:3},{value:"Run Containers",id:"run-containers",level:3},{value:"Option 1: Individual Containers",id:"option-1-individual-containers",level:4},{value:"Option 2: Podman Pod (Kubernetes-compatible)",id:"option-2-podman-pod-kubernetes-compatible",level:4},{value:"Demo Script",id:"demo-script",level:2},{value:"Demo 1: Build and Size Comparison",id:"demo-1-build-and-size-comparison",level:3},{value:"Demo 2: Startup Time Comparison",id:"demo-2-startup-time-comparison",level:3},{value:"Demo 3: Full Stack with Pod",id:"demo-3-full-stack-with-pod",level:3},{value:"Build-Test Cycle Optimization",id:"build-test-cycle-optimization",level:2},{value:"Development Workflow",id:"development-workflow",level:3},{value:"Fast Iteration Tips",id:"fast-iteration-tips",level:3},{value:"Comparison to Docker",id:"comparison-to-docker",level:2},{value:"Native Runtime Reality Check",id:"native-runtime-reality-check",level:2},{value:"Linux: True Native",id:"linux-true-native",level:3},{value:"macOS: Lightweight VM Required",id:"macos-lightweight-vm-required",level:3},{value:"Comparison: macOS Container Runtimes",id:"comparison-macos-container-runtimes",level:3},{value:"Production Considerations",id:"production-considerations",level:2},{value:"Building for Production",id:"building-for-production",level:3},{value:"Security Scanning",id:"security-scanning",level:3},{value:"Kubernetes Deployment",id:"kubernetes-deployment",level:3},{value:"Benefits Summary",id:"benefits-summary",level:2},{value:"Scratch-Based Images",id:"scratch-based-images",level:3},{value:"Podman",id:"podman",level:3},{value:"Related Documents",id:"related-documents",level:2},{value:"Revision History",id:"revision-history",level:2}];function c(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"memo-007-podman-demo-for-scratch-based-containers-with-native-runtime",children:"MEMO-007: Podman Demo for Scratch-Based Containers with Native Runtime"})}),"\n",(0,r.jsx)(e.h2,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsx)(e.p,{children:"Demonstrate launching scratch-based containers built with Podman using native container runtime (not VMs), showcasing minimal container images for Prism components with fastest possible build-test cycle."}),"\n",(0,r.jsx)(e.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(e.h3,{id:"what-is-scratch-based",children:"What is Scratch-Based?"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Scratch"})," is Docker's most minimal base image - literally an empty filesystem. Containers built ",(0,r.jsx)(e.code,{children:"FROM scratch"})," contain:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Only your application binary"}),"\n",(0,r.jsx)(e.li,{children:"No shell, no package manager, no OS utilities"}),"\n",(0,r.jsx)(e.li,{children:"Smallest possible attack surface (~6MB for Prism proxy)"}),"\n",(0,r.jsx)(e.li,{children:"Fastest startup time (no OS overhead)"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"why-podman",children:"Why Podman?"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Podman"})," advantages over Docker:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Daemonless"}),": No background service required"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Rootless"}),": Run containers as non-root user"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Pod support"}),": Kubernetes-compatible pod definitions"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Docker-compatible"}),": Drop-in replacement for ",(0,r.jsx)(e.code,{children:"docker"})," CLI"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"No licensing restrictions"}),": Fully open source (Apache 2.0)"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"native-container-runtime",children:"Native Container Runtime"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Key Insight"}),": On Linux, containers run natively using kernel features (namespaces, cgroups). On macOS/Windows, a VM is unavoidable but we can optimize:"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Platform"}),(0,r.jsx)(e.th,{children:"Runtime"}),(0,r.jsx)(e.th,{children:"Notes"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Linux"})}),(0,r.jsx)(e.td,{children:"Native"}),(0,r.jsx)(e.td,{children:"Direct kernel features, instant startup"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"macOS"})}),(0,r.jsx)(e.td,{children:"VM Required"}),(0,r.jsx)(e.td,{children:"Uses Hypervisor.framework (lightweight VM)"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Windows"})}),(0,r.jsx)(e.td,{children:"WSL2"}),(0,r.jsx)(e.td,{children:"Linux kernel in lightweight VM"})]})]})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Goal"}),": Optimize for fastest build-test cycle using scratch images + Podman."]}),"\n",(0,r.jsx)(e.h2,{id:"demo-architecture",children:"Demo Architecture"}),"\n",(0,r.jsx)(e.h3,{id:"prism-component-images",children:"Prism Component Images"}),"\n",(0,r.jsx)(e.p,{children:"Build three scratch-based images:"}),"\n",(0,r.jsx)(e.mermaid,{value:'graph TB\n    subgraph "Build Stage (Multi-Stage)"\n        Builder[builder<br/>rust:1.75]\n        Builder --\x3e|cargo build --release| Binary[Static Binary<br/>prism-proxy]\n    end\n\n    subgraph "Runtime Stage (Scratch)"\n        Scratch[FROM scratch]\n        Binary --\x3e|COPY| Scratch\n        Scratch --\x3e Final[Final Image<br/>6MB]\n    end\n\n    style Final fill:#e1f5ff'}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Three Demo Images"}),":"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"prism-proxy"}),": Rust proxy (~6MB)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"prism-redis"}),": Go KeyValue implementation connecting to Redis backend (~10MB)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"prism-admin"}),": Python admin service (~45MB, Alpine-based)"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"implementation-scratch-based-containerfiles",children:"Implementation: Scratch-Based Containerfiles"}),"\n",(0,r.jsx)(e.h3,{id:"1-prism-proxy-rust-scratch",children:"1. Prism Proxy (Rust, Scratch)"}),"\n",(0,r.jsxs)(e.p,{children:["Location: ",(0,r.jsx)(e.code,{children:"proxy/Containerfile"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-dockerfile",children:'# Build stage\nFROM docker.io/library/rust:1.75-alpine AS builder\n\nWORKDIR /build\n\n# Install musl target for static linking\nRUN rustup target add x86_64-unknown-linux-musl\n\n# Copy source\nCOPY Cargo.toml Cargo.lock ./\nCOPY src/ src/\n\n# Build static binary\nRUN cargo build --release --target x86_64-unknown-linux-musl\n\n# Runtime stage (scratch)\nFROM scratch\n\n# Copy static binary\nCOPY --from=builder /build/target/x86_64-unknown-linux-musl/release/prism-proxy /prism-proxy\n\n# Expose ports\nEXPOSE 8980 8981\n\n# Run binary\nENTRYPOINT ["/prism-proxy"]\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Size"}),": ~6MB (single static binary)\n",(0,r.jsx)(e.strong,{children:"Startup"}),": <10ms"]}),"\n",(0,r.jsx)(e.h3,{id:"2-redis-keyvalue-implementation-go-scratch",children:"2. Redis KeyValue Implementation (Go, Scratch)"}),"\n",(0,r.jsxs)(e.p,{children:["Location: ",(0,r.jsx)(e.code,{children:"patterns/redis/Containerfile"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-dockerfile",children:'# Build stage\nFROM docker.io/library/golang:1.21-alpine AS builder\n\nWORKDIR /build\n\n# Copy go mod files\nCOPY go.mod go.sum ./\nRUN go mod download\n\n# Copy source\nCOPY . .\n\n# Build static binary with CGO disabled\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \\\n    -ldflags="-w -s" \\\n    -o /prism-redis \\\n    ./cmd/redis\n\n# Runtime stage (scratch)\nFROM scratch\n\n# Copy CA certificates for HTTPS (if needed)\nCOPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/\n\n# Copy static binary\nCOPY --from=builder /prism-redis /prism-redis\n\n# Expose gRPC port\nEXPOSE 9535\n\n# Run binary\nENTRYPOINT ["/prism-redis"]\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Size"}),": ~10MB (includes CA certs)\n",(0,r.jsx)(e.strong,{children:"Startup"}),": <20ms"]}),"\n",(0,r.jsx)(e.h3,{id:"3-admin-service-python-alpine-minimal",children:"3. Admin Service (Python, Alpine-Minimal)"}),"\n",(0,r.jsxs)(e.p,{children:["Location: ",(0,r.jsx)(e.code,{children:"admin/Containerfile"})]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-dockerfile",children:'# Python can\'t run from scratch (needs libpython), use minimal Alpine\nFROM docker.io/library/python:3.11-alpine AS builder\n\nWORKDIR /build\n\n# Install build dependencies\nRUN apk add --no-cache gcc musl-dev libffi-dev\n\n# Copy requirements\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir --prefix=/install -r requirements.txt\n\n# Runtime stage (minimal Alpine)\nFROM docker.io/library/python:3.11-alpine\n\n# Copy installed packages\nCOPY --from=builder /install /usr/local\n\n# Copy application\nCOPY main.py /app/\nCOPY static/ /app/static/\n\nWORKDIR /app\n\n# Expose port\nEXPOSE 8000\n\n# Run with uvicorn\nCMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Size"}),": ~45MB (Python + deps)\n",(0,r.jsx)(e.strong,{children:"Startup"}),": ~500ms"]}),"\n",(0,r.jsx)(e.h2,{id:"build-and-run-with-podman",children:"Build and Run with Podman"}),"\n",(0,r.jsx)(e.h3,{id:"install-podman",children:"Install Podman"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Linux"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Debian/Ubuntu\nsudo apt-get install podman\n\n# Fedora/RHEL\nsudo dnf install podman\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"macOS"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Install via Homebrew\nbrew install podman\n\n# Initialize Podman machine (lightweight VM)\npodman machine init --cpus 4 --memory 4096 --disk-size 50\npodman machine start\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Windows"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Install via winget\nwinget install RedHat.Podman\n\n# Or via Chocolatey\nchoco install podman\n"})}),"\n",(0,r.jsx)(e.h3,{id:"build-demo-images",children:"Build Demo Images"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Build proxy (scratch-based, 6MB)\npodman build -t prism-proxy:scratch -f proxy/Containerfile .\n\n# Build KeyValue implementation (scratch-based, 10MB)\npodman build -t prism-redis:scratch -f patterns/redis/Containerfile patterns/redis\n\n# Build admin (Alpine-minimal, 45MB)\npodman build -t prism-admin:minimal -f admin/Containerfile admin\n\n# Check image sizes\npodman images | grep prism\n# OUTPUT:\n# prism-proxy              scratch   <image-id>   6.2MB\n# prism-redis              scratch   <image-id>   10.1MB\n# prism-admin              minimal   <image-id>   45MB\n"})}),"\n",(0,r.jsx)(e.h3,{id:"run-containers",children:"Run Containers"}),"\n",(0,r.jsx)(e.h4,{id:"option-1-individual-containers",children:"Option 1: Individual Containers"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'# Run proxy\npodman run -d \\\n  --name prism-proxy \\\n  -p 8980:8980 \\\n  -p 8981:8981 \\\n  prism-proxy:scratch\n\n# Run KeyValue implementation (connects to Redis backend)\npodman run -d \\\n  --name prism-redis \\\n  -p 9535:9535 \\\n  -e REDIS_URL="redis://localhost:6379/0" \\\n  prism-redis:scratch\n\n# Run admin\npodman run -d \\\n  --name prism-admin \\\n  -p 8000:8000 \\\n  prism-admin:minimal\n\n# Check running containers\npodman ps\n'})}),"\n",(0,r.jsx)(e.h4,{id:"option-2-podman-pod-kubernetes-compatible",children:"Option 2: Podman Pod (Kubernetes-compatible)"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-yaml",children:'# prism-pod.yaml\napiVersion: v1\nkind: Pod\nmetadata:\n  name: prism-stack\nspec:\n  containers:\n  - name: proxy\n    image: localhost/prism-proxy:scratch\n    ports:\n    - containerPort: 8980\n    - containerPort: 8981\n\n  - name: keyvalue-redis\n    image: localhost/prism-redis:scratch\n    ports:\n    - containerPort: 9535\n    env:\n    - name: REDIS_URL\n      value: "redis://redis:6379/0"\n\n  - name: admin\n    image: localhost/prism-admin:minimal\n    ports:\n    - containerPort: 8000\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Run pod"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Create pod from YAML\npodman play kube prism-pod.yaml\n\n# Check pod status\npodman pod ps\n\n# Check container logs\npodman logs prism-stack-proxy\npodman logs prism-stack-keyvalue-redis\npodman logs prism-stack-admin\n\n# Stop and remove pod\npodman pod stop prism-stack\npodman pod rm prism-stack\n"})}),"\n",(0,r.jsx)(e.h2,{id:"demo-script",children:"Demo Script"}),"\n",(0,r.jsx)(e.h3,{id:"demo-1-build-and-size-comparison",children:"Demo 1: Build and Size Comparison"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Show image size reduction"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# demo-1-size-comparison.sh\n\necho "=== Building Regular (Debian-based) Image ==="\npodman build -t prism-proxy:regular -f proxy/Dockerfile.regular .\n\necho "=== Building Scratch-Based Image ==="\npodman build -t prism-proxy:scratch -f proxy/Containerfile .\n\necho "=== Size Comparison ==="\necho "Regular image:"\npodman images prism-proxy:regular --format "{{.Size}}"\n\necho "Scratch image:"\npodman images prism-proxy:scratch --format "{{.Size}}"\n\necho "=== Reduction: $(echo "scale=1; ($(podman inspect prism-proxy:regular --format \'{{.Size}}\') - $(podman inspect prism-proxy:scratch --format \'{{.Size}}\')) / $(podman inspect prism-proxy:regular --format \'{{.Size}}\') * 100" | bc)% ==="\n'})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Expected output"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"Regular image: 127MB\nScratch image: 6MB\nReduction: 95.3%\n"})}),"\n",(0,r.jsx)(e.h3,{id:"demo-2-startup-time-comparison",children:"Demo 2: Startup Time Comparison"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Show startup time reduction"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:'#!/bin/bash\n# demo-2-startup-time.sh\n\necho "=== Starting Regular Image ==="\ntime podman run --rm prism-proxy:regular --version\n\necho "=== Starting Scratch Image ==="\ntime podman run --rm prism-proxy:scratch --version\n\necho "=== Startup Time Comparison ==="\n# Regular: ~150ms (OS init + binary)\n# Scratch: ~10ms (binary only)\n'})}),"\n",(0,r.jsx)(e.h3,{id:"demo-3-full-stack-with-pod",children:"Demo 3: Full Stack with Pod"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Show complete Prism stack running in a pod"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"#!/bin/bash\n# demo-3-full-stack.sh\n\n# Start Redis (using existing image)\npodman run -d \\\n  --name redis \\\n  -p 6379:6379 \\\n  docker.io/library/redis:7-alpine\n\n# Wait for Redis\nsleep 3\n\n# Create and start Prism pod\npodman play kube prism-pod.yaml\n\n# Wait for services\nsleep 2\n\n# Test proxy health\ncurl http://localhost:8980/health\n\n# Test admin UI\ncurl http://localhost:8000/health\n\n# Show logs\npodman logs prism-stack-proxy --tail 10\n\n# Cleanup\npodman pod stop prism-stack\npodman pod rm prism-stack\npodman stop redis\npodman rm redis\n"})}),"\n",(0,r.jsx)(e.h2,{id:"build-test-cycle-optimization",children:"Build-Test Cycle Optimization"}),"\n",(0,r.jsx)(e.h3,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Goal"}),": Instant feedback loop during development."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Watch for changes and rebuild\npodman build --squash -t prism-proxy:dev -f proxy/Containerfile . \\\n  && podman run --rm -p 8980:8980 prism-proxy:dev &\n\n# In another terminal: make changes to source\n# Rebuild triggers automatically (using file watcher)\n"})}),"\n",(0,r.jsx)(e.h3,{id:"fast-iteration-tips",children:"Fast Iteration Tips"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Use Layer Caching"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-dockerfile",children:"# Copy dependencies first (changes less often)\nCOPY Cargo.toml Cargo.lock ./\nRUN cargo fetch\n\n# Copy source after (changes frequently)\nCOPY src/ src/\nRUN cargo build --release\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Build in Parallel"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Build multiple images concurrently\npodman build -t prism-proxy:scratch -f proxy/Containerfile . &\npodman build -t prism-redis:scratch -f patterns/redis/Containerfile patterns/redis &\nwait\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Skip Tests During Dev Build"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Fast build (no tests)\npodman build --build-arg SKIP_TESTS=true -t prism-proxy:dev .\n\n# Full build with tests\npodman build -t prism-proxy:release .\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"comparison-to-docker",children:"Comparison to Docker"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Feature"}),(0,r.jsx)(e.th,{children:"Podman"}),(0,r.jsx)(e.th,{children:"Docker"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Daemonless"})}),(0,r.jsx)(e.td,{children:"\u2705 No daemon required"}),(0,r.jsx)(e.td,{children:"\u274c Requires dockerd"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Rootless"})}),(0,r.jsx)(e.td,{children:"\u2705 Native rootless support"}),(0,r.jsx)(e.td,{children:"\u26a0\ufe0f Experimental"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Pod Support"})}),(0,r.jsx)(e.td,{children:"\u2705 Kubernetes-compatible pods"}),(0,r.jsx)(e.td,{children:"\u274c Requires Compose"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"CLI Compatibility"})}),(0,r.jsx)(e.td,{children:"\u2705 Drop-in replacement"}),(0,r.jsx)(e.td,{children:"N/A"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Image Format"})}),(0,r.jsx)(e.td,{children:"OCI standard"}),(0,r.jsx)(e.td,{children:"OCI + Docker format"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"macOS Runtime"})}),(0,r.jsx)(e.td,{children:"Lightweight VM (Hypervisor.framework)"}),(0,r.jsx)(e.td,{children:"Docker Desktop VM"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Licensing"})}),(0,r.jsx)(e.td,{children:"Apache 2.0 (free)"}),(0,r.jsx)(e.td,{children:"Free + paid tiers"})]})]})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Recommendation"}),": Use Podman for Prism development:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"No daemon overhead"}),"\n",(0,r.jsx)(e.li,{children:"Kubernetes-compatible pod definitions (easier transition to production)"}),"\n",(0,r.jsx)(e.li,{children:"Rootless by default (better security)"}),"\n",(0,r.jsx)(e.li,{children:"No licensing restrictions"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"native-runtime-reality-check",children:"Native Runtime Reality Check"}),"\n",(0,r.jsx)(e.h3,{id:"linux-true-native",children:"Linux: True Native"}),"\n",(0,r.jsx)(e.p,{children:"On Linux, containers ARE processes:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Start container\npodman run -d --name test alpine sleep 1000\n\n# See process on host\nps aux | grep sleep\n# OUTPUT: Shows sleep process running on host\n\n# Namespaces\nsudo ls -l /proc/$(podman inspect test --format '{{.State.Pid}}')/ns\n# OUTPUT: Shows namespace isolation (mnt, net, pid, etc.)\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Performance"}),": Native process performance, no virtualization overhead."]}),"\n",(0,r.jsx)(e.h3,{id:"macos-lightweight-vm-required",children:"macOS: Lightweight VM Required"}),"\n",(0,r.jsx)(e.p,{children:"On macOS, containers run in a lightweight Linux VM:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Podman machine is a QEMU VM running Fedora CoreOS\npodman machine ssh\n\n# Inside VM: see containers running as native Linux processes\nps aux | grep prism-proxy\n"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Reality"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"VM startup: ~5-10 seconds (one-time cost)"}),"\n",(0,r.jsx)(e.li,{children:"Container startup: <10ms (once VM is running)"}),"\n",(0,r.jsx)(e.li,{children:"No VM overhead per-container (all share same VM)"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Optimization"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Pre-start Podman machine\npodman machine start\n\n# Keep machine running (don't stop between sessions)\npodman machine set --rootful=false --cpus=4 --memory=4096\n"})}),"\n",(0,r.jsx)(e.h3,{id:"comparison-macos-container-runtimes",children:"Comparison: macOS Container Runtimes"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,r.jsxs)(e.table,{children:[(0,r.jsx)(e.thead,{children:(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.th,{children:"Runtime"}),(0,r.jsx)(e.th,{children:"VM Type"}),(0,r.jsx)(e.th,{children:"Startup"}),(0,r.jsx)(e.th,{children:"Memory"}),(0,r.jsx)(e.th,{children:"Disk"})]})}),(0,r.jsxs)(e.tbody,{children:[(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Podman Machine"})}),(0,r.jsx)(e.td,{children:"QEMU (Fedora CoreOS)"}),(0,r.jsx)(e.td,{children:"~8s"}),(0,r.jsx)(e.td,{children:"2-4GB"}),(0,r.jsx)(e.td,{children:"10-20GB"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Docker Desktop"})}),(0,r.jsx)(e.td,{children:"Hypervisor.framework"}),(0,r.jsx)(e.td,{children:"~10s"}),(0,r.jsx)(e.td,{children:"2-6GB"}),(0,r.jsx)(e.td,{children:"20-60GB"})]}),(0,r.jsxs)(e.tr,{children:[(0,r.jsx)(e.td,{children:(0,r.jsx)(e.strong,{children:"Rancher Desktop"})}),(0,r.jsx)(e.td,{children:"Lima VM"}),(0,r.jsx)(e.td,{children:"~12s"}),(0,r.jsx)(e.td,{children:"2-4GB"}),(0,r.jsx)(e.td,{children:"10-20GB"})]})]})]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Winner"}),": Podman Machine (lightest, fastest)"]}),"\n",(0,r.jsx)(e.h2,{id:"production-considerations",children:"Production Considerations"}),"\n",(0,r.jsx)(e.h3,{id:"building-for-production",children:"Building for Production"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Multi-architecture builds"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Build for AMD64 and ARM64\npodman build --platform linux/amd64,linux/arm64 \\\n  -t prism-proxy:scratch \\\n  --manifest prism-proxy:latest \\\n  -f proxy/Containerfile .\n\n# Push manifest to registry\npodman manifest push prism-proxy:latest \\\n  docker://registry.example.com/prism-proxy:latest\n"})}),"\n",(0,r.jsx)(e.h3,{id:"security-scanning",children:"Security Scanning"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Scan scratch images"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Install trivy\nbrew install aquasecurity/trivy/trivy\n\n# Scan scratch image\ntrivy image prism-proxy:scratch\n\n# OUTPUT: Minimal vulnerabilities (only your binary)\n# No OS packages = no CVEs\n"})}),"\n",(0,r.jsx)(e.h3,{id:"kubernetes-deployment",children:"Kubernetes Deployment"}),"\n",(0,r.jsx)(e.p,{children:"Podman pod YAML is Kubernetes-compatible:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Generate Kubernetes YAML from running pod\npodman generate kube prism-stack > prism-k8s.yaml\n\n# Deploy to Kubernetes\nkubectl apply -f prism-k8s.yaml\n"})}),"\n",(0,r.jsx)(e.h2,{id:"benefits-summary",children:"Benefits Summary"}),"\n",(0,r.jsx)(e.h3,{id:"scratch-based-images",children:"Scratch-Based Images"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Advantages"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Tiny size"}),": 6MB vs 127MB (95% reduction)"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Fast startup"}),": <10ms vs ~150ms"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Minimal attack surface"}),": No OS packages, no vulnerabilities"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Fast pulls"}),": 6MB downloads in <1 second on fast networks"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Lower costs"}),": Smaller registry storage, faster CI/CD"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Tradeoffs"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u274c ",(0,r.jsx)(e.strong,{children:"No shell"}),": Can't ",(0,r.jsx)(e.code,{children:"podman exec -it <container> /bin/sh"})," for debugging"]}),"\n",(0,r.jsxs)(e.li,{children:["\u274c ",(0,r.jsx)(e.strong,{children:"No utils"}),": No ",(0,r.jsx)(e.code,{children:"curl"}),", ",(0,r.jsx)(e.code,{children:"wget"}),", ",(0,r.jsx)(e.code,{children:"ps"}),", etc. inside container"]}),"\n",(0,r.jsxs)(e.li,{children:["\u274c ",(0,r.jsx)(e.strong,{children:"Static linking required"}),": Must compile with musl (Rust) or CGO_ENABLED=0 (Go)"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Mitigation"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"# Use debug variant for troubleshooting\nFROM scratch AS release\nCOPY --from=builder /binary /binary\n\nFROM alpine:3.18 AS debug\nCOPY --from=builder /binary /binary\nRUN apk add --no-cache curl busybox\n"})}),"\n",(0,r.jsx)(e.h3,{id:"podman",children:"Podman"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Advantages"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Daemonless"}),": No background service (lower resource usage)"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Rootless"}),": Better security posture"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Kubernetes-compatible"}),": Pod definitions work in K8s"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Drop-in replacement"}),": ",(0,r.jsx)(e.code,{children:"alias docker=podman"})," works for most cases"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"No licensing"}),": Fully open source"]}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Tradeoffs"}),":"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u26a0\ufe0f ",(0,r.jsx)(e.strong,{children:"macOS requires VM"}),": Not truly native (but optimized)"]}),"\n",(0,r.jsxs)(e.li,{children:["\u26a0\ufe0f ",(0,r.jsx)(e.strong,{children:"Ecosystem"}),": Some Docker Compose features not fully compatible"]}),"\n",(0,r.jsxs)(e.li,{children:["\u26a0\ufe0f ",(0,r.jsx)(e.strong,{children:"Tooling"}),": Some CI/CD tools assume Docker"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/adr/adr-049",children:"ADR-049: Podman Container Optimization"})," - Decision to use Podman"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/adr/adr-026",children:"ADR-026: Distroless Container Images"})," - Alternative to scratch"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/memos/memo-004",children:"MEMO-004: Backend Plugin Implementation Guide"})," - Backend implementation guide"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.a,{href:"/memos/memo-006",children:"MEMO-006: Backend Interface Decomposition and Schema Registry"})," - Pattern vs backend distinction (patterns like multicast-registry coordinate multiple backends)"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"2025-10-10: Updated terminology - Redis is a backend, not a pattern. Changed example from Postgres to Redis KeyValue implementation. Clarified that patterns (like multicast-registry) coordinate multiple backends to provide higher-level solutions."}),"\n",(0,r.jsx)(e.li,{children:"2025-10-09: Initial draft covering Podman + scratch containers with native runtime demo"}),"\n"]})]})}function m(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}}}]);