"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[7381],{2941:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"RFC-002-data-layer-interface","title":"RFC-002: Data Layer Interface Specification","description":"Abstract","source":"@site/../docs-cms/rfcs/RFC-002-data-layer-interface.md","sourceDirName":".","slug":"/RFC-002-data-layer-interface","permalink":"/prism-data-layer/rfc/RFC-002-data-layer-interface","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/RFC-002-data-layer-interface.md","tags":[],"version":"current","frontMatter":{"title":"RFC-002: Data Layer Interface Specification","status":"Draft","author":"Core Team","created":"2025-10-07T00:00:00.000Z","updated":"2025-10-07T00:00:00.000Z","supersedes":"N/A","related":"RFC-001, ADR-024"},"sidebar":"rfcSidebar","previous":{"title":"RFC-001: Prism Data Access Layer Architecture","permalink":"/prism-data-layer/rfc/RFC-001-prism-architecture"},"next":{"title":"RFC-003: Admin Interface for Prism","permalink":"/prism-data-layer/rfc/RFC-003-admin-interface"}}');var i=s(4848),r=s(8453);const o={title:"RFC-002: Data Layer Interface Specification",status:"Draft",author:"Core Team",created:new Date("2025-10-07T00:00:00.000Z"),updated:new Date("2025-10-07T00:00:00.000Z"),supersedes:"N/A",related:"RFC-001, ADR-024"},a=void 0,l={},c=[{value:"Abstract",id:"abstract",level:2},{value:"1. Introduction",id:"1-introduction",level:2},{value:"1.1 Purpose",id:"11-purpose",level:3},{value:"1.2 Design Principles",id:"12-design-principles",level:3},{value:"1.3 Service Overview",id:"13-service-overview",level:3},{value:"2. Session Service",id:"2-session-service",level:2},{value:"2.1 Overview",id:"21-overview",level:3},{value:"2.2 Service Definition",id:"22-service-definition",level:3},{value:"2.3 Messages",id:"23-messages",level:3},{value:"2.4 Usage Examples",id:"24-usage-examples",level:3},{value:"3. Queue Service",id:"3-queue-service",level:2},{value:"3.1 Overview",id:"31-overview",level:3},{value:"3.2 Service Definition",id:"32-service-definition",level:3},{value:"3.3 Messages",id:"33-messages",level:3},{value:"3.4 Usage Examples",id:"34-usage-examples",level:3},{value:"4. PubSub Service",id:"4-pubsub-service",level:2},{value:"4.1 Overview",id:"41-overview",level:3},{value:"4.2 Service Definition",id:"42-service-definition",level:3},{value:"4.3 Messages",id:"43-messages",level:3},{value:"4.4 Usage Examples",id:"44-usage-examples",level:3},{value:"5. Reader Service",id:"5-reader-service",level:2},{value:"5.1 Overview",id:"51-overview",level:3},{value:"5.2 Service Definition",id:"52-service-definition",level:3},{value:"5.3 Messages",id:"53-messages",level:3},{value:"5.4 Usage Examples",id:"54-usage-examples",level:3},{value:"6. Transact Service",id:"6-transact-service",level:2},{value:"6.1 Overview",id:"61-overview",level:3},{value:"6.2 Service Definition",id:"62-service-definition",level:3},{value:"6.3 Messages",id:"63-messages",level:3},{value:"6.4 Usage Examples",id:"64-usage-examples",level:3},{value:"7. Error Handling",id:"7-error-handling",level:2},{value:"7.1 gRPC Status Codes",id:"71-grpc-status-codes",level:3},{value:"7.2 Error Details",id:"72-error-details",level:3},{value:"7.3 Client Error Handling",id:"73-client-error-handling",level:3},{value:"8. Backward Compatibility",id:"8-backward-compatibility",level:2},{value:"8.1 Versioning Strategy",id:"81-versioning-strategy",level:3},{value:"8.2 Compatible Changes",id:"82-compatible-changes",level:3},{value:"8.3 Deprecation Process",id:"83-deprecation-process",level:3},{value:"9. Client Libraries",id:"9-client-libraries",level:2},{value:"9.1 Generated Clients",id:"91-generated-clients",level:3},{value:"9.2 Client Patterns",id:"92-client-patterns",level:3},{value:"10. Performance Considerations",id:"10-performance-considerations",level:2},{value:"10.1 Connection Pooling",id:"101-connection-pooling",level:3},{value:"10.2 Streaming Best Practices",id:"102-streaming-best-practices",level:3},{value:"10.3 Timeouts",id:"103-timeouts",level:3},{value:"11. Security",id:"11-security",level:2},{value:"11.1 Transport Security",id:"111-transport-security",level:3},{value:"11.2 Authentication",id:"112-authentication",level:3},{value:"11.3 Authorization",id:"113-authorization",level:3},{value:"12. Testing",id:"12-testing",level:2},{value:"12.1 Unit Tests",id:"121-unit-tests",level:3},{value:"12.2 Integration Tests",id:"122-integration-tests",level:3},{value:"13. References",id:"13-references",level:2},{value:"14. Revision History",id:"14-revision-history",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"abstract",children:"Abstract"}),"\n",(0,i.jsx)(n.p,{children:"This RFC specifies the complete data layer interface for Prism, defining all gRPC services, message formats, error handling, and client patterns. The interface provides a unified API for accessing heterogeneous backends through five core abstractions: Sessions, Queues, PubSub, Readers, and Transactions."}),"\n",(0,i.jsx)(n.h2,{id:"1-introduction",children:"1. Introduction"}),"\n",(0,i.jsx)(n.h3,{id:"11-purpose",children:"1.1 Purpose"}),"\n",(0,i.jsx)(n.p,{children:"The Prism data layer interface provides:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unified API"}),": Single gRPC interface for all data operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Type Safety"}),": Protobuf-defined messages with code generation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Streaming"}),": First-class support for server/client/bidirectional streaming"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Abstraction"}),": Backend-agnostic operations that map to multiple implementations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Evolution"}),": Forward/backward compatibility through versioned APIs"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"12-design-principles",children:"1.2 Design Principles"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Session-based"}),": All operations require authenticated session"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Layered"}),": Progressive disclosure from basic to specialized"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Streaming-first"}),": Use streaming for pagination, pub/sub, transactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Typed"}),": All requests/responses strongly typed via protobuf"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Versioned"}),": APIs versioned (v1, v2, etc.) for evolution"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"13-service-overview",children:"1.3 Service Overview"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           Session Service (v1)             \u2502\n\u2502  - CreateSession, CloseSession, Heartbeat  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                 \u2502\n     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n     \u2502                       \u2502\n\u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Queue Service\u2502      \u2502PubSub Service  \u2502\n\u2502    (v1)     \u2502      \u2502     (v1)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n     \u2502                       \u2502\n\u250c\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Reader       \u2502      \u2502Transact Service\u2502\n\u2502Service (v1) \u2502      \u2502     (v1)       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h2,{id:"2-session-service",children:"2. Session Service"}),"\n",(0,i.jsx)(n.h3,{id:"21-overview",children:"2.1 Overview"}),"\n",(0,i.jsx)(n.p,{children:"Foundation service for authentication, authorization, and connection management."}),"\n",(0,i.jsx)(n.h3,{id:"22-service-definition",children:"2.2 Service Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.session.v1;\n\nimport "google/protobuf/timestamp.proto";\nimport "google/protobuf/duration.proto";\nimport "prism/config/v1/client_config.proto";\n\nservice SessionService {\n  // Create new authenticated session\n  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);\n\n  // Close session and release resources\n  rpc CloseSession(CloseSessionRequest) returns (CloseSessionResponse);\n\n  // Heartbeat to keep session alive\n  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);\n\n  // Get session metadata\n  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);\n\n  // Refresh session (extend expiration)\n  rpc RefreshSession(RefreshSessionRequest) returns (RefreshSessionResponse);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"23-messages",children:"2.3 Messages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"message CreateSessionRequest {\n  // Authentication credentials\n  oneof auth {\n    string api_key = 1;\n    string jwt_token = 2;\n    MutualTLSAuth mtls = 3;\n  }\n\n  // Client configuration\n  oneof config {\n    string config_name = 4;              // Use named config\n    prism.config.v1.ClientConfig inline_config = 5;  // Inline config\n  }\n\n  // Client metadata\n  string client_id = 6;\n  string client_version = 7;\n  map<string, string> metadata = 8;\n}\n\nmessage MutualTLSAuth {\n  bytes client_cert = 1;\n}\n\nmessage CreateSessionResponse {\n  // Session token for subsequent requests\n  string session_token = 1;\n\n  // Session metadata\n  string session_id = 2;\n  google.protobuf.Timestamp created_at = 3;\n  google.protobuf.Timestamp expires_at = 4;\n\n  // Resolved configuration\n  prism.config.v1.ClientConfig config = 5;\n\n  // Server capabilities\n  repeated string supported_features = 6;\n}\n\nmessage CloseSessionRequest {\n  string session_token = 1;\n  bool force = 2;  // Force close even with pending operations\n}\n\nmessage CloseSessionResponse {\n  bool success = 1;\n  string message = 2;\n  int32 pending_operations = 3;  // Count of operations not completed\n}\n\nmessage HeartbeatRequest {\n  string session_token = 1;\n}\n\nmessage HeartbeatResponse {\n  google.protobuf.Timestamp server_time = 1;\n  google.protobuf.Duration ttl = 2;  // Time until session expires\n  SessionStatus status = 3;\n}\n\nenum SessionStatus {\n  SESSION_STATUS_UNSPECIFIED = 0;\n  SESSION_STATUS_ACTIVE = 1;\n  SESSION_STATUS_EXPIRING = 2;      // Near expiration\n  SESSION_STATUS_READ_ONLY = 3;     // Read operations only\n  SESSION_STATUS_TERMINATING = 4;   // Shutting down\n}\n\nmessage GetSessionRequest {\n  string session_token = 1;\n}\n\nmessage GetSessionResponse {\n  string session_id = 1;\n  SessionStatus status = 2;\n  google.protobuf.Timestamp created_at = 3;\n  google.protobuf.Timestamp expires_at = 4;\n  google.protobuf.Timestamp last_activity = 5;\n  prism.config.v1.ClientConfig config = 6;\n  SessionMetrics metrics = 7;\n}\n\nmessage SessionMetrics {\n  int64 requests_processed = 1;\n  int64 bytes_sent = 2;\n  int64 bytes_received = 3;\n  int32 active_streams = 4;\n}\n\nmessage RefreshSessionRequest {\n  string session_token = 1;\n  google.protobuf.Duration extension = 2;  // How long to extend\n}\n\nmessage RefreshSessionResponse {\n  google.protobuf.Timestamp new_expires_at = 1;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"24-usage-examples",children:"2.4 Usage Examples"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Create Session (Named Config):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'client := session.NewSessionServiceClient(conn)\n\nresp, err := client.CreateSession(ctx, &session.CreateSessionRequest{\n    Auth: &session.CreateSessionRequest_ApiKey{\n        ApiKey: "key-123",\n    },\n    Config: &session.CreateSessionRequest_ConfigName{\n        ConfigName: "user-profiles",\n    },\n    ClientId: "app-service-v1",\n    ClientVersion: "1.0.0",\n})\n\nsessionToken := resp.SessionToken\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Heartbeat Loop:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'ticker := time.NewTicker(30 * time.Second)\ndefer ticker.Stop()\n\nfor {\n    select {\n    case <-ticker.C:\n        resp, err := client.Heartbeat(ctx, &session.HeartbeatRequest{\n            SessionToken: sessionToken,\n        })\n        if err != nil {\n            log.Error("heartbeat failed", err)\n            return\n        }\n        log.Debug("heartbeat ok", "ttl", resp.Ttl)\n    case <-done:\n        return\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"3-queue-service",children:"3. Queue Service"}),"\n",(0,i.jsx)(n.h3,{id:"31-overview",children:"3.1 Overview"}),"\n",(0,i.jsx)(n.p,{children:"Kafka-style message queue operations with topics, partitions, and offsets."}),"\n",(0,i.jsx)(n.h3,{id:"32-service-definition",children:"3.2 Service Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.queue.v1;\n\nimport "google/protobuf/timestamp.proto";\nimport "google/protobuf/duration.proto";\n\nservice QueueService {\n  // Publish message to topic\n  rpc Publish(PublishRequest) returns (PublishResponse);\n\n  // Publish batch of messages\n  rpc PublishBatch(PublishBatchRequest) returns (PublishBatchResponse);\n\n  // Subscribe to topic (server streaming)\n  rpc Subscribe(SubscribeRequest) returns (stream Message);\n\n  // Acknowledge message processing\n  rpc Acknowledge(AcknowledgeRequest) returns (AcknowledgeResponse);\n\n  // Commit offset for consumer group\n  rpc Commit(CommitRequest) returns (CommitResponse);\n\n  // Seek to specific offset\n  rpc Seek(SeekRequest) returns (SeekResponse);\n\n  // Get topic metadata\n  rpc GetTopicInfo(GetTopicInfoRequest) returns (GetTopicInfoResponse);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"33-messages",children:"3.3 Messages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"message PublishRequest {\n  string session_token = 1;\n  string topic = 2;\n  bytes payload = 3;\n  map<string, string> headers = 4;\n  optional string partition_key = 5;\n  optional int32 partition = 6;  // Explicit partition\n}\n\nmessage PublishResponse {\n  string message_id = 1;\n  int64 offset = 2;\n  int32 partition = 3;\n  google.protobuf.Timestamp timestamp = 4;\n}\n\nmessage PublishBatchRequest {\n  string session_token = 1;\n  string topic = 2;\n  repeated BatchMessage messages = 3;\n}\n\nmessage BatchMessage {\n  bytes payload = 1;\n  map<string, string> headers = 2;\n  optional string partition_key = 3;\n}\n\nmessage PublishBatchResponse {\n  repeated PublishResponse results = 1;\n  int32 success_count = 2;\n  int32 failure_count = 3;\n}\n\nmessage SubscribeRequest {\n  string session_token = 1;\n  string topic = 2;\n  string consumer_group = 3;\n\n  // Starting position\n  oneof start_position {\n    int64 offset = 4;\n    google.protobuf.Timestamp timestamp = 5;\n    StartPosition position = 6;\n  }\n\n  // Flow control\n  optional int32 max_messages = 7;\n  optional google.protobuf.Duration timeout = 8;\n}\n\nenum StartPosition {\n  START_POSITION_UNSPECIFIED = 0;\n  START_POSITION_EARLIEST = 1;\n  START_POSITION_LATEST = 2;\n  START_POSITION_COMMITTED = 3;  // Last committed offset\n}\n\nmessage Message {\n  string message_id = 1;\n  string topic = 2;\n  int32 partition = 3;\n  int64 offset = 4;\n  bytes payload = 5;\n  map<string, string> headers = 6;\n  google.protobuf.Timestamp timestamp = 7;\n\n  // Metadata\n  optional string producer_id = 8;\n  optional int32 attempt = 9;  // For retries\n}\n\nmessage AcknowledgeRequest {\n  string session_token = 1;\n  repeated string message_ids = 2;\n}\n\nmessage AcknowledgeResponse {\n  int32 acknowledged_count = 1;\n  repeated string failed_ids = 2;\n}\n\nmessage CommitRequest {\n  string session_token = 1;\n  string topic = 2;\n  string consumer_group = 3;\n  repeated PartitionOffset offsets = 4;\n}\n\nmessage PartitionOffset {\n  int32 partition = 1;\n  int64 offset = 2;\n}\n\nmessage CommitResponse {\n  bool success = 1;\n  repeated PartitionOffset committed = 2;\n}\n\nmessage SeekRequest {\n  string session_token = 1;\n  string topic = 2;\n  string consumer_group = 3;\n  repeated PartitionOffset positions = 4;\n}\n\nmessage SeekResponse {\n  bool success = 1;\n}\n\nmessage GetTopicInfoRequest {\n  string session_token = 1;\n  string topic = 2;\n}\n\nmessage GetTopicInfoResponse {\n  string topic = 1;\n  int32 partition_count = 2;\n  int64 message_count = 3;\n  repeated PartitionInfo partitions = 4;\n}\n\nmessage PartitionInfo {\n  int32 partition = 1;\n  int64 earliest_offset = 2;\n  int64 latest_offset = 3;\n  int64 message_count = 4;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"34-usage-examples",children:"3.4 Usage Examples"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Publish:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'let response = client.publish(PublishRequest {\n    session_token: token.clone(),\n    topic: "events".to_string(),\n    payload: serde_json::to_vec(&event)?,\n    headers: headers,\n    partition_key: Some(user_id),\n    ..Default::default()\n}).await?;\n\nprintln!("Published to partition {} offset {}",\n    response.partition, response.offset);\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Subscribe (Streaming):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'let mut stream = client.subscribe(SubscribeRequest {\n    session_token: token.clone(),\n    topic: "events".to_string(),\n    consumer_group: "processors".to_string(),\n    start_position: Some(\n        subscribe_request::StartPosition::Position(StartPosition::Latest as i32)\n    ),\n    ..Default::default()\n}).await?.into_inner();\n\nwhile let Some(message) = stream.message().await? {\n    process_message(&message).await?;\n\n    client.acknowledge(AcknowledgeRequest {\n        session_token: token.clone(),\n        message_ids: vec![message.message_id],\n    }).await?;\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"4-pubsub-service",children:"4. PubSub Service"}),"\n",(0,i.jsx)(n.h3,{id:"41-overview",children:"4.1 Overview"}),"\n",(0,i.jsx)(n.p,{children:"NATS-style publish-subscribe with topic patterns and wildcards."}),"\n",(0,i.jsx)(n.h3,{id:"42-service-definition",children:"4.2 Service Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.pubsub.v1;\n\nimport "google/protobuf/timestamp.proto";\n\nservice PubSubService {\n  // Publish event to topic\n  rpc Publish(PublishRequest) returns (PublishResponse);\n\n  // Subscribe to topic pattern (server streaming)\n  rpc Subscribe(SubscribeRequest) returns (stream Event);\n\n  // Unsubscribe from topic pattern\n  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse);\n\n  // List active subscriptions\n  rpc ListSubscriptions(ListSubscriptionsRequest) returns (ListSubscriptionsResponse);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"43-messages",children:"4.3 Messages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'message PublishRequest {\n  string session_token = 1;\n  string topic = 2;  // e.g., "events.user.created"\n  bytes payload = 3;\n  map<string, string> metadata = 4;\n  optional string correlation_id = 5;\n  optional string reply_to = 6;  // For request-reply pattern\n}\n\nmessage PublishResponse {\n  string event_id = 1;\n  google.protobuf.Timestamp published_at = 2;\n  int32 subscriber_count = 3;  // How many subscribers received it\n}\n\nmessage SubscribeRequest {\n  string session_token = 1;\n  string topic_pattern = 2;  // e.g., "events.user.*", "events.>"\n  optional string queue_group = 3;  // For load balancing\n  SubscriptionOptions options = 4;\n}\n\nmessage SubscriptionOptions {\n  bool auto_acknowledge = 1;  // Auto-ack on delivery\n  optional int32 max_messages = 2;  // Limit total messages\n  optional google.protobuf.Duration max_duration = 3;  // Subscription timeout\n}\n\nmessage Event {\n  string event_id = 1;\n  string topic = 2;\n  bytes payload = 3;\n  map<string, string> metadata = 4;\n  google.protobuf.Timestamp timestamp = 5;\n\n  // Request-reply support\n  optional string correlation_id = 6;\n  optional string reply_to = 7;\n\n  // Subscription info\n  string subscription_id = 8;\n}\n\nmessage UnsubscribeRequest {\n  string session_token = 1;\n  string subscription_id = 2;\n}\n\nmessage UnsubscribeResponse {\n  bool success = 1;\n}\n\nmessage ListSubscriptionsRequest {\n  string session_token = 1;\n}\n\nmessage ListSubscriptionsResponse {\n  repeated Subscription subscriptions = 1;\n}\n\nmessage Subscription {\n  string subscription_id = 1;\n  string topic_pattern = 2;\n  optional string queue_group = 3;\n  google.protobuf.Timestamp created_at = 4;\n  int64 messages_received = 5;\n  bool active = 6;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"44-usage-examples",children:"4.4 Usage Examples"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Subscribe with Wildcard:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'stream, err := client.Subscribe(ctx, &pubsub.SubscribeRequest{\n    SessionToken: token,\n    TopicPattern: "events.user.*",  // Match all user events\n    QueueGroup: "processors",        // Load balance across group\n    Options: &pubsub.SubscriptionOptions{\n        AutoAcknowledge: true,\n    },\n})\n\nfor {\n    event, err := stream.Recv()\n    if err == io.EOF {\n        break\n    }\n    if err != nil {\n        log.Error("stream error", err)\n        break\n    }\n\n    log.Info("received event", "topic", event.Topic, "id", event.EventId)\n    processEvent(event)\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"5-reader-service",children:"5. Reader Service"}),"\n",(0,i.jsx)(n.h3,{id:"51-overview",children:"5.1 Overview"}),"\n",(0,i.jsx)(n.p,{children:"Database-style paged reading with queries and filters."}),"\n",(0,i.jsx)(n.h3,{id:"52-service-definition",children:"5.2 Service Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.reader.v1;\n\nimport "google/protobuf/struct.proto";\nimport "google/protobuf/timestamp.proto";\n\nservice ReaderService {\n  // Read pages of data (server streaming)\n  rpc Read(ReadRequest) returns (stream Page);\n\n  // Query with filters (server streaming)\n  rpc Query(QueryRequest) returns (stream Row);\n\n  // Count matching records\n  rpc Count(CountRequest) returns (CountResponse);\n\n  // Get single record by ID\n  rpc Get(GetRequest) returns (GetResponse);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"53-messages",children:"5.3 Messages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"message ReadRequest {\n  string session_token = 1;\n  string collection = 2;\n  int32 page_size = 3;\n  optional string cursor = 4;  // Continuation token\n  repeated string fields = 5;  // Projection (empty = all fields)\n  optional Filter filter = 6;\n  repeated Sort sort = 7;\n}\n\nmessage Page {\n  repeated Row rows = 1;\n  optional string next_cursor = 2;\n  bool has_more = 3;\n  PageMetadata metadata = 4;\n}\n\nmessage PageMetadata {\n  int32 row_count = 1;\n  int32 page_number = 2;\n  google.protobuf.Timestamp generated_at = 3;\n}\n\nmessage Row {\n  map<string, google.protobuf.Value> fields = 1;\n  optional RowMetadata metadata = 2;\n}\n\nmessage RowMetadata {\n  google.protobuf.Timestamp created_at = 1;\n  google.protobuf.Timestamp updated_at = 2;\n  string version = 3;  // For optimistic locking\n}\n\nmessage QueryRequest {\n  string session_token = 1;\n  string collection = 2;\n  Filter filter = 3;\n  repeated Sort sort = 4;\n  optional int32 limit = 5;\n  optional int32 offset = 6;\n  repeated string fields = 7;\n}\n\nmessage Filter {\n  oneof filter {\n    FieldFilter field = 1;\n    CompositeFilter composite = 2;\n  }\n}\n\nmessage FieldFilter {\n  string field = 1;\n  Operator op = 2;\n  google.protobuf.Value value = 3;\n\n  enum Operator {\n    OPERATOR_UNSPECIFIED = 0;\n    OPERATOR_EQUALS = 1;\n    OPERATOR_NOT_EQUALS = 2;\n    OPERATOR_GREATER_THAN = 3;\n    OPERATOR_GREATER_THAN_OR_EQUALS = 4;\n    OPERATOR_LESS_THAN = 5;\n    OPERATOR_LESS_THAN_OR_EQUALS = 6;\n    OPERATOR_IN = 7;\n    OPERATOR_NOT_IN = 8;\n    OPERATOR_CONTAINS = 9;\n    OPERATOR_STARTS_WITH = 10;\n    OPERATOR_ENDS_WITH = 11;\n  }\n}\n\nmessage CompositeFilter {\n  LogicalOperator op = 1;\n  repeated Filter filters = 2;\n\n  enum LogicalOperator {\n    LOGICAL_OPERATOR_UNSPECIFIED = 0;\n    LOGICAL_OPERATOR_AND = 1;\n    LOGICAL_OPERATOR_OR = 2;\n    LOGICAL_OPERATOR_NOT = 3;\n  }\n}\n\nmessage Sort {\n  string field = 1;\n  Direction direction = 2;\n\n  enum Direction {\n    DIRECTION_UNSPECIFIED = 0;\n    DIRECTION_ASC = 1;\n    DIRECTION_DESC = 2;\n  }\n}\n\nmessage CountRequest {\n  string session_token = 1;\n  string collection = 2;\n  optional Filter filter = 3;\n}\n\nmessage CountResponse {\n  int64 count = 1;\n}\n\nmessage GetRequest {\n  string session_token = 1;\n  string collection = 2;\n  string id = 3;\n  repeated string fields = 4;\n}\n\nmessage GetResponse {\n  optional Row row = 1;\n  bool found = 2;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"54-usage-examples",children:"5.4 Usage Examples"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Paged Reading:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'stream = client.Read(reader_pb2.ReadRequest(\n    session_token=token,\n    collection="users",\n    page_size=100,\n    fields=["id", "name", "email"],\n    sort=[\n        reader_pb2.Sort(field="created_at", direction=reader_pb2.Sort.DIRECTION_DESC)\n    ]\n))\n\nfor page in stream:\n    for row in page.rows:\n        user_id = row.fields["id"].string_value\n        name = row.fields["name"].string_value\n        print(f"User: {user_id} - {name}")\n\n    if not page.has_more:\n        break\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Query with Filter:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# Complex filter: active users created in last 30 days\nfilter = reader_pb2.Filter(\n    composite=reader_pb2.CompositeFilter(\n        op=reader_pb2.CompositeFilter.LOGICAL_OPERATOR_AND,\n        filters=[\n            reader_pb2.Filter(\n                field=reader_pb2.FieldFilter(\n                    field="status",\n                    op=reader_pb2.FieldFilter.OPERATOR_EQUALS,\n                    value=Value(string_value="active")\n                )\n            ),\n            reader_pb2.Filter(\n                field=reader_pb2.FieldFilter(\n                    field="created_at",\n                    op=reader_pb2.FieldFilter.OPERATOR_GREATER_THAN,\n                    value=Value(string_value="2025-09-07T00:00:00Z")\n                )\n            )\n        ]\n    )\n)\n\nstream = client.Query(reader_pb2.QueryRequest(\n    session_token=token,\n    collection="users",\n    filter=filter,\n    limit=1000\n))\n\nfor row in stream:\n    process_user(row)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"6-transact-service",children:"6. Transact Service"}),"\n",(0,i.jsx)(n.h3,{id:"61-overview",children:"6.1 Overview"}),"\n",(0,i.jsx)(n.p,{children:"Transactional writes across two tables (inbox/outbox pattern)."}),"\n",(0,i.jsx)(n.h3,{id:"62-service-definition",children:"6.2 Service Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.transact.v1;\n\nimport "google/protobuf/struct.proto";\nimport "google/protobuf/timestamp.proto";\n\nservice TransactService {\n  // Single transactional write\n  rpc Write(WriteRequest) returns (WriteResponse);\n\n  // Streaming transaction (begin, writes, commit/rollback)\n  rpc Transaction(stream TransactRequest) returns (stream TransactResponse);\n\n  // Read mailbox messages\n  rpc ReadMailbox(ReadMailboxRequest) returns (stream MailboxMessage);\n\n  // Mark mailbox messages as processed\n  rpc ProcessMailbox(ProcessMailboxRequest) returns (ProcessMailboxResponse);\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"63-messages",children:"6.3 Messages"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"message WriteRequest {\n  string session_token = 1;\n\n  // Data table write\n  DataWrite data = 2;\n\n  // Mailbox table write\n  MailboxWrite mailbox = 3;\n\n  // Transaction options\n  TransactionOptions options = 4;\n}\n\nmessage DataWrite {\n  string table = 1;\n  map<string, google.protobuf.Value> record = 2;\n  WriteMode mode = 3;\n  optional string id_field = 4;  // For updates\n\n  enum WriteMode {\n    WRITE_MODE_UNSPECIFIED = 0;\n    WRITE_MODE_INSERT = 1;\n    WRITE_MODE_UPDATE = 2;\n    WRITE_MODE_UPSERT = 3;\n    WRITE_MODE_DELETE = 4;\n  }\n}\n\nmessage MailboxWrite {\n  string mailbox_id = 1;\n  bytes message = 2;\n  map<string, string> metadata = 3;\n  optional string message_type = 4;\n  optional int32 priority = 5;\n}\n\nmessage TransactionOptions {\n  IsolationLevel isolation = 1;\n  int32 timeout_ms = 2;\n  bool idempotent = 3;  // Safe to retry\n  optional string idempotency_key = 4;\n\n  enum IsolationLevel {\n    ISOLATION_LEVEL_UNSPECIFIED = 0;\n    ISOLATION_LEVEL_READ_COMMITTED = 1;\n    ISOLATION_LEVEL_REPEATABLE_READ = 2;\n    ISOLATION_LEVEL_SERIALIZABLE = 3;\n  }\n}\n\nmessage WriteResponse {\n  string transaction_id = 1;\n  bool committed = 2;\n  DataWriteResult data_result = 3;\n  MailboxWriteResult mailbox_result = 4;\n  google.protobuf.Timestamp timestamp = 5;\n}\n\nmessage DataWriteResult {\n  int64 rows_affected = 1;\n  map<string, google.protobuf.Value> generated_values = 2;  // Auto-generated IDs, etc.\n}\n\nmessage MailboxWriteResult {\n  string message_id = 1;\n  int64 sequence = 2;\n}\n\n// Streaming transaction messages\nmessage TransactRequest {\n  oneof request {\n    BeginTransaction begin = 1;\n    WriteRequest write = 2;\n    CommitTransaction commit = 3;\n    RollbackTransaction rollback = 4;\n  }\n}\n\nmessage BeginTransaction {\n  string session_token = 1;\n  TransactionOptions options = 2;\n}\n\nmessage CommitTransaction {\n  // Empty - just signals commit\n}\n\nmessage RollbackTransaction {\n  string reason = 1;\n}\n\nmessage TransactResponse {\n  oneof response {\n    TransactionStarted started = 1;\n    WriteResponse write_result = 2;\n    TransactionCommitted committed = 3;\n    TransactionRolledBack rolled_back = 4;\n    TransactionError error = 5;\n  }\n}\n\nmessage TransactionStarted {\n  string transaction_id = 1;\n  google.protobuf.Timestamp started_at = 2;\n}\n\nmessage TransactionCommitted {\n  bool success = 1;\n  int32 write_count = 2;\n}\n\nmessage TransactionRolledBack {\n  string reason = 1;\n}\n\nmessage TransactionError {\n  string code = 1;\n  string message = 2;\n}\n\nmessage ReadMailboxRequest {\n  string session_token = 1;\n  string mailbox_id = 2;\n  optional int64 since_sequence = 3;\n  optional int32 limit = 4;\n  optional bool unprocessed_only = 5;\n}\n\nmessage MailboxMessage {\n  string message_id = 1;\n  string mailbox_id = 2;\n  int64 sequence = 3;\n  bytes message = 4;\n  map<string, string> metadata = 5;\n  optional string message_type = 6;\n  google.protobuf.Timestamp created_at = 7;\n  bool processed = 8;\n  optional google.protobuf.Timestamp processed_at = 9;\n}\n\nmessage ProcessMailboxRequest {\n  string session_token = 1;\n  repeated string message_ids = 2;\n}\n\nmessage ProcessMailboxResponse {\n  int32 processed_count = 1;\n  repeated string failed_ids = 2;\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"64-usage-examples",children:"6.4 Usage Examples"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Single Transaction:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'let response = client.write(WriteRequest {\n    session_token: token.clone(),\n    data: Some(DataWrite {\n        table: "orders".to_string(),\n        record: order_data,\n        mode: WriteMode::Insert as i32,\n        ..Default::default()\n    }),\n    mailbox: Some(MailboxWrite {\n        mailbox_id: "order-events".to_string(),\n        message: event_bytes,\n        metadata: metadata,\n        message_type: Some("order.created".to_string()),\n        ..Default::default()\n    }),\n    options: Some(TransactionOptions {\n        isolation: IsolationLevel::Serializable as i32,\n        idempotent: true,\n        idempotency_key: Some(order_id.clone()),\n        ..Default::default()\n    }),\n}).await?;\n\nprintln!("Transaction {} committed", response.transaction_id);\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Streaming Transaction:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"let (mut tx, mut rx) = client.transaction().await?.into_inner().split();\n\n// Begin\ntx.send(TransactRequest {\n    request: Some(transact_request::Request::Begin(BeginTransaction {\n        session_token: token.clone(),\n        ..Default::default()\n    }))\n}).await?;\n\nlet started = rx.message().await?.unwrap();\n\n// Multiple writes\nfor order in orders {\n    tx.send(TransactRequest {\n        request: Some(transact_request::Request::Write(/* ... */))\n    }).await?;\n\n    let result = rx.message().await?;\n}\n\n// Commit\ntx.send(TransactRequest {\n    request: Some(transact_request::Request::Commit(CommitTransaction {}))\n}).await?;\n\nlet committed = rx.message().await?.unwrap();\n"})}),"\n",(0,i.jsx)(n.h2,{id:"7-error-handling",children:"7. Error Handling"}),"\n",(0,i.jsx)(n.h3,{id:"71-grpc-status-codes",children:"7.1 gRPC Status Codes"}),"\n",(0,i.jsx)(n.p,{children:"All services use standard gRPC status codes:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Code"}),(0,i.jsx)(n.th,{children:"Usage"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"OK"})}),(0,i.jsx)(n.td,{children:"Success"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"CANCELLED"})}),(0,i.jsx)(n.td,{children:"Client cancelled"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"INVALID_ARGUMENT"})}),(0,i.jsx)(n.td,{children:"Invalid request parameters"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"DEADLINE_EXCEEDED"})}),(0,i.jsx)(n.td,{children:"Timeout"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"NOT_FOUND"})}),(0,i.jsx)(n.td,{children:"Resource not found"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ALREADY_EXISTS"})}),(0,i.jsx)(n.td,{children:"Duplicate creation"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"PERMISSION_DENIED"})}),(0,i.jsx)(n.td,{children:"Authorization failure"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"RESOURCE_EXHAUSTED"})}),(0,i.jsx)(n.td,{children:"Rate limit exceeded"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"FAILED_PRECONDITION"})}),(0,i.jsx)(n.td,{children:"Precondition not met"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ABORTED"})}),(0,i.jsx)(n.td,{children:"Transaction conflict"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"OUT_OF_RANGE"})}),(0,i.jsx)(n.td,{children:"Invalid range"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"UNIMPLEMENTED"})}),(0,i.jsx)(n.td,{children:"Feature not available"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"INTERNAL"})}),(0,i.jsx)(n.td,{children:"Server error"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"UNAVAILABLE"})}),(0,i.jsx)(n.td,{children:"Service unavailable"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"UNAUTHENTICATED"})}),(0,i.jsx)(n.td,{children:"Invalid/missing auth"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"72-error-details",children:"7.2 Error Details"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"google.rpc.ErrorInfo"})," for structured errors:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:'import "google/rpc/error_details.proto";\n\n// In error response metadata\ngoogle.rpc.ErrorInfo {\n  reason: "INVALID_SESSION_TOKEN"\n  domain: "prism.session.v1"\n  metadata: {\n    "session_id": "sess-123"\n    "expired_at": "2025-10-07T12:00:00Z"\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"73-client-error-handling",children:"7.3 Client Error Handling"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"resp, err := client.Publish(ctx, req)\nif err != nil {\n    st, ok := status.FromError(err)\n    if !ok {\n        // Non-gRPC error\n        return err\n    }\n\n    switch st.Code() {\n    case codes.Unauthenticated:\n        // Refresh session\n        return refreshAndRetry()\n    case codes.ResourceExhausted:\n        // Rate limited, backoff\n        time.Sleep(backoff)\n        return retry()\n    case codes.Unavailable:\n        // Service down, circuit breaker\n        return circuitBreaker.RecordFailure(err)\n    default:\n        return err\n    }\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"8-backward-compatibility",children:"8. Backward Compatibility"}),"\n",(0,i.jsx)(n.h3,{id:"81-versioning-strategy",children:"8.1 Versioning Strategy"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"API Version"}),": ",(0,i.jsx)(n.code,{children:"v1"}),", ",(0,i.jsx)(n.code,{children:"v2"})," in package name (",(0,i.jsx)(n.code,{children:"prism.queue.v1"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Service Version"}),": Separate services for major versions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Message Evolution"}),": Additive changes only within version"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"82-compatible-changes",children:"8.2 Compatible Changes"}),"\n",(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Allowed:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Add new RPC methods"}),"\n",(0,i.jsx)(n.li,{children:"Add new optional fields"}),"\n",(0,i.jsxs)(n.li,{children:["Add new enum values (with ",(0,i.jsx)(n.code,{children:"UNSPECIFIED"})," default)"]}),"\n",(0,i.jsx)(n.li,{children:"Add new message types"}),"\n",(0,i.jsx)(n.li,{children:"Deprecate (but don't remove) fields"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Not Allowed:"})]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Remove or rename fields"}),"\n",(0,i.jsx)(n.li,{children:"Change field numbers"}),"\n",(0,i.jsx)(n.li,{children:"Change field types"}),"\n",(0,i.jsx)(n.li,{children:"Remove RPC methods"}),"\n",(0,i.jsx)(n.li,{children:"Change RPC signatures"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"83-deprecation-process",children:"8.3 Deprecation Process"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-protobuf",children:"message OldRequest {\n  string field1 = 1;\n  string field2 = 2 [deprecated = true];  // Mark deprecated\n  string field3 = 3;  // New replacement\n}\n\nservice MyService {\n  rpc OldMethod(OldRequest) returns (OldResponse) {\n    option deprecated = true;  // Mark deprecated\n  }\n  rpc NewMethod(NewRequest) returns (NewResponse);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"9-client-libraries",children:"9. Client Libraries"}),"\n",(0,i.jsx)(n.h3,{id:"91-generated-clients",children:"9.1 Generated Clients"}),"\n",(0,i.jsx)(n.p,{children:"All languages get generated clients:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Rust\nbuf generate --template buf.gen.rust.yaml\n\n# Go\nbuf generate --template buf.gen.go.yaml\n\n# Python\nbuf generate --template buf.gen.python.yaml\n"})}),"\n",(0,i.jsx)(n.h3,{id:"92-client-patterns",children:"9.2 Client Patterns"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Connection Management:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Create connection with keepalive\nconn, err := grpc.Dial(\n    "prism.example.com:8980",\n    grpc.WithTransportCredentials(creds),\n    grpc.WithKeepaliveParams(keepalive.ClientParameters{\n        Time:    30 * time.Second,\n        Timeout: 10 * time.Second,\n    }),\n)\ndefer conn.Close()\n\n// Create clients\nsessionClient := session.NewSessionServiceClient(conn)\nqueueClient := queue.NewQueueServiceClient(conn)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Metadata Propagation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Add session token to metadata\nmd := metadata.Pairs("x-session-token", sessionToken)\nctx := metadata.NewOutgoingContext(ctx, md)\n\n// Or use interceptor\nfunc sessionTokenInterceptor(token string) grpc.UnaryClientInterceptor {\n    return func(ctx context.Context, method string, req, reply interface{},\n        cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n\n        md := metadata.Pairs("x-session-token", token)\n        ctx = metadata.NewOutgoingContext(ctx, md)\n        return invoker(ctx, method, req, reply, cc, opts...)\n    }\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"10-performance-considerations",children:"10. Performance Considerations"}),"\n",(0,i.jsx)(n.h3,{id:"101-connection-pooling",children:"10.1 Connection Pooling"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reuse gRPC connections"}),"\n",(0,i.jsx)(n.li,{children:"Use HTTP/2 multiplexing (multiple RPCs per connection)"}),"\n",(0,i.jsx)(n.li,{children:"Configure connection pool size based on load"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"102-streaming-best-practices",children:"10.2 Streaming Best Practices"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Server Streaming:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Use backpressure (flow control)"}),"\n",(0,i.jsx)(n.li,{children:"Set reasonable page sizes"}),"\n",(0,i.jsx)(n.li,{children:"Use cursors for resumption"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Client Streaming:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Batch writes when possible"}),"\n",(0,i.jsx)(n.li,{children:"Use buffering to reduce round trips"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"103-timeouts",children:"10.3 Timeouts"}),"\n",(0,i.jsx)(n.p,{children:"Set appropriate timeouts:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"ctx, cancel := context.WithTimeout(ctx, 5*time.Second)\ndefer cancel()\n\nresp, err := client.Publish(ctx, req)\n"})}),"\n",(0,i.jsx)(n.h2,{id:"11-security",children:"11. Security"}),"\n",(0,i.jsx)(n.h3,{id:"111-transport-security",children:"11.1 Transport Security"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"TLS 1.3 required"}),"\n",(0,i.jsx)(n.li,{children:"mTLS for service-to-service"}),"\n",(0,i.jsx)(n.li,{children:"Certificate rotation support"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"112-authentication",children:"11.2 Authentication"}),"\n",(0,i.jsx)(n.p,{children:"Session tokens in metadata:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"x-session-token: sess-abc123def456\n"})}),"\n",(0,i.jsx)(n.h3,{id:"113-authorization",children:"11.3 Authorization"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Namespace-level permissions"}),"\n",(0,i.jsx)(n.li,{children:"Operation-level permissions"}),"\n",(0,i.jsx)(n.li,{children:"Row-level security (future)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"12-testing",children:"12. Testing"}),"\n",(0,i.jsx)(n.h3,{id:"121-unit-tests",children:"12.1 Unit Tests"}),"\n",(0,i.jsx)(n.p,{children:"Test generated code and client logic:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func TestPublish(t *testing.T) {\n    // Mock server\n    server := &mockQueueService{\n        publishFunc: func(ctx context.Context, req *queue.PublishRequest) (*queue.PublishResponse, error) {\n            return &queue.PublishResponse{\n                MessageId: "msg-123",\n                Offset: 42,\n                Partition: 0,\n            }, nil\n        },\n    }\n\n    // Test client\n    resp, err := client.Publish(ctx, req)\n    assert.NoError(t, err)\n    assert.Equal(t, "msg-123", resp.MessageId)\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"122-integration-tests",children:"12.2 Integration Tests"}),"\n",(0,i.jsx)(n.p,{children:"Test against real server:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"func TestQueueIntegration(t *testing.T) {\n    // Start test server\n    server := startTestServer(t)\n    defer server.Stop()\n\n    // Create client\n    conn := dialTestServer(t, server.Addr())\n    client := queue.NewQueueServiceClient(conn)\n\n    // Test flow\n    pubResp, _ := client.Publish(ctx, &queue.PublishRequest{...})\n\n    stream, _ := client.Subscribe(ctx, &queue.SubscribeRequest{...})\n    msg, _ := stream.Recv()\n\n    assert.Equal(t, pubResp.MessageId, msg.MessageId)\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"13-references",children:"13. References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"RFC-001: Prism Architecture"}),"\n",(0,i.jsx)(n.li,{children:"ADR-023: gRPC-First Interface Design"}),"\n",(0,i.jsx)(n.li,{children:"ADR-024: Layered Interface Hierarchy"}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://grpc.io/docs/",children:"gRPC Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://protobuf.dev/programming-guides/style/",children:"Protobuf Style Guide"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"14-revision-history",children:"14. Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2025-10-07: Initial draft"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(6540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);