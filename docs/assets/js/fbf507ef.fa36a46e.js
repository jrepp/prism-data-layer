"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[48854],{28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(96540);const r={},o=s.createContext(r);function a(e){const n=s.useContext(o);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(o.Provider,{value:n},e.children)}},67808:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"adr-050","title":"Topaz for Policy-Based Authorization","description":"Status","source":"@site/../docs-cms/adr/adr-050-topaz-policy-authorization.md","sourceDirName":".","slug":"/adr-050","permalink":"/prism-data-layer/adr/adr-050","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-050-topaz-policy-authorization.md","tags":[{"inline":true,"label":"authorization","permalink":"/prism-data-layer/adr/tags/authorization"},{"inline":true,"label":"security","permalink":"/prism-data-layer/adr/tags/security"},{"inline":true,"label":"policy","permalink":"/prism-data-layer/adr/tags/policy"},{"inline":true,"label":"topaz","permalink":"/prism-data-layer/adr/tags/topaz"},{"inline":true,"label":"openpolicyagent","permalink":"/prism-data-layer/adr/tags/openpolicyagent"},{"inline":true,"label":"rbac","permalink":"/prism-data-layer/adr/tags/rbac"},{"inline":true,"label":"abac","permalink":"/prism-data-layer/adr/tags/abac"}],"version":"current","frontMatter":{"date":"2025-10-09T00:00:00.000Z","deciders":"Core Team","doc_uuid":"5077b7fe-3350-4dc8-837b-17fa706c0798","id":"adr-050","project_id":"prism-data-layer","status":"Accepted","tags":["authorization","security","policy","topaz","openpolicyagent","rbac","abac"],"title":"Topaz for Policy-Based Authorization"},"sidebar":"adrSidebar","previous":{"title":"Podman and Container Optimization for Instant Testing \u2022 ADR-049","permalink":"/prism-data-layer/adr/adr-049"}}');var r=i(74848),o=i(28453);const a={date:new Date("2025-10-09T00:00:00.000Z"),deciders:"Core Team",doc_uuid:"5077b7fe-3350-4dc8-837b-17fa706c0798",id:"adr-050",project_id:"prism-data-layer",status:"Accepted",tags:["authorization","security","policy","topaz","openpolicyagent","rbac","abac"],title:"Topaz for Policy-Based Authorization"},l="ADR-050: Topaz for Policy-Based Authorization",t={},c=[{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Alternative A: Open Policy Agent (OPA) Alone",id:"alternative-a-open-policy-agent-opa-alone",level:4},{value:"Alternative B: Cloud Provider IAM (AWS IAM, Google Cloud IAM)",id:"alternative-b-cloud-provider-iam-aws-iam-google-cloud-iam",level:4},{value:"Alternative C: Zanzibar-based Systems (SpiceDB, Ory Keto)",id:"alternative-c-zanzibar-based-systems-spicedb-ory-keto",level:4},{value:"Alternative D: Topaz (Selected)",id:"alternative-d-topaz-selected",level:4},{value:"Architecture",id:"architecture",level:2},{value:"Deployment Model: Sidecar Pattern",id:"deployment-model-sidecar-pattern",level:3},{value:"Authorization Model: Relationship-Based Access Control",id:"authorization-model-relationship-based-access-control",level:3},{value:"Integration Points",id:"integration-points",level:3},{value:"1. Prism Proxy (Rust)",id:"1-prism-proxy-rust",level:4},{value:"2. Admin CLI (Go)",id:"2-admin-cli-go",level:4},{value:"3. Admin UI (FastAPI)",id:"3-admin-ui-fastapi",level:4},{value:"Policy Examples",id:"policy-examples",level:3},{value:"Policy 1: Namespace Isolation (Multi-Tenancy)",id:"policy-1-namespace-isolation-multi-tenancy",level:4},{value:"Policy 2: Time-Based Access (Maintenance Windows)",id:"policy-2-time-based-access-maintenance-windows",level:4},{value:"Policy 3: Data Sensitivity (PII Protection)",id:"policy-3-data-sensitivity-pii-protection",level:4},{value:"Directory Schema",id:"directory-schema",level:2},{value:"Performance Characteristics",id:"performance-characteristics",level:2},{value:"Latency",id:"latency",level:3},{value:"Throughput",id:"throughput",level:3},{value:"Deployment",id:"deployment",level:2},{value:"Local Development",id:"local-development",level:3},{value:"Production Deployment",id:"production-deployment",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"1. Policy Isolation",id:"1-policy-isolation",level:3},{value:"2. Directory Integrity",id:"2-directory-integrity",level:3},{value:"3. Sidecar Compromise",id:"3-sidecar-compromise",level:3},{value:"4. Denial of Service",id:"4-denial-of-service",level:3},{value:"Migration Path",id:"migration-path",level:2},{value:"Phase 1: Basic RBAC (Week 1)",id:"phase-1-basic-rbac-week-1",level:3},{value:"Phase 2: Namespace Isolation (Week 2)",id:"phase-2-namespace-isolation-week-2",level:3},{value:"Phase 3: Fine-Grained Permissions (Week 3)",id:"phase-3-fine-grained-permissions-week-3",level:3},{value:"Phase 4: Production Rollout (Week 4)",id:"phase-4-production-rollout-week-4",level:3},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"Metrics",id:"metrics",level:3},{value:"Logging",id:"logging",level:3},{value:"Alerts",id:"alerts",level:3},{value:"Open Questions",id:"open-questions",level:2},{value:"1. Fail-Open vs Fail-Closed?",id:"1-fail-open-vs-fail-closed",level:3},{value:"2. How to Handle Policy Conflicts?",id:"2-how-to-handle-policy-conflicts",level:3},{value:"3. Should We Cache Authorization Decisions?",id:"3-should-we-cache-authorization-decisions",level:3},{value:"Related Documents",id:"related-documents",level:2},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"adr-050-topaz-for-policy-based-authorization",children:"ADR-050: Topaz for Policy-Based Authorization"})}),"\n",(0,r.jsx)(n.h2,{id:"status",children:"Status"}),"\n",(0,r.jsx)(n.p,{children:"Accepted"}),"\n",(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(n.p,{children:"Prism requires fine-grained authorization beyond simple OIDC authentication. We need:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multi-tenancy isolation"}),": Users can only access their namespace's data"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Role-based access control (RBAC)"}),": Different permissions for developers, operators, admins"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Attribute-based access control (ABAC)"}),": Context-aware policies (time of day, IP address, data sensitivity)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Resource-level policies"}),": Per-namespace, per-backend, per-pattern permissions"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Audit trail"}),": Who accessed what, when, and why"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Design Constraints"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Authorization decisions must be fast (<5ms P99)"}),"\n",(0,r.jsx)(n.li,{children:"Policies must be centrally managed and versioned"}),"\n",(0,r.jsx)(n.li,{children:"Must integrate with existing OIDC authentication (RFC-010, RFC-011)"}),"\n",(0,r.jsx)(n.li,{children:"Should support both synchronous (proxy) and asynchronous (admin) authorization"}),"\n",(0,r.jsx)(n.li,{children:"Need local policy enforcement for low-latency decisions"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsxs)(n.p,{children:["We will use ",(0,r.jsx)(n.strong,{children:"Topaz"})," by Aserto as our policy engine for authorization decisions."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"What is Topaz?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Open-source authorization engine based on Open Policy Agent (OPA)"}),"\n",(0,r.jsx)(n.li,{children:"Built-in directory service for storing user/group/resource relationships"}),"\n",(0,r.jsx)(n.li,{children:"Supports fine-grained, real-time authorization (FGA)"}),"\n",(0,r.jsx)(n.li,{children:"Sidecar deployment model for low-latency local decisions"}),"\n",(0,r.jsx)(n.li,{children:"Centralized policy management with decentralized enforcement"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,r.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,r.jsx)(n.h4,{id:"alternative-a-open-policy-agent-opa-alone",children:"Alternative A: Open Policy Agent (OPA) Alone"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Industry standard policy engine"}),"\n",(0,r.jsx)(n.li,{children:"Flexible Rego policy language"}),"\n",(0,r.jsx)(n.li,{children:"Wide adoption and ecosystem"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u274c No built-in directory service (need separate user/resource store)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c No relationship/graph modeling (need to implement ourselves)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Limited real-time updates (bundle-based refresh only)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c No built-in audit logging"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Verdict"}),": Too much plumbing required. We'd essentially rebuild Topaz."]}),"\n",(0,r.jsx)(n.h4,{id:"alternative-b-cloud-provider-iam-aws-iam-google-cloud-iam",children:"Alternative B: Cloud Provider IAM (AWS IAM, Google Cloud IAM)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Integrated with cloud infrastructure"}),"\n",(0,r.jsx)(n.li,{children:"No additional infrastructure to manage"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u274c Cloud-specific (not portable)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c Coarse-grained (resource-level, not fine-grained)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c High latency (API calls to cloud control plane)"}),"\n",(0,r.jsx)(n.li,{children:"\u274c No support for on-premises deployments"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Verdict"}),": Doesn't meet latency or portability requirements."]}),"\n",(0,r.jsx)(n.h4,{id:"alternative-c-zanzibar-based-systems-spicedb-ory-keto",children:"Alternative C: Zanzibar-based Systems (SpiceDB, Ory Keto)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Google Zanzibar-inspired relationship-based access control"}),"\n",(0,r.jsx)(n.li,{children:"Fine-grained permissions with relationships"}),"\n",(0,r.jsx)(n.li,{children:"High performance with caching"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u26a0\ufe0f More complex to set up than Topaz"}),"\n",(0,r.jsx)(n.li,{children:"\u26a0\ufe0f SpiceDB requires separate deployment (not sidecar)"}),"\n",(0,r.jsx)(n.li,{children:"\u26a0\ufe0f Ory Keto still maturing"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Verdict"}),": Good alternative, but Topaz provides simpler integration."]}),"\n",(0,r.jsx)(n.h4,{id:"alternative-d-topaz-selected",children:"Alternative D: Topaz (Selected)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u2705 Built on OPA (reuses Rego policy language)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Includes directory service (users, groups, resources)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Sidecar deployment for <1ms authorization checks"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Relationship-based authorization (like Zanzibar)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Real-time policy updates (no bundle delays)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Built-in audit logging"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Open source with commercial support option (Aserto)"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 gRPC and REST APIs for integration"}),"\n",(0,r.jsx)(n.li,{children:"\u2705 Works on-premises and in cloud"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"\u26a0\ufe0f Smaller ecosystem than OPA"}),"\n",(0,r.jsx)(n.li,{children:"\u26a0\ufe0f Requires learning Aserto-specific concepts (manifests, directory API)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Verdict"}),": \u2705 ",(0,r.jsx)(n.strong,{children:"Best fit"})," - combines OPA's power with Zanzibar-style relationships and local enforcement."]}),"\n",(0,r.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,r.jsx)(n.h3,{id:"deployment-model-sidecar-pattern",children:"Deployment Model: Sidecar Pattern"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            Prism Proxy (Rust)              \u2502\n\u2502                                            \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502   gRPC Request Handler               \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502             \u2502                              \u2502\n\u2502             \u2502 1. Authorize(user, resource) \u2502\n\u2502             \u25bc                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502   Topaz Sidecar (localhost:8282)     \u2502 \u2502\n\u2502  \u2502   - Policy Engine (Rego)             \u2502 \u2502\n\u2502  \u2502   - Directory Service (users/groups) \u2502 \u2502\n\u2502  \u2502   - Decision Cache (local)           \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n              \u2502 2. Policy sync (background)\n              \u25bc\n   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n   \u2502  Central Policy Repository   \u2502\n   \u2502  (Git + Aserto Control Plane)\u2502\n   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Flow"}),":"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Prism proxy receives gRPC request"}),"\n",(0,r.jsxs)(n.li,{children:["Proxy calls Topaz sidecar: ",(0,r.jsx)(n.code,{children:'Is(user, "can-read", namespace)'})]}),"\n",(0,r.jsx)(n.li,{children:"Topaz evaluates policy locally (<1ms)"}),"\n",(0,r.jsxs)(n.li,{children:["Topaz returns ",(0,r.jsx)(n.code,{children:"{ allowed: true, reasons: [...] }"})]}),"\n",(0,r.jsx)(n.li,{children:"Proxy enforces decision (allow or deny request)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Policy updates"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Policies stored in Git (as Rego files)"}),"\n",(0,r.jsx)(n.li,{children:"Topaz syncs policies every 30s from central control plane"}),"\n",(0,r.jsx)(n.li,{children:"No proxy restarts required for policy changes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"authorization-model-relationship-based-access-control",children:"Authorization Model: Relationship-Based Access Control"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Inspired by Google Zanzibar"}),", Topaz models authorization as relationships between subjects (users), objects (resources), and permissions."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Example Relationships"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:'# User alice is a member of team platform-engineering\nalice | member | group:platform-engineering\n\n# Group platform-engineering is an admin of namespace iot-devices\ngroup:platform-engineering | admin | namespace:iot-devices\n\n# Namespace iot-devices contains backend redis-001\nnamespace:iot-devices | contains | backend:redis-001\n\n# Policy: Admins of a namespace can read/write its backends\nallow(user, "read", backend) if\n  user | admin | namespace\n  namespace | contains | backend\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Result"}),": Alice can read backend ",(0,r.jsx)(n.code,{children:"redis-001"})," because:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Alice \u2208 platform-engineering (member)"}),"\n",(0,r.jsx)(n.li,{children:"platform-engineering \u2192 admin \u2192 iot-devices"}),"\n",(0,r.jsx)(n.li,{children:"iot-devices \u2192 contains \u2192 redis-001"}),"\n",(0,r.jsx)(n.li,{children:"Policy: admin \u2192 can read contained backends"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"integration-points",children:"Integration Points"}),"\n",(0,r.jsx)(n.h4,{id:"1-prism-proxy-rust",children:"1. Prism Proxy (Rust)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Authorization Middleware"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// src/authz/topaz.rs\nuse tonic::Request;\nuse anyhow::Result;\n\npub struct TopazAuthz {\n    client: TopazClient,\n}\n\nimpl TopazAuthz {\n    pub async fn authorize(&self, req: &AuthzRequest) -> Result<bool> {\n        let decision = self.client.is(IsRequest {\n            subject: req.user,\n            relation: req.permission,  // "read", "write", "admin"\n            object: req.resource,      // "namespace:iot-devices"\n        }).await?;\n\n        if decision.is {\n            info!("Authorized: {} can {} {}", req.user, req.permission, req.resource);\n            Ok(true)\n        } else {\n            warn!("Denied: {} cannot {} {}", req.user, req.permission, req.resource);\n            Ok(false)\n        }\n    }\n}\n\n// Middleware applied to all gRPC requests\npub async fn authz_middleware(\n    req: Request<()>,\n    authz: &TopazAuthz,\n) -> Result<Request<()>, Status> {\n    let metadata = req.metadata();\n    let user = metadata.get("x-user-id")\n        .ok_or_else(|| Status::unauthenticated("Missing user ID"))?;\n\n    let resource = extract_resource_from_request(&req)?;\n    let permission = infer_permission_from_method(&req)?;\n\n    let allowed = authz.authorize(&AuthzRequest {\n        user: user.to_str()?,\n        permission,\n        resource,\n    }).await?;\n\n    if allowed {\n        Ok(req)\n    } else {\n        Err(Status::permission_denied("Access denied by policy"))\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"2-admin-cli-go",children:"2. Admin CLI (Go)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Authorization Check Before Commands"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// prismctl/internal/authz/topaz.go\npackage authz\n\nimport (\n    "context"\n    "fmt"\n\n    topazpb "github.com/aserto-dev/go-grpc/aserto/authorizer/v2"\n    "google.golang.org/grpc"\n)\n\ntype TopazClient struct {\n    client topazpb.AuthorizerClient\n}\n\nfunc NewTopazClient(endpoint string) (*TopazClient, error) {\n    conn, err := grpc.Dial(endpoint, grpc.WithInsecure())\n    if err != nil {\n        return nil, fmt.Errorf("connect to Topaz: %w", err)\n    }\n\n    return &TopazClient{\n        client: topazpb.NewAuthorizerClient(conn),\n    }, nil\n}\n\nfunc (c *TopazClient) CanUser(ctx context.Context, user, permission, resource string) (bool, error) {\n    req := &topazpb.IsRequest{\n        Subject:  user,\n        Relation: permission,\n        Object:   resource,\n    }\n\n    resp, err := c.client.Is(ctx, req)\n    if err != nil {\n        return false, fmt.Errorf("authorization check: %w", err)\n    }\n\n    return resp.Is, nil\n}\n\n// Usage in CLI commands (prismctl/cmd/namespace.go)\nvar namespaceDeleteCmd = &cobra.Command{\n    Use:   "delete NAME",\n    Short: "Delete a namespace (requires admin permission)",\n    Args:  cobra.ExactArgs(1),\n    RunE: func(cmd *cobra.Command, args []string) error {\n        namespace := args[0]\n        user := getCurrentUser()\n\n        // Check authorization before dangerous operation\n        authz, err := authz.NewTopazClient("localhost:8282")\n        if err != nil {\n            return fmt.Errorf("connect to authz: %w", err)\n        }\n\n        allowed, err := authz.CanUser(cmd.Context(), user, "admin", fmt.Sprintf("namespace:%s", namespace))\n        if err != nil {\n            return fmt.Errorf("authorization check: %w", err)\n        }\n\n        if !allowed {\n            uiInstance.Error(fmt.Sprintf("Access denied: You don\'t have admin permission on %s", namespace))\n            return fmt.Errorf("permission denied")\n        }\n\n        // Proceed with deletion\n        uiInstance.Info(fmt.Sprintf("Deleting namespace %s...", namespace))\n        // ... deletion logic\n        return nil\n    },\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"3-admin-ui-fastapi",children:"3. Admin UI (FastAPI)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Protect API Endpoints"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# admin/app/authz.py\nfrom fastapi import Depends, HTTPException, status\nfrom topaz import TopazClient\n\nauthz = TopazClient(endpoint="localhost:8282")\n\nasync def require_permission(\n    permission: str,\n    resource_type: str\n):\n    """FastAPI dependency for authorization."""\n    async def check_permission(\n        resource_id: str,\n        current_user: str = Depends(get_current_user)\n    ):\n        resource = f"{resource_type}:{resource_id}"\n\n        allowed = await authz.can_user(\n            user=current_user,\n            permission=permission,\n            resource=resource\n        )\n\n        if not allowed:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN,\n                detail=f"You don\'t have \'{permission}\' permission on {resource}"\n            )\n\n    return check_permission\n\n# Usage\n@app.delete("/api/namespaces/{namespace_id}")\nasync def delete_namespace(\n    namespace_id: str,\n    _: None = Depends(require_permission("admin", "namespace"))\n):\n    """Delete namespace (requires admin permission)."""\n    # ... deletion logic\n'})}),"\n",(0,r.jsx)(n.h3,{id:"policy-examples",children:"Policy Examples"}),"\n",(0,r.jsx)(n.h4,{id:"policy-1-namespace-isolation-multi-tenancy",children:"Policy 1: Namespace Isolation (Multi-Tenancy)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rego",children:'# policies/namespace_isolation.rego\npackage prism.authz\n\n# Default deny\ndefault allow = false\n\n# Users can only access namespaces they have explicit permission for\nallow {\n    input.permission == "read"\n    input.resource_type == "namespace"\n    has_namespace_access(input.user, input.resource_id)\n}\n\nallow {\n    input.permission == "write"\n    input.resource_type == "namespace"\n    has_namespace_write_access(input.user, input.resource_id)\n}\n\nhas_namespace_access(user, namespace) {\n    # Check if user is member of group with access\n    user_groups := data.directory.user_groups[user]\n    group := user_groups[_]\n    data.directory.group_namespaces[group][namespace]\n}\n\nhas_namespace_write_access(user, namespace) {\n    # Only admins can write\n    is_namespace_admin(user, namespace)\n}\n\nis_namespace_admin(user, namespace) {\n    user_groups := data.directory.user_groups[user]\n    group := user_groups[_]\n    data.directory.group_roles[group][namespace] == "admin"\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"policy-2-time-based-access-maintenance-windows",children:"Policy 2: Time-Based Access (Maintenance Windows)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rego",children:'# policies/maintenance_windows.rego\npackage prism.authz\n\n# Allow writes only during maintenance window\nallow {\n    input.permission == "write"\n    input.resource_type == "backend"\n    is_maintenance_window()\n}\n\nis_maintenance_window() {\n    # Maintenance: Sundays 02:00-06:00 UTC\n    now := time.now_ns()\n    day_of_week := time.weekday(now)\n    hour := time.clock(now)[0]\n\n    day_of_week == "Sunday"\n    hour >= 2\n    hour < 6\n}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"policy-3-data-sensitivity-pii-protection",children:"Policy 3: Data Sensitivity (PII Protection)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rego",children:'# policies/pii_protection.rego\npackage prism.authz\n\n# PII data can only be accessed by users with pii-access role\nallow {\n    input.permission == "read"\n    contains_pii(input.resource_id)\n    user_has_pii_access(input.user)\n}\n\ncontains_pii(resource) {\n    # Check if resource is marked as containing PII\n    data.directory.resource_attributes[resource].sensitivity == "pii"\n}\n\nuser_has_pii_access(user) {\n    user_roles := data.directory.user_roles[user]\n    user_roles[_] == "pii-access"\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"directory-schema",children:"Directory Schema"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Topaz Directory Models Users, Groups, Resources, and Relationships"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"# topaz/directory/schema.yaml\nmodel:\n  version: 3\n\n  types:\n    # Subjects\n    user:\n      relations:\n        member: group\n\n    group:\n      relations:\n        admin: namespace\n        developer: namespace\n        viewer: namespace\n\n    # Resources\n    namespace:\n      relations:\n        contains: backend\n        contains: pattern\n\n    backend:\n      relations:\n        exposed_by: namespace\n\n    pattern:\n      relations:\n        used_by: namespace\n\n  permissions:\n    # Namespace permissions\n    namespace:\n      read:\n        - viewer\n        - developer\n        - admin\n      write:\n        - developer\n        - admin\n      admin:\n        - admin\n\n    # Backend permissions\n    backend:\n      read:\n        - admin@namespace[exposed_by]\n        - developer@namespace[exposed_by]\n      write:\n        - admin@namespace[exposed_by]\n      admin:\n        - admin@namespace[exposed_by]\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Populating the Directory"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Add users\ntopaz directory set user alice@example.com\n\n# Add groups\ntopaz directory set group platform-engineering\n\n# Add user to group\ntopaz directory set relation alice@example.com member group:platform-engineering\n\n# Add namespace\ntopaz directory set namespace iot-devices\n\n# Grant group admin access to namespace\ntopaz directory set relation group:platform-engineering admin namespace:iot-devices\n\n# Add backend\ntopaz directory set backend redis-001\n\n# Link backend to namespace\ntopaz directory set relation namespace:iot-devices contains backend:redis-001\n"})}),"\n",(0,r.jsx)(n.h2,{id:"performance-characteristics",children:"Performance Characteristics"}),"\n",(0,r.jsx)(n.h3,{id:"latency",children:"Latency"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Local sidecar authorization checks"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"P50: <0.5ms"}),"\n",(0,r.jsx)(n.li,{children:"P95: <2ms"}),"\n",(0,r.jsx)(n.li,{children:"P99: <5ms"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Why so fast?"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Topaz sidecar runs locally (no network round-trip to remote authz service)"}),"\n",(0,r.jsx)(n.li,{children:"Decisions cached in-memory"}),"\n",(0,r.jsx)(n.li,{children:"Policy compiled ahead of time (not interpreted)"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Comparison"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Remote authz service (e.g., AWS IAM): 50-200ms"}),"\n",(0,r.jsx)(n.li,{children:"Database lookup: 10-50ms"}),"\n",(0,r.jsx)(n.li,{children:"Topaz local: <5ms"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"throughput",children:"Throughput"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Topaz sidecar can handle"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"10,000+ authorization checks per second (local)"}),"\n",(0,r.jsx)(n.li,{children:"Limited only by proxy throughput (not authz)"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"deployment",children:"Deployment"}),"\n",(0,r.jsx)(n.h3,{id:"local-development",children:"Local Development"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Docker Compose"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.yml\nservices:\n  topaz:\n    image: ghcr.io/aserto-dev/topaz:latest\n    ports:\n      - "8282:8282"  # gRPC API\n      - "8383:8383"  # REST API\n      - "8484:8484"  # Console UI\n    volumes:\n      - ./topaz/config:/config\n      - ./topaz/policies:/policies\n    environment:\n      - TOPAZ_DB_PATH=/data/topaz.db\n      - TOPAZ_POLICY_ROOT=/policies\n    command: run -c /config/topaz-config.yaml\n\n  prism-proxy:\n    build: ./proxy\n    depends_on:\n      - topaz\n    environment:\n      - TOPAZ_ENDPOINT=topaz:8282\n    ports:\n      - "50051:50051"\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Configuration"})," (",(0,r.jsx)(n.code,{children:"topaz/config/topaz-config.yaml"}),"):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# Topaz configuration\nversion: 2\n\napi:\n  grpc:\n    listen_address: "0.0.0.0:8282"\n  rest:\n    listen_address: "0.0.0.0:8383"\n\ndirectory:\n  db:\n    type: sqlite\n    path: /data/topaz.db\n\npolicy:\n  engine: opa\n  policy_root: /policies\n\nedge:\n  enabled: true\n  sync_interval: 30s\n  remote: https://topaz.aserto.com  # Central policy repo\n'})}),"\n",(0,r.jsx)(n.h3,{id:"production-deployment",children:"Production Deployment"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Kubernetes Sidecar"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:'# k8s/prism-proxy-deployment.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: prism-proxy\nspec:\n  template:\n    spec:\n      containers:\n        # Main proxy container\n        - name: proxy\n          image: prism-proxy:latest\n          env:\n            - name: TOPAZ_ENDPOINT\n              value: "localhost:8282"\n\n        # Topaz sidecar\n        - name: topaz\n          image: ghcr.io/aserto-dev/topaz:latest\n          ports:\n            - containerPort: 8282\n              name: grpc\n          volumeMounts:\n            - name: topaz-config\n              mountPath: /config\n            - name: topaz-policies\n              mountPath: /policies\n\n      volumes:\n        - name: topaz-config\n          configMap:\n            name: topaz-config\n        - name: topaz-policies\n          configMap:\n            name: topaz-policies\n'})}),"\n",(0,r.jsx)(n.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,r.jsx)(n.h3,{id:"1-policy-isolation",children:"1. Policy Isolation"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Risk"}),": Malicious user modifies policies to grant themselves unauthorized access."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Policies stored in Git with branch protection"}),"\n",(0,r.jsx)(n.li,{children:"Only CI/CD can push policy changes to Topaz"}),"\n",(0,r.jsx)(n.li,{children:"Audit all policy changes in Git history"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-directory-integrity",children:"2. Directory Integrity"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Risk"}),": Unauthorized modification of user/group/resource relationships."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Directory API requires authentication (admin token)"}),"\n",(0,r.jsx)(n.li,{children:"All directory changes logged to audit trail"}),"\n",(0,r.jsx)(n.li,{children:"Periodic snapshots for disaster recovery"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-sidecar-compromise",children:"3. Sidecar Compromise"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Risk"}),": Attacker gains access to Topaz sidecar and bypasses authorization."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Topaz sidecar bound to localhost only (not exposed externally)"}),"\n",(0,r.jsx)(n.li,{children:"Proxy and sidecar run in same pod/VM (network isolation)"}),"\n",(0,r.jsx)(n.li,{children:"mTLS between proxy and sidecar (optional, for paranoid mode)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-denial-of-service",children:"4. Denial of Service"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Risk"}),": Flood of authorization checks overwhelms Topaz sidecar."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Mitigation"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Rate limiting in proxy before authz checks"}),"\n",(0,r.jsx)(n.li,{children:"Circuit breaker pattern (fail open/closed configurable)"}),"\n",(0,r.jsx)(n.li,{children:"Horizontal scaling of proxy+sidecar pairs"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"migration-path",children:"Migration Path"}),"\n",(0,r.jsx)(n.h3,{id:"phase-1-basic-rbac-week-1",children:"Phase 1: Basic RBAC (Week 1)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Deploy Topaz sidecar alongside Prism proxy"}),"\n",(0,r.jsx)(n.li,{children:"Implement simple RBAC policies (admin/developer/viewer roles)"}),"\n",(0,r.jsx)(n.li,{children:"Integrate with existing OIDC authentication"}),"\n",(0,r.jsx)(n.li,{children:"Test authorization checks in local development"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-2-namespace-isolation-week-2",children:"Phase 2: Namespace Isolation (Week 2)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Model namespaces in Topaz directory"}),"\n",(0,r.jsx)(n.li,{children:"Implement namespace isolation policies"}),"\n",(0,r.jsx)(n.li,{children:"Migrate existing namespace ACLs to Topaz"}),"\n",(0,r.jsx)(n.li,{children:"Validate multi-tenancy enforcement"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-3-fine-grained-permissions-week-3",children:"Phase 3: Fine-Grained Permissions (Week 3)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Model backends and patterns in directory"}),"\n",(0,r.jsx)(n.li,{children:"Implement resource-level policies"}),"\n",(0,r.jsx)(n.li,{children:"Add attribute-based policies (time, IP, data sensitivity)"}),"\n",(0,r.jsx)(n.li,{children:"Enable audit logging"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"phase-4-production-rollout-week-4",children:"Phase 4: Production Rollout (Week 4)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Deploy to staging environment"}),"\n",(0,r.jsx)(n.li,{children:"Load test authorization performance"}),"\n",(0,r.jsx)(n.li,{children:"Gradual rollout to production (canary deployment)"}),"\n",(0,r.jsx)(n.li,{children:"Monitor authorization latency and error rates"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,r.jsx)(n.h3,{id:"metrics",children:"Metrics"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Authorization Decision Metrics"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:'prism_authz_decisions_total{decision="allowed|denied"}'})," - Total authorization checks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prism_authz_latency_seconds"})," - Authorization check latency histogram"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prism_authz_errors_total"})," - Failed authorization checks"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"prism_authz_cache_hit_ratio"})," - Decision cache hit rate"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Policy Evaluation Metrics"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topaz_policy_evaluations_total"})," - Policy evaluation count"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topaz_policy_errors_total"})," - Policy evaluation errors"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"topaz_directory_queries_total"})," - Directory lookups"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"logging",children:"Logging"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Authorization Audit Trail"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "timestamp": "2025-10-09T14:32:15Z",\n  "event": "authorization_decision",\n  "user": "alice@example.com",\n  "permission": "read",\n  "resource": "namespace:iot-devices",\n  "decision": "allowed",\n  "reasons": [\n    "user is member of group platform-engineering",\n    "platform-engineering has developer role on iot-devices"\n  ],\n  "latency_ms": 1.2\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"alerts",children:"Alerts"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Authorization Failures"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Alert if authorization error rate > 1%"}),"\n",(0,r.jsx)(n.li,{children:"Alert if authorization latency P99 > 10ms"}),"\n",(0,r.jsx)(n.li,{children:"Alert if policy sync fails"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Unusual Access Patterns"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Alert if user accesses namespace they've never accessed before"}),"\n",(0,r.jsx)(n.li,{children:"Alert if admin actions outside maintenance window"}),"\n",(0,r.jsx)(n.li,{children:"Alert if PII data accessed by non-authorized user"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,r.jsx)(n.h3,{id:"1-fail-open-vs-fail-closed",children:"1. Fail-Open vs Fail-Closed?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Question"}),": If Topaz sidecar is unavailable, should proxy allow or deny requests?"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Options"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fail-closed"})," (deny all): More secure, but impacts availability"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fail-open"})," (allow all): Better availability, but security risk"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Degraded mode"})," (allow read-only): Compromise between security and availability"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Recommendation"}),": ",(0,r.jsx)(n.strong,{children:"Fail-closed by default"}),", with opt-in fail-open per namespace."]}),"\n",(0,r.jsx)(n.h3,{id:"2-how-to-handle-policy-conflicts",children:"2. How to Handle Policy Conflicts?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Question"}),": What happens if multiple policies conflict (one allows, one denies)?"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Options"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Deny wins"}),": Conservative approach (deny if any policy denies)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Allow wins"}),": Permissive approach (allow if any policy allows)"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Explicit priority"}),": Policies have precedence order"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Recommendation"}),": ",(0,r.jsx)(n.strong,{children:"Deny wins"})," (secure by default)."]}),"\n",(0,r.jsx)(n.h3,{id:"3-should-we-cache-authorization-decisions",children:"3. Should We Cache Authorization Decisions?"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Question"}),": Can we cache authorization decisions to reduce Topaz load?"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pros"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Reduces latency for repeated checks"}),"\n",(0,r.jsx)(n.li,{children:"Reduces load on Topaz sidecar"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Cons"}),":"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Stale decisions if policies/relationships change"}),"\n",(0,r.jsx)(n.li,{children:"Cache invalidation complexity"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Recommendation"}),": ",(0,r.jsx)(n.strong,{children:"Yes, with short TTL"})," (5 seconds). Trade-off between performance and freshness."]}),"\n",(0,r.jsx)(n.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/rfc/rfc-010",children:"RFC-010: Admin Protocol with OIDC"})," - OIDC authentication"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/rfc/rfc-011",children:"RFC-011: Data Proxy Authentication"})," - Secrets provider abstraction"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"/adr/adr-046",children:"ADR-046: Dex IDP for Local Testing"})," - Local OIDC provider"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,r.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Fine-grained authorization"}),": Per-resource, per-user, attribute-based policies"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Low latency"}),": <5ms P99 authorization checks (local sidecar)"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Centralized policy management"}),": Git-based policy versioning and deployment"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Audit trail"}),": Complete history of authorization decisions"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Relationship-based"}),": Natural modeling of user/group/resource relationships"]}),"\n",(0,r.jsxs)(n.li,{children:["\u2705 ",(0,r.jsx)(n.strong,{children:"Open source"}),": Can self-host, no vendor lock-in"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Additional component"}),": Topaz sidecar must run alongside proxy"]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Learning curve"}),": Team must learn Rego policy language and Topaz concepts"]}),"\n",(0,r.jsxs)(n.li,{children:["\u274c ",(0,r.jsx)(n.strong,{children:"Operational complexity"}),": Policies and directory must be kept in sync"]}),"\n",(0,r.jsxs)(n.li,{children:["\u26a0\ufe0f ",(0,r.jsx)(n.strong,{children:"Single point of failure"}),": If sidecar fails, authorization fails (mitigate with fail-open)"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\u26a0\ufe0f ",(0,r.jsx)(n.strong,{children:"Policy language"}),": Rego is powerful but unfamiliar to most developers"]}),"\n",(0,r.jsxs)(n.li,{children:["\u26a0\ufe0f ",(0,r.jsx)(n.strong,{children:"Directory management"}),": Need process for onboarding users/groups/resources"]}),"\n",(0,r.jsxs)(n.li,{children:["\u26a0\ufe0f ",(0,r.jsx)(n.strong,{children:"Testing policies"}),": Requires OPA testing framework for policy unit tests"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2025-10-09: Initial ADR proposing Topaz for policy-based authorization"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);