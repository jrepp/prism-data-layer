"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[1361],{2722:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"rust-for-proxy","title":"ADR-001: Rust for the Proxy Implementation","description":"Context","source":"@site/../docs-cms/adr/001-rust-for-proxy.md","sourceDirName":".","slug":"/rust-for-proxy","permalink":"/prism-data-layer/adr/rust-for-proxy","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/001-rust-for-proxy.md","tags":[{"inline":true,"label":"proxy","permalink":"/prism-data-layer/adr/tags/proxy"},{"inline":true,"label":"performance","permalink":"/prism-data-layer/adr/tags/performance"},{"inline":true,"label":"languages","permalink":"/prism-data-layer/adr/tags/languages"}],"version":"current","sidebarPosition":1,"frontMatter":{"title":"ADR-001: Rust for the Proxy Implementation","status":"Accepted","date":"2025-10-05T00:00:00.000Z","deciders":"Core Team","tags":["proxy","performance","languages"]},"sidebar":"adrSidebar","previous":{"title":"ADR-XXX: [Short Title]","permalink":"/prism-data-layer/adr/template"},"next":{"title":"ADR-002: Client-Originated Configuration","permalink":"/prism-data-layer/adr/client-originated-configuration"}}');var i=r(4848),l=r(8453);const t={title:"ADR-001: Rust for the Proxy Implementation",status:"Accepted",date:new Date("2025-10-05T00:00:00.000Z"),deciders:"Core Team",tags:["proxy","performance","languages"]},c=void 0,o={},d=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Why Rust?",id:"why-rust",level:3},{value:"Performance Comparison",id:"performance-comparison",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Key Crates",id:"key-crates",level:3},{value:"Architecture Pattern",id:"architecture-pattern",level:3},{value:"Performance Tips",id:"performance-tips",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsx)(n.p,{children:"The Prism proxy is the performance-critical component that sits between all client applications and backend datastores. It must handle:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"100,000+ requests per second per instance"}),"\n",(0,i.jsx)(n.li,{children:"Sub-millisecond P50 latency"}),"\n",(0,i.jsx)(n.li,{children:"P99 latency under 10ms"}),"\n",(0,i.jsx)(n.li,{children:"Minimal resource footprint (CPU, memory)"}),"\n",(0,i.jsx)(n.li,{children:"High reliability (handle errors gracefully, no crashes)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Netflix's Data Gateway uses Java/Spring Boot for their DAL containers. While functional, JVM-based solutions have inherent limitations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Garbage collection pauses impact tail latency"}),"\n",(0,i.jsx)(n.li,{children:"Higher memory overhead"}),"\n",(0,i.jsx)(n.li,{children:"Slower cold start times"}),"\n",(0,i.jsx)(n.li,{children:"Less predictable performance under load"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,i.jsxs)(n.p,{children:["Implement the Prism proxy in ",(0,i.jsx)(n.strong,{children:"Rust"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,i.jsx)(n.h3,{id:"why-rust",children:"Why Rust?"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Rust provides C/C++ level performance with zero-cost abstractions"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Memory Safety"}),": No null pointers, data races, or memory leaks without ",(0,i.jsx)(n.code,{children:"unsafe"})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Predictable Latency"}),": No GC pauses; deterministic performance characteristics"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Excellent Async"}),": Tokio runtime provides best-in-class async I/O"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Strong Ecosystem"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tonic"})," for gRPC"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"axum"})," for HTTP"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tower"})," for middleware/service composition"]}),"\n",(0,i.jsx)(n.li,{children:"Excellent database drivers (postgres, kafka clients, etc.)"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Type Safety"}),": Protobuf integration with ",(0,i.jsx)(n.code,{children:"prost"})," provides compile-time guarantees"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Resource Efficiency"}),": Lower memory and CPU usage means lower cloud costs"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"performance-comparison",children:"Performance Comparison"}),"\n",(0,i.jsx)(n.p,{children:"Based on industry benchmarks and our prototypes:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Metric"}),(0,i.jsx)(n.th,{children:"Java/Spring Boot"}),(0,i.jsx)(n.th,{children:"Rust/Tokio"}),(0,i.jsx)(n.th,{children:"Improvement"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"P50 Latency"}),(0,i.jsx)(n.td,{children:"~5ms"}),(0,i.jsx)(n.td,{children:"~0.3ms"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"16x"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"P99 Latency"}),(0,i.jsx)(n.td,{children:"~50ms"}),(0,i.jsx)(n.td,{children:"~2ms"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"25x"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Throughput (RPS)"}),(0,i.jsx)(n.td,{children:"~20k"}),(0,i.jsx)(n.td,{children:"~200k"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"10x"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Memory (idle)"}),(0,i.jsx)(n.td,{children:"~500MB"}),(0,i.jsx)(n.td,{children:"~20MB"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"25x"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Cold Start"}),(0,i.jsx)(n.td,{children:"~10s"}),(0,i.jsx)(n.td,{children:"~100ms"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"100x"})})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Java/Spring Boot"})," (Netflix's choice)"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Pros:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Mature ecosystem"}),"\n",(0,i.jsx)(n.li,{children:"Large talent pool"}),"\n",(0,i.jsx)(n.li,{children:"Netflix has proven it at scale"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Cons:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"GC pauses hurt tail latency"}),"\n",(0,i.jsx)(n.li,{children:"Higher resource costs"}),"\n",(0,i.jsx)(n.li,{children:"Less predictable performance"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Rejected because: Performance is a core differentiator for Prism"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Go"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Pros:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Good performance"}),"\n",(0,i.jsx)(n.li,{children:"Simple language"}),"\n",(0,i.jsx)(n.li,{children:"Fast compilation"}),"\n",(0,i.jsx)(n.li,{children:"Good concurrency primitives"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Cons:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"GC pauses (better than Java, but still present)"}),"\n",(0,i.jsx)(n.li,{children:"Less memory safety than Rust"}),"\n",(0,i.jsx)(n.li,{children:"Weaker type system"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Rejected because: GC pauses are unacceptable for our latency SLOs"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"C++"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Pros:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Maximum performance"}),"\n",(0,i.jsx)(n.li,{children:"Full control over memory"}),"\n",(0,i.jsx)(n.li,{children:"Mature ecosystem"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Cons:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Memory safety issues require extreme discipline"}),"\n",(0,i.jsx)(n.li,{children:"Slower development velocity"}),"\n",(0,i.jsx)(n.li,{children:"Harder to maintain"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Rejected because: Rust provides similar performance with better safety"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Zig"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Pros:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"C-level performance"}),"\n",(0,i.jsx)(n.li,{children:"Simple language"}),"\n",(0,i.jsx)(n.li,{children:"Good interop"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["Cons:","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Immature ecosystem"}),"\n",(0,i.jsx)(n.li,{children:"Fewer libraries"}),"\n",(0,i.jsx)(n.li,{children:"Smaller talent pool"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Rejected because: Too risky for production system; ecosystem not mature enough"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,i.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Extreme Performance"}),": 10-100x improvement over JVM solutions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Predictable Latency"}),": No GC pauses, consistent P99/P999"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lower Costs"}),": Reduced cloud infrastructure spend"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Memory Safety"}),": Entire classes of bugs eliminated at compile time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Excellent Async"}),": Tokio provides world-class async runtime"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strong Typing"}),": Protobuf + Rust type system catches errors early"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Learning Curve"}),": Rust is harder to learn than Java/Go","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Mitigation"}),": Invest in team training; create internal patterns/libraries"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Slower Initial Development"}),": Borrow checker and type system require more upfront thought","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Mitigation"}),": Speed increases dramatically after learning curve; fewer runtime bugs compensate"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Smaller Talent Pool"}),": Fewer Rust engineers than Java engineers","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.em,{children:"Mitigation"}),": Rust community is growing rapidly; quality over quantity"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Compilation Times"}),": Slower than Go, faster than C++"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ecosystem Maturity"}),": Rapidly improving; most needs met but some gaps exist"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,i.jsx)(n.h3,{id:"key-crates",children:"Key Crates"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-toml",children:'[dependencies]\n# Async runtime\ntokio = { version = "1.35", features = ["full"] }\n\n# gRPC server/client\ntonic = "0.10"\nprost = "0.12"  # Protobuf\n\n# HTTP server\naxum = "0.7"\n\n# Service composition\ntower = "0.4"\n\n# Database clients\nsqlx = { version = "0.7", features = ["postgres", "sqlite", "runtime-tokio"] }\nrdkafka = "0.35"  # Kafka\nasync-nats = "0.33"  # NATS\n\n# Observability\ntracing = "0.1"\ntracing-subscriber = "0.3"\nopentelemetry = "0.21"\n\n# Serialization\nserde = { version = "1.0", features = ["derive"] }\nserde_json = "1.0"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"architecture-pattern",children:"Architecture Pattern"}),"\n",(0,i.jsxs)(n.p,{children:["Use the ",(0,i.jsx)(n.strong,{children:"Tower"})," service pattern for composability:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"use tower::{Service, ServiceBuilder, Layer};\n\n// Build middleware stack\nlet service = ServiceBuilder::new()\n    .layer(AuthLayer::new())           // mTLS auth\n    .layer(RateLimitLayer::new(10000)) // Rate limiting\n    .layer(LoggingLayer::new())        // Structured logging\n    .layer(MetricsLayer::new())        // Prometheus metrics\n    .service(ProxyService::new());     // Core proxy logic\n"})}),"\n",(0,i.jsx)(n.h3,{id:"performance-tips",children:"Performance Tips"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Use ",(0,i.jsx)(n.code,{children:"tokio::spawn"})," judiciously"]}),": Each task has overhead"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pool connections"}),": Reuse connections to backends"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Avoid cloning large data"}),": Use ",(0,i.jsx)(n.code,{children:"Arc"})," for shared read-only data"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Profile regularly"}),": Use ",(0,i.jsx)(n.code,{children:"cargo flamegraph"})," to find hotspots"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Benchmark changes"}),": Use ",(0,i.jsx)(n.code,{children:"criterion"})," for micro-benchmarks"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://rust-lang.github.io/async-book/",children:"Rust Async Book"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://tokio.rs/tokio/tutorial",children:"Tokio Tutorial"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/hyperium/tonic",children:"Tonic gRPC"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/tower-rs/tower",children:"Tower Services"})}),"\n",(0,i.jsx)(n.li,{children:"Netflix Data Gateway (docs/netflix/)"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2025-10-05: Initial draft and acceptance"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>c});var s=r(6540);const i={},l=s.createContext(i);function t(e){const n=s.useContext(l);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);