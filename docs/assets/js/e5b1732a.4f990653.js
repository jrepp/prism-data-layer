"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[81931],{28453:(e,n,s)=>{s.d(n,{R:()=>r,x:()=>c});var t=s(96540);const i={},a=t.createContext(i);function r(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:n},e.children)}},33776:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"rfc-009","title":"Distributed Reliability Data Patterns","description":"Overview","source":"@site/../docs-cms/rfcs/rfc-009-distributed-reliability-patterns.md","sourceDirName":".","slug":"/rfc-009","permalink":"/prism-data-layer/rfc/rfc-009","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/rfc-009-distributed-reliability-patterns.md","tags":[],"version":"current","frontMatter":{"author":"System","created":"2025-10-08T00:00:00.000Z","doc_uuid":"1c79b78c-6364-4815-b76a-020ee13cdae7","id":"rfc-009","project_id":"prism-data-layer","status":"Proposed","title":"Distributed Reliability Data Patterns"},"sidebar":"rfcSidebar","previous":{"title":"RFC-008 Plugin Architecture","permalink":"/prism-data-layer/rfc/rfc-008"},"next":{"title":"Admin Protocol with OIDC Authentication \u2022 RFC-010","permalink":"/prism-data-layer/rfc/rfc-010"}}');var i=s(74848),a=s(28453);const r={author:"System",created:new Date("2025-10-08T00:00:00.000Z"),doc_uuid:"1c79b78c-6364-4815-b76a-020ee13cdae7",id:"rfc-009",project_id:"prism-data-layer",status:"Proposed",title:"Distributed Reliability Data Patterns"},c="RFC-009: Distributed Reliability Data Patterns",l={},o=[{value:"Overview",id:"overview",level:2},{value:"Implementation Priority",id:"implementation-priority",level:2},{value:"Pattern Catalog",id:"pattern-catalog",level:2},{value:"1. Tiered Storage Pattern",id:"1-tiered-storage-pattern",level:3},{value:"Architecture",id:"architecture",level:4},{value:"Prism Configuration",id:"prism-configuration",level:4},{value:"Client Code",id:"client-code",level:4},{value:"Key Characteristics",id:"key-characteristics",level:4},{value:"Use Cases",id:"use-cases",level:4},{value:"3. Claim Check Pattern",id:"3-claim-check-pattern",level:3},{value:"Architecture",id:"architecture-1",level:4},{value:"Prism Configuration",id:"prism-configuration-1",level:4},{value:"Client Code",id:"client-code-1",level:4},{value:"Key Characteristics",id:"key-characteristics-1",level:4},{value:"Use Cases",id:"use-cases-1",level:4},{value:"5. Change Data Capture (CDC) Pattern",id:"5-change-data-capture-cdc-pattern",level:3},{value:"Change Notification Flow",id:"change-notification-flow",level:4},{value:"Architecture",id:"architecture-2",level:4},{value:"Prism Configuration",id:"prism-configuration-2",level:4},{value:"Client Code",id:"client-code-2",level:4},{value:"Key Characteristics",id:"key-characteristics-2",level:4},{value:"Use Cases",id:"use-cases-2",level:4},{value:"7. Outbox Pattern",id:"7-outbox-pattern",level:3},{value:"Architecture",id:"architecture-3",level:4},{value:"References",id:"references",level:2},{value:"Enterprise Integration Patterns",id:"enterprise-integration-patterns",level:3},{value:"Event Sourcing &amp; CQRS",id:"event-sourcing--cqrs",level:3},{value:"Change Data Capture",id:"change-data-capture",level:3},{value:"Outbox Pattern",id:"outbox-pattern",level:3},{value:"Netflix Data Gateway",id:"netflix-data-gateway",level:3},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"rfc-009-distributed-reliability-data-patterns",children:"RFC-009: Distributed Reliability Data Patterns"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsxs)(n.p,{children:["This RFC documents high-level distributed reliability patterns that push complexity into the data access layer. These patterns typically require either ",(0,i.jsx)(n.strong,{children:"multiple data stores"})," or ",(0,i.jsx)(n.strong,{children:"specific patterned access"})," on a single data store, and are critical for building scalable, fault-tolerant systems."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Core Philosophy"}),": Rather than implementing complex reliability logic in every application, Prism provides these patterns as ",(0,i.jsx)(n.strong,{children:"data access abstractions"}),", making them easy to adopt and operationally sound."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"implementation-priority",children:"Implementation Priority"}),"\n",(0,i.jsx)(n.p,{children:"Patterns are ordered by complexity and value. Prism will implement in this order:"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Priority"}),(0,i.jsx)(n.th,{children:"Pattern"}),(0,i.jsx)(n.th,{children:"Complexity"}),(0,i.jsx)(n.th,{children:"Value"}),(0,i.jsx)(n.th,{children:"Status"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"P0"})}),(0,i.jsx)(n.td,{children:"Claim Check"}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Planned for Phase 1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"P0"})}),(0,i.jsx)(n.td,{children:"Outbox"}),(0,i.jsx)(n.td,{children:"Low"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Planned for Phase 1"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"P1"})}),(0,i.jsx)(n.td,{children:"Write-Ahead Log"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Planned for Phase 2"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"P1"})}),(0,i.jsx)(n.td,{children:"Tiered Storage"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Planned for Phase 2"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"P1"})}),(0,i.jsx)(n.td,{children:"CDC"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Planned for Phase 2"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"P2"})}),(0,i.jsx)(n.td,{children:"Event Sourcing"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Planned for Phase 3"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"P2"})}),(0,i.jsx)(n.td,{children:"CQRS"}),(0,i.jsx)(n.td,{children:"High"}),(0,i.jsx)(n.td,{children:"Medium"}),(0,i.jsx)(n.td,{children:"Planned for Phase 3"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Complexity ratings"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Low"}),": Single-backend or simple orchestration, <1 week implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Medium"}),": Multi-backend coordination, background workers, 2-4 weeks implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"High"}),": Complex state management, multiple projections, 4-8 weeks implementation"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"pattern-catalog",children:"Pattern Catalog"}),"\n",(0,i.jsx)(n.h3,{id:"1-tiered-storage-pattern",children:"1. Tiered Storage Pattern"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Hot data (recent, frequently accessed) requires expensive, fast storage. Cold data (old, rarely accessed) wastes resources on premium storage."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Automatically migrate data between hot/warm/cold storage tiers based on access patterns and age."]}),"\n",(0,i.jsx)(n.h4,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(n.p,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Application Layer                        \u2502\n\u2502              (Sees unified interface)                       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502              Prism Tiered Storage DAL                       \u2502\n\u2502                                                             \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u2502\n\u2502  \u2502   Hot    \u2502 \u2500\u2500\u2500\u25ba \u2502   Warm   \u2502 \u2500\u2500\u2500\u25ba \u2502   Cold   \u2502         \u2502\n\u2502  \u2502  Tier    \u2502      \u2502   Tier   \u2502      \u2502   Tier   \u2502         \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2502\n\u2502       \u2502                 \u2502                 \u2502                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502                 \u2502                 \u2502\n\u25bc                 \u25bc                 \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Redis  \u2502       \u2502 Postgres \u2502     \u2502   S3     \u2502\n\u2502 (ms)   \u2502       \u2502 (10ms)   \u2502     \u2502 (100ms)  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### Prism Configuration\n\n"})}),"\n",(0,i.jsx)(n.h1,{id:"configyaml",children:".config.yaml"}),"\n",(0,i.jsx)(n.p,{children:"namespaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"name: user-activity-logs\npattern: tiered-storage"}),"\n",(0,i.jsx)(n.h1,{id:"reference-store-tracks-which-tier-holds-each-key",children:"Reference store tracks which tier holds each key"}),"\n",(0,i.jsx)(n.p,{children:"reference_store:\nbackend: postgres\ntable: tier_metadata"}),"\n",(0,i.jsx)(n.h1,{id:"schema-key-tier-last_access-access_count-size",children:"Schema: (key, tier, last_access, access_count, size)"}),"\n",(0,i.jsx)(n.p,{children:"tiers:\nhot:\nbackend: redis\nttl: 86400  # 1 day\ncapacity: 10GB"}),"\n",(0,i.jsx)(n.p,{children:"warm:\nbackend: postgres\nttl: 2592000  # 30 days\ncapacity: 1TB"}),"\n",(0,i.jsx)(n.p,{children:"cold:\nbackend: s3\nttl: null  # Forever\nlifecycle:\nglacier_after: 7776000  # 90 days"}),"\n",(0,i.jsx)(n.p,{children:"promotion_rules:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"condition: access_count > 10\naction: promote_to_hot"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"condition: age > 1_day AND tier == hot\naction: demote_to_warm"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"condition: age > 30_days AND tier == warm\naction: demote_to_cold"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### Client Code\n\n"})}),"\n",(0,i.jsx)(n.p,{children:'// Application sees unified interface\nlet log = client.get("user-activity-logs", "user:12345:2025-01-15").await?;'}),"\n",(0,i.jsx)(n.p,{children:"// Prism automatically:\n// 1. Checks hot tier (Redis) - CACHE MISS\n// 2. Checks warm tier (Postgres) - HIT\n// 3. Returns result\n// 4. Optionally promotes to hot tier (if access_count > 10)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### Key Characteristics\n\n- **Automatic migration**: No application logic needed\n- **Transparent access**: Applications don't know which tier serves the request\n- **Cost optimization**: Pay for performance only where needed\n- **Tunable policies**: Per-namespace tier rules\n\n#### Use Cases\n\n- **Time-series data**: Recent metrics in Redis, historical in S3\n- **User sessions**: Active in Redis, archived in Postgres\n- **Log aggregation**: Hot logs searchable, cold logs compressed\n\n---\n\n### 2. Write-Ahead Log (WAL) Pattern\n\n**Problem**: Direct writes to databases can be slow and block application threads. Need durability without sacrificing write latency.\n\n**Solution**: Write to fast, durable append-only log first; apply to database asynchronously.\n\n**CRITICAL**: WAL requires a **durable** queue backend (Kafka, NATS JetStream). Basic NATS (in-memory) is NOT sufficient for WAL patterns as it doesn't provide durability guarantees.\n\n#### Architecture\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Application                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n              \u2502\n              \u2502 write(key, value)\n              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            Prism WAL DAL                                \u2502\n\u2502                                                         \u2502\n\u2502  1. Append to WAL (Kafka/NATS) \u25c4\u2500\u2500\u2500\u2500\u2500\u2500\u2510                \u2502\n\u2502  2. Return success to client          \u2502                \u2502\n\u2502  3. Async apply to database \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2502\n\u2502                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                            \u2502\n         \u2502 (fast, durable)            \u2502 (async, replayed)\n         \u25bc                            \u25bc\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502 Kafka  \u2502                   \u2502 Postgres \u2502\n    \u2502 (1ms)  \u2502                   \u2502 (10ms)   \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h4,{id:"prism-configuration",children:"Prism Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"namespaces:\n  - name: order-writes\n    pattern: write-ahead-log\n    backend: postgres\n\n    wal:\n      backend: kafka  # or nats-jetstream (MUST be durable!)\n      topic: order-wal\n      retention: 604800  # 7 days\n      replication: 3  # Durability: survive 2 broker failures\n\n      # Apply strategy\n      apply_mode: async  # or sync, hybrid\n      batch_size: 1000\n      batch_timeout: 100ms\n\n      # Consumer-style compute (replay, compaction, transformations)\n      consumers:\n        - name: db-applier\n          type: database_writer\n          backend: postgres\n          parallelism: 4\n\n        - name: compactor\n          type: log_compactor\n          strategy: keep_latest  # For key-value style data\n          interval: 3600s  # Compact hourly\n\n      # Crash recovery\n      checkpoint_interval: 60s\n\n    consistency:\n      read_mode: wal_first  # Read from WAL if not yet applied\n\n    durability:\n      wal_fsync: true  # Kafka fsync before ack\n"})}),"\n",(0,i.jsx)(n.h4,{id:"client-code",children:"Client Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Write returns immediately after WAL append\nclient.set("order-writes", "order:789", order_data).await?;\n// \u2705 Durable in Kafka (1ms)\n// \u23f3 Applying to Postgres asynchronously\n\n// Read checks WAL first, then database\nlet order = client.get("order-writes", "order:789").await?;\n// Returns even if not yet applied to Postgres\n'})}),"\n",(0,i.jsx)(n.h4,{id:"key-characteristics",children:"Key Characteristics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast writes"}),": 1-2ms (Kafka append) vs 10-20ms (database write)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Durability"}),": Kafka replication ensures no data loss"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Crash recovery"}),": Replay WAL from last checkpoint"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Read-your-writes"}),": Reads check WAL for unapplied writes"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"use-cases",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"High-throughput writes"}),": Order processing, financial transactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Event sourcing"}),": Event log as source of truth"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Database migration"}),": Replay WAL to populate new database"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"3-claim-check-pattern",children:"3. Claim Check Pattern"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Messaging systems (Kafka, NATS, SQS) have message size limits (1MB-10MB). Large payloads (images, videos, ML models) can't be published directly."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Store large payloads in object storage; publish reference (claim check) to queue."]}),"\n",(0,i.jsx)(n.h4,{id:"architecture-1",children:"Architecture"}),"\n",(0,i.jsx)(n.p,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Producer                              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u2502 publish(event)\n\u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            Prism Claim Check DAL                        \u2502\n\u2502                                                         \u2502\n\u2502  1. if payload > threshold:                            \u2502\n\u2502     - Store payload in S3                              \u2502\n\u2502     - Generate claim_check_id                          \u2502\n\u2502     - Publish {claim_check_id, metadata} to Kafka      \u2502\n\u2502  2. else:                                              \u2502\n\u2502     - Publish payload directly to Kafka                \u2502\n\u2502                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502                            \u2502\n\u2502 (small: pointer)           \u2502 (large: full data)\n\u25bc                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510                   \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Kafka  \u2502                   \u2502   S3     \u2502\n\u2502        \u2502                   \u2502          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518                   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Consumer                              \u2502\n\u2502                                                         \u2502\n\u2502  1. Receive message from Kafka                         \u2502\n\u2502  2. if has claim_check_id:                             \u2502\n\u2502     - Fetch payload from S3                            \u2502\n\u2502  3. Process full payload                               \u2502\n\u2502                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### Prism Configuration\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"namespaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"name: video-processing-events\npattern: claim-check\nbackend: kafka"}),"\n",(0,i.jsx)(n.p,{children:"claim_check:\nthreshold: 1MB  # Payloads > 1MB go to S3"}),"\n",(0,i.jsx)(n.p,{children:"storage:\nbackend: s3\nbucket: prism-claim-checks\nprefix: video-events/\nttl: 604800  # 7 days (match Kafka retention)"}),"\n",(0,i.jsx)(n.p,{children:"message:\ninclude_metadata: true  # Include size, content_type in queue message\ncompression: gzip"}),"\n",(0,i.jsx)(n.h1,{id:"automatic-cleanup",children:"Automatic cleanup"}),"\n",(0,i.jsx)(n.p,{children:"cleanup:\non_consume: true  # Delete S3 object after consumer acks"}),"\n",(0,i.jsx)(n.h1,{id:"or-retain-for-replay",children:"OR retain for replay"}),"\n",(0,i.jsx)(n.p,{children:"on_consume: false\nretention: 604800  # 7 days"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### Client Code\n\n"})}),"\n",(0,i.jsx)(n.p,{children:'// Producer: Prism handles claim check automatically\nlet event = VideoProcessingEvent {\nvideo_id: "vid123",\nraw_video: vec![0u8; 50_000_000],  // 50MB - exceeds threshold\n};'}),"\n",(0,i.jsx)(n.p,{children:'client.publish("video-processing-events", event).await?;\n// Prism:\n// 1. Detects payload > 1MB\n// 2. Stores raw_video in S3 \u2192 claim_check_id = "s3://prism-claim-checks/video-events/abc123"\n// 3. Publishes to Kafka: { video_id: "vid123", claim_check_id: "abc123", size: 50MB }'}),"\n",(0,i.jsx)(n.p,{children:'// Consumer: Prism fetches claim check automatically\nlet event: VideoProcessingEvent = client.consume("video-processing-events").await?;\n// Prism:\n// 1. Receives Kafka message with claim_check_id\n// 2. Fetches raw_video from S3\n// 3. Reconstructs full VideoProcessingEvent\n// 4. Returns to consumer'}),"\n",(0,i.jsx)(n.p,{children:"assert_eq!(event.raw_video.len(), 50_000_000);"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### Key Characteristics\n\n- **Transparent**: Applications don't implement claim check logic\n- **Automatic threshold**: Prism decides when to use S3 vs inline payload\n- **Lifecycle management**: Auto-cleanup after consumption or TTL\n- **Compression**: Reduce S3 storage costs\n\n#### Use Cases\n\n- **Media processing**: Images, videos, audio files in event streams\n- **ML pipelines**: Model weights, training datasets\n- **ETL pipelines**: Large CSV/Parquet files in data pipelines\n- **Document workflows**: PDF rendering, OCR processing\n\n---\n\n### 4. Event Sourcing Pattern\n\n**Problem**: Traditional CRUD loses history. Need to reconstruct state at any point in time, audit all changes.\n\n**Solution**: Store all state changes as immutable events; materialize current state by replaying events.\n\n#### Architecture\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Application                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                            \u2502\n         \u2502 command                    \u2502 query\n         \u25bc                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Command Handler \u2502         \u2502  Query Handler   \u2502\n\u2502                  \u2502         \u2502                  \u2502\n\u2502  Append Event    \u2502         \u2502  Read View       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                            \u2502\n         \u25bc                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Event Store     \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u25ba \u2502 Materialized     \u2502\n\u2502  (Kafka/NATS)    \u2502 replay  \u2502 View (Postgres)  \u2502\n\u2502                  \u2502         \u2502                  \u2502\n\u2502 - Immutable      \u2502         \u2502 - Current state  \u2502\n\u2502 - Append-only    \u2502         \u2502 - Projections    \u2502\n\u2502 - Full history   \u2502         \u2502 - Queryable      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.h4,{id:"prism-configuration-1",children:"Prism Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"namespaces:\n  - name: bank-account-events\n    pattern: event-sourcing\n\n    event_store:\n      backend: kafka\n      topic: bank-account-events\n      retention: infinite  # Keep all events forever\n\n    materialized_views:\n      - name: account-balances\n        backend: postgres\n        projection: |\n          CREATE TABLE account_balances (\n            account_id TEXT PRIMARY KEY,\n            balance BIGINT NOT NULL,\n            version BIGINT NOT NULL\n          );\n\n        event_handlers:\n          - event: AccountCreated\n            sql: |\n              INSERT INTO account_balances (account_id, balance, version)\n              VALUES ($event.account_id, 0, 1);\n\n          - event: MoneyDeposited\n            sql: |\n              UPDATE account_balances\n              SET balance = balance + $event.amount,\n                  version = version + 1\n              WHERE account_id = $event.account_id;\n\n          - event: MoneyWithdrawn\n            sql: |\n              UPDATE account_balances\n              SET balance = balance - $event.amount,\n                  version = version + 1\n              WHERE account_id = $event.account_id;\n\n    snapshots:\n      enabled: true\n      interval: 100  # Snapshot every 100 events\n      backend: postgres\n"})}),"\n",(0,i.jsx)(n.h4,{id:"client-code-1",children:"Client Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Append events\nclient.append_event("bank-account-events", BankAccountEvent::AccountCreated {\n    account_id: "acct123",\n    owner: "Alice",\n    timestamp: now(),\n}).await?;\n\nclient.append_event("bank-account-events", BankAccountEvent::MoneyDeposited {\n    account_id: "acct123",\n    amount: 1000,\n    timestamp: now(),\n}).await?;\n\n// Query materialized view\nlet balance: i64 = client.query("account-balances", "acct123").await?;\nassert_eq!(balance, 1000);\n\n// Time-travel: replay events up to specific timestamp\nlet balance_yesterday = client.query_at_time("account-balances", "acct123", yesterday).await?;\n\n// Full audit trail\nlet events = client.get_event_history("bank-account-events", "acct123").await?;\nfor event in events {\n    println!("{:?}", event);  // Full history of account\n}\n'})}),"\n",(0,i.jsx)(n.h4,{id:"key-characteristics-1",children:"Key Characteristics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Immutable events"}),": Never update or delete events"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Full audit trail"}),": Complete history of state changes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Time-travel"}),": Reconstruct state at any point in time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Snapshots"}),": Avoid replaying millions of events"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"use-cases-1",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Financial systems"}),": Account balances, transactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Inventory management"}),": Stock levels, warehouse movements"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"User management"}),": Profile changes, permission grants"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Collaboration tools"}),": Document edits, comments"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"5-change-data-capture-cdc-pattern",children:"5. Change Data Capture (CDC) Pattern"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Need to replicate database changes to other systems (search indexes, caches, analytics warehouses) without dual writes."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Capture database transaction log; stream changes as events."]}),"\n",(0,i.jsx)(n.h4,{id:"change-notification-flow",children:"Change Notification Flow"}),"\n",(0,i.jsx)(n.mermaid,{value:"graph TD\n    DB[(PostgreSQL<br/>Write-Ahead Log)]\n    CDC[Prism CDC Connector<br/>Change Capture]\n    Kafka[Kafka Topics<br/>Change Events]\n\n    subgraph Notification Consumers\n        Cache[Cache Invalidator<br/>Redis]\n        Search[Search Indexer<br/>Elasticsearch]\n        Analytics[Analytics Loader<br/>ClickHouse]\n        Webhook[Webhook Notifier<br/>External APIs]\n        Audit[Audit Logger<br/>Compliance DB]\n    end\n\n    subgraph Change Types\n        Insert[INSERT Events]\n        Update[UPDATE Events]\n        Delete[DELETE Events]\n        Schema[SCHEMA Changes]\n    end\n\n    DB --\x3e|Logical Replication| CDC\n    CDC --\x3e|Parse & Transform| Insert\n    CDC --\x3e|Parse & Transform| Update\n    CDC --\x3e|Parse & Transform| Delete\n    CDC --\x3e|DDL Capture| Schema\n\n    Insert --\x3e Kafka\n    Update --\x3e Kafka\n    Delete --\x3e Kafka\n    Schema --\x3e Kafka\n\n    Kafka --\x3e|Subscribe: users table| Cache\n    Kafka --\x3e|Subscribe: all tables| Search\n    Kafka --\x3e|Subscribe: analytics tables| Analytics\n    Kafka --\x3e|Filter: critical changes| Webhook\n    Kafka --\x3e|Subscribe: all changes| Audit\n\n    Cache -.->|INVALIDATE user:123| CacheHit[Fast Reads]\n    Search -.->|INDEX document| SearchResults[Full-Text Search]\n    Analytics -.->|LOAD batch| Reports[Business Intelligence]\n    Webhook -.->|POST /webhook| External[External Systems]\n    Audit -.->|APPEND change| Compliance[Compliance Reports]"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Change Notification Patterns:"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Cache Invalidation"}),": UPDATE/DELETE \u2192 Invalidate cache entries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Search Indexing"}),": INSERT/UPDATE \u2192 Update search index"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Analytics Sync"}),": All changes \u2192 Append to data warehouse"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Webhook Notifications"}),": Filtered changes \u2192 Notify external systems"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Audit Trail"}),": All changes \u2192 Append to immutable log"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"architecture-2",children:"Architecture"}),"\n",(0,i.jsx)(n.p,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Application                           \u2502\n\u2502               (Normal CRUD operations)                  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   PostgreSQL                            \u2502\n\u2502                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510             \u2502\n\u2502  \u2502  Write-Ahead Log (WAL)                \u2502             \u2502\n\u2502  \u2502  - INSERT INTO users ...              \u2502             \u2502\n\u2502  \u2502  - UPDATE orders SET status = ...     \u2502             \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u2502 (logical replication)\n\u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            Prism CDC Connector                          \u2502\n\u2502            (Debezium-style)                             \u2502\n\u2502                                                         \u2502\n\u2502  1. Read WAL via replication slot                      \u2502\n\u2502  2. Parse changes (INSERT/UPDATE/DELETE)               \u2502\n\u2502  3. Publish to Kafka topic                             \u2502\n\u2502                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 Kafka (CDC Events)                      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502              \u2502              \u2502\n\u25bc              \u25bc              \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Redis  \u2502    \u2502 Elastic \u2502    \u2502 ClickHouse  \u2502\n\u2502 (Cache) \u2502    \u2502 (Search)\u2502    \u2502 (Analytics) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### Prism Configuration\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"namespaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"name: user-cdc\npattern: change-data-capture"}),"\n",(0,i.jsx)(n.p,{children:"source:\nbackend: postgres\ndatabase: prod\nschema: public\ntables:\n- users\n- user_profiles"}),"\n",(0,i.jsx)(n.h1,{id:"postgres-specific-cdc-config",children:"Postgres-specific CDC config"}),"\n",(0,i.jsx)(n.p,{children:"replication_slot: prism_cdc_slot\npublication: prism_publication"}),"\n",(0,i.jsx)(n.p,{children:"sink:\nbackend: kafka\ntopic_prefix: cdc.postgres.public"}),"\n",(0,i.jsx)(n.h1,{id:"results-in-topics",children:"Results in topics:"}),"\n",(0,i.jsx)(n.h1,{id:"--cdcpostgrespublicusers",children:"- cdc.postgres.public.users"}),"\n",(0,i.jsx)(n.h1,{id:"--cdcpostgrespublicuser_profiles",children:"- cdc.postgres.public.user_profiles"}),"\n",(0,i.jsx)(n.p,{children:"message_format: json  # or avro, protobuf\ninclude_old_value: true  # For UPDATEs, include old row"}),"\n",(0,i.jsx)(n.h1,{id:"downstream-consumers",children:"Downstream consumers"}),"\n",(0,i.jsx)(n.p,{children:"consumers:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:'name: user-cache\nbackend: redis\noperations: [INSERT, UPDATE, DELETE]\nkey_pattern: "user:{id}"'}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"name: user-search\nbackend: elasticsearch\noperations: [INSERT, UPDATE, DELETE]\nindex: users"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"name: user-analytics\nbackend: clickhouse\noperations: [INSERT, UPDATE]\ntable: user_events"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### CDC Event Format\n\n"})}),"\n",(0,i.jsxs)(n.p,{children:['{\n"op": "u",  // c=create, u=update, d=delete\n"source": {\n"db": "prod",\n"schema": "public",\n"table": "users",\n"lsn": 123456789\n},\n"before": {\n"id": 42,\n"email": "',(0,i.jsx)(n.a,{href:"mailto:old@example.com",children:"old@example.com"}),'",\n"name": "Old Name"\n},\n"after": {\n"id": 42,\n"email": "',(0,i.jsx)(n.a,{href:"mailto:new@example.com",children:"new@example.com"}),'",\n"name": "New Name"\n},\n"ts_ms": 1704931200000\n}']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### Client Code\n\n"})}),"\n",(0,i.jsx)(n.h1,{id:"application-does-normal-database-operations",children:"Application does normal database operations"}),"\n",(0,i.jsxs)(n.p,{children:["db.execute(\"UPDATE users SET email = '",(0,i.jsx)(n.a,{href:"mailto:new@example.com",children:"new@example.com"}),"' WHERE id = 42\")"]}),"\n",(0,i.jsx)(n.h1,{id:"prism-cdc-automatically",children:"Prism CDC automatically:"}),"\n",(0,i.jsx)(n.h1,{id:"1-captures-change-from-postgres-wal",children:"1. Captures change from Postgres WAL"}),"\n",(0,i.jsx)(n.h1,{id:"2-publishes-to-kafka-cdcpostgrespublicusers",children:"2. Publishes to Kafka: cdc.postgres.public.users"}),"\n",(0,i.jsx)(n.h1,{id:"3-updates-redis-cache-user42",children:"3. Updates Redis cache: user:42"}),"\n",(0,i.jsx)(n.h1,{id:"4-updates-elasticsearch-users-index",children:"4. Updates Elasticsearch: users index"}),"\n",(0,i.jsx)(n.h1,{id:"5-inserts-into-clickhouse-user_events-table",children:"5. Inserts into ClickHouse: user_events table"}),"\n",(0,i.jsx)(n.h1,{id:"no-dual-writes-needed",children:"No dual writes needed!"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### Key Characteristics\n\n- **Single source of truth**: Database WAL is authoritative\n- **No dual writes**: Avoid consistency issues\n- **Guaranteed delivery**: Replication slot ensures no missed changes\n- **Schema evolution**: Handle ALTER TABLE gracefully\n\n#### Use Cases\n\n- **Cache invalidation**: Keep Redis in sync with Postgres\n- **Search indexing**: Elasticsearch follows database changes\n- **Data warehousing**: Stream changes to ClickHouse/Snowflake\n- **Microservices sync**: Replicate data across service boundaries\n\n---\n\n### 6. CQRS (Command Query Responsibility Segregation)\n\n**Problem**: Read and write workloads have different scaling characteristics. Single database struggles with both.\n\n**Solution**: Separate write model (optimized for transactions) from read model (optimized for queries).\n\n#### Architecture\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Application                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                            \u2502\n         \u2502 commands                   \u2502 queries\n         \u25bc                            \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Write Model     \u2502         \u2502  Read Model      \u2502\n\u2502  (Postgres)      \u2502 \u2500\u2500\u2500\u2500\u2500\u2500\u25ba \u2502  (Postgres +     \u2502\n\u2502                  \u2502 events  \u2502   Elasticsearch) \u2502\n\u2502  - Normalized    \u2502         \u2502                  \u2502\n\u2502  - ACID          \u2502         \u2502  - Denormalized  \u2502\n\u2502  - Low volume    \u2502         \u2502  - Eventually    \u2502\n\u2502                  \u2502         \u2502    consistent    \u2502\n\u2502                  \u2502         \u2502  - High volume   \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502                            \u25b2\n         \u2502                            \u2502\n         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25ba Kafka \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                    (Change events)\n"})}),"\n",(0,i.jsx)(n.h4,{id:"prism-configuration-2",children:"Prism Configuration"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'namespaces:\n  - name: product-catalog\n    pattern: cqrs\n\n    write_model:\n      backend: postgres\n      schema: normalized\n      tables:\n        - products\n        - categories\n        - inventory\n      consistency: strong\n\n    read_models:\n      - name: product-search\n        backend: elasticsearch\n        index: products\n        denormalization: |\n          {\n            "product_id": product.id,\n            "name": product.name,\n            "category_name": category.name,  # Joined from categories\n            "in_stock": inventory.quantity > 0  # Computed\n          }\n\n      - name: product-listings\n        backend: postgres_replica\n        materialized_view: |\n          CREATE MATERIALIZED VIEW product_listings AS\n          SELECT p.id, p.name, c.name AS category, i.quantity\n          FROM products p\n          JOIN categories c ON p.category_id = c.id\n          JOIN inventory i ON p.id = i.product_id;\n        refresh_strategy: on_change  # or periodic\n\n    synchronization:\n      backend: kafka\n      topic: product-events\n      lag_tolerance: 1000ms  # Alert if read model lags > 1s\n'})}),"\n",(0,i.jsx)(n.h4,{id:"client-code-2",children:"Client Code"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'// Write: Goes to write model (Postgres)\nclient.execute_command("product-catalog", CreateProduct {\n    name: "Widget",\n    category_id: 5,\n    price: 1999,\n}).await?;\n\n// Prism:\n// 1. Inserts into products table (write model)\n// 2. Publishes ProductCreated event to Kafka\n// 3. Async updates read models (Elasticsearch, materialized view)\n\n// Read: Goes to read model (Elasticsearch)\nlet results = client.search("product-search", "widget").await?;\n// Returns denormalized, pre-joined data for fast search\n\n// Another read: Goes to different read model (Postgres replica)\nlet listings = client.query("product-listings", filters).await?;\n'})}),"\n",(0,i.jsx)(n.h4,{id:"key-characteristics-2",children:"Key Characteristics"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Independent scaling"}),": Scale write DB for transactions, read DBs for queries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Optimized schemas"}),": Normalized writes, denormalized reads"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Eventual consistency"}),": Acceptable lag between write and read models"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Multiple read models"}),": Same data, different projections"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"use-cases-2",children:"Use Cases"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"E-commerce"}),": Product catalog (complex queries, high read volume)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Social media"}),": Posts (write once, read many)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Analytics dashboards"}),": Pre-aggregated metrics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reporting"}),": Historical data in OLAP format"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"7-outbox-pattern",children:"7. Outbox Pattern"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Need to atomically update database AND publish event. Dual writes can fail partially (database succeeds, Kafka publish fails)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Write event to outbox table in same transaction as business data; separate process publishes events."]}),"\n",(0,i.jsx)(n.h4,{id:"architecture-3",children:"Architecture"}),"\n",(0,i.jsx)(n.p,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   Application                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u2502 BEGIN TRANSACTION\n\u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                   PostgreSQL                            \u2502\n\u2502                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502\n\u2502  \u2502  Business Table                         \u2502           \u2502\n\u2502  \u2502  INSERT INTO orders (id, status, ...)   \u2502           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2502\n\u2502                                                         \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510           \u2502\n\u2502  \u2502  Outbox Table                           \u2502           \u2502\n\u2502  \u2502  INSERT INTO outbox (event_type,        \u2502           \u2502\n\u2502  \u2502                      payload, ...)      \u2502           \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518           \u2502\n\u2502                                                         \u2502\n\u2502  COMMIT TRANSACTION                                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u2502 (polling or CDC)\n\u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            Prism Outbox Publisher                       \u2502\n\u2502                                                         \u2502\n\u2502  1. Poll outbox table for unpublished events           \u2502\n\u2502  2. Publish to Kafka                                   \u2502\n\u2502  3. Mark as published (or delete)                      \u2502\n\u2502                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 Kafka (Events)                          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### Prism Configuration\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"namespaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"name: order-service\npattern: outbox"}),"\n",(0,i.jsx)(n.p,{children:"database:\nbackend: postgres"}),"\n",(0,i.jsx)(n.p,{children:"outbox:\ntable: outbox\nschema: |\nCREATE TABLE outbox (\nid BIGSERIAL PRIMARY KEY,\nevent_type TEXT NOT NULL,\naggregate_id TEXT NOT NULL,\npayload JSONB NOT NULL,\ncreated_at TIMESTAMP DEFAULT NOW(),\npublished_at TIMESTAMP\n);\nCREATE INDEX idx_outbox_unpublished ON outbox (created_at) WHERE published_at IS NULL;"}),"\n",(0,i.jsx)(n.p,{children:"publisher:\nmode: polling  # or cdc\ninterval: 100ms\nbatch_size: 1000"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'destination:\n  backend: kafka\n  topic_pattern: "{event_type}"  # OrderCreated \u2192 order-created topic\n\ncleanup:\n  strategy: delete  # or mark_published\n  retention: 86400  # Keep published events for 1 day\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### Client Code\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"// Application: Single transaction\nlet tx = db.begin().await?;"}),"\n",(0,i.jsx)(n.p,{children:'// 1. Insert business data\ntx.execute(\n"INSERT INTO orders (id, user_id, total) VALUES ($1, $2, $3)",\n&[&order_id, &user_id, &total],\n).await?;'}),"\n",(0,i.jsx)(n.p,{children:'// 2. Insert into outbox (same transaction)\ntx.execute(\n"INSERT INTO outbox (event_type, aggregate_id, payload) VALUES ($1, $2, $3)",\n&["OrderCreated", &order_id, &json!({"order_id": order_id, "total": total})],\n).await?;'}),"\n",(0,i.jsx)(n.p,{children:"// 3. Commit (atomic!)\ntx.commit().await?;"}),"\n",(0,i.jsx)(n.p,{children:"// Prism Outbox Publisher:\n// - Polls outbox table every 100ms\n// - Finds unpublished events\n// - Publishes to Kafka topic: order-created\n// - Deletes from outbox (or marks published_at)"}),"\n",(0,i.jsx)(n.p,{children:"// Guaranteed: If order exists in database, event will be published."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n#### Key Characteristics\n\n- **Atomicity**: Event publishing guaranteed if transaction commits\n- **No dual writes**: Single transaction for database + outbox\n- **At-least-once delivery**: Outbox publisher may retry failed publishes\n- **Cleanup**: Delete published events or mark with timestamp\n\n#### Use Cases\n\n- **Order processing**: Guarantee OrderCreated event after order insertion\n- **User registration**: Guarantee UserRegistered event after user creation\n- **Inventory updates**: Guarantee InventoryChanged event after stock update\n- **Any transactional messaging**: Need ACID + event publishing\n\n---\n\n## Pattern Selection Guide\n\n| Pattern | When to Use | Backends | Complexity |\n|---------|-------------|----------|------------|\n| **Tiered Storage** | Hot/warm/cold data lifecycle | Redis + Postgres + S3 | Medium |\n| **Write-Ahead Log** | High write throughput, durability | Kafka + Postgres | Medium |\n| **Claim Check** | Large payloads in messaging | Kafka + S3 | Low |\n| **Event Sourcing** | Full audit trail, time-travel | Kafka + Postgres | High |\n| **CDC** | Sync database to cache/search/warehouse | Postgres + Kafka \u2192 (Redis/ES/ClickHouse) | Medium |\n| **CQRS** | Different read/write scaling needs | Postgres + Elasticsearch | High |\n| **Outbox** | Transactional messaging | Postgres + Kafka | Low |\n\n---\n\n## Pattern Composition and Layering\n\n**Key Insight**: Patterns can be **layered together** to create powerful distributed systems. Prism supports composing multiple patterns in a single namespace.\n\n### Common Pattern Combinations\n\n#### 1. Claim Check + Pub/Sub Queue\n\n**Use Case**: Video processing pipeline where videos are too large for Kafka, but you want pub/sub semantics.\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"namespaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"name: video-processing\npatterns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"claim-check   # Layer 1: Handle large payloads"}),"\n",(0,i.jsx)(n.li,{children:"pub-sub       # Layer 2: Multiple consumers"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"backend: kafka"}),"\n",(0,i.jsx)(n.p,{children:"claim_check:\nthreshold: 1MB\nstorage:\nbackend: s3\nbucket: video-processing"}),"\n",(0,i.jsx)(n.h1,{id:"claim-check-field-is-automatically-injected",children:"Claim check field is automatically injected"}),"\n",(0,i.jsx)(n.p,{children:'claim_check_field: "s3_reference"'}),"\n",(0,i.jsx)(n.p,{children:"pub_sub:\nconsumer_groups:\n- name: thumbnail-generator\n- name: transcoder\n- name: metadata-extractor"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'\n**How it works**:\n1. Producer publishes large video (50MB)\n2. Prism stores video in S3, generates `claim_check_id`\n3. Prism publishes lightweight message to Kafka: `{video_id: "abc", s3_reference: "s3://..."}`\n4. All consumer groups receive message with S3 reference\n5. Each consumer fetches video from S3 independently\n\n#### 2. Outbox + Claim Check\n\n**Use Case**: Transactionally publish large payloads (e.g., ML model weights after training).\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"namespaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"name: ml-model-releases\npatterns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"outbox       # Layer 1: Transactional guarantees"}),"\n",(0,i.jsx)(n.li,{children:"claim-check  # Layer 2: Handle large model files"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"database:\nbackend: postgres"}),"\n",(0,i.jsx)(n.p,{children:"outbox:\ntable: model_outbox"}),"\n",(0,i.jsx)(n.p,{children:'claim_check:\nthreshold: 10MB\nstorage:\nbackend: s3\nbucket: ml-models\nclaim_check_field: "model_s3_path"'}),"\n",(0,i.jsx)(n.p,{children:"publisher:\ndestination:\nbackend: kafka\ntopic: model-releases"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n**How it works**:\n1. Application saves model metadata + model weights to outbox table (single transaction)\n2. Outbox publisher polls for new entries\n3. For each entry, Prism checks if payload &gt; 10MB\n4. If yes, stores model weights in S3, updates outbox entry with S3 path\n5. Publishes Kafka event with S3 reference\n6. Consumers receive lightweight event, fetch model from S3\n\n#### 3. WAL + Tiered Storage\n\n**Use Case**: High-throughput writes with automatic hot/warm/cold tiering.\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"namespaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"name: user-activity\npatterns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"write-ahead-log  # Layer 1: Fast, durable writes"}),"\n",(0,i.jsx)(n.li,{children:"tiered-storage   # Layer 2: Cost-optimized storage"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"wal:\nbackend: kafka\ntopic: activity-wal\nconsumers:\n- name: tier-applier\ntype: tiered_storage_writer"}),"\n",(0,i.jsx)(n.p,{children:"reference_store:\nbackend: postgres\ntable: activity_tiers"}),"\n",(0,i.jsx)(n.p,{children:"tiers:\nhot:\nbackend: redis\nttl: 86400\nwarm:\nbackend: postgres\nttl: 2592000\ncold:\nbackend: s3"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n**How it works**:\n1. Application writes activity log (fast Kafka append)\n2. WAL consumer reads from Kafka\n3. Based on data freshness, writes to appropriate tier (hot = Redis)\n4. Background tier migration moves data: hot \u2192 warm \u2192 cold\n5. Reads check reference store to find current tier\n\n#### 4. CDC + CQRS\n\n**Use Case**: Keep read models in sync with write model using change data capture.\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"namespaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"name: product-catalog\npatterns:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"cqrs  # Layer 1: Separate read/write models"}),"\n",(0,i.jsx)(n.li,{children:"cdc   # Layer 2: Automatic sync via database WAL"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"write_model:\nbackend: postgres\ntables: [products, categories]"}),"\n",(0,i.jsx)(n.p,{children:"cdc:\nsource:\nbackend: postgres\ntables: [products, categories]\nsink:\nbackend: kafka\ntopic_prefix: product-cdc"}),"\n",(0,i.jsx)(n.p,{children:"read_models:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"name: product-search\nbackend: elasticsearch\nsync_from: product-cdc.products"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"name: product-cache\nbackend: redis\nsync_from: product-cdc.products"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'\n**How it works**:\n1. Application writes to Postgres (write model)\n2. CDC captures changes from Postgres WAL\n3. Publishes changes to Kafka topics\n4. Read models (Elasticsearch, Redis) consume from Kafka\n5. Each read model stays in sync automatically\n\n### Pattern Layering Guidelines\n\n**When to layer patterns:**\n- \u2705 Patterns address different concerns (e.g., Claim Check = payload size, Pub/Sub = routing)\n- \u2705 Later patterns build on earlier patterns (e.g., Outbox \u2192 Claim Check \u2192 Kafka)\n- \u2705 Combined complexity is manageable (two low-complexity patterns = medium complexity)\n\n**When NOT to layer:**\n- \u274c Patterns conflict (e.g., Event Sourcing + CQRS both define event storage)\n- \u274c Over-engineering (don\'t layer patterns "just in case")\n- \u274c Combined complexity exceeds team capability\n\n**Pattern Compatibility Matrix:**\n\n| Pattern | Compatible With | Conflicts With |\n|---------|-----------------|----------------|\n| Claim Check | Pub/Sub, Outbox, CDC | - |\n| Outbox | Claim Check, CDC | Event Sourcing |\n| WAL | Tiered Storage, CDC | Event Sourcing |\n| Tiered Storage | WAL, Claim Check | - |\n| CDC | CQRS, Claim Check | - |\n| Event Sourcing | CQRS | Outbox, WAL |\n| CQRS | CDC, Event Sourcing | - |\n\n---\n\n## Prism Implementation Strategy\n\n### 1. Pattern as Namespace Configuration\n\nEach pattern is a first-class `pattern` type in namespace config:\n\n'})}),"\n",(0,i.jsx)(n.p,{children:"namespaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["name: my-data\npattern: tiered-storage  # or event-sourcing, cqrs, etc.\nbackend: multi  # Indicates multiple backends\n",(0,i.jsx)(n.h1,{id:"pattern-specific-config-follows",children:"Pattern-specific config follows"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:'\n### 2. Code Generation from Patterns\n\nPrism generates:\n- **Client SDKs**: Type-safe APIs for each pattern\n- **Proxy routes**: Pattern-specific request handlers\n- **Background jobs**: Tier migration, outbox publishing, CDC streaming\n\n### 3. Observability\n\nPattern-specific metrics:\n\n# Tiered Storage\nprism_tiered_storage_tier_size{namespace="user-activity-logs", tier="hot"} 8.5e9\nprism_tiered_storage_promotion_count{namespace="user-activity-logs"} 1234\n\n# Write-Ahead Log\nprism_wal_lag_seconds{namespace="order-writes"} 0.15\nprism_wal_unapplied_entries{namespace="order-writes"} 523\n\n# Claim Check\nprism_claim_check_stored_count{namespace="video-processing-events"} 89\nprism_claim_check_storage_bytes{namespace="video-processing-events"} 4.5e9\n\n# CDC\nprism_cdc_replication_lag_ms{namespace="user-cdc", table="users"} 120\nprism_cdc_events_published{namespace="user-cdc", table="users"} 15234\n\n# Outbox\nprism_outbox_unpublished_count{namespace="order-service"} 12\nprism_outbox_publish_latency_ms{namespace="order-service"} 45\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsx)(n.h3,{id:"enterprise-integration-patterns",children:"Enterprise Integration Patterns"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.enterpriseintegrationpatterns.com/",children:"Enterprise Integration Patterns (Hohpe & Woolf)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.enterpriseintegrationpatterns.com/patterns/messaging/StoreInLibrary.html",children:"Claim Check Pattern"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"event-sourcing--cqrs",children:"Event Sourcing & CQRS"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://martinfowler.com/eaaDev/EventSourcing.html",children:"Event Sourcing (Martin Fowler)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://martinfowler.com/bliki/CQRS.html",children:"CQRS (Martin Fowler)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.axoniq.io/",children:"Axon Framework Documentation"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"change-data-capture",children:"Change Data Capture"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://debezium.io/",children:"Debezium Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/current/logical-replication.html",children:"PostgreSQL Logical Replication"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.confluent.io/platform/current/connect/index.html",children:"Kafka Connect CDC"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"outbox-pattern",children:"Outbox Pattern"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://microservices.io/patterns/data/transactional-outbox.html",children:"Transactional Outbox (Microservices.io)"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://debezium.io/documentation/reference/stable/transformations/outbox-event-router.html",children:"Outbox Pattern (Debezium)"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"netflix-data-gateway",children:"Netflix Data Gateway"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ADR-034: Product/Feature Sharding Strategy (Netflix-informed)"}),"\n",(0,i.jsx)(n.li,{children:"ADR-035: Connection Pooling"}),"\n",(0,i.jsx)(n.li,{children:"ADR-036: SQLite Config Storage"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"2025-10-08: Initial draft documenting 7 distributed reliability patterns"}),"\n",(0,i.jsx)(n.li,{children:"2025-10-09: Added change notification flow diagram to CDC pattern showing notification consumers and change types"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);