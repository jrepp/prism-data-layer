"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[7227],{28453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var r=s(96540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}},69167:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"memo-004","title":"Backend Plugin Implementation Guide","description":"Purpose","source":"@site/../docs-cms/memos/memo-004-backend-plugin-implementation-guide.md","sourceDirName":".","slug":"/memo-004","permalink":"/prism-data-layer/memos/memo-004","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/memos/memo-004-backend-plugin-implementation-guide.md","tags":[{"inline":true,"label":"backends","permalink":"/prism-data-layer/memos/tags/backends"},{"inline":true,"label":"plugins","permalink":"/prism-data-layer/memos/tags/plugins"},{"inline":true,"label":"implementation","permalink":"/prism-data-layer/memos/tags/implementation"},{"inline":true,"label":"testing","permalink":"/prism-data-layer/memos/tags/testing"},{"inline":true,"label":"go","permalink":"/prism-data-layer/memos/tags/go"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-09T00:00:00.000Z","doc_uuid":"3496c8e2-219b-4db2-9a9a-bdee851e4c3c","id":"memo-004","project_id":"prism-data-layer","tags":["backends","plugins","implementation","testing","go"],"title":"Backend Plugin Implementation Guide","updated":"2025-10-09T00:00:00.000Z"},"sidebar":"memosSidebar","previous":{"title":"Documentation-First Development Approach \u2022 MEMO-003","permalink":"/prism-data-layer/memos/memo-003"},"next":{"title":"Client Protocol Design Philosophy - Composition vs Use-Case Specificity \u2022 MEMO-005","permalink":"/prism-data-layer/memos/memo-005"}}');var i=s(74848),t=s(28453);const l={author:"Platform Team",created:new Date("2025-10-09T00:00:00.000Z"),doc_uuid:"3496c8e2-219b-4db2-9a9a-bdee851e4c3c",id:"memo-004",project_id:"prism-data-layer",tags:["backends","plugins","implementation","testing","go"],title:"Backend Plugin Implementation Guide",updated:new Date("2025-10-09T00:00:00.000Z")},c="MEMO-004: Backend Plugin Implementation Guide",a={},o=[{value:"Purpose",id:"purpose",level:2},{value:"Backend Implementability Matrix",id:"backend-implementability-matrix",level:2},{value:"Comparison Table (Internal Priority Order)",id:"comparison-table-internal-priority-order",level:3},{value:"Scoring Criteria",id:"scoring-criteria",level:3},{value:"Detailed Backend Analysis",id:"detailed-backend-analysis",level:2},{value:"0. MemStore (Score: 100/100) - Simplest Possible Plugin \ud83d\udd25 <strong>INTERNAL PRIORITY</strong>",id:"0-memstore-score-100100---simplest-possible-plugin--internal-priority",level:3},{value:"1. Redis (Score: 95/100) - Highest Implementability",id:"1-redis-score-95100---highest-implementability",level:3},{value:"2. PostgreSQL (Score: 93/100) - Production Ready",id:"2-postgresql-score-93100---production-ready",level:3},{value:"3. SQLite (Score: 92/100) - Perfect for Demos",id:"3-sqlite-score-92100---perfect-for-demos",level:3},{value:"4. NATS (Score: 90/100) - Cloud-Native Messaging",id:"4-nats-score-90100---cloud-native-messaging",level:3},{value:"5. Kafka (Score: 78/100) - Production Event Streaming",id:"5-kafka-score-78100---production-event-streaming",level:3},{value:"6. S3/MinIO (Score: 85/100) - Object Storage",id:"6-s3minio-score-85100---object-storage",level:3},{value:"7. ClickHouse (Score: 70/100) - Analytical Queries",id:"7-clickhouse-score-70100---analytical-queries",level:3},{value:"8. Neptune (Score: 50/100) - Graph Database (AWS)",id:"8-neptune-score-50100---graph-database-aws",level:3},{value:"Recommended Implementation Order (Internal Priority)",id:"recommended-implementation-order-internal-priority",level:2},{value:"Phase 0: Baseline Plugin (Week 1) \ud83d\udd25 <strong>INTERNAL</strong>",id:"phase-0-baseline-plugin-week-1--internal",level:3},{value:"Phase 1: Internal Messaging (Weeks 2-6) \ud83d\udd25 <strong>INTERNAL</strong>",id:"phase-1-internal-messaging-weeks-2-6--internal",level:3},{value:"Phase 2: Internal Data Storage (Weeks 7-10) \ud83d\udd25 <strong>INTERNAL</strong>",id:"phase-2-internal-data-storage-weeks-7-10--internal",level:3},{value:"Phase 3: External/Supporting Backends (Weeks 11-14)",id:"phase-3-externalsupporting-backends-weeks-11-14",level:3},{value:"Phase 4: Analytics (Weeks 15-16)",id:"phase-4-analytics-weeks-15-16",level:3},{value:"Demo Plugin Configurations",id:"demo-plugin-configurations",level:2},{value:"Demo 0: MemStore In-Memory KeyValue (Simplest) \ud83d\udd25 <strong>INTERNAL</strong>",id:"demo-0-memstore-in-memory-keyvalue-simplest--internal",level:3},{value:"Demo 1: Redis KeyValue Store",id:"demo-1-redis-keyvalue-store",level:3},{value:"Demo 2: PostgreSQL with Transactions",id:"demo-2-postgresql-with-transactions",level:3},{value:"Demo 3: Kafka Event Streaming",id:"demo-3-kafka-event-streaming",level:3},{value:"Demo 4: S3 Large Payload (Claim Check)",id:"demo-4-s3-large-payload-claim-check",level:3},{value:"Demo 5: Multi-Backend Composition",id:"demo-5-multi-backend-composition",level:3},{value:"Testing Infrastructure Requirements",id:"testing-infrastructure-requirements",level:2},{value:"Docker Compose for Local Testing",id:"docker-compose-for-local-testing",level:3},{value:"Appendix: Go SDK Comparison",id:"appendix-go-sdk-comparison",level:2},{value:"Package Recommendations",id:"package-recommendations",level:3},{value:"Installation",id:"installation",level:3},{value:"Summary",id:"summary",level:2},{value:"Related Documents",id:"related-documents",level:2},{value:"References",id:"references",level:2},{value:"Go SDK Documentation",id:"go-sdk-documentation",level:3},{value:"Backend Documentation",id:"backend-documentation",level:3},{value:"Revision History",id:"revision-history",level:2},{value:"Implementation Learnings (2025-10-10)",id:"implementation-learnings-2025-10-10",level:2},{value:"Architecture Refactoring: Drivers vs Patterns",id:"architecture-refactoring-drivers-vs-patterns",level:3},{value:"Backend Interface Metadata System",id:"backend-interface-metadata-system",level:3},{value:"SDK Pattern for Backend Drivers",id:"sdk-pattern-for-backend-drivers",level:3},{value:"Interface-Based Acceptance Testing",id:"interface-based-acceptance-testing",level:3},{value:"Updated Terminology (MEMO-006 Alignment)",id:"updated-terminology-memo-006-alignment",level:3},{value:"Implementation Status",id:"implementation-status",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"memo-004-backend-plugin-implementation-guide",children:"MEMO-004: Backend Plugin Implementation Guide"})}),"\n",(0,i.jsx)(n.h2,{id:"purpose",children:"Purpose"}),"\n",(0,i.jsx)(n.p,{children:"Strategic guide for implementing backend plugins in priority order, with analysis of Go SDK support, data model complexity, testing difficulty, and recommended demo configurations for the acceptance test framework (RFC-015)."}),"\n",(0,i.jsx)(n.h2,{id:"backend-implementability-matrix",children:"Backend Implementability Matrix"}),"\n",(0,i.jsx)(n.p,{children:"Comprehensive comparison of all backends discussed for Prism, prioritized by internal needs and ranked by ease of implementation."}),"\n",(0,i.jsx)(n.h3,{id:"comparison-table-internal-priority-order",children:"Comparison Table (Internal Priority Order)"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Rank"}),(0,i.jsx)(n.th,{children:"Backend"}),(0,i.jsx)(n.th,{children:"Go SDK Quality"}),(0,i.jsx)(n.th,{children:"Data Models"}),(0,i.jsx)(n.th,{children:"Test Difficulty"}),(0,i.jsx)(n.th,{children:"Protocol Complexity"}),(0,i.jsx)(n.th,{children:"Implementability Score"}),(0,i.jsx)(n.th,{children:"Priority"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"0"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"MemStore (In-Memory)"})}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Native (sync.Map)"}),(0,i.jsx)(n.td,{children:"KeyValue"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Instant (no deps)"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Trivial (Go map)"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"100/100"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"\ud83d\udd25 Internal - Testing"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"1"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Kafka"})}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50 Good (segmentio/kafka-go)"}),(0,i.jsx)(n.td,{children:"Event Streaming"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50 Moderate (testcontainers)"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50 Complex (wire protocol)"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"78/100"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"\ud83d\udd25 Internal - Messaging"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"2"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"NATS"})}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Excellent (nats.go - official)"}),(0,i.jsx)(n.td,{children:"PubSub, Queue"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Easy (lightweight)"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Simple (text protocol)"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"90/100"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"\ud83d\udd25 Internal - PubSub"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"3"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"PostgreSQL"})}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Excellent (pgx, pq)"}),(0,i.jsx)(n.td,{children:"Relational, JSON"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Easy (testcontainers)"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50 Moderate (SQL)"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"93/100"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"\ud83d\udd25 Internal - Relational"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"4"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Neptune"})}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50 Fair (gremlin-go, AWS SDK)"}),(0,i.jsx)(n.td,{children:"Graph (Gremlin/SPARQL)"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50 Hard (AWS-only, no local)"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50 Complex (Gremlin)"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"50/100"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"\ud83d\udd25 Internal - Graph"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"5"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Redis"})}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Excellent (go-redis)"}),(0,i.jsx)(n.td,{children:"KeyValue, Cache"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Easy (testcontainers)"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Simple (RESP)"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"95/100"})}),(0,i.jsx)(n.td,{children:"External"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"6"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"SQLite"})}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Excellent (mattn/go-sqlite3)"}),(0,i.jsx)(n.td,{children:"Relational"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Trivial (embedded)"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Simple (SQL)"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"92/100"})}),(0,i.jsx)(n.td,{children:"External"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"7"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"S3/MinIO"})}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50\u2b50 Excellent (aws-sdk-go-v2, minio-go)"}),(0,i.jsx)(n.td,{children:"Object Storage"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50 Moderate (MinIO for local)"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50\u2b50 Simple (REST API)"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"85/100"})}),(0,i.jsx)(n.td,{children:"External"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"8"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"ClickHouse"})}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50 Good (clickhouse-go)"}),(0,i.jsx)(n.td,{children:"Columnar/TimeSeries"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50 Moderate (testcontainers)"}),(0,i.jsx)(n.td,{children:"\u2b50\u2b50\u2b50 Moderate (custom protocol)"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"70/100"})}),(0,i.jsx)(n.td,{children:"External"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"scoring-criteria",children:"Scoring Criteria"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Implementability Score"})," = weighted average of:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Go SDK Quality"})," (30%): Maturity, documentation, community support"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Data Models"})," (15%): Complexity and variety of supported models"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Test Difficulty"})," (25%): Local testing, testcontainers support, startup time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Protocol Complexity"})," (20%): Wire protocol complexity, client implementation difficulty"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Community/Ecosystem"})," (10%): Available examples, Stack Overflow answers, production usage"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"detailed-backend-analysis",children:"Detailed Backend Analysis"}),"\n",(0,i.jsxs)(n.h3,{id:"0-memstore-score-100100---simplest-possible-plugin--internal-priority",children:["0. MemStore (Score: 100/100) - Simplest Possible Plugin \ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"INTERNAL PRIORITY"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Implement First:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Zero dependencies"}),": Pure Go, uses ",(0,i.jsx)(n.code,{children:"sync.Map"})," for thread-safe storage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Instant startup"}),": No containers, no external processes"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Perfect for testing"}),": Fastest possible feedback loop"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reference implementation"}),": Demonstrates plugin interface patterns"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Go Implementation:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// plugins/memstore/store.go\npackage memstore\n\nimport (\n    "context"\n    "sync"\n    "time"\n)\n\n// MemStore implements a thread-safe in-memory key-value store\ntype MemStore struct {\n    data   sync.Map\n    expiry sync.Map\n}\n\nfunc NewMemStore() *MemStore {\n    return &MemStore{}\n}\n\nfunc (m *MemStore) Set(ctx context.Context, key string, value []byte, ttl time.Duration) error {\n    m.data.Store(key, value)\n\n    if ttl > 0 {\n        m.expiry.Store(key, time.Now().Add(ttl))\n    }\n\n    return nil\n}\n\nfunc (m *MemStore) Get(ctx context.Context, key string) ([]byte, error) {\n    // Check expiry\n    if exp, ok := m.expiry.Load(key); ok {\n        if time.Now().After(exp.(time.Time)) {\n            m.data.Delete(key)\n            m.expiry.Delete(key)\n            return nil, ErrKeyNotFound\n        }\n    }\n\n    value, ok := m.data.Load(key)\n    if !ok {\n        return nil, ErrKeyNotFound\n    }\n\n    return value.([]byte), nil\n}\n\nfunc (m *MemStore) Delete(ctx context.Context, key string) error {\n    m.data.Delete(key)\n    m.expiry.Delete(key)\n    return nil\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Data Models Supported:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"KeyValue (primary use case)"}),"\n",(0,i.jsx)(n.li,{children:"TTL support for expiration"}),"\n",(0,i.jsx)(n.li,{children:"PubSub (can add channels with Go channels)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testing Strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func TestMemStore(t *testing.T) {\n    store := NewMemStore()\n\n    // No setup needed - instant!\n    ctx := context.Background()\n\n    // Test basic operations\n    store.Set(ctx, "key1", []byte("value1"), 0)\n    value, err := store.Get(ctx, "key1")\n    assert.NoError(t, err)\n    assert.Equal(t, []byte("value1"), value)\n\n    // Test TTL\n    store.Set(ctx, "key2", []byte("value2"), 100*time.Millisecond)\n    time.Sleep(200 * time.Millisecond)\n    _, err = store.Get(ctx, "key2")\n    assert.Error(t, err) // Should be expired\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Demo Plugin Operations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GET"}),", ",(0,i.jsx)(n.code,{children:"SET"}),", ",(0,i.jsx)(n.code,{children:"DEL"})," (basic operations)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXPIRE"})," (TTL support)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"KEYS"})," (list all keys)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"FLUSH"})," (clear all data)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"RFC-015 Test Coverage:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Authentication: N/A (in-process)"}),"\n",(0,i.jsx)(n.li,{children:"Concurrency: Thread-safe via sync.Map"}),"\n",(0,i.jsx)(n.li,{children:"Error handling: Key not found, expired keys"}),"\n",(0,i.jsx)(n.li,{children:"Performance: Sub-microsecond latency"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rapid prototyping"}),": Test plugin patterns without external dependencies"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CI/CD"}),": Fastest possible test execution"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Learning"}),": Reference implementation for new backend developers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Development"}),": Local testing without Docker"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Performance Characteristics:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Write latency: ",(0,i.jsx)(n.strong,{children:"<1\u03bcs"})," (microsecond)"]}),"\n",(0,i.jsxs)(n.li,{children:["Read latency: ",(0,i.jsx)(n.strong,{children:"<1\u03bcs"})]}),"\n",(0,i.jsxs)(n.li,{children:["Throughput: ",(0,i.jsx)(n.strong,{children:"1M+ operations/sec"})," (single instance)"]}),"\n",(0,i.jsxs)(n.li,{children:["Memory: ",(0,i.jsx)(n.strong,{children:"~10MB baseline"})," (scales with data)"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"1-redis-score-95100---highest-implementability",children:"1. Redis (Score: 95/100) - Highest Implementability"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Implement First:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simplest protocol"}),": RESP (REdis Serialization Protocol) is text-based and trivial to implement"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fastest to test"}),": Starts in <1 second, minimal memory footprint"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Perfect for demos"}),": In-memory, no persistence needed for basic examples"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Excellent Go SDK"}),": ",(0,i.jsx)(n.code,{children:"go-redis/redis"})," is mature, well-documented, idiomatic Go"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Go SDK:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import "github.com/redis/go-redis/v9"\n\nclient := redis.NewClient(&redis.Options{\n    Addr: "localhost:6379",\n})\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Data Models Supported:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"KeyValue (primary use case)"}),"\n",(0,i.jsx)(n.li,{children:"Cache (TTL support)"}),"\n",(0,i.jsx)(n.li,{children:"PubSub (lightweight messaging)"}),"\n",(0,i.jsx)(n.li,{children:"Lists, Sets, Sorted Sets"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testing Strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// testcontainers integration\nfunc NewRedisInstance(t *testing.T) *RedisInstance {\n    req := testcontainers.ContainerRequest{\n        Image:        "redis:7-alpine",\n        ExposedPorts: []string{"6379/tcp"},\n        WaitingFor:   wait.ForLog("Ready to accept connections"),\n    }\n    // Starts in &lt;1 second\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Demo Plugin Operations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"GET"}),", ",(0,i.jsx)(n.code,{children:"SET"}),", ",(0,i.jsx)(n.code,{children:"DEL"})," (basic operations)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"EXPIRE"}),", ",(0,i.jsx)(n.code,{children:"TTL"})," (cache semantics)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PUBLISH"}),", ",(0,i.jsx)(n.code,{children:"SUBSCRIBE"})," (pub/sub pattern)"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"RFC-015 Test Coverage:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Authentication: ",(0,i.jsx)(n.code,{children:"AUTH"})," command with password"]}),"\n",(0,i.jsx)(n.li,{children:"Connection pooling: Verify multiple connections"}),"\n",(0,i.jsx)(n.li,{children:"Error handling: Wrong key types, expired keys"}),"\n",(0,i.jsx)(n.li,{children:"Concurrency: 1000s of concurrent ops"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"2-postgresql-score-93100---production-ready",children:"2. PostgreSQL (Score: 93/100) - Production Ready"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Implement Second:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Industry standard"}),": Most developers understand SQL"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Strong Go ecosystem"}),": ",(0,i.jsx)(n.code,{children:"pgx"})," is the gold standard for Postgres Go clients"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rich testing"}),": testcontainers, postgres:alpine images"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complex data models"}),": Supports JSON, arrays, full-text search"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Go SDK:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import "github.com/jackc/pgx/v5"\n\nconn, _ := pgx.Connect(context.Background(), "postgres://user:pass@localhost:5432/db")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Data Models Supported:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Relational (tables, foreign keys, transactions)"}),"\n",(0,i.jsx)(n.li,{children:"JSON/JSONB (document-like queries)"}),"\n",(0,i.jsx)(n.li,{children:"Full-text search"}),"\n",(0,i.jsx)(n.li,{children:"Time-series (with extensions like TimescaleDB)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testing Strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func NewPostgresInstance(t *testing.T) *PostgresInstance {\n    req := testcontainers.ContainerRequest{\n        Image:        "postgres:16-alpine",\n        ExposedPorts: []string{"5432/tcp"},\n        Env: map[string]string{\n            "POSTGRES_PASSWORD": "testpass",\n        },\n        WaitingFor: wait.ForLog("database system is ready to accept connections"),\n    }\n    // Starts in 3-5 seconds\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Demo Plugin Operations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SELECT"}),", ",(0,i.jsx)(n.code,{children:"INSERT"}),", ",(0,i.jsx)(n.code,{children:"UPDATE"}),", ",(0,i.jsx)(n.code,{children:"DELETE"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"BEGIN"}),", ",(0,i.jsx)(n.code,{children:"COMMIT"}),", ",(0,i.jsx)(n.code,{children:"ROLLBACK"})," (transactions)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"LISTEN"}),", ",(0,i.jsx)(n.code,{children:"NOTIFY"})," (pub/sub via Postgres)"]}),"\n",(0,i.jsx)(n.li,{children:"Prepared statements for performance"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"RFC-015 Test Coverage:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Authentication: Username/password, SSL/TLS"}),"\n",(0,i.jsx)(n.li,{children:"Transaction isolation levels"}),"\n",(0,i.jsx)(n.li,{children:"Constraint violations (foreign keys, unique)"}),"\n",(0,i.jsx)(n.li,{children:"JSON operations and indexing"}),"\n",(0,i.jsx)(n.li,{children:"Connection pool exhaustion"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"3-sqlite-score-92100---perfect-for-demos",children:"3. SQLite (Score: 92/100) - Perfect for Demos"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Implement Third:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Zero configuration"}),": Embedded, no separate process"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Instant startup"}),": No container needed"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Perfect for CI/CD"}),": Fast, deterministic tests"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Same SQL as Postgres"}),": Easy to understand"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Go SDK:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import "github.com/mattn/go-sqlite3"\n\ndb, _ := sql.Open("sqlite3", ":memory:") // In-memory DB\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Data Models Supported:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Relational (full SQL support)"}),"\n",(0,i.jsx)(n.li,{children:"JSON1 extension for JSON queries"}),"\n",(0,i.jsx)(n.li,{children:"Full-text search (FTS5)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testing Strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func NewSQLiteInstance(t *testing.T) *SQLiteInstance {\n    // No container needed!\n    db, err := sql.Open("sqlite3", ":memory:")\n    if err != nil {\n        t.Fatal(err)\n    }\n\n    // Create schema immediately\n    db.Exec("CREATE TABLE users (id INTEGER PRIMARY KEY, name TEXT)")\n\n    return &SQLiteInstance{db: db}\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Demo Plugin Operations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All standard SQL operations"}),"\n",(0,i.jsx)(n.li,{children:"In-memory for speed, file-backed for persistence"}),"\n",(0,i.jsx)(n.li,{children:"WAL mode for concurrent reads"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"RFC-015 Test Coverage:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Authentication: N/A (file-based permissions)"}),"\n",(0,i.jsx)(n.li,{children:"Concurrency: Multiple readers, single writer"}),"\n",(0,i.jsx)(n.li,{children:"Error handling: Locked database, constraint violations"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Local development without Docker"}),"\n",(0,i.jsx)(n.li,{children:"CI/CD where container startup overhead matters"}),"\n",(0,i.jsx)(n.li,{children:"Embedded demos (single binary with DB)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"4-nats-score-90100---cloud-native-messaging",children:"4. NATS (Score: 90/100) - Cloud-Native Messaging"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Implement Fourth:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Go-native"}),": Written in Go, official Go client"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Lightweight"}),": <10MB memory, starts instantly"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modern patterns"}),": Request-reply, streams, key-value (JetStream)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simple protocol"}),": Text-based, easy to debug"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Go SDK:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import "github.com/nats-io/nats.go"\n\nnc, _ := nats.Connect("nats://localhost:4222")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Data Models Supported:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"PubSub (core NATS)"}),"\n",(0,i.jsx)(n.li,{children:"Queue groups (load balancing)"}),"\n",(0,i.jsx)(n.li,{children:"JetStream (persistent streams, like Kafka-lite)"}),"\n",(0,i.jsx)(n.li,{children:"Key-Value store (JetStream KV)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testing Strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func NewNATSInstance(t *testing.T) *NATSInstance {\n    // Option 1: Embedded NATS server (no container!)\n    s, err := server.NewServer(&server.Options{\n        Port: -1, // Random port\n    })\n    s.Start()\n\n    // Option 2: Container for full features\n    req := testcontainers.ContainerRequest{\n        Image: "nats:2-alpine",\n        ExposedPorts: []string{"4222/tcp"},\n    }\n    // Starts in &lt;2 seconds\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Demo Plugin Operations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Publish"}),", ",(0,i.jsx)(n.code,{children:"Subscribe"})," (pub/sub)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Request"}),", ",(0,i.jsx)(n.code,{children:"Reply"})," (RPC pattern)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"QueueSubscribe"})," (load balancing)"]}),"\n",(0,i.jsxs)(n.li,{children:["JetStream: ",(0,i.jsx)(n.code,{children:"AddStream"}),", ",(0,i.jsx)(n.code,{children:"Publish"}),", ",(0,i.jsx)(n.code,{children:"Subscribe"})," with ack"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"RFC-015 Test Coverage:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Authentication: Token, username/password, TLS certs"}),"\n",(0,i.jsx)(n.li,{children:"Connection resilience: Automatic reconnect"}),"\n",(0,i.jsx)(n.li,{children:"Consumer acknowledgments"}),"\n",(0,i.jsx)(n.li,{children:"Exactly-once delivery (JetStream)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"5-kafka-score-78100---production-event-streaming",children:"5. Kafka (Score: 78/100) - Production Event Streaming"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Implement Fifth:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Industry standard"}),": De facto event streaming platform"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complex but mature"}),": Well-understood patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Good Go SDKs"}),": ",(0,i.jsx)(n.code,{children:"segmentio/kafka-go"})," (pure Go) or ",(0,i.jsx)(n.code,{children:"confluent-kafka-go"})," (C bindings)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testable"}),": testcontainers support, but slow startup"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Go SDK:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Option 1: segmentio/kafka-go (pure Go)\nimport "github.com/segmentio/kafka-go"\n\nwriter := &kafka.Writer{\n    Addr:  kafka.TCP("localhost:9092"),\n    Topic: "events",\n}\n\n// Option 2: confluent-kafka-go (faster, C deps)\nimport "github.com/confluentinc/confluent-kafka-go/v2/kafka"\n\nproducer, _ := kafka.NewProducer(&kafka.ConfigMap{\n    "bootstrap.servers": "localhost:9092",\n})\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Data Models Supported:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Event streaming (append-only log)"}),"\n",(0,i.jsx)(n.li,{children:"Partitioned queues"}),"\n",(0,i.jsx)(n.li,{children:"Change data capture (Kafka Connect)"}),"\n",(0,i.jsx)(n.li,{children:"Stream processing (Kafka Streams)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testing Strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func NewKafkaInstance(t *testing.T) *KafkaInstance {\n    req := testcontainers.ContainerRequest{\n        Image:        "confluentinc/cp-kafka:7.5.0",\n        ExposedPorts: []string{"9092/tcp", "9093/tcp"},\n        Env: map[string]string{\n            "KAFKA_BROKER_ID": "1",\n            "KAFKA_ZOOKEEPER_CONNECT": "zookeeper:2181",\n            // ... complex configuration\n        },\n        WaitingFor: wait.ForLog("started (kafka.server.KafkaServer)").\n            WithStartupTimeout(120 * time.Second), // Slow!\n    }\n    // Starts in 30-60 seconds (needs Zookeeper or KRaft mode)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Demo Plugin Operations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Produce"})," with key and value"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"Consume"})," with consumer group"]}),"\n",(0,i.jsx)(n.li,{children:"Offset management (commit, reset)"}),"\n",(0,i.jsx)(n.li,{children:"Partition assignment"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"RFC-015 Test Coverage:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Authentication: SASL/SCRAM, mTLS"}),"\n",(0,i.jsx)(n.li,{children:"Consumer groups: Rebalancing, partition assignment"}),"\n",(0,i.jsx)(n.li,{children:"Exactly-once semantics: Idempotent producer, transactional writes"}),"\n",(0,i.jsx)(n.li,{children:"High throughput: 10k+ messages/sec"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Challenges:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Startup time: 30-60 seconds vs <5 seconds for Redis/Postgres"}),"\n",(0,i.jsx)(n.li,{children:"Configuration complexity: Many knobs to tune"}),"\n",(0,i.jsx)(n.li,{children:"Testing: Requires Zookeeper (or KRaft mode in newer versions)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"6-s3minio-score-85100---object-storage",children:"6. S3/MinIO (Score: 85/100) - Object Storage"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Implement Sixth:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Standard API"}),": S3-compatible API used everywhere"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"MinIO for local"}),": Production-grade S3 alternative"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Essential for patterns"}),": Claim Check pattern requires object storage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Excellent SDKs"}),": AWS SDK v2 and MinIO Go client"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Go SDK:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// AWS S3\nimport "github.com/aws/aws-sdk-go-v2/service/s3"\n\nclient := s3.NewFromConfig(cfg)\n\n// MinIO (S3-compatible)\nimport "github.com/minio/minio-go/v7"\n\nminioClient, _ := minio.New("localhost:9000", &minio.Options{\n    Creds: credentials.NewStaticV4("minioadmin", "minioadmin", ""),\n})\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Data Models Supported:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Object storage (key \u2192 blob)"}),"\n",(0,i.jsx)(n.li,{children:"Metadata (key-value tags per object)"}),"\n",(0,i.jsx)(n.li,{children:"Versioning (multiple versions of same key)"}),"\n",(0,i.jsx)(n.li,{children:"Lifecycle policies (auto-archival)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testing Strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func NewMinIOInstance(t *testing.T) *MinIOInstance {\n    req := testcontainers.ContainerRequest{\n        Image:        "minio/minio:latest",\n        ExposedPorts: []string{"9000/tcp", "9001/tcp"},\n        Cmd:          []string{"server", "/data", "--console-address", ":9001"},\n        Env: map[string]string{\n            "MINIO_ROOT_USER":     "minioadmin",\n            "MINIO_ROOT_PASSWORD": "minioadmin",\n        },\n        WaitingFor: wait.ForHTTP("/minio/health/live").WithPort("9000"),\n    }\n    // Starts in 3-5 seconds\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Demo Plugin Operations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"PutObject"}),", ",(0,i.jsx)(n.code,{children:"GetObject"}),", ",(0,i.jsx)(n.code,{children:"DeleteObject"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"ListObjects"})," with prefix"]}),"\n",(0,i.jsx)(n.li,{children:"Multipart upload (large files)"}),"\n",(0,i.jsx)(n.li,{children:"Presigned URLs (temporary access)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"RFC-015 Test Coverage:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Authentication: Access key + secret key"}),"\n",(0,i.jsx)(n.li,{children:"Large objects: Multipart upload, streaming"}),"\n",(0,i.jsx)(n.li,{children:"Versioning: Multiple versions of same key"}),"\n",(0,i.jsx)(n.li,{children:"Lifecycle: Expiration policies"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Claim Check pattern (store large payloads)"}),"\n",(0,i.jsx)(n.li,{children:"Tiered storage (archive cold data)"}),"\n",(0,i.jsx)(n.li,{children:"Backup and recovery"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"7-clickhouse-score-70100---analytical-queries",children:"7. ClickHouse (Score: 70/100) - Analytical Queries"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Implement Seventh:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Specialized"}),": Columnar database for analytics"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fast for aggregations"}),": OLAP queries"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Decent Go SDK"}),": ",(0,i.jsx)(n.code,{children:"clickhouse-go"})," is maintained"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testable"}),": testcontainers support"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Go SDK:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import "github.com/ClickHouse/clickhouse-go/v2"\n\nconn, _ := clickhouse.Open(&clickhouse.Options{\n    Addr: []string{"localhost:9000"},\n    Auth: clickhouse.Auth{\n        Database: "default",\n        Username: "default",\n        Password: "",\n    },\n})\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Data Models Supported:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"TimeSeries (high-cardinality metrics)"}),"\n",(0,i.jsx)(n.li,{children:"Columnar (fast aggregations)"}),"\n",(0,i.jsx)(n.li,{children:"Event logs (append-only)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testing Strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func NewClickHouseInstance(t *testing.T) *ClickHouseInstance {\n    req := testcontainers.ContainerRequest{\n        Image:        "clickhouse/clickhouse-server:latest",\n        ExposedPorts: []string{"9000/tcp", "8123/tcp"},\n        WaitingFor: wait.ForLog("Ready for connections"),\n    }\n    // Starts in 5-10 seconds\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Demo Plugin Operations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"INSERT"})," (batch inserts for performance)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"SELECT"})," with aggregations (",(0,i.jsx)(n.code,{children:"SUM"}),", ",(0,i.jsx)(n.code,{children:"AVG"}),", ",(0,i.jsx)(n.code,{children:"percentile"}),")"]}),"\n",(0,i.jsxs)(n.li,{children:["Time-based queries (",(0,i.jsx)(n.code,{children:"toStartOfHour"}),", ",(0,i.jsx)(n.code,{children:"toDate"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"RFC-015 Test Coverage:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Authentication: Username/password"}),"\n",(0,i.jsx)(n.li,{children:"Batch inserts: 10k+ rows/sec"}),"\n",(0,i.jsx)(n.li,{children:"Complex queries: Joins, aggregations"}),"\n",(0,i.jsx)(n.li,{children:"Compression: Verify data compression"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Metrics and observability"}),"\n",(0,i.jsx)(n.li,{children:"Log aggregation"}),"\n",(0,i.jsx)(n.li,{children:"Business intelligence"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"8-neptune-score-50100---graph-database-aws",children:"8. Neptune (Score: 50/100) - Graph Database (AWS)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why Implement Last:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"AWS-only"}),": No local testing without AWS account"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Complex protocol"}),": Gremlin (graph traversal language)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Limited Go support"}),": ",(0,i.jsx)(n.code,{children:"gremlin-go"})," is less mature"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Expensive to test"}),": AWS charges, no free tier for Neptune"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Go SDK:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import "github.com/apache/tinkerpop/gremlin-go/v3/driver"\n\nremote, _ := gremlingo.NewDriverRemoteConnection("ws://localhost:8182/gremlin")\ng := gremlingo.Traversal_().WithRemote(remote)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Data Models Supported:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Graph (vertices, edges, properties)"}),"\n",(0,i.jsx)(n.li,{children:"Property graph model (Gremlin)"}),"\n",(0,i.jsx)(n.li,{children:"RDF triples (SPARQL)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Testing Strategy:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Problem: No good local testing option\n// Option 1: Mock Gremlin responses (not ideal)\n// Option 2: Use TinkerPop Gremlin Server (complex setup)\n// Option 3: Fake AWS Neptune with localstack (limited support)\n\nfunc NewNeptuneInstance(t *testing.T) *NeptuneInstance {\n    // Best option: Use Gremlin Server (JVM-based)\n    req := testcontainers.ContainerRequest{\n        Image:        "tinkerpop/gremlin-server:latest",\n        ExposedPorts: []string{"8182/tcp"},\n        WaitingFor: wait.ForLog("Channel started at port 8182"),\n    }\n    // Starts in 10-15 seconds (JVM startup)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Demo Plugin Operations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"AddVertex"}),", ",(0,i.jsx)(n.code,{children:"AddEdge"})," (create graph elements)"]}),"\n",(0,i.jsxs)(n.li,{children:["Graph traversals: ",(0,i.jsx)(n.code,{children:"g.V().has('name', 'Alice').out('knows')"})]}),"\n",(0,i.jsx)(n.li,{children:"Path queries: Shortest path, neighbors"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"RFC-015 Test Coverage:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Authentication: IAM-based (AWS SigV4)"}),"\n",(0,i.jsx)(n.li,{children:"Graph traversals: Verify Gremlin queries"}),"\n",(0,i.jsx)(n.li,{children:"Transactions: Graph mutations"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Challenges:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"No free local testing"}),"\n",(0,i.jsx)(n.li,{children:"Gremlin learning curve"}),"\n",(0,i.jsx)(n.li,{children:"Limited Go ecosystem"}),"\n",(0,i.jsx)(n.li,{children:"Difficult to seed test data"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Recommendation"}),": Defer until other backends are stable."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"recommended-implementation-order-internal-priority",children:"Recommended Implementation Order (Internal Priority)"}),"\n",(0,i.jsxs)(n.h3,{id:"phase-0-baseline-plugin-week-1--internal",children:["Phase 0: Baseline Plugin (Week 1) \ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"INTERNAL"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Priority:"})," MemStore"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Rationale:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Zero external dependencies"}),": Pure Go implementation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fastest feedback loop"}),": No container startup time"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Reference implementation"}),": Establishes plugin patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Testing foundation"}),": Validates RFC-015 test framework immediately"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Complete in-memory plugin with RFC-015 test suite"}),"\n",(0,i.jsx)(n.li,{children:"Plugin interface patterns documented"}),"\n",(0,i.jsx)(n.li,{children:"Thread-safe concurrent operations verified"}),"\n",(0,i.jsx)(n.li,{children:"Sub-microsecond latency baseline established"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"phase-1-internal-messaging-weeks-2-6--internal",children:["Phase 1: Internal Messaging (Weeks 2-6) \ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"INTERNAL"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Priority:"})," Kafka \u2192 NATS"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Rationale:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Kafka"}),": Internal event streaming requirement, production-critical"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"NATS"}),": Internal pub/sub messaging, lightweight alternative"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Both needed"}),": Different use cases, complementary patterns"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Kafka plugin with consumer groups, partitioning, exactly-once"}),"\n",(0,i.jsx)(n.li,{children:"NATS plugin with JetStream support"}),"\n",(0,i.jsx)(n.li,{children:"PubSub and queue patterns working end-to-end"}),"\n",(0,i.jsx)(n.li,{children:"High-throughput verification (10k+ rps)"}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"phase-2-internal-data-storage-weeks-7-10--internal",children:["Phase 2: Internal Data Storage (Weeks 7-10) \ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"INTERNAL"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Priority:"})," PostgreSQL \u2192 Neptune"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Rationale:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PostgreSQL"}),": Internal relational data requirement, ACID transactions"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Neptune"}),": Internal graph data requirement, specialized use case"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Production parity"}),": Both backends mirror production environment"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"PostgreSQL plugin with transaction support, LISTEN/NOTIFY, JSON"}),"\n",(0,i.jsx)(n.li,{children:"Neptune plugin with Gremlin traversals (AWS SDK)"}),"\n",(0,i.jsx)(n.li,{children:"Outbox pattern implementation (PostgreSQL)"}),"\n",(0,i.jsx)(n.li,{children:"Graph query patterns (Neptune)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-3-externalsupporting-backends-weeks-11-14",children:"Phase 3: External/Supporting Backends (Weeks 11-14)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Priority:"})," Redis \u2192 SQLite \u2192 S3/MinIO"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Rationale:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Redis"}),": General-purpose cache, widely used"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"SQLite"}),": Embedded testing, CI/CD optimization"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"S3/MinIO"}),": Claim Check pattern support"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Redis plugin for caching patterns"}),"\n",(0,i.jsx)(n.li,{children:"SQLite plugin for embedded demos"}),"\n",(0,i.jsx)(n.li,{children:"S3/MinIO plugin for large payload handling"}),"\n",(0,i.jsx)(n.li,{children:"Claim Check pattern implementation"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"phase-4-analytics-weeks-15-16",children:"Phase 4: Analytics (Weeks 15-16)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Priority:"})," ClickHouse"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Rationale:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Observability and metrics use cases"}),"\n",(0,i.jsx)(n.li,{children:"TimeSeries data model"}),"\n",(0,i.jsx)(n.li,{children:"Optional: Lower priority than internal needs"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Deliverables:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ClickHouse plugin for analytical queries"}),"\n",(0,i.jsx)(n.li,{children:"Metrics aggregation patterns"}),"\n",(0,i.jsx)(n.li,{children:"Batch insert optimization"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"demo-plugin-configurations",children:"Demo Plugin Configurations"}),"\n",(0,i.jsxs)(n.h3,{id:"demo-0-memstore-in-memory-keyvalue-simplest--internal",children:["Demo 0: MemStore In-Memory KeyValue (Simplest) \ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"INTERNAL"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Demonstrate simplest possible plugin with zero external dependencies"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# config/demo-memstore.yaml\nnamespaces:\n  - name: dev-cache\n    pattern: keyvalue\n\n    needs:\n      latency: &lt;1\u03bcs\n      ttl: true\n      persistence: false\n\nbackend:\n  type: memstore\n  # No configuration needed - runs in-process\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Client Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Demo: Instant GET/SET operations\nclient.Set("session:abc123", sessionData, 5*time.Minute)\nvalue := client.Get("session:abc123")\n\n// No Docker, no containers, no startup time\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test Focus:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Zero-dependency testing"}),"\n",(0,i.jsx)(n.li,{children:"Thread-safe concurrency (sync.Map)"}),"\n",(0,i.jsx)(n.li,{children:"TTL expiration"}),"\n",(0,i.jsx)(n.li,{children:"Performance baseline (<1\u03bcs latency)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Use Cases:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CI/CD"}),": Fastest test execution (no container overhead)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Learning"}),": Reference implementation for new plugin developers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Rapid prototyping"}),": Test proxy and client patterns instantly"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Local dev"}),": No Docker required"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"demo-1-redis-keyvalue-store",children:"Demo 1: Redis KeyValue Store"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Show simplest possible plugin"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"# config/demo-redis.yaml\nnamespaces:\n  - name: cache\n    pattern: keyvalue\n\n    needs:\n      latency: &lt;1ms\n      ttl: true\n\nbackend:\n  type: redis\n  host: localhost\n  port: 6379\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Client Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Demo: GET/SET operations\nclient.Set("user:123", userData, 300*time.Second) // 5 min TTL\nvalue := client.Get("user:123")\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test Focus:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Authentication (password)"}),"\n",(0,i.jsx)(n.li,{children:"TTL expiration"}),"\n",(0,i.jsx)(n.li,{children:"Connection pooling"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"demo-2-postgresql-with-transactions",children:"Demo 2: PostgreSQL with Transactions"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Show transactional reliability"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"namespaces:\n  - name: orders\n    pattern: transactional-queue\n\n    needs:\n      consistency: strong\n      durability: fsync\n\nbackend:\n  type: postgres\n  database: orders\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Client Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Demo: Outbox pattern\ntx := client.BeginTx()\ntx.Execute("INSERT INTO orders (...) VALUES (...)")\ntx.Publish("order-events", orderEvent)\ntx.Commit() // Atomic\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test Focus:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ACID transactions"}),"\n",(0,i.jsx)(n.li,{children:"Outbox pattern verification"}),"\n",(0,i.jsx)(n.li,{children:"Rollback behavior"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"demo-3-kafka-event-streaming",children:"Demo 3: Kafka Event Streaming"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Show high-throughput messaging"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"namespaces:\n  - name: events\n    pattern: event-stream\n\n    needs:\n      throughput: 10k rps\n      retention: 7days\n      ordered: true\n\nbackend:\n  type: kafka\n  brokers: [localhost:9092]\n  partitions: 10\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Client Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Demo: Producer\nfor i := 0; i < 10000; i++ {\n    client.Publish("events", event)\n}\n\n// Demo: Consumer with consumer group\nfor event := range client.Subscribe("events", "group1") {\n    process(event)\n    event.Ack()\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test Focus:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Consumer groups"}),"\n",(0,i.jsx)(n.li,{children:"Partitioning"}),"\n",(0,i.jsx)(n.li,{children:"Offset management"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"demo-4-s3-large-payload-claim-check",children:"Demo 4: S3 Large Payload (Claim Check)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Show pattern composition"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"namespaces:\n  - name: videos\n    pattern: pubsub\n\n    needs:\n      max_message_size: 5GB\n      storage_backend: s3\n\nbackend:\n  type: kafka  # For metadata\n  storage:\n    type: s3\n    bucket: prism-claim-checks\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Client Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Demo: Transparent large payload handling\nvideo := loadVideo("movie.mp4") // 2GB\nclient.Publish("videos", video)  // Prism stores in S3 automatically\n\n// Consumer gets full video\nevent := client.Subscribe("videos")\nvideo := event.Payload  // Prism fetches from S3 transparently\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test Focus:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Claim Check pattern"}),"\n",(0,i.jsx)(n.li,{children:"S3 upload/download"}),"\n",(0,i.jsx)(n.li,{children:"Cleanup after consumption"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"demo-5-multi-backend-composition",children:"Demo 5: Multi-Backend Composition"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose"}),": Show layered architecture power"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"namespaces:\n  - name: ml-models\n    pattern: pubsub\n\n    needs:\n      consistency: strong       # \u2192 Outbox (Postgres)\n      max_message_size: 5GB     # \u2192 Claim Check (S3)\n      durability: strong        # \u2192 WAL\n      retention: 30days         # \u2192 Tiered Storage\n\nbackends:\n  transactional: postgres\n  storage: s3\n  queue: kafka\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Client Code:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// Demo: All patterns composed automatically\nwith client.transaction() as tx:\n    tx.execute("INSERT INTO model_registry ...")\n    tx.publish("model-releases", model_weights)  // 2GB\n    tx.commit()\n\n// Prism automatically:\n// 1. Writes to WAL (durability)\n// 2. Stores model in S3 (claim check)\n// 3. Inserts to Postgres outbox (transactional)\n// 4. Publishes to Kafka (queue)\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Test Focus:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Pattern composition"}),"\n",(0,i.jsx)(n.li,{children:"End-to-end flow"}),"\n",(0,i.jsx)(n.li,{children:"Failure recovery"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"testing-infrastructure-requirements",children:"Testing Infrastructure Requirements"}),"\n",(0,i.jsx)(n.h3,{id:"docker-compose-for-local-testing",children:"Docker Compose for Local Testing"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'# docker-compose.test.yml\nversion: \'3.8\'\nservices:\n  redis:\n    image: redis:7-alpine\n    ports:\n      - "6379:6379"\n    healthcheck:\n      test: ["CMD", "redis-cli", "ping"]\n\n  postgres:\n    image: postgres:16-alpine\n    environment:\n      POSTGRES_PASSWORD: testpass\n    ports:\n      - "5432:5432"\n    healthcheck:\n      test: ["CMD", "pg_isready"]\n\n  nats:\n    image: nats:2-alpine\n    ports:\n      - "4222:4222"\n    healthcheck:\n      test: ["CMD", "wget", "-q", "-O-", "http://localhost:8222/healthz"]\n\n  kafka:\n    image: confluentinc/cp-kafka:7.5.0\n    environment:\n      KAFKA_BROKER_ID: 1\n      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n    ports:\n      - "9092:9092"\n    healthcheck:\n      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]\n\n  minio:\n    image: minio/minio:latest\n    command: server /data --console-address ":9001"\n    environment:\n      MINIO_ROOT_USER: minioadmin\n      MINIO_ROOT_PASSWORD: minioadmin\n    ports:\n      - "9000:9000"\n      - "9001:9001"\n    healthcheck:\n      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]\n\n  clickhouse:\n    image: clickhouse/clickhouse-server:latest\n    ports:\n      - "9000:9000"\n      - "8123:8123"\n    healthcheck:\n      test: ["CMD", "wget", "-q", "-O-", "http://localhost:8123/ping"]\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Usage:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Start all backends\ndocker-compose -f docker-compose.test.yml up -d\n\n# Run acceptance tests\ngo test ./tests/acceptance/... -v\n\n# Stop all backends\ndocker-compose -f docker-compose.test.yml down\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"appendix-go-sdk-comparison",children:"Appendix: Go SDK Comparison"}),"\n",(0,i.jsx)(n.h3,{id:"package-recommendations",children:"Package Recommendations"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Backend"}),(0,i.jsx)(n.th,{children:"Primary SDK"}),(0,i.jsx)(n.th,{children:"Alternative"}),(0,i.jsx)(n.th,{children:"Notes"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Redis"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"github.com/redis/go-redis/v9"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"github.com/gomodule/redigo"})}),(0,i.jsx)(n.td,{children:"go-redis is modern, v9+ uses context"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"PostgreSQL"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"github.com/jackc/pgx/v5"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"github.com/lib/pq"})}),(0,i.jsx)(n.td,{children:"pgx is faster, better error handling"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"SQLite"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"github.com/mattn/go-sqlite3"})}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"modernc.org/sqlite"})," (pure Go)"]}),(0,i.jsx)(n.td,{children:"mattn requires CGO but faster"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"NATS"}),(0,i.jsxs)(n.td,{children:[(0,i.jsx)(n.code,{children:"github.com/nats-io/nats.go"})," (official)"]}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Official client, well-maintained"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Kafka"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"github.com/segmentio/kafka-go"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"github.com/confluentinc/confluent-kafka-go/v2"})}),(0,i.jsx)(n.td,{children:"segmentio pure Go, confluent has C deps but faster"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"S3"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"github.com/aws/aws-sdk-go-v2"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"github.com/minio/minio-go/v7"})}),(0,i.jsx)(n.td,{children:"AWS SDK for production, MinIO for dev"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"ClickHouse"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"github.com/ClickHouse/clickhouse-go/v2"})}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Official client"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"Neptune"}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"github.com/apache/tinkerpop/gremlin-go"})}),(0,i.jsx)(n.td,{children:"-"}),(0,i.jsx)(n.td,{children:"Gremlin traversal language"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"installation",children:"Installation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"# Redis\ngo get github.com/redis/go-redis/v9\n\n# PostgreSQL\ngo get github.com/jackc/pgx/v5\n\n# SQLite\ngo get github.com/mattn/go-sqlite3\n\n# NATS\ngo get github.com/nats-io/nats.go\n\n# Kafka\ngo get github.com/segmentio/kafka-go\n\n# S3\ngo get github.com/aws/aws-sdk-go-v2/service/s3\ngo get github.com/minio/minio-go/v7\n\n# ClickHouse\ngo get github.com/ClickHouse/clickhouse-go/v2\n\n# testcontainers\ngo get github.com/testcontainers/testcontainers-go\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Implementation Priority (Internal Needs First):"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Internal Priority (Must Have):"}),"\n0. \ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"MemStore"})," (Score: 100) - Start here, zero dependencies, instant testing"]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"Kafka"})," (Score: 78) - Internal messaging requirement, event streaming"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"NATS"})," (Score: 90) - Internal pub/sub requirement, lightweight"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"PostgreSQL"})," (Score: 93) - Internal relational data, ACID transactions"]}),"\n",(0,i.jsxs)(n.li,{children:["\ud83d\udd25 ",(0,i.jsx)(n.strong,{children:"Neptune"})," (Score: 50) - Internal graph data requirement"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"External/Supporting (Nice to Have):"}),"\n5. \u23ed\ufe0f ",(0,i.jsx)(n.strong,{children:"Redis"})," (Score: 95) - General caching, external clients\n6. \u23ed\ufe0f ",(0,i.jsx)(n.strong,{children:"SQLite"})," (Score: 92) - Embedded testing, CI/CD optimization\n7. \u23ed\ufe0f ",(0,i.jsx)(n.strong,{children:"S3/MinIO"})," (Score: 85) - Claim Check pattern support\n8. \u23ed\ufe0f ",(0,i.jsx)(n.strong,{children:"ClickHouse"})," (Score: 70) - Analytics and observability"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Key Takeaways:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Start with MemStore"}),": Zero external dependencies, establishes plugin patterns"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prioritize internal needs"}),": Kafka, NATS, PostgreSQL, Neptune are production-critical"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Use testcontainers"}),": For all backends except MemStore (in-process) and SQLite (embedded)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Build acceptance tests"}),": Alongside plugin implementation using RFC-015 framework"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Validate patterns early"}),": MemStore enables immediate pattern validation without infrastructure"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Phase external backends"}),": Redis, SQLite, S3, ClickHouse after internal needs satisfied"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-015-plugin-acceptance-test-framework",children:"RFC-015: Plugin Acceptance Test Framework"})," - Testing framework referenced throughout"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/adr/adr-004-local-first-testing",children:"ADR-004: Local-First Testing"})," - Testing philosophy"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"/rfc/rfc-008-proxy-plugin-architecture",children:"RFC-008: Proxy Plugin Architecture"})," - Plugin interface design"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,i.jsx)(n.h3,{id:"go-sdk-documentation",children:"Go SDK Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/redis/go-redis",children:"go-redis"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/jackc/pgx",children:"pgx PostgreSQL driver"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/nats-io/nats.go",children:"NATS Go client"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/segmentio/kafka-go",children:"segmentio/kafka-go"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/testcontainers/testcontainers-go",children:"testcontainers-go"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"backend-documentation",children:"Backend Documentation"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://redis.io/docs/",children:"Redis Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://www.postgresql.org/docs/",children:"PostgreSQL Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.nats.io/",children:"NATS Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://kafka.apache.org/documentation/",children:"Apache Kafka Documentation"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://docs.aws.amazon.com/neptune/",children:"AWS Neptune Documentation"})}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["2025-10-10: ",(0,i.jsx)(n.strong,{children:"Implementation Update"})," - Documented architecture refactoring (drivers vs patterns), interface metadata system, SDK pattern for drivers, and interface-based acceptance testing"]}),"\n",(0,i.jsx)(n.li,{children:"2025-10-09: Re-prioritized backends based on internal needs (Kafka, NATS, Neptune, PostgreSQL first); added MemStore in-memory plugin as simplest reference implementation"}),"\n",(0,i.jsx)(n.li,{children:"2025-10-09: Initial draft with backend comparison matrix, implementability scoring, and demo plugin configurations"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"implementation-learnings-2025-10-10",children:"Implementation Learnings (2025-10-10)"}),"\n",(0,i.jsx)(n.h3,{id:"architecture-refactoring-drivers-vs-patterns",children:"Architecture Refactoring: Drivers vs Patterns"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": Initial implementation conflated backend drivers (Redis, Postgres) with patterns (KeyValue, PubSub)."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Solution"}),": Established clear separation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Backends (Redis, PostgreSQL, Kafka)\n    \u2193\nBackend Drivers (drivers/redis, drivers/postgres)\n    \u2193\nPatterns (patterns/keyvalue, patterns/pubsub)\n    \u2193\nApplications (client code)\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Directory Structure"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"drivers/memstore/"})," - In-memory driver (moved from patterns/memstore)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"drivers/redis/"})," - Redis driver (moved from patterns/redis)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"patterns/keyvalue/"})," - KeyValue pattern that wraps backend drivers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"patterns/pubsub/"})," - PubSub pattern that wraps NATS/Kafka drivers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"patterns/stream/"})," - Stream pattern that wraps Kafka driver"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Insight"}),": Patterns are ",(0,i.jsx)(n.strong,{children:"client-facing abstractions"}),". Drivers are ",(0,i.jsx)(n.strong,{children:"backend-specific implementations"}),". One pattern can use multiple driver backends."]}),"\n",(0,i.jsx)(n.h3,{id:"backend-interface-metadata-system",children:"Backend Interface Metadata System"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Implemented"}),": ",(0,i.jsx)(n.code,{children:"patterns/core/interfaces.go"})," - Declarative metadata for pattern slot matching"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"45 Backend Interface Constants"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// KeyValue interfaces (6)\nInterfaceKeyValueBasic         // Set, Get, Delete, Exists\nInterfaceKeyValueScan          // Scan, ScanKeys, Count\nInterfaceKeyValueTTL           // Expire, GetTTL, Persist\nInterfaceKeyValueTransactional // BeginTx, Commit, Rollback\nInterfaceKeyValueBatch         // BatchSet, BatchGet, BatchDelete\nInterfaceKeyValueCAS           // CompareAndSwap\n\n// PubSub interfaces (5)\nInterfacePubSubBasic           // Publish, Subscribe, Unsubscribe\nInterfacePubSubWildcards       // Pattern subscriptions\nInterfacePubSubPersistent      // Durable messages with offsets\nInterfacePubSubFiltering       // Server-side filtering\nInterfacePubSubOrdering        // Message ordering guarantees\n\n// Stream interfaces (5)\nInterfaceStreamBasic           // Append, Read, GetLatestOffset\nInterfaceStreamConsumerGroups  // CreateGroup, Join, Ack\nInterfaceStreamReplay          // SeekToOffset, SeekToTimestamp\nInterfaceStreamRetention       // SetRetention, Compact\nInterfaceStreamPartitioning    // GetPartitions, AppendToPartition\n\n// ...and 29 more across Queue, List, Set, SortedSet, TimeSeries, Graph, Document\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Driver Metadata Example"})," (MemStore):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func (m *MemStore) Metadata() *core.BackendInterfaceMetadata {\n    return &core.BackendInterfaceMetadata{\n        DriverName: "memstore",\n        Version:    "0.1.0",\n        Interfaces: []core.BackendInterface{\n            core.InterfaceKeyValueBasic,  // Set, Get, Delete, Exists\n            core.InterfaceKeyValueTTL,    // TTL support\n        },\n        Description:            "In-memory Go map for local testing",\n        ConnectionStringFormat: "mem://local",\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Driver Metadata Example"})," (Redis - 24 interfaces!):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func (r *RedisPattern) Metadata() *core.BackendInterfaceMetadata {\n    return &core.BackendInterfaceMetadata{\n        DriverName: "redis",\n        Version:    "0.1.0",\n        Interfaces: []core.BackendInterface{\n            // KeyValue (5 of 6)\n            core.InterfaceKeyValueBasic, core.InterfaceKeyValueScan,\n            core.InterfaceKeyValueTTL, core.InterfaceKeyValueTransactional,\n            core.InterfaceKeyValueBatch,\n\n            // PubSub (2 of 5)\n            core.InterfacePubSubBasic, core.InterfacePubSubWildcards,\n\n            // Stream (4 of 5)\n            core.InterfaceStreamBasic, core.InterfaceStreamConsumerGroups,\n            core.InterfaceStreamReplay, core.InterfaceStreamRetention,\n\n            // List (4 of 4)\n            core.InterfaceListBasic, core.InterfaceListIndexing,\n            core.InterfaceListRange, core.InterfaceListBlocking,\n\n            // Set (4 of 4)\n            core.InterfaceSetBasic, core.InterfaceSetOperations,\n            core.InterfaceSetCardinality, core.InterfaceSetRandom,\n\n            // SortedSet (5 of 5)\n            core.InterfaceSortedSetBasic, core.InterfaceSortedSetRange,\n            core.InterfaceSortedSetRank, core.InterfaceSortedSetOperations,\n            core.InterfaceSortedSetLex,\n        },\n        Description:            "In-memory data structure store with persistence",\n        ConnectionStringFormat: "redis://host:port/db or rediss://host:port/db (TLS)",\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Usage"}),": At configuration time, patterns can query driver metadata to match requirements:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Pattern requires these interfaces for a slot\nrequired := []core.BackendInterface{\n    core.InterfaceKeyValueBasic,\n    core.InterfaceKeyValueTTL,\n}\n\n// Check if driver implements all required interfaces\ndriver := memstore.New()\nmetadata := driver.Metadata()\nif metadata.ImplementsAll(required) {\n    // Driver is suitable for this pattern slot\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"sdk-pattern-for-backend-drivers",children:"SDK Pattern for Backend Drivers"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Implemented"}),": ",(0,i.jsx)(n.code,{children:"patterns/core/serve.go"})," - ",(0,i.jsx)(n.code,{children:"ServeBackendDriver()"})," function"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Before"})," (65 lines of boilerplate in every driver):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func main() {\n    configPath := flag.String("config", "config.yaml", ...)\n    grpcPort := flag.Int("grpc-port", 0, ...)\n    flag.Parse()\n\n    logger := slog.New(slog.NewJSONHandler(os.Stdout, ...))\n    slog.SetDefault(logger)\n\n    config, err := core.LoadConfig(*configPath)\n    if err != nil {\n        // Create default config...\n    }\n\n    if *grpcPort != 0 {\n        config.ControlPlane.Port = *grpcPort\n    }\n\n    plugin := memstore.New()\n\n    if err := core.BootstrapWithConfig(plugin, config); err != nil {\n        log.Fatal(err)\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"After"})," (25 lines with SDK pattern):"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'func main() {\n    core.ServeBackendDriver(func() core.Plugin {\n        return memstore.New()\n    }, core.ServeOptions{\n        DefaultName:    "memstore",\n        DefaultVersion: "0.1.0",\n        DefaultPort:    0, // Dynamic port allocation\n        ConfigPath:     "config.yaml",\n    })\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"SDK Handles"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Flag parsing (--config, --grpc-port, --debug)"}),"\n",(0,i.jsx)(n.li,{children:"Logging setup (structured JSON logging)"}),"\n",(0,i.jsx)(n.li,{children:"Config loading with defaults"}),"\n",(0,i.jsx)(n.li,{children:"Dynamic port allocation (0 = OS assigns available port)"}),"\n",(0,i.jsx)(n.li,{children:"Driver lifecycle (Initialize \u2192 Start \u2192 Stop)"}),"\n",(0,i.jsx)(n.li,{children:"Error handling and logging"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Result"}),": Reduced driver main.go from 65 lines to 25 lines (62% reduction). All common logic moved to SDK."]}),"\n",(0,i.jsx)(n.h3,{id:"interface-based-acceptance-testing",children:"Interface-Based Acceptance Testing"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Implemented"}),": ",(0,i.jsx)(n.code,{children:"tests/acceptance/interfaces/"})," - Test interfaces across multiple backends"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Structure"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'// tests/acceptance/interfaces/keyvalue_basic_test.go\n\n// Define interface being tested\ntype KeyValueBasicDriver interface {\n    Set(key string, value []byte, ttlSeconds int64) error\n    Get(key string) ([]byte, bool, error)\n    Delete(key string) error\n    Exists(key string) (bool, error)\n}\n\n// Backend driver setup table\nbackendDrivers := []BackendDriverSetup{\n    {\n        Name:         "Redis",\n        SetupFunc:    setupRedisDriver,  // Uses testcontainers\n        SupportsTTL:  true,\n        SupportsScan: true,\n    },\n    {\n        Name:         "MemStore",\n        SetupFunc:    setupMemStoreDriver,  // In-process, no container\n        SupportsTTL:  true,\n        SupportsScan: false,  // Intentionally minimal\n    },\n    // Add PostgreSQL, DynamoDB, etcd here...\n}\n\n// Single test runs against ALL backends\nfor _, backend := range backendDrivers {\n    t.Run(backend.Name, func(t *testing.T) {\n        driver, cleanup := backend.SetupFunc(t, ctx)\n        defer cleanup()\n\n        // Test Set/Get\n        err := driver.Set("test-key", []byte("test-value"), 0)\n        require.NoError(t, err)\n\n        value, found, err := driver.Get("test-key")\n        require.NoError(t, err)\n        assert.True(t, found)\n        assert.Equal(t, "test-value", string(value))\n    })\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Benefits"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Single test suite"})," validates multiple backend drivers"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Easy to add new backends"}),": 3 lines of code in table"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Interface compliance verification"}),": Ensures drivers implement contracts correctly"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Consistent behavior"}),": Same assertions across all backends"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Test Files"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyvalue_basic_test.go"})," - Tests KeyValue basic operations (Set, Get, Delete, Exists)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"keyvalue_ttl_test.go"})," - Tests TTL expiration (only runs on TTL-supporting backends)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Insight"}),": Test the ",(0,i.jsx)(n.strong,{children:"interface"})," (KeyValue), not the backend (Redis). Backends are interchangeable implementations."]}),"\n",(0,i.jsx)(n.h3,{id:"updated-terminology-memo-006-alignment",children:"Updated Terminology (MEMO-006 Alignment)"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Documented in"}),": ",(0,i.jsx)(n.code,{children:"patterns/core/plugin.go"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"// Plugin represents a backend driver lifecycle.\n//\n// TERMINOLOGY (from MEMO-006):\n// - Backend: The actual storage/messaging system (Redis, PostgreSQL, Kafka, NATS, etc.)\n// - Backend Driver: The Go implementation that interfaces with a backend (this interface)\n// - Pattern: The data access pattern being implemented (KeyValue, PubSub, Stream, etc.)\n// - Interface: Thin proto service definitions (keyvalue_basic, keyvalue_ttl, pubsub_basic, etc.)\n//\n// A Backend Driver (Plugin):\n// - Connects to a specific Backend (e.g., Redis, PostgreSQL)\n// - Implements one or more Patterns (e.g., KeyValue, PubSub)\n// - Supports multiple Interfaces within those patterns (e.g., keyvalue_basic + keyvalue_ttl)\n//\n// Example: The Redis backend driver implements:\n// - KeyValue pattern (keyvalue_basic, keyvalue_scan, keyvalue_ttl interfaces)\n// - PubSub pattern (pubsub_basic, pubsub_wildcards interfaces)\n// - Stream pattern (stream_basic, stream_consumer_groups interfaces)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"implementation-status",children:"Implementation Status"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Completed"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"\u2705 MemStore driver with metadata (drivers/memstore/)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Redis driver with metadata (drivers/redis/)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 KeyValue pattern (patterns/keyvalue/)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Backend interface metadata system (patterns/core/interfaces.go)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 SDK pattern for drivers (patterns/core/serve.go)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Interface-based acceptance tests (tests/acceptance/interfaces/)"}),"\n",(0,i.jsx)(n.li,{children:"\u2705 Both drivers compile and build successfully"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Next Steps"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Create PostgreSQL driver (drivers/postgres/)"}),"\n",(0,i.jsx)(n.li,{children:"Create Meilisearch driver for search (drivers/meilisearch/)"}),"\n",(0,i.jsx)(n.li,{children:"Create PubSub pattern (patterns/pubsub/) using NATS driver"}),"\n",(0,i.jsx)(n.li,{children:"Create Stream pattern (patterns/stream/) using Kafka driver"}),"\n",(0,i.jsx)(n.li,{children:"Add more interface-based tests (batch, scan, transactional)"}),"\n",(0,i.jsx)(n.li,{children:"Run full acceptance test suite"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);