"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[2418],{28453:(n,e,i)=>{i.d(e,{R:()=>s,x:()=>a});var r=i(96540);const o={},t=r.createContext(o);function s(n){const e=r.useContext(t);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:s(n.components),r.createElement(t.Provider,{value:e},n.children)}},48128:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>g,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"adr-016","title":"Go CLI and Configuration Management","description":"Context","source":"@site/../docs-cms/adr/adr-016-go-cli-configuration.md","sourceDirName":".","slug":"/adr-016","permalink":"/prism-data-layer/adr/adr-016","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-016-go-cli-configuration.md","tags":[{"inline":true,"label":"go","permalink":"/prism-data-layer/adr/tags/go"},{"inline":true,"label":"cli","permalink":"/prism-data-layer/adr/tags/cli"},{"inline":true,"label":"configuration","permalink":"/prism-data-layer/adr/tags/configuration"},{"inline":true,"label":"developer-experience","permalink":"/prism-data-layer/adr/tags/developer-experience"}],"version":"current","frontMatter":{"date":"2025-10-07T00:00:00.000Z","deciders":"Core Team","doc_uuid":"8ed62180-e611-4bd2-ae58-e1df2464dccc","id":"adr-016","project_id":"prism-data-layer","status":"Accepted","tags":["go","cli","configuration","developer-experience"],"title":"Go CLI and Configuration Management"},"sidebar":"adrSidebar","previous":{"title":"Go Testing Strategy \u2022 ADR-015","permalink":"/prism-data-layer/adr/adr-015"},"next":{"title":"Go Structured Logging with slog \u2022 ADR-017","permalink":"/prism-data-layer/adr/adr-017"}}');var o=i(74848),t=i(28453);const s={date:new Date("2025-10-07T00:00:00.000Z"),deciders:"Core Team",doc_uuid:"8ed62180-e611-4bd2-ae58-e1df2464dccc",id:"adr-016",project_id:"prism-data-layer",status:"Accepted",tags:["go","cli","configuration","developer-experience"],title:"Go CLI and Configuration Management"},a=void 0,l={},c=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Cobra (CLI Framework)",id:"cobra-cli-framework",level:3},{value:"Viper (Configuration Management)",id:"viper-configuration-management",level:3},{value:"Configuration Hierarchy (highest to lowest precedence)",id:"configuration-hierarchy-highest-to-lowest-precedence",level:3},{value:"Configuration Schema",id:"configuration-schema",level:2},{value:"CLI Structure",id:"cli-structure",level:2},{value:"prism-cli",id:"prism-cli",level:3},{value:"prism-migrate",id:"prism-migrate",level:3},{value:"prism-bench",id:"prism-bench",level:3},{value:"Examples",id:"examples",level:2},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Dependencies",id:"dependencies",level:3},{value:"Package Structure",id:"package-structure",level:3}];function d(n){const e={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"context",children:"Context"}),"\n",(0,o.jsx)(e.p,{children:"Prism Go tooling requires robust CLI interfaces with:"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Subcommands for different operations"}),"\n",(0,o.jsx)(e.li,{children:"Configuration file support"}),"\n",(0,o.jsx)(e.li,{children:"Environment variable overrides"}),"\n",(0,o.jsx)(e.li,{children:"Flag parsing with validation"}),"\n",(0,o.jsx)(e.li,{children:"Consistent UX across tools"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"decision",children:"Decision"}),"\n",(0,o.jsxs)(e.p,{children:["Use ",(0,o.jsx)(e.strong,{children:"Cobra"})," for CLI structure and ",(0,o.jsx)(e.strong,{children:"Viper"})," for configuration management."]}),"\n",(0,o.jsx)(e.h2,{id:"rationale",children:"Rationale"}),"\n",(0,o.jsx)(e.h3,{id:"cobra-cli-framework",children:"Cobra (CLI Framework)"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Industry Standard"}),": Used by Kubernetes, Hugo, GitHub CLI, Docker CLI"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Rich Features"}),": Subcommands, flags, aliases, help generation"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"POSIX Compliance"}),": Follows standard CLI conventions"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Code Generation"}),": ",(0,o.jsx)(e.code,{children:"cobra-cli"})," scaffolds command structure"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Testing Support"}),": Commands are testable units"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"viper-configuration-management",children:"Viper (Configuration Management)"}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Layered Configuration"}),": Flags > Env > Config File > Defaults"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Multiple Formats"}),": YAML, JSON, TOML"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Environment Binding"}),": Automatic env var mapping"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Seamless Cobra Integration"}),": Built to work together"]}),"\n"]}),"\n",(0,o.jsx)(e.h3,{id:"configuration-hierarchy-highest-to-lowest-precedence",children:"Configuration Hierarchy (highest to lowest precedence)"}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["CLI flags: ",(0,o.jsx)(e.code,{children:"--namespace test --backend postgres"})]}),"\n",(0,o.jsxs)(e.li,{children:["Environment variables: ",(0,o.jsx)(e.code,{children:"PRISM_NAMESPACE=test PRISM_BACKEND=postgres"})]}),"\n",(0,o.jsxs)(e.li,{children:["Config file: ",(0,o.jsx)(e.code,{children:"~/.prism.yaml"})," or ",(0,o.jsx)(e.code,{children:"./prism.yaml"})]}),"\n",(0,o.jsx)(e.li,{children:"Defaults: Sensible fallbacks"}),"\n"]}),"\n",(0,o.jsx)(e.h2,{id:"configuration-schema",children:"Configuration Schema"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-yaml",children:"# prism.yaml\nproxy:\n  endpoint: localhost:8980\n  timeout: 30s\n\nlogging:\n  level: info  # debug, info, warn, error\n  format: json  # json, text\n\nmigrate:\n  batch_size: 1000\n  workers: 4\n"})}),"\n",(0,o.jsx)(e.h2,{id:"cli-structure",children:"CLI Structure"}),"\n",(0,o.jsx)(e.h3,{id:"prism-cli",children:"prism-cli"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"prism-cli [command] [flags]\n\nCommands:\n  get        Get a value from Prism\n  put        Put a value into Prism\n  delete     Delete a value from Prism\n  scan       Scan values in a namespace\n  config     Show resolved configuration\n\nGlobal Flags:\n  -c, --config string      Config file (default: ~/.prism.yaml)\n  -e, --endpoint string    Prism proxy endpoint (default: localhost:8980)\n      --log-level string   Log level: debug, info, warn, error\n      --log-format string  Log format: json, text\n"})}),"\n",(0,o.jsx)(e.h3,{id:"prism-migrate",children:"prism-migrate"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"prism-migrate [command] [flags]\n\nCommands:\n  run        Run data migration\n  validate   Validate migration configuration\n  status     Show migration status\n\nFlags:\n  --source string        Source connection string\n  --dest string          Destination connection string\n  --batch-size int       Batch size (default: 1000)\n  --workers int          Concurrent workers (default: NumCPU)\n  --dry-run              Validate without migrating\n"})}),"\n",(0,o.jsx)(e.h3,{id:"prism-bench",children:"prism-bench"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:"prism-bench [command] [flags]\n\nCommands:\n  load       Run load test\n  report     Generate report from results\n\nFlags:\n  --duration duration    Test duration (default: 1m)\n  --rps int             Target requests per second\n  --workers int         Concurrent workers\n  --pattern string      Access pattern: random, sequential\n"})}),"\n",(0,o.jsx)(e.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-bash",children:'# Get a value\nprism-cli get test user123 profile\n\n# Put a value\nprism-cli put test user123 profile \'{"name":"Alice"}\'\n\n# Scan namespace\nprism-cli scan test user123\n\n# Show configuration\nprism-cli config\n\n# Run migration\nprism-migrate run \\\n  --source postgres://localhost/old \\\n  --dest postgres://localhost/new \\\n  --workers 8\n\n# Load test\nprism-bench load --duration 5m --rps 10000\n'})}),"\n",(0,o.jsx)(e.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,o.jsx)(e.h3,{id:"dependencies",children:"Dependencies"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-go",children:"require (\n    github.com/spf13/cobra v1.8.1\n    github.com/spf13/viper v1.19.0\n)\n"})}),"\n",(0,o.jsx)(e.h3,{id:"package-structure",children:"Package Structure"}),"\n",(0,o.jsx)(e.p,{children:"tools/\n\u251c\u2500\u2500 cmd/\n\u2502   \u251c\u2500\u2500 prism-cli/\n\u2502   \u2502   \u251c\u2500\u2500 main.go        # Entry point\n\u2502   \u2502   \u251c\u2500\u2500 root.go        # Root command\n\u2502   \u2502   \u251c\u2500\u2500 get.go         # Get subcommand\n\u2502   \u2502   \u251c\u2500\u2500 put.go         # Put subcommand\n\u2502   \u2502   \u2514\u2500\u2500 config.go      # Config subcommand\n\u2502   \u251c\u2500\u2500 prism-migrate/\n\u2502   \u2502   \u251c\u2500\u2500 main.go\n\u2502   \u2502   \u251c\u2500\u2500 root.go\n\u2502   \u2502   \u2514\u2500\u2500 run.go\n\u2502   \u2514\u2500\u2500 prism-bench/\n\u2502       \u251c\u2500\u2500 main.go\n\u2502       \u251c\u2500\u2500 root.go\n\u2502       \u2514\u2500\u2500 load.go\n\u251c\u2500\u2500 internal/\n\u2502   \u2514\u2500\u2500 config/\n\u2502       \u251c\u2500\u2500 config.go      # Config types\n\u2502       \u2514\u2500\u2500 loader.go      # Viper integration"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-text",children:"\n### Example Implementation\n\n"})}),"\n",(0,o.jsx)(e.p,{children:"// cmd/prism-cli/root.go\npackage main"}),"\n",(0,o.jsx)(e.p,{children:'import (\n"log/slog"\n"os"'}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'"github.com/spf13/cobra"\n"github.com/spf13/viper"\n'})}),"\n",(0,o.jsx)(e.p,{children:")"}),"\n",(0,o.jsx)(e.p,{children:'var rootCmd = &cobra.Command{\nUse:   "prism-cli",\nShort: "Prism command-line interface",\nPersistentPreRun: func(cmd *cobra.Command, args []string) {\n// Initialize logging\ninitLogging()\n},\n}'}),"\n",(0,o.jsx)(e.p,{children:"func init() {\ncobra.OnInitialize(initConfig)"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'rootCmd.PersistentFlags().StringP("config", "c", "", "config file (default: ~/.prism.yaml)")\nrootCmd.PersistentFlags().StringP("endpoint", "e", "localhost:8980", "Prism proxy endpoint")\nrootCmd.PersistentFlags().String("log-level", "info", "log level (debug, info, warn, error)")\nrootCmd.PersistentFlags().String("log-format", "json", "log format (json, text)")\n\nviper.BindPFlag("proxy.endpoint", rootCmd.PersistentFlags().Lookup("endpoint"))\nviper.BindPFlag("logging.level", rootCmd.PersistentFlags().Lookup("log-level"))\nviper.BindPFlag("logging.format", rootCmd.PersistentFlags().Lookup("log-format"))\n'})}),"\n",(0,o.jsx)(e.p,{children:"}"}),"\n",(0,o.jsx)(e.p,{children:'func initConfig() {\nif cfgFile := rootCmd.PersistentFlags().Lookup("config").Value.String(); cfgFile != "" {\nviper.SetConfigFile(cfgFile)\n} else {\nhome, _ := os.UserHomeDir()\nviper.AddConfigPath(home)\nviper.AddConfigPath(".")\nviper.SetConfigName(".prism")\nviper.SetConfigType("yaml")\n}'}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:'viper.SetEnvPrefix("PRISM")\nviper.AutomaticEnv()\n\nviper.ReadInConfig()\n'})}),"\n",(0,o.jsx)(e.p,{children:"}"}),"\n",(0,o.jsx)(e.p,{children:'func main() {\nif err := rootCmd.Execute(); err != nil {\nslog.Error("command failed", "error", err)\nos.Exit(1)\n}\n}'}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-text",children:"\n## Consequences\n\n### Positive\n\n- Industry-standard tools with large communities\n- Rich feature set without custom implementation\n- Excellent documentation and examples\n- Clear configuration precedence\n- Easy testing\n\n### Negative\n\n- Two dependencies (but they work together seamlessly)\n- Learning curve for contributors\n\n### Neutral\n\n- Config file watching not needed for CLI tools (useful for daemons)\n\n## References\n\n- [Cobra Documentation](https://github.com/spf13/cobra)\n- [Viper Documentation](https://github.com/spf13/viper)\n- [12-Factor App Config](https://12factor.net/config)\n- ADR-012: Go for Tooling\n- org-stream-producer ADR-010: Command-Line Configuration\n\n## Revision History\n\n- 2025-10-07: Initial draft and acceptance (adapted from org-stream-producer)\n\n"})})]})}function g(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}}}]);