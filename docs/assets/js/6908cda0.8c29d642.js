"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[9066],{28453:(e,s,n)=>{n.d(s,{R:()=>o,x:()=>l});var i=n(96540);const t={},r=i.createContext(t);function o(e){const s=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(r.Provider,{value:s},e.children)}},77728:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"rfc-024","title":"Distributed Session Store Pattern - Cross-Region Session Management","description":"Summary","source":"@site/../docs-cms/rfcs/rfc-024-distributed-session-store-pattern.md","sourceDirName":".","slug":"/rfc-024","permalink":"/prism-data-layer/rfc/rfc-024","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/rfcs/rfc-024-distributed-session-store-pattern.md","tags":[{"inline":true,"label":"session","permalink":"/prism-data-layer/rfc/tags/session"},{"inline":true,"label":"distributed","permalink":"/prism-data-layer/rfc/tags/distributed"},{"inline":true,"label":"cross-region","permalink":"/prism-data-layer/rfc/tags/cross-region"},{"inline":true,"label":"replication","permalink":"/prism-data-layer/rfc/tags/replication"},{"inline":true,"label":"patterns","permalink":"/prism-data-layer/rfc/tags/patterns"},{"inline":true,"label":"architecture","permalink":"/prism-data-layer/rfc/tags/architecture"}],"version":"current","frontMatter":{"author":"Platform Team","created":"2025-10-09T00:00:00.000Z","doc_uuid":"67abcf27-6bc9-4c63-abdf-3c30b996fba6","id":"rfc-024","project_id":"prism-data-layer","status":"Proposed","tags":["session","distributed","cross-region","replication","patterns","architecture"],"title":"Distributed Session Store Pattern - Cross-Region Session Management","updated":"2025-10-09T00:00:00.000Z"},"sidebar":"rfcSidebar","previous":{"title":"Publish Snapshotter Plugin - Write-Only Event Buffering with Pagination \u2022 RFC-023","permalink":"/prism-data-layer/rfc/rfc-023"},"next":{"title":"Pattern SDK Architecture - Backend Drivers and Concurrency Primitives \u2022 RFC-025","permalink":"/prism-data-layer/rfc/rfc-025"}}');var t=n(74848),r=n(28453);const o={author:"Platform Team",created:new Date("2025-10-09T00:00:00.000Z"),doc_uuid:"67abcf27-6bc9-4c63-abdf-3c30b996fba6",id:"rfc-024",project_id:"prism-data-layer",status:"Proposed",tags:["session","distributed","cross-region","replication","patterns","architecture"],title:"Distributed Session Store Pattern - Cross-Region Session Management",updated:new Date("2025-10-09T00:00:00.000Z")},l="RFC-024: Distributed Session Store Pattern",a={},c=[{value:"Summary",id:"summary",level:2},{value:"Motivation",id:"motivation",level:2},{value:"Problem: Stateless Proxy Limits Session-Aware Applications",id:"problem-stateless-proxy-limits-session-aware-applications",level:3},{value:"Use Cases",id:"use-cases",level:3},{value:"1. Cross-Region User Mobility",id:"1-cross-region-user-mobility",level:4},{value:"2. Multi-Request Workflows",id:"2-multi-request-workflows",level:4},{value:"3. Session-Scoped Backend Connections",id:"3-session-scoped-backend-connections",level:4},{value:"4. Collaborative Editing / Real-Time Applications",id:"4-collaborative-editing--real-time-applications",level:4},{value:"Design Principles",id:"design-principles",level:2},{value:"1. Region-Local Reads, Global Writes",id:"1-region-local-reads-global-writes",level:3},{value:"2. Proto-Typed Session Data",id:"2-proto-typed-session-data",level:3},{value:"3. Pluggable Replication Strategies",id:"3-pluggable-replication-strategies",level:3},{value:"4. Session Lifecycle Management",id:"4-session-lifecycle-management",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Component Diagram",id:"component-diagram",level:3},{value:"Request Flow with Session Store",id:"request-flow-with-session-store",level:3},{value:"API Design",id:"api-design",level:2},{value:"Session Store Service (gRPC)",id:"session-store-service-grpc",level:3},{value:"Client Usage Examples",id:"client-usage-examples",level:3},{value:"Python Client",id:"python-client",level:4},{value:"Go Client",id:"go-client",level:4},{value:"Backend Plugin Implementation",id:"backend-plugin-implementation",level:2},{value:"Redis Cluster Backend",id:"redis-cluster-backend",level:3},{value:"PostgreSQL + pglogical Backend",id:"postgresql--pglogical-backend",level:3},{value:"Cross-Region Replication Strategies",id:"cross-region-replication-strategies",level:2},{value:"Strategy 1: Active-Passive (Leader-Follower)",id:"strategy-1-active-passive-leader-follower",level:3},{value:"Strategy 2: Multi-Primary (Active-Active)",id:"strategy-2-multi-primary-active-active",level:3},{value:"Strategy 3: Regional Partitioning",id:"strategy-3-regional-partitioning",level:3},{value:"Sharding and Work Distribution",id:"sharding-and-work-distribution",level:2},{value:"Problem: Single Session Store Bottleneck",id:"problem-single-session-store-bottleneck",level:3},{value:"Solution: Consistent Hashing for Sharding",id:"solution-consistent-hashing-for-sharding",level:3},{value:"Session Affinity vs Session Mobility",id:"session-affinity-vs-session-mobility",level:3},{value:"Performance Characteristics",id:"performance-characteristics",level:2},{value:"Latency",id:"latency",level:3},{value:"Throughput",id:"throughput",level:3},{value:"Replication Lag",id:"replication-lag",level:3},{value:"Monitoring and Observability",id:"monitoring-and-observability",level:2},{value:"Metrics",id:"metrics",level:3},{value:"Logging",id:"logging",level:3},{value:"Security Considerations",id:"security-considerations",level:2},{value:"1. Session Hijacking",id:"1-session-hijacking",level:3},{value:"2. Session Data Tampering",id:"2-session-data-tampering",level:3},{value:"3. Cross-Region Data Leakage",id:"3-cross-region-data-leakage",level:3},{value:"Migration Path",id:"migration-path",level:2},{value:"Phase 1: Implement Session Store Backend (Week 1-2)",id:"phase-1-implement-session-store-backend-week-1-2",level:3},{value:"Phase 2: Integrate with Proxy (Week 3)",id:"phase-2-integrate-with-proxy-week-3",level:3},{value:"Phase 3: Cross-Region Replication (Week 4-5)",id:"phase-3-cross-region-replication-week-4-5",level:3},{value:"Phase 4: Production Rollout (Week 6)",id:"phase-4-production-rollout-week-6",level:3},{value:"Open Questions",id:"open-questions",level:2},{value:"1. How to Handle Session Conflicts in Multi-Primary?",id:"1-how-to-handle-session-conflicts-in-multi-primary",level:3},{value:"2. Should Session Store Support Transactions?",id:"2-should-session-store-support-transactions",level:3},{value:"3. How to Clean Up Expired Sessions?",id:"3-how-to-clean-up-expired-sessions",level:3},{value:"Related Documents",id:"related-documents",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const s={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(s.header,{children:(0,t.jsx)(s.h1,{id:"rfc-024-distributed-session-store-pattern",children:"RFC-024: Distributed Session Store Pattern"})}),"\n",(0,t.jsx)(s.h2,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(s.p,{children:["Define a ",(0,t.jsx)(s.strong,{children:"Distributed Session Store"})," pattern that maintains session state (attributes, key-value pairs) across multiple regions and data centers. This pattern enables stateful interactions with Prism while supporting:"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Cross-region session access (user connects to different regions)"}),"\n",(0,t.jsx)(s.li,{children:"Session attribute storage (metadata, preferences, context)"}),"\n",(0,t.jsx)(s.li,{children:"Proto-typed key-value data per session"}),"\n",(0,t.jsx)(s.li,{children:"Eventual consistency with configurable replication strategies"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"motivation",children:"Motivation"}),"\n",(0,t.jsx)(s.h3,{id:"problem-stateless-proxy-limits-session-aware-applications",children:"Problem: Stateless Proxy Limits Session-Aware Applications"}),"\n",(0,t.jsxs)(s.p,{children:["Currently, Prism proxy is ",(0,t.jsx)(s.strong,{children:"stateless"}),": each request is independent, with no session memory."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Challenges this creates"}),":"]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Multi-Request Workflows"}),": Applications must pass all context in every request"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Cross-Region User Mobility"}),": User connects to US region, then switches to EU region - no shared session state"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Large Session Context"}),": Passing 10KB+ of session data on every request wastes bandwidth"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Session-Scoped Caching"}),": No place to cache per-session data (parsed tokens, resolved policies, backend connections)"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Example"}),": Multi-step data pipeline"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-text",children:"# Without session store: Pass full context every request\nRequest 1: Fetch user preferences \u2192 200 OK (prefs: {theme: dark, lang: en})\nRequest 2: Query data + attach prefs \u2192 200 OK (data: [...], need to send prefs again)\nRequest 3: Transform data + attach prefs \u2192 200 OK (transformed: [...], prefs sent again)\n\n# With session store: Store context once, reference session ID\nRequest 1: Create session \u2192 200 OK (session_id: sess-abc123)\nRequest 2: Store prefs in session \u2192 200 OK\nRequest 3: Query data (session_id) \u2192 Proxy retrieves prefs from session store\nRequest 4: Transform data (session_id) \u2192 Proxy retrieves prefs from session store\n"})}),"\n",(0,t.jsx)(s.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,t.jsx)(s.h4,{id:"1-cross-region-user-mobility",children:"1. Cross-Region User Mobility"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Scenario"}),": User starts work in US region, travels to EU, continues work from EU region."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Without Session Store"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"User re-authenticates in EU region"}),"\n",(0,t.jsx)(s.li,{children:"Previous session state (preferences, context) lost"}),"\n",(0,t.jsx)(s.li,{children:"Application must re-fetch all state from backend"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"With Session Store"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Session replicated to EU region (eventual consistency)"}),"\n",(0,t.jsx)(s.li,{children:"User reconnects with same session_id"}),"\n",(0,t.jsx)(s.li,{children:"EU proxy retrieves session state from EU replica"}),"\n",(0,t.jsx)(s.li,{children:"Seamless continuation of work"}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"2-multi-request-workflows",children:"2. Multi-Request Workflows"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Scenario"}),": Data ingestion pipeline with 5 steps, each step requires session context."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Without Session Store"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'# Client must attach context to every request\ncontext = {"user_id": "alice", "workspace": "project-x", "batch_id": "batch-123"}\n\nstep1(context)  # 5KB context sent\nstep2(context)  # 5KB context sent again\nstep3(context)  # 5KB context sent again\nstep4(context)  # 5KB context sent again\nstep5(context)  # 5KB context sent again\n# Total: 25KB bandwidth wasted\n'})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"With Session Store"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:"# Client stores context once\nsession_id = create_session()\nset_session_data(session_id, context)  # 5KB context stored once\n\nstep1(session_id)  # Just 16-byte session ID\nstep2(session_id)  # Just 16-byte session ID\nstep3(session_id)  # Just 16-byte session ID\nstep4(session_id)  # Just 16-byte session ID\nstep5(session_id)  # Just 16-byte session ID\n# Total: 5KB + (5 \xd7 16 bytes) = ~5KB bandwidth\n"})}),"\n",(0,t.jsx)(s.h4,{id:"3-session-scoped-backend-connections",children:"3. Session-Scoped Backend Connections"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Scenario"}),": Plugin establishes expensive backend connection (Vault credentials, database connection pool) per session."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Without Session Store"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Plugin must establish new connection for every request"}),"\n",(0,t.jsx)(s.li,{children:"No way to share connection across requests from same session"}),"\n",(0,t.jsx)(s.li,{children:"Vault token fetched on every request (~50ms latency)"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"With Session Store"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Plugin stores backend connection handle in session store"}),"\n",(0,t.jsx)(s.li,{children:"Subsequent requests reuse connection"}),"\n",(0,t.jsx)(s.li,{children:"Vault token fetched once per session, cached in session store"}),"\n"]}),"\n",(0,t.jsx)(s.h4,{id:"4-collaborative-editing--real-time-applications",children:"4. Collaborative Editing / Real-Time Applications"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Scenario"}),": Multiple users editing shared document, need to track who is active."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"With Session Store"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:["Store active user sessions for document: ",(0,t.jsx)(s.code,{children:"doc-123 \u2192 [sess-alice, sess-bob]"})]}),"\n",(0,t.jsx)(s.li,{children:"When user joins: Add session to document's active sessions"}),"\n",(0,t.jsx)(s.li,{children:"When user disconnects: Remove session from document's active sessions"}),"\n",(0,t.jsx)(s.li,{children:"Cross-region replication ensures all regions see active users"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"design-principles",children:"Design Principles"}),"\n",(0,t.jsx)(s.h3,{id:"1-region-local-reads-global-writes",children:"1. Region-Local Reads, Global Writes"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Session store optimized for"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Fast local reads"}),": Proxy reads from local replica (<1ms P99)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Asynchronous writes"}),": Write to local replica, replicate to other regions (eventual consistency)"]}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                 Global Session Store                         \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502  \u2502 US Region    \u2502       \u2502 EU Region    \u2502     \u2502 APAC Region\u2502\u2502\n\u2502  \u2502 (Primary)    \u2502\u2500\u2500\u2500\u2500\u2500\u2500\u25b6\u2502 (Replica)    \u2502\u2500\u2500\u2500\u2500\u25b6\u2502 (Replica)  \u2502\u2502\n\u2502  \u2502              \u2502       \u2502              \u2502     \u2502            \u2502\u2502\n\u2502  \u2502 sess-abc123: \u2502       \u2502 sess-abc123: \u2502     \u2502 sess-abc123\u2502\u2502\n\u2502  \u2502 {            \u2502       \u2502 {            \u2502     \u2502 {          \u2502\u2502\n\u2502  \u2502   user: alice\u2502       \u2502   user: alice\u2502     \u2502   user: ... \u2502\u2502\n\u2502  \u2502   prefs: {...\u2502       \u2502   prefs: {...\u2502     \u2502            \u2502\u2502\n\u2502  \u2502 }            \u2502       \u2502 }            \u2502     \u2502            \u2502\u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2502         \u2502                       \u25b2                    \u25b2       \u2502\n\u2502         \u2502                       \u2502                    \u2502       \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502                   Replication Stream                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(s.h3,{id:"2-proto-typed-session-data",children:"2. Proto-Typed Session Data"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Session store supports structured data"})," using protobuf:"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-protobuf",children:"message SessionData {\n  string session_id = 1;\n\n  // Session metadata\n  SessionMetadata metadata = 2;\n\n  // Key-value storage (proto Any type for flexibility)\n  map<string, google.protobuf.Any> data = 3;\n\n  // Session lifecycle\n  google.protobuf.Timestamp created_at = 4;\n  google.protobuf.Timestamp last_accessed = 5;\n  google.protobuf.Timestamp expires_at = 6;\n}\n\nmessage SessionMetadata {\n  string user_id = 1;\n  string region = 2;  // Where session was created\n  string client_id = 3;\n  map<string, string> attributes = 4;  // Unstructured metadata\n}\n"})}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Why protobuf?"})}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Type safety: Client and proxy agree on data structure"}),"\n",(0,t.jsx)(s.li,{children:"Versioning: Forward/backward compatibility via protobuf field evolution"}),"\n",(0,t.jsx)(s.li,{children:"Efficient encoding: Smaller payloads than JSON (30-50% reduction)"}),"\n",(0,t.jsx)(s.li,{children:"Language-agnostic: Works with Go, Python, Rust, Java clients"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"3-pluggable-replication-strategies",children:"3. Pluggable Replication Strategies"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Session store pattern is backend-agnostic"}),":"]}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Backend"}),(0,t.jsx)(s.th,{children:"Replication Strategy"}),(0,t.jsx)(s.th,{children:"Consistency"}),(0,t.jsx)(s.th,{children:"Use Case"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Redis Cluster"})}),(0,t.jsx)(s.td,{children:"Hash slot sharding"}),(0,t.jsx)(s.td,{children:"Eventual"}),(0,t.jsx)(s.td,{children:"Low latency, high throughput"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"PostgreSQL + pglogical"})}),(0,t.jsx)(s.td,{children:"Logical replication"}),(0,t.jsx)(s.td,{children:"Strong (sync)"}),(0,t.jsx)(s.td,{children:"Strong consistency required"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"DynamoDB Global Tables"})}),(0,t.jsx)(s.td,{children:"Multi-region replication"}),(0,t.jsx)(s.td,{children:"Eventual"}),(0,t.jsx)(s.td,{children:"AWS-native, auto-scaling"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"CockroachDB"})}),(0,t.jsx)(s.td,{children:"Raft consensus"}),(0,t.jsx)(s.td,{children:"Serializable"}),(0,t.jsx)(s.td,{children:"Global distributed SQL"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:(0,t.jsx)(s.strong,{children:"Cassandra"})}),(0,t.jsx)(s.td,{children:"Multi-datacenter replication"}),(0,t.jsx)(s.td,{children:"Tunable"}),(0,t.jsx)(s.td,{children:"Massive scale, tunable consistency"})]})]})]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Configuration"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",children:"session_store:\n  backend: redis-cluster\n  replication:\n    strategy: eventual\n    regions: [us-west-2, eu-central-1, ap-southeast-1]\n    sync_interval: 100ms\n\n  ttl: 86400  # 24 hours\n  max_size: 1MB  # Per session\n"})}),"\n",(0,t.jsx)(s.h3,{id:"4-session-lifecycle-management",children:"4. Session Lifecycle Management"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Sessions have expiration"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"TTL-based expiration"}),": Session expires after inactivity (default: 24h)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Explicit deletion"}),": Client can delete session"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Automatic cleanup"}),": Background job removes expired sessions from all replicas"]}),"\n"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-text",children:"Session Lifecycle:\n\n1. Create    \u2192 session_id assigned, metadata stored, TTL set\n2. Access    \u2192 last_accessed updated, TTL extended (sliding window)\n3. Update    \u2192 data modified, change replicated to other regions\n4. Expire    \u2192 TTL reached, session marked for deletion\n5. Cleanup   \u2192 Background job removes from all replicas\n"})}),"\n",(0,t.jsx)(s.h2,{id:"architecture",children:"Architecture"}),"\n",(0,t.jsx)(s.h3,{id:"component-diagram",children:"Component Diagram"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                        Client Application                    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u2502\n                         \u2502 gRPC (session_id in metadata)\n                         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Prism Proxy (Region: US)                  \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Session Interceptor                                   \u2502 \u2502\n\u2502  \u2502  - Extract session_id from metadata                    \u2502 \u2502\n\u2502  \u2502  - Fetch session data from local store                 \u2502 \u2502\n\u2502  \u2502  - Inject session data into request context            \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2502                         \u2502                                    \u2502\n\u2502                         \u25bc                                    \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502  \u2502  Session Store Client (Plugin)                         \u2502 \u2502\n\u2502  \u2502  - Get(session_id) \u2192 SessionData                       \u2502 \u2502\n\u2502  \u2502  - Set(session_id, key, value)                         \u2502 \u2502\n\u2502  \u2502  - Delete(session_id)                                  \u2502 \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                         \u2502\n                         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502          Session Store Backend (Redis Cluster)               \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502\n\u2502  \u2502 US Shard 1   \u2502       \u2502 US Shard 2   \u2502     \u2502 US Shard 3 \u2502\u2502\n\u2502  \u2502 Hash Slot:   \u2502       \u2502 Hash Slot:   \u2502     \u2502 Hash Slot: \u2502\u2502\n\u2502  \u2502 0-5461       \u2502       \u2502 5462-10922   \u2502     \u250210923-16383 \u2502\u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502\n\u2502         \u2502                       \u2502                    \u2502       \u2502\n\u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502                   Replication to EU/APAC                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(s.h3,{id:"request-flow-with-session-store",children:"Request Flow with Session Store"}),"\n",(0,t.jsx)(s.mermaid,{value:'sequenceDiagram\n    participant Client\n    participant ProxyUS as Proxy (US)\n    participant SessionStore as Session Store (US)\n    participant SessionStoreEU as Session Store (EU)\n    participant Plugin as Backend Plugin\n\n    Note over Client: Step 1: Create Session\n    Client->>ProxyUS: CreateSession()\n    ProxyUS->>SessionStore: Store session metadata\n    SessionStore--\x3e>ProxyUS: session_id: sess-abc123\n    ProxyUS--\x3e>Client: session_id: sess-abc123\n\n    Note over SessionStore,SessionStoreEU: Async replication\n    SessionStore->>SessionStoreEU: Replicate session data\n\n    Note over Client: Step 2: Store Session Data\n    Client->>ProxyUS: SetSessionData(sess-abc123, "prefs", {...})\n    ProxyUS->>SessionStore: SET sess-abc123:prefs = {...}\n    SessionStore--\x3e>ProxyUS: OK\n    ProxyUS--\x3e>Client: OK\n\n    Note over Client: Step 3: Execute Request with Session\n    Client->>ProxyUS: QueryData(session_id: sess-abc123)\n    ProxyUS->>SessionStore: GET sess-abc123:prefs\n    SessionStore--\x3e>ProxyUS: prefs: {...}\n    ProxyUS->>Plugin: QueryData(context + prefs)\n    Plugin--\x3e>ProxyUS: data: [...]\n    ProxyUS--\x3e>Client: data: [...]\n\n    Note over Client: Step 4: User Moves to EU Region\n    Client->>ProxyEU: QueryData(session_id: sess-abc123)\n    ProxyEU->>SessionStoreEU: GET sess-abc123:prefs\n    SessionStoreEU--\x3e>ProxyEU: prefs: {...} (replicated)\n    ProxyEU--\x3e>Client: data: [...] (same context)'}),"\n",(0,t.jsx)(s.h2,{id:"api-design",children:"API Design"}),"\n",(0,t.jsx)(s.h3,{id:"session-store-service-grpc",children:"Session Store Service (gRPC)"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage prism.session_store.v1;\n\nimport "google/protobuf/any.proto";\nimport "google/protobuf/timestamp.proto";\n\nservice SessionStoreService {\n  // Create new session\n  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);\n\n  // Get session data\n  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);\n\n  // Set session data\n  rpc SetSessionData(SetSessionDataRequest) returns (SetSessionDataResponse);\n\n  // Get session data by key\n  rpc GetSessionData(GetSessionDataRequest) returns (GetSessionDataResponse);\n\n  // Delete session data by key\n  rpc DeleteSessionData(DeleteSessionDataRequest) returns (DeleteSessionDataResponse);\n\n  // Delete entire session\n  rpc DeleteSession(DeleteSessionRequest) returns (DeleteSessionResponse);\n\n  // Extend session TTL\n  rpc ExtendSession(ExtendSessionRequest) returns (ExtendSessionResponse);\n\n  // List sessions (admin)\n  rpc ListSessions(ListSessionsRequest) returns (ListSessionsResponse);\n}\n\nmessage CreateSessionRequest {\n  SessionMetadata metadata = 1;\n  int64 ttl_seconds = 2;  // Default: 86400 (24h)\n}\n\nmessage CreateSessionResponse {\n  string session_id = 1;\n  google.protobuf.Timestamp created_at = 2;\n  google.protobuf.Timestamp expires_at = 3;\n}\n\nmessage GetSessionRequest {\n  string session_id = 1;\n}\n\nmessage GetSessionResponse {\n  SessionData session = 1;\n  bool found = 2;\n}\n\nmessage SetSessionDataRequest {\n  string session_id = 1;\n  string key = 2;\n  google.protobuf.Any value = 3;\n}\n\nmessage SetSessionDataResponse {\n  bool success = 1;\n}\n\nmessage GetSessionDataRequest {\n  string session_id = 1;\n  string key = 2;\n}\n\nmessage GetSessionDataResponse {\n  google.protobuf.Any value = 1;\n  bool found = 2;\n}\n\nmessage DeleteSessionDataRequest {\n  string session_id = 1;\n  string key = 2;\n}\n\nmessage DeleteSessionDataResponse {\n  bool success = 1;\n}\n\nmessage DeleteSessionRequest {\n  string session_id = 1;\n}\n\nmessage DeleteSessionResponse {\n  bool success = 1;\n}\n\nmessage ExtendSessionRequest {\n  string session_id = 1;\n  int64 additional_seconds = 2;\n}\n\nmessage ExtendSessionResponse {\n  google.protobuf.Timestamp new_expires_at = 1;\n}\n\nmessage ListSessionsRequest {\n  string user_id = 1;  // Filter by user\n  string region = 2;   // Filter by region\n  int32 page_size = 3;\n  string page_token = 4;\n}\n\nmessage ListSessionsResponse {\n  repeated SessionData sessions = 1;\n  string next_page_token = 2;\n}\n\nmessage SessionData {\n  string session_id = 1;\n  SessionMetadata metadata = 2;\n  map<string, google.protobuf.Any> data = 3;\n  google.protobuf.Timestamp created_at = 4;\n  google.protobuf.Timestamp last_accessed = 5;\n  google.protobuf.Timestamp expires_at = 6;\n}\n\nmessage SessionMetadata {\n  string user_id = 1;\n  string region = 2;\n  string client_id = 3;\n  map<string, string> attributes = 4;\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"client-usage-examples",children:"Client Usage Examples"}),"\n",(0,t.jsx)(s.h4,{id:"python-client",children:"Python Client"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'from prism_sdk import PrismClient, SessionData\nfrom google.protobuf.struct_pb2 import Struct\n\n# Create client\nclient = PrismClient(config_name="my-app")\n\n# Step 1: Create session\nsession_id = client.create_session(\n    user_id="alice",\n    region="us-west-2",\n    ttl_seconds=86400  # 24 hours\n)\nprint(f"Session created: {session_id}")\n\n# Step 2: Store user preferences in session\nprefs = Struct()\nprefs.update({"theme": "dark", "language": "en", "timezone": "America/Los_Angeles"})\nclient.set_session_data(session_id, "preferences", prefs)\n\n# Step 3: Store workflow context\ncontext = Struct()\ncontext.update({"workflow_id": "wf-123", "step": 3, "checkpoint": "transform-data"})\nclient.set_session_data(session_id, "workflow_context", context)\n\n# Step 4: Execute queries with session context\n# Proxy automatically injects session data into request context\nresult = client.query_data(\n    collection="events",\n    filter={"user_id": "alice"},\n    session_id=session_id  # Session context attached\n)\n\n# Step 5: Retrieve session data\nprefs = client.get_session_data(session_id, "preferences")\nprint(f"User preferences: {prefs}")\n\n# Step 6: Clean up\nclient.delete_session(session_id)\n'})}),"\n",(0,t.jsx)(s.h4,{id:"go-client",children:"Go Client"}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-go",children:'package main\n\nimport (\n    "context"\n    "github.com/prism/sdk-go"\n    "google.golang.org/protobuf/types/known/structpb"\n)\n\nfunc main() {\n    client := sdk.NewClient(sdk.Config{\n        ConfigName: "my-app",\n    })\n\n    ctx := context.Background()\n\n    // Create session\n    session, err := client.CreateSession(ctx, &sdk.CreateSessionRequest{\n        Metadata: &sdk.SessionMetadata{\n            UserID:   "alice",\n            Region:   "us-west-2",\n            ClientID: "go-client-v1",\n        },\n        TTLSeconds: 86400,\n    })\n    if err != nil {\n        panic(err)\n    }\n\n    sessionID := session.SessionID\n\n    // Store preferences\n    prefs := &structpb.Struct{\n        Fields: map[string]*structpb.Value{\n            "theme": structpb.NewStringValue("dark"),\n            "language": structpb.NewStringValue("en"),\n        },\n    }\n    err = client.SetSessionData(ctx, sessionID, "preferences", prefs)\n\n    // Query with session context\n    result, err := client.QueryData(ctx, &sdk.QueryRequest{\n        Collection: "events",\n        SessionID:  sessionID,  // Proxy retrieves session data\n    })\n\n    // Cleanup\n    client.DeleteSession(ctx, sessionID)\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"backend-plugin-implementation",children:"Backend Plugin Implementation"}),"\n",(0,t.jsx)(s.h3,{id:"redis-cluster-backend",children:"Redis Cluster Backend"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Configuration"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",children:'session_store:\n  backend: redis-cluster\n  config:\n    addresses:\n      - redis-us-1.example.com:6379\n      - redis-us-2.example.com:6379\n      - redis-us-3.example.com:6379\n    password: "${REDIS_PASSWORD}"\n    pool_size: 100\n\n  replication:\n    enabled: true\n    regions:\n      us-west-2:\n        primary: true\n        addresses: [redis-us-1:6379, redis-us-2:6379, redis-us-3:6379]\n      eu-central-1:\n        primary: false\n        addresses: [redis-eu-1:6379, redis-eu-2:6379, redis-eu-3:6379]\n      ap-southeast-1:\n        primary: false\n        addresses: [redis-ap-1:6379, redis-ap-2:6379, redis-ap-3:6379]\n\n    sync_interval: 100ms\n    conflict_resolution: last-write-wins\n'})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Implementation"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-go",children:'// plugins/session-store-redis/service.go\npackage main\n\nimport (\n    "context"\n    "encoding/json"\n    "github.com/go-redis/redis/v8"\n    pb "github.com/prism/proto/session_store/v1"\n)\n\ntype RedisSessionStore struct {\n    pb.UnimplementedSessionStoreServiceServer\n    cluster *redis.ClusterClient\n    replicas map[string]*redis.ClusterClient  // Region \u2192 replica\n}\n\n// CreateSession stores new session in Redis cluster\nfunc (s *RedisSessionStore) CreateSession(ctx context.Context, req *pb.CreateSessionRequest) (*pb.CreateSessionResponse, error) {\n    sessionID := generateSessionID()\n\n    session := &pb.SessionData{\n        SessionId: sessionID,\n        Metadata:  req.Metadata,\n        Data:      make(map[string]*anypb.Any),\n        CreatedAt: timestamppb.Now(),\n        ExpiresAt: timestamppb.New(time.Now().Add(time.Duration(req.TtlSeconds) * time.Second)),\n    }\n\n    // Serialize session data\n    data, err := proto.Marshal(session)\n    if err != nil {\n        return nil, err\n    }\n\n    // Store in Redis with TTL\n    key := "session:" + sessionID\n    err = s.cluster.Set(ctx, key, data, time.Duration(req.TtlSeconds)*time.Second).Err()\n    if err != nil {\n        return nil, err\n    }\n\n    // Replicate to other regions (async)\n    go s.replicateToRegions(ctx, key, data)\n\n    return &pb.CreateSessionResponse{\n        SessionId: sessionID,\n        CreatedAt: session.CreatedAt,\n        ExpiresAt: session.ExpiresAt,\n    }, nil\n}\n\n// GetSession retrieves session from local Redis replica\nfunc (s *RedisSessionStore) GetSession(ctx context.Context, req *pb.GetSessionRequest) (*pb.GetSessionResponse, error) {\n    key := "session:" + req.SessionId\n\n    // Try local replica first\n    data, err := s.cluster.Get(ctx, key).Bytes()\n    if err == redis.Nil {\n        // Session not found locally, try other regions\n        for region, replica := range s.replicas {\n            data, err = replica.Get(ctx, key).Bytes()\n            if err == nil {\n                // Found in other region, cache locally\n                s.cluster.Set(ctx, key, data, 0)  // Copy to local\n                break\n            }\n        }\n\n        if err != nil {\n            return &pb.GetSessionResponse{Found: false}, nil\n        }\n    } else if err != nil {\n        return nil, err\n    }\n\n    // Deserialize\n    session := &pb.SessionData{}\n    err = proto.Unmarshal(data, session)\n    if err != nil {\n        return nil, err\n    }\n\n    // Update last accessed\n    session.LastAccessed = timestamppb.Now()\n    s.updateSession(ctx, session)\n\n    return &pb.GetSessionResponse{\n        Session: session,\n        Found:   true,\n    }, nil\n}\n\n// SetSessionData updates session key-value data\nfunc (s *RedisSessionStore) SetSessionData(ctx context.Context, req *pb.SetSessionDataRequest) (*pb.SetSessionDataResponse, error) {\n    key := "session:" + req.SessionId\n\n    // Fetch existing session\n    resp, err := s.GetSession(ctx, &pb.GetSessionRequest{SessionId: req.SessionId})\n    if err != nil || !resp.Found {\n        return nil, status.Error(codes.NotFound, "Session not found")\n    }\n\n    session := resp.Session\n\n    // Update data field\n    if session.Data == nil {\n        session.Data = make(map[string]*anypb.Any)\n    }\n    session.Data[req.Key] = req.Value\n\n    // Serialize and store\n    data, err := proto.Marshal(session)\n    if err != nil {\n        return nil, err\n    }\n\n    // Update in Redis\n    err = s.cluster.Set(ctx, key, data, time.Until(session.ExpiresAt.AsTime())).Err()\n    if err != nil {\n        return nil, err\n    }\n\n    // Replicate to other regions\n    go s.replicateToRegions(ctx, key, data)\n\n    return &pb.SetSessionDataResponse{Success: true}, nil\n}\n\n// replicateToRegions asynchronously replicates session to other regions\nfunc (s *RedisSessionStore) replicateToRegions(ctx context.Context, key string, data []byte) {\n    for region, replica := range s.replicas {\n        err := replica.Set(ctx, key, data, 0).Err()  // 0 = inherit TTL from primary\n        if err != nil {\n            log.Error("Failed to replicate to region", "region", region, "error", err)\n        }\n    }\n}\n'})}),"\n",(0,t.jsx)(s.h3,{id:"postgresql--pglogical-backend",children:"PostgreSQL + pglogical Backend"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Configuration"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-yaml",children:'session_store:\n  backend: postgres-pglogical\n  config:\n    primary:\n      host: postgres-us.example.com\n      port: 5432\n      database: prism_sessions\n      user: prism\n      password: "${POSTGRES_PASSWORD}"\n\n    replicas:\n      eu-central-1:\n        host: postgres-eu.example.com\n        port: 5432\n        replication_slot: prism_sessions_eu\n      ap-southeast-1:\n        host: postgres-ap.example.com\n        port: 5432\n        replication_slot: prism_sessions_ap\n\n    replication:\n      synchronous: false  # Async replication for low latency\n      lag_threshold: 5s   # Alert if replication lag > 5s\n'})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Schema"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-sql",children:"CREATE TABLE sessions (\n    session_id UUID PRIMARY KEY,\n    user_id TEXT NOT NULL,\n    region TEXT NOT NULL,\n    metadata JSONB,\n    data JSONB,  -- Key-value pairs\n    created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n    last_accessed TIMESTAMPTZ NOT NULL DEFAULT NOW(),\n    expires_at TIMESTAMPTZ NOT NULL,\n    INDEX idx_sessions_user (user_id),\n    INDEX idx_sessions_region (region),\n    INDEX idx_sessions_expires (expires_at)\n);\n\n-- Enable pglogical replication\nSELECT pglogical.create_node(\n    node_name := 'prism_us',\n    dsn := 'host=postgres-us.example.com port=5432 dbname=prism_sessions'\n);\n\nSELECT pglogical.create_replication_set('prism_sessions_repl');\n\nSELECT pglogical.replication_set_add_table(\n    set_name := 'prism_sessions_repl',\n    relation := 'sessions'\n);\n\n-- Subscribe from EU region\nSELECT pglogical.create_subscription(\n    subscription_name := 'prism_sessions_sub_eu',\n    provider_dsn := 'host=postgres-us.example.com port=5432 dbname=prism_sessions',\n    replication_sets := ARRAY['prism_sessions_repl']\n);\n"})}),"\n",(0,t.jsx)(s.h2,{id:"cross-region-replication-strategies",children:"Cross-Region Replication Strategies"}),"\n",(0,t.jsx)(s.h3,{id:"strategy-1-active-passive-leader-follower",children:"Strategy 1: Active-Passive (Leader-Follower)"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Architecture"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Primary region"}),": All writes go here"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Replica regions"}),": Read-only, asynchronous replication"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Failover"}),": Promote replica to primary if primary fails"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Pros"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Simple consistency model (no write conflicts)"}),"\n",(0,t.jsx)(s.li,{children:"Easy to reason about data flow"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Cons"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Higher write latency for users far from primary region"}),"\n",(0,t.jsx)(s.li,{children:"Single point of failure (primary)"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Use Cases"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Strong consistency required"}),"\n",(0,t.jsx)(s.li,{children:"Write volume concentrated in one region"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"strategy-2-multi-primary-active-active",children:"Strategy 2: Multi-Primary (Active-Active)"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Architecture"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:"All regions accept writes"})}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Bidirectional replication"})," between regions"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Conflict resolution"})," required (last-write-wins, vector clocks, CRDTs)"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Pros"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Low latency writes from any region"}),"\n",(0,t.jsx)(s.li,{children:"No single point of failure"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Cons"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Complex conflict resolution"}),"\n",(0,t.jsx)(s.li,{children:"Eventual consistency (window of inconsistency during replication)"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Use Cases"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Global user base"}),"\n",(0,t.jsx)(s.li,{children:"High write volume"}),"\n",(0,t.jsx)(s.li,{children:"Can tolerate eventual consistency"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Conflict Resolution Example"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-text",children:'Scenario: Alice updates session from US, Bob updates same key from EU simultaneously\n\nUS Region:                                    EU Region:\nSET sess-abc123:prefs.theme = "dark"          SET sess-abc123:prefs.theme = "light"\n  timestamp: 2025-10-09T10:00:00.000Z           timestamp: 2025-10-09T10:00:00.100Z\n\nAfter replication:\nUS Region sees:   theme = "light"  (EU\'s write won, later timestamp)\nEU Region sees:   theme = "light"  (EU\'s write, local)\n\nResult: Last-write-wins based on timestamp (EU\'s write at 10:00:00.100Z wins)\n'})}),"\n",(0,t.jsx)(s.h3,{id:"strategy-3-regional-partitioning",children:"Strategy 3: Regional Partitioning"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Architecture"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:(0,t.jsx)(s.strong,{children:"Each region owns subset of sessions"})}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"No replication"})," between regions (sessions are region-local)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Session ID encodes region"}),": ",(0,t.jsx)(s.code,{children:"sess-us-abc123"}),", ",(0,t.jsx)(s.code,{children:"sess-eu-def456"})]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Pros"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"No replication overhead"}),"\n",(0,t.jsx)(s.li,{children:"Perfect consistency (no conflicts)"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Cons"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Users cannot move between regions"}),"\n",(0,t.jsx)(s.li,{children:"Regional failures lose sessions"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Use Cases"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Compliance requires data residency (GDPR, data sovereignty)"}),"\n",(0,t.jsx)(s.li,{children:"Users stay in one region"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"sharding-and-work-distribution",children:"Sharding and Work Distribution"}),"\n",(0,t.jsx)(s.h3,{id:"problem-single-session-store-bottleneck",children:"Problem: Single Session Store Bottleneck"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"At scale"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"100,000 active sessions"}),"\n",(0,t.jsx)(s.li,{children:"10,000 writes/sec"}),"\n",(0,t.jsx)(s.li,{children:"50,000 reads/sec"}),"\n"]}),"\n",(0,t.jsx)(s.p,{children:(0,t.jsx)(s.strong,{children:"Single Redis instance cannot handle this load."})}),"\n",(0,t.jsx)(s.h3,{id:"solution-consistent-hashing-for-sharding",children:"Solution: Consistent Hashing for Sharding"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Shard by session_id"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-text",children:"Hash(session_id) \u2192 Shard\n\nShard 0: session_ids with hash % 16 == 0\nShard 1: session_ids with hash % 16 == 1\n...\nShard 15: session_ids with hash % 16 == 15\n\nEach shard has 1/16 of the load:\n  - ~6,250 active sessions\n  - ~625 writes/sec\n  - ~3,125 reads/sec\n"})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Redis Cluster automatically does this"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"16,384 hash slots"}),"\n",(0,t.jsx)(s.li,{children:"Each node owns subset of slots"}),"\n",(0,t.jsx)(s.li,{children:"Client library routes requests to correct node"}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Diagram"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502            Session Store Cluster (16 Shards)                 \u2502\n\u2502                                                              \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502 Shard 0  \u2502 \u2502 Shard 1  \u2502 \u2502 Shard 2  \u2502 ... \u2502 Shard 15 \u2502  \u2502\n\u2502  \u2502 Slots:   \u2502 \u2502 Slots:   \u2502 \u2502 Slots:   \u2502     \u2502 Slots:   \u2502  \u2502\n\u2502  \u2502 0-1023   \u2502 \u25021024-2047 \u2502 \u25022048-3071 \u2502     \u250215360-    \u2502  \u2502\n\u2502  \u2502          \u2502 \u2502          \u2502 \u2502          \u2502     \u250216383     \u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2502                                                              \u2502\n\u2502  Client Request: GET sess-abc123                            \u2502\n\u2502  Hash(sess-abc123) = 5234 \u2192 Shard 3                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,t.jsx)(s.h3,{id:"session-affinity-vs-session-mobility",children:"Session Affinity vs Session Mobility"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Trade-off"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Session Affinity"}),": Route user's requests to same shard (faster, less replication)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Session Mobility"}),": User can connect to any shard (more flexible, more replication)"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Recommendation"}),": ",(0,t.jsx)(s.strong,{children:"Session Mobility"})," for global users."]}),"\n",(0,t.jsx)(s.h2,{id:"performance-characteristics",children:"Performance Characteristics"}),"\n",(0,t.jsx)(s.h3,{id:"latency",children:"Latency"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Operation"}),(0,t.jsx)(s.th,{children:"Redis Cluster"}),(0,t.jsx)(s.th,{children:"PostgreSQL"}),(0,t.jsx)(s.th,{children:"DynamoDB Global"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"CreateSession"}),(0,t.jsx)(s.td,{children:"2ms P99"}),(0,t.jsx)(s.td,{children:"10ms P99"}),(0,t.jsx)(s.td,{children:"15ms P99"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"GetSession (local)"}),(0,t.jsx)(s.td,{children:"1ms P99"}),(0,t.jsx)(s.td,{children:"5ms P99"}),(0,t.jsx)(s.td,{children:"8ms P99"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"GetSession (remote)"}),(0,t.jsx)(s.td,{children:"50ms P99"}),(0,t.jsx)(s.td,{children:"100ms P99"}),(0,t.jsx)(s.td,{children:"80ms P99"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"SetSessionData"}),(0,t.jsx)(s.td,{children:"2ms P99"}),(0,t.jsx)(s.td,{children:"10ms P99"}),(0,t.jsx)(s.td,{children:"15ms P99"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"throughput",children:"Throughput"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Backend"}),(0,t.jsx)(s.th,{children:"Reads/sec (per shard)"}),(0,t.jsx)(s.th,{children:"Writes/sec (per shard)"}),(0,t.jsx)(s.th,{children:"Scaling"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Redis Cluster"}),(0,t.jsx)(s.td,{children:"100k"}),(0,t.jsx)(s.td,{children:"20k"}),(0,t.jsx)(s.td,{children:"Horizontal (add shards)"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"PostgreSQL"}),(0,t.jsx)(s.td,{children:"10k"}),(0,t.jsx)(s.td,{children:"2k"}),(0,t.jsx)(s.td,{children:"Vertical + read replicas"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DynamoDB"}),(0,t.jsx)(s.td,{children:"40k"}),(0,t.jsx)(s.td,{children:"10k"}),(0,t.jsx)(s.td,{children:"Auto-scaling"})]})]})]}),"\n",(0,t.jsx)(s.h3,{id:"replication-lag",children:"Replication Lag"}),"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",(0,t.jsxs)(s.table,{children:[(0,t.jsx)(s.thead,{children:(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.th,{children:"Replication"}),(0,t.jsx)(s.th,{children:"Typical Lag"}),(0,t.jsx)(s.th,{children:"P99 Lag"}),(0,t.jsx)(s.th,{children:"Recovery Time"})]})}),(0,t.jsxs)(s.tbody,{children:[(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"Redis Cluster"}),(0,t.jsx)(s.td,{children:"10ms"}),(0,t.jsx)(s.td,{children:"100ms"}),(0,t.jsx)(s.td,{children:"1s"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"pglogical"}),(0,t.jsx)(s.td,{children:"100ms"}),(0,t.jsx)(s.td,{children:"1s"}),(0,t.jsx)(s.td,{children:"10s"})]}),(0,t.jsxs)(s.tr,{children:[(0,t.jsx)(s.td,{children:"DynamoDB Global"}),(0,t.jsx)(s.td,{children:"500ms"}),(0,t.jsx)(s.td,{children:"2s"}),(0,t.jsx)(s.td,{children:"30s"})]})]})]}),"\n",(0,t.jsx)(s.h2,{id:"monitoring-and-observability",children:"Monitoring and Observability"}),"\n",(0,t.jsx)(s.h3,{id:"metrics",children:"Metrics"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Session Store Metrics"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"session_store_sessions_active"})," - Active session count per region"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:'session_store_operations_total{operation="create|get|set|delete"}'})," - Operation counts"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"session_store_operation_latency_seconds"})," - Operation latency histogram"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"session_store_replication_lag_seconds"})," - Replication lag per region"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.code,{children:"session_store_size_bytes"})," - Session data size per session (avg/max)"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Alerts"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"Session store latency P99 > 10ms"}),"\n",(0,t.jsx)(s.li,{children:"Replication lag > 5s"}),"\n",(0,t.jsx)(s.li,{children:"Session store unavailable"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"logging",children:"Logging"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Session Events"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-json",children:'{\n  "event": "session_created",\n  "session_id": "sess-abc123",\n  "user_id": "alice",\n  "region": "us-west-2",\n  "client_id": "go-client-v1",\n  "timestamp": "2025-10-09T10:00:00Z"\n}\n\n{\n  "event": "session_replicated",\n  "session_id": "sess-abc123",\n  "source_region": "us-west-2",\n  "target_region": "eu-central-1",\n  "replication_lag_ms": 85,\n  "timestamp": "2025-10-09T10:00:00.085Z"\n}\n\n{\n  "event": "session_expired",\n  "session_id": "sess-abc123",\n  "user_id": "alice",\n  "created_at": "2025-10-08T10:00:00Z",\n  "last_accessed": "2025-10-09T09:30:00Z",\n  "expires_at": "2025-10-09T10:00:00Z",\n  "lifetime_seconds": 84600\n}\n'})}),"\n",(0,t.jsx)(s.h2,{id:"security-considerations",children:"Security Considerations"}),"\n",(0,t.jsx)(s.h3,{id:"1-session-hijacking",children:"1. Session Hijacking"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Risk"}),": Attacker steals session_id and impersonates user."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Mitigation"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Bind session to client IP"}),": Check IP matches on every request"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Session token rotation"}),": Rotate session_id periodically"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Short TTL"}),": Expire sessions after 24h inactivity"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"mTLS"}),": Require client certificate for session creation"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"2-session-data-tampering",children:"2. Session Data Tampering"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Risk"}),": Attacker modifies session data in backend store."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Mitigation"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Sign session data"}),": Use HMAC to detect tampering"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Encrypt sensitive data"}),": Encrypt PII fields in session store"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Access control"}),": Limit who can modify session store (plugins only)"]}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"3-cross-region-data-leakage",children:"3. Cross-Region Data Leakage"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Risk"}),": Session replicated to region with weaker security."]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Mitigation"}),":"]}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Regional encryption keys"}),": Each region uses different encryption key"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Compliance-aware replication"}),": Don't replicate EU sessions to US if GDPR forbids"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Audit replication"}),": Log all cross-region transfers"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"migration-path",children:"Migration Path"}),"\n",(0,t.jsx)(s.h3,{id:"phase-1-implement-session-store-backend-week-1-2",children:"Phase 1: Implement Session Store Backend (Week 1-2)"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Implement Redis Cluster session store plugin"}),"\n",(0,t.jsx)(s.li,{children:"Deploy to staging environment"}),"\n",(0,t.jsx)(s.li,{children:"Test session creation, retrieval, updates"}),"\n",(0,t.jsx)(s.li,{children:"Measure performance (latency, throughput)"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"phase-2-integrate-with-proxy-week-3",children:"Phase 2: Integrate with Proxy (Week 3)"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Add session interceptor to proxy"}),"\n",(0,t.jsx)(s.li,{children:"Extract session_id from gRPC metadata"}),"\n",(0,t.jsx)(s.li,{children:"Inject session data into request context"}),"\n",(0,t.jsx)(s.li,{children:"Test with sample applications"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"phase-3-cross-region-replication-week-4-5",children:"Phase 3: Cross-Region Replication (Week 4-5)"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Configure Redis Cluster replication to EU region"}),"\n",(0,t.jsx)(s.li,{children:"Test session mobility (create in US, read from EU)"}),"\n",(0,t.jsx)(s.li,{children:"Measure replication lag"}),"\n",(0,t.jsx)(s.li,{children:"Implement conflict resolution (last-write-wins)"}),"\n"]}),"\n",(0,t.jsx)(s.h3,{id:"phase-4-production-rollout-week-6",children:"Phase 4: Production Rollout (Week 6)"}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsx)(s.li,{children:"Enable session store for pilot applications"}),"\n",(0,t.jsx)(s.li,{children:"Monitor performance and replication lag"}),"\n",(0,t.jsx)(s.li,{children:"Gradual rollout to all applications"}),"\n",(0,t.jsx)(s.li,{children:"Document usage patterns and best practices"}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"open-questions",children:"Open Questions"}),"\n",(0,t.jsx)(s.h3,{id:"1-how-to-handle-session-conflicts-in-multi-primary",children:"1. How to Handle Session Conflicts in Multi-Primary?"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Question"}),": Two regions modify same session key simultaneously. How to resolve?"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Options"}),":"]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Last-write-wins"})," (timestamp-based)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Vector clocks"})," (causal ordering)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"CRDTs"})," (conflict-free replicated data types)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Application-defined"})," (conflict resolution callback)"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Recommendation"}),": Start with ",(0,t.jsx)(s.strong,{children:"last-write-wins"})," (simplest), add CRDTs for specific use cases (e.g., collaborative editing)."]}),"\n",(0,t.jsx)(s.h3,{id:"2-should-session-store-support-transactions",children:"2. Should Session Store Support Transactions?"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Question"}),": Can client atomically update multiple session keys?"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Example"}),":"]}),"\n",(0,t.jsx)(s.pre,{children:(0,t.jsx)(s.code,{className:"language-python",children:'# Atomic update: prefs AND context in single transaction\nwith client.session_transaction(session_id) as tx:\n    tx.set("preferences", prefs)\n    tx.set("context", context)\n    tx.commit()\n'})}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Pros"}),": Consistency (all or nothing)\n",(0,t.jsx)(s.strong,{children:"Cons"}),": Complexity, cross-region transactions hard"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Recommendation"}),": ",(0,t.jsx)(s.strong,{children:"No transactions"})," for v1. Use single SetSessionData with merged data."]}),"\n",(0,t.jsx)(s.h3,{id:"3-how-to-clean-up-expired-sessions",children:"3. How to Clean Up Expired Sessions?"}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Question"}),": Background job or lazy deletion?"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Options"}),":"]}),"\n",(0,t.jsxs)(s.ol,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Background job"}),": Scan session store every hour, delete expired"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Lazy deletion"}),": Delete on next access (Redis built-in)"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.strong,{children:"Hybrid"}),": Lazy + periodic cleanup"]}),"\n"]}),"\n",(0,t.jsxs)(s.p,{children:[(0,t.jsx)(s.strong,{children:"Recommendation"}),": ",(0,t.jsx)(s.strong,{children:"Hybrid"})," (Redis TTL + daily cleanup job for replicas)."]}),"\n",(0,t.jsx)(s.h2,{id:"related-documents",children:"Related Documents"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/rfc/rfc-019-plugin-sdk-authorization-layer",children:"RFC-019: Plugin SDK Authorization Layer"})," - Token validation and credentials"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/rfc/rfc-014-layered-data-access-patterns",children:"RFC-014: Layered Data Access Patterns"})," - Pattern composition"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/rfc/rfc-011-data-proxy-authentication",children:"RFC-011: Data Proxy Authentication"})," - Secrets provider abstraction"]}),"\n",(0,t.jsxs)(s.li,{children:[(0,t.jsx)(s.a,{href:"/adr/adr-050-topaz-policy-authorization",children:"ADR-050: Topaz for Policy Authorization"})," - Policy enforcement"]}),"\n"]}),"\n",(0,t.jsx)(s.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,t.jsxs)(s.ul,{children:["\n",(0,t.jsx)(s.li,{children:"2025-10-09: Initial RFC proposing distributed session store pattern with cross-region replication strategies"}),"\n"]})]})}function h(e={}){const{wrapper:s}={...(0,r.R)(),...e.components};return s?(0,t.jsx)(s,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);