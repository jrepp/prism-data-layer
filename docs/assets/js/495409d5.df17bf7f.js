"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[5173],{28453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>a});var r=i(96540);const s={},t=r.createContext(s);function o(n){const e=r.useContext(t);return r.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),r.createElement(t.Provider,{value:e},n.children)}},44878:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"adr-022","title":"Dynamic Client Configuration System","description":"Context","source":"@site/../docs-cms/adr/adr-022-dynamic-client-configuration.md","sourceDirName":".","slug":"/adr-022","permalink":"/prism-data-layer/adr/adr-022","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-022-dynamic-client-configuration.md","tags":[{"inline":true,"label":"architecture","permalink":"/prism-data-layer/adr/tags/architecture"},{"inline":true,"label":"configuration","permalink":"/prism-data-layer/adr/tags/configuration"},{"inline":true,"label":"client-server","permalink":"/prism-data-layer/adr/tags/client-server"},{"inline":true,"label":"protobuf","permalink":"/prism-data-layer/adr/tags/protobuf"}],"version":"current","frontMatter":{"date":"2025-10-07T00:00:00.000Z","deciders":"Core Team","doc_uuid":"82889da2-9353-465d-89a0-a98af285402b","id":"adr-022","project_id":"prism-data-layer","status":"Accepted","tags":["architecture","configuration","client-server","protobuf"],"title":"Dynamic Client Configuration System"},"sidebar":"adrSidebar","previous":{"title":"Rust Structured Logging with Tracing \u2022 ADR-021","permalink":"/prism-data-layer/adr/adr-021"},"next":{"title":"gRPC-First Interface Design \u2022 ADR-023","permalink":"/prism-data-layer/adr/adr-023"}}');var s=i(74848),t=i(28453);const o={date:new Date("2025-10-07T00:00:00.000Z"),deciders:"Core Team",doc_uuid:"82889da2-9353-465d-89a0-a98af285402b",id:"adr-022",project_id:"prism-data-layer",status:"Accepted",tags:["architecture","configuration","client-server","protobuf"],title:"Dynamic Client Configuration System"},a=void 0,c={},l=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Configuration Architecture",id:"configuration-architecture",level:3},{value:"Example: Named Configuration",id:"example-named-configuration",level:3},{value:"Server Configuration (Static)",id:"server-configuration-static",level:3},{value:"Protobuf Tagging for Configuration",id:"protobuf-tagging-for-configuration",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"Implementation Notes",id:"implementation-notes",level:2},{value:"Configuration Storage",id:"configuration-storage",level:3}];function d(n){const e={code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",validationerror:"validationerror",...(0,t.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.h2,{id:"context",children:"Context"}),"\n",(0,s.jsx)(e.p,{children:"Prism needs a flexible configuration system that:"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Separates client configuration from server infrastructure configuration"}),"\n",(0,s.jsx)(e.li,{children:"Allows clients to specify their data access patterns at runtime"}),"\n",(0,s.jsx)(e.li,{children:"Supports server-side configuration templates for common patterns"}),"\n",(0,s.jsx)(e.li,{children:"Enables configuration discovery and reuse"}),"\n",(0,s.jsx)(e.li,{children:"Follows Netflix Data Gateway patterns while improving on them"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Key Requirements:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Server config"}),": Backend databases, queues, infrastructure (static, admin-controlled)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Client config"}),": Data access patterns, backend selection, consistency requirements (dynamic, client-controlled)"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Configuration portability"}),": Clients can bring their config or use server-provided templates"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Versioning"}),": Configuration evolves without breaking existing clients"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"decision",children:"Decision"}),"\n",(0,s.jsxs)(e.p,{children:["Implement ",(0,s.jsx)(e.strong,{children:"Dynamic Client Configuration"})," with protobuf descriptors:"]}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Separation"}),": Server manages infrastructure, clients manage access patterns"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Protobuf descriptors"}),": Client configuration expressed as protobuf messages"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Named configurations"}),": Server stores reusable configuration templates"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Runtime discovery"}),": Clients can query available configurations"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Override capability"}),": Clients can provide custom configurations inline"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"rationale",children:"Rationale"}),"\n",(0,s.jsx)(e.h3,{id:"configuration-architecture",children:"Configuration Architecture"}),"\n",(0,s.jsx)(e.p,{children:'\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Prism Server                         \u2502\n\u2502                                                           \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n\u2502  \u2502 Server Config      \u2502        \u2502 Client Config     \u2502   \u2502\n\u2502  \u2502 (Static/Admin)     \u2502        \u2502 (Dynamic/Runtime) \u2502   \u2502\n\u2502  \u2502                    \u2502        \u2502                   \u2502   \u2502\n\u2502  \u2502 - Postgres pool    \u2502        \u2502 - Named configs   \u2502   \u2502\n\u2502  \u2502 - Kafka brokers    \u2502        \u2502 - Access patterns \u2502   \u2502\n\u2502  \u2502 - NATS cluster     \u2502        \u2502 - Backend routing \u2502   \u2502\n\u2502  \u2502 - Auth policies    \u2502        \u2502 - Consistency     \u2502   \u2502\n\u2502  \u2502 - Rate limits      \u2502        \u2502 - Cache policy    \u2502   \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n\u2502                                                           \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n\u2502\n\u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                         \u2502\n\u2502                         \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510     \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Client A        \u2502     \u2502   Client B        \u2502\n\u2502                   \u2502     \u2502                   \u2502\n\u2502 Uses named config \u2502     \u2502 Provides custom   \u2502\n\u2502 "user-profiles"   \u2502     \u2502 inline config     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518     \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518'}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:"\n### Client Configuration Descriptor (Protobuf)\n\n"})}),"\n",(0,s.jsx)(e.p,{children:'// proto/prism/config/v1/client_config.proto\nsyntax = "proto3";'}),"\n",(0,s.jsx)(e.p,{children:"package prism.config.v1;"}),"\n",(0,s.jsx)(e.p,{children:'import "prism/options.proto";'}),"\n",(0,s.jsx)(e.p,{children:'// Client configuration descriptor\nmessage ClientConfig {\noption (prism.schema) = {\nversion: "1.0.0"\ncategory: "config"\ncompatibility: COMPATIBILITY_MODE_BACKWARD\nbackend: "postgres"\ntrack_evolution: true\nowner: "platform-team"\ntags: ["client", "configuration", "core"]\n};'}),"\n",(0,s.jsx)(e.p,{children:'option (prism.protocol) = {\nrecording: RECORDING_LEVEL_METADATA\ncategory: "config"\noperation: "client_config"\nsample_rate: 0.1\ntags: ["configuration", "audit"]\n};'}),"\n",(0,s.jsx)(e.p,{children:"// Configuration name (for named configs)\nstring name = 1 [\n(prism.field_schema) = {\nindex: INDEX_TYPE_PRIMARY\nrequired_for_create: true\n}\n];"}),"\n",(0,s.jsx)(e.p,{children:"// Version for evolution\nstring version = 2 [\n(prism.field_schema) = {\nindex: INDEX_TYPE_SECONDARY\nrequired_for_create: true\n}\n];"}),"\n",(0,s.jsx)(e.p,{children:"// Data access pattern\nAccessPattern pattern = 3 [\n(prism.field_schema) = {\nrequired_for_create: true\n}\n];"}),"\n",(0,s.jsx)(e.p,{children:"// Backend selection\nBackendConfig backend = 4 [\n(prism.field_schema) = {\nrequired_for_create: true\n}\n];"}),"\n",(0,s.jsx)(e.p,{children:"// Consistency requirements\nConsistencyConfig consistency = 5;"}),"\n",(0,s.jsx)(e.p,{children:"// Caching policy\nCacheConfig cache = 6;"}),"\n",(0,s.jsx)(e.p,{children:"// Rate limiting\nRateLimitConfig rate_limit = 7;"}),"\n",(0,s.jsx)(e.p,{children:"// Namespace for data isolation\nstring namespace = 8 [\n(prism.field_schema) = {\nindex: INDEX_TYPE_SECONDARY\nrequired_for_create: true\n}\n];\n}"}),"\n",(0,s.jsx)(e.p,{children:"// Access patterns supported by Prism\nenum AccessPattern {\nACCESS_PATTERN_UNSPECIFIED = 0;\nACCESS_PATTERN_KEY_VALUE = 1;        // Simple get/put\nACCESS_PATTERN_QUEUE = 2;            // Kafka-style queue\nACCESS_PATTERN_PUBSUB = 3;           // NATS-style pub/sub\nACCESS_PATTERN_PAGED_READER = 4;     // Database pagination\nACCESS_PATTERN_TRANSACT_WRITE = 5;   // Transactional writes\n}"}),"\n",(0,s.jsx)(e.p,{children:"// Backend configuration\nmessage BackendConfig {\n// Backend type\nBackendType type = 1;"}),"\n",(0,s.jsx)(e.p,{children:"// Backend-specific options\nmap<string, string> options = 2;"}),"\n",(0,s.jsx)(e.p,{children:"// Connection pool settings\nPoolConfig pool = 3;\n}"}),"\n",(0,s.jsx)(e.p,{children:"enum BackendType {\nBACKEND_TYPE_UNSPECIFIED = 0;\nBACKEND_TYPE_POSTGRES = 1;\nBACKEND_TYPE_SQLITE = 2;\nBACKEND_TYPE_KAFKA = 3;\nBACKEND_TYPE_NATS = 4;\nBACKEND_TYPE_NEPTUNE = 5;\n}"}),"\n",(0,s.jsx)(e.p,{children:"message PoolConfig {\nint32 min_connections = 1;\nint32 max_connections = 2;\nint32 idle_timeout_seconds = 3;\n}"}),"\n",(0,s.jsx)(e.p,{children:"// Consistency configuration\nmessage ConsistencyConfig {\nConsistencyLevel level = 1;\nint32 timeout_ms = 2;\n}"}),"\n",(0,s.jsx)(e.p,{children:"enum ConsistencyLevel {\nCONSISTENCY_LEVEL_UNSPECIFIED = 0;\nCONSISTENCY_LEVEL_EVENTUAL = 1;\nCONSISTENCY_LEVEL_STRONG = 2;\nCONSISTENCY_LEVEL_BOUNDED_STALENESS = 3;\n}"}),"\n",(0,s.jsx)(e.p,{children:"// Cache configuration\nmessage CacheConfig {\nbool enabled = 1;\nint32 ttl_seconds = 2;\nint32 max_size_mb = 3;\n}"}),"\n",(0,s.jsx)(e.p,{children:"// Rate limit configuration\nmessage RateLimitConfig {\nint32 requests_per_second = 1;\nint32 burst = 2;\n}"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:"\n### Configuration Service (gRPC)\n\n"})}),"\n",(0,s.jsx)(e.p,{children:'// proto/prism/config/v1/config_service.proto\nsyntax = "proto3";'}),"\n",(0,s.jsx)(e.p,{children:"package prism.config.v1;"}),"\n",(0,s.jsx)(e.p,{children:'import "prism/config/v1/client_config.proto";'}),"\n",(0,s.jsx)(e.p,{children:"// Configuration service for managing client configs\nservice ConfigService {\n// List available named configurations\nrpc ListConfigs(ListConfigsRequest) returns (ListConfigsResponse);"}),"\n",(0,s.jsx)(e.p,{children:"// Get a specific named configuration\nrpc GetConfig(GetConfigRequest) returns (GetConfigResponse);"}),"\n",(0,s.jsx)(e.p,{children:"// Register a new named configuration (admin only)\nrpc RegisterConfig(RegisterConfigRequest) returns (RegisterConfigResponse);"}),"\n",(0,s.jsx)(e.p,{children:"// Validate a configuration before use\nrpc ValidateConfig(ValidateConfigRequest) returns (ValidateConfigResponse);\n}"}),"\n",(0,s.jsx)(e.p,{children:"message ListConfigsRequest {\n// Filter by access pattern\noptional AccessPattern pattern = 1;"}),"\n",(0,s.jsx)(e.p,{children:"// Filter by namespace\noptional string namespace = 2;\n}"}),"\n",(0,s.jsx)(e.p,{children:"message ListConfigsResponse {\nrepeated ClientConfig configs = 1;\n}"}),"\n",(0,s.jsx)(e.p,{children:"message GetConfigRequest {\nstring name = 1;\noptional string version = 2;  // Empty = latest\n}"}),"\n",(0,s.jsx)(e.p,{children:"message GetConfigResponse {\nClientConfig config = 1;\n}"}),"\n",(0,s.jsx)(e.p,{children:"message RegisterConfigRequest {\nClientConfig config = 1;\nbool overwrite = 2;  // Allow updating existing\n}"}),"\n",(0,s.jsx)(e.p,{children:"message RegisterConfigResponse {\nbool success = 1;\nstring message = 2;\n}"}),"\n",(0,s.jsx)(e.p,{children:"message ValidateConfigRequest {\nClientConfig config = 1;\n}"}),"\n",(0,s.jsx)(e.p,{children:"message ValidateConfigResponse {\nbool valid = 1;\nrepeated string errors = 2;\nrepeated string warnings = 3;\n}"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:'\n### Client Connection Flow\n\nClient                          Prism Server\n  \u2502                                  \u2502\n  \u2502  1. Connect with auth           \u2502\n  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>\u2502\n  \u2502                                  \u2502\n  \u2502  2. Request config "user-profiles" \u2502\n  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>\u2502\n  \u2502                                  \u2502\n  \u2502  3. Return ClientConfig         \u2502\n  \u2502<\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n  \u2502  {                               \u2502\n  \u2502    name: "user-profiles"         \u2502\n  \u2502    pattern: KEY_VALUE            \u2502\n  \u2502    backend: POSTGRES             \u2502\n  \u2502    consistency: STRONG           \u2502\n  \u2502  }                               \u2502\n  \u2502                                  \u2502\n  \u2502  4. Establish session with config\u2502\n  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>\u2502\n  \u2502                                  \u2502\n  \u2502  5. Session token + metadata    \u2502\n  \u2502<\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n  \u2502                                  \u2502\n  \u2502  6. Make data requests          \u2502\n  \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500>\u2502\n  \u2502     (using session token)        \u2502\n  \u2502                                  \u2502\n'})}),"\n",(0,s.jsx)(e.h3,{id:"example-named-configuration",children:"Example: Named Configuration"}),"\n",(0,s.jsx)(e.p,{children:"Server stores common configurations:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:'# Server-side: config/named/user-profiles.yaml\nname: user-profiles\nversion: "1.0"\npattern: KEY_VALUE\nbackend:\n  type: POSTGRES\n  options:\n    table: user_profiles\n  pool:\n    min_connections: 5\n    max_connections: 20\nconsistency:\n  level: STRONG\n  timeout_ms: 5000\ncache:\n  enabled: true\n  ttl_seconds: 300\nrate_limit:\n  requests_per_second: 1000\n  burst: 2000\nnamespace: production\n'})}),"\n",(0,s.jsx)(e.p,{children:"Client retrieves and uses:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-go",children:'// Client code\nclient := prism.NewClient(endpoint)\n\n// Option 1: Use named config\nconfig, err := client.GetConfig("user-profiles")\nsession, err := client.StartSession(config)\n\n// Option 2: Provide inline config\nconfig := &prism.ClientConfig{\n    Pattern: prism.AccessPattern_KEY_VALUE,\n    Backend: &prism.BackendConfig{\n        Type: prism.BackendType_POSTGRES,\n    },\n    Consistency: &prism.ConsistencyConfig{\n        Level: prism.ConsistencyLevel_STRONG,\n    },\n}\nsession, err := client.StartSession(config)\n'})}),"\n",(0,s.jsx)(e.h3,{id:"server-configuration-static",children:"Server Configuration (Static)"}),"\n",(0,s.jsx)(e.p,{children:"Remains infrastructure-focused:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-yaml",children:"# Server config (admin-controlled)\nserver:\n  host: 0.0.0.0\n  port: 8980\n\nbackends:\n  postgres:\n    - name: primary\n      connection_string: postgres://...\n      max_connections: 100\n    - name: replica\n      connection_string: postgres://...\n      max_connections: 50\n\n  kafka:\n    brokers:\n      - localhost:9092\n      - localhost:9093\n\n  nats:\n    urls:\n      - nats://localhost:4222\n\nauth:\n  mtls:\n    enabled: true\n    ca_cert: /path/to/ca.pem\n\nobservability:\n  tracing:\n    exporter: jaeger\n    endpoint: localhost:14268\n  metrics:\n    exporter: prometheus\n    port: 9090\n"})}),"\n",(0,s.jsx)(e.h3,{id:"protobuf-tagging-for-configuration",children:"Protobuf Tagging for Configuration"}),"\n",(0,s.jsx)(e.p,{children:"Client configuration messages use protobuf custom options for schema evolution and protocol recording (see ADR-029, ADR-030):"}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Schema Tagging:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"(prism.schema)"})," option on ClientConfig tracks versioning and compatibility"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"(prism.field_schema)"})," options on fields enable:\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Index hints for storage backends"}),"\n",(0,s.jsx)(e.li,{children:"Required field validation"}),"\n",(0,s.jsx)(e.li,{children:"Migration planning"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Protocol Tagging:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.code,{children:"(prism.protocol)"})," option enables recording of configuration changes"]}),"\n",(0,s.jsx)(e.li,{children:"Sampling at 10% to track config usage patterns"}),"\n",(0,s.jsx)(e.li,{children:"Metadata-only recording (no sensitive data in payloads)"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Benefits:"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Configuration changes automatically recorded for audit"}),"\n",(0,s.jsx)(e.li,{children:"Schema evolution tracked in registry"}),"\n",(0,s.jsx)(e.li,{children:"Breaking changes detected before deployment"}),"\n",(0,s.jsx)(e.li,{children:"Field-level metadata drives validation and storage optimization"}),"\n"]}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example: Recording Configuration Request"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-rust",children:'// Proxy automatically records configuration requests\nlet entry = ProtocolEntry {\n    id: Uuid::new_v4(),\n    category: "config",\n    operation: "client_config",\n    message_type: "prism.config.v1.ClientConfig",\n    recording_level: RecordingLevel::Metadata,\n    metadata: {\n        "name": config.name,\n        "version": config.version,\n        "pattern": format!("{:?}", config.pattern),\n        "namespace": config.namespace,\n    },\n    payload: None,  // Metadata only\n    tags: vec!["configuration", "audit"],\n};\nrecorder.record(entry).await?;\n'})}),"\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Example: Schema Registry Integration"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"# Schemas automatically registered during build\nprism-admin schema register \\\n  --proto proto/prism/config/v1/client_config.proto \\\n  --version 1.0.0 \\\n  --environment production\n\n# Check compatibility before deployment\nprism-admin schema check \\\n  --proto proto/prism/config/v1/client_config.proto \\\n  --against 0.9.0\n"})}),"\n",(0,s.jsx)(e.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Static client configuration files"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Pros: Simple, familiar pattern"}),"\n",(0,s.jsx)(e.li,{children:"Cons: No runtime discovery, hard to evolve, deployment coupling"}),"\n",(0,s.jsx)(e.li,{children:"Rejected: Doesn't support dynamic use cases"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"REST-based configuration API"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Pros: Simple HTTP, easy debugging"}),"\n",(0,s.jsx)(e.li,{children:"Cons: No type safety, manual serialization, version skew"}),"\n",(0,s.jsx)(e.li,{children:"Rejected: Protobuf provides better type safety and evolution"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Environment variables for client config"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Pros: 12-factor compliant"}),"\n",(0,s.jsx)(e.li,{children:"Cons: Limited structure, hard to compose, no discovery"}),"\n",(0,s.jsx)(e.li,{children:"Rejected: Too limited for complex configurations"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsx)(e.p,{children:(0,s.jsx)(e.strong,{children:"Configuration in application code"})}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Pros: Type-safe, compile-time validation"}),"\n",(0,s.jsx)(e.li,{children:"Cons: Requires deployment to change, no runtime flexibility"}),"\n",(0,s.jsx)(e.li,{children:"Rejected: Conflicts with dynamic configuration goal"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"consequences",children:"Consequences"}),"\n",(0,s.jsx)(e.h3,{id:"positive",children:"Positive"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Clean separation"}),": Server infrastructure vs. client access patterns"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Runtime flexibility"}),": Clients can adapt configuration without redeployment"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Discovery"}),": Clients can browse available configurations"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Reusability"}),": Named configs shared across clients"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Evolution"}),": Protobuf versioning supports backward compatibility"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Type safety"}),": Protobuf ensures correct configuration structure"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Netflix-inspired"}),": Follows proven patterns from Data Gateway"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"negative",children:"Negative"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Additional complexity"}),": Two configuration systems to manage"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Discovery overhead"}),": Clients make extra RPC to fetch config"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Storage required"}),": Server must persist named configurations"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Validation needed"}),": Server must validate client-provided configs"]}),"\n"]}),"\n",(0,s.jsx)(e.h3,{id:"neutral",children:"Neutral"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Learning curve"}),": Teams must understand dual configuration model"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"Migration path"}),": Existing systems need gradual migration"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"implementation-notes",children:"Implementation Notes"}),"\n",(0,s.jsx)(e.h3,{id:"configuration-storage",children:"Configuration Storage"}),"\n",(0,s.jsx)(e.p,{children:"Server stores named configurations:"}),"\n",(0,s.jsx)(e.p,{children:"config/\n\u251c\u2500\u2500 named/\n\u2502   \u251c\u2500\u2500 user-profiles.yaml\n\u2502   \u251c\u2500\u2500 session-cache.yaml\n\u2502   \u251c\u2500\u2500 event-queue.yaml\n\u2502   \u2514\u2500\u2500 analytics-stream.yaml\n\u2514\u2500\u2500 templates/\n\u251c\u2500\u2500 key-value.yaml\n\u251c\u2500\u2500 queue.yaml\n\u2514\u2500\u2500 pubsub.yaml"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:"\n### Configuration Validation\n\nServer validates all configurations:\n\n"})}),"\n",(0,s.jsxs)(e.p,{children:["impl ConfigValidator {\nfn validate(&self, config: &ClientConfig) -> Result<(), Vec",(0,s.jsx)(e.validationerror,{children:"> {\nlet mut errors = Vec::new();"})]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"    // Check backend compatibility with pattern\n    if config.pattern == AccessPattern::Queue\n       && config.backend.type != BackendType::Kafka {\n        errors.push(ValidationError::IncompatibleBackend);\n    }\n\n    // Check namespace exists\n    if !self.namespace_exists(&config.namespace) {\n        errors.push(ValidationError::UnknownNamespace);\n    }\n\n    // Check rate limits are reasonable\n    if config.rate_limit.requests_per_second > MAX_RPS {\n        errors.push(ValidationError::RateLimitTooHigh);\n    }\n\n    if errors.is_empty() { Ok(()) } else { Err(errors) }\n}\n"})}),"\n",(0,s.jsx)(e.p,{children:"}"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:"\n### Configuration Caching\n\nClient caches configurations locally:\n\n"})}),"\n",(0,s.jsx)(e.p,{children:"type ConfigCache struct {\ncache map[string]*ClientConfig\nttl   time.Duration\n}"}),"\n",(0,s.jsx)(e.p,{children:"func (c *ConfigCache) Get(name string) (*ClientConfig, error) {\nif config, ok := c.cache[name]; ok {\nreturn config, nil\n}"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{children:"// Fetch from server\nconfig, err := c.client.GetConfig(name)\nif err != nil {\n    return nil, err\n}\n\nc.cache[name] = config\nreturn config, nil\n"})}),"\n",(0,s.jsx)(e.p,{children:"}"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-text",children:"\n## References\n\n- [Netflix Data Gateway Architecture](https://netflixtechblog.com/data-gateway-a-platform-for-growing-and-protecting-the-data-tier-f1-2019-3fd1a829503)\n- ADR-002: Client-Originated Configuration\n- ADR-003: Protobuf as Single Source of Truth\n- ADR-006: Namespace and Multi-Tenancy\n- ADR-029: Protocol Recording with Protobuf Tagging\n- ADR-030: Schema Recording with Protobuf Tagging\n\n## Revision History\n\n- 2025-10-08: Added protobuf tagging section with schema and protocol recording examples\n- 2025-10-07: Initial draft and acceptance\n\n"})})]})}function g(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(d,{...n})}):d(n)}}}]);