"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[18423],{28453:(e,n,a)=>{a.d(n,{R:()=>t,x:()=>c});var s=a(96540);const i={},r=s.createContext(i);function t(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),s.createElement(r.Provider,{value:n},e.children)}},66109:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>t,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"adr-006","title":"Namespace and Multi-Tenancy","description":"Context","source":"@site/../docs-cms/adr/adr-006-namespace-multi-tenancy.md","sourceDirName":".","slug":"/adr-006","permalink":"/prism-data-layer/adr/adr-006","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/adr-006-namespace-multi-tenancy.md","tags":[{"inline":true,"label":"architecture","permalink":"/prism-data-layer/adr/tags/architecture"},{"inline":true,"label":"backend","permalink":"/prism-data-layer/adr/tags/backend"},{"inline":true,"label":"operations","permalink":"/prism-data-layer/adr/tags/operations"}],"version":"current","frontMatter":{"date":"2025-10-05T00:00:00.000Z","deciders":"Core Team","doc_uuid":"1a520aa8-c32e-4e5b-bcc7-f27ef454d1d4","id":"adr-006","project_id":"prism-data-layer","status":"Accepted","tags":["architecture","backend","operations"],"title":"Namespace and Multi-Tenancy"},"sidebar":"adrSidebar","previous":{"title":"Backend Plugin Architecture \u2022 ADR-005","permalink":"/prism-data-layer/adr/adr-005"},"next":{"title":"Authentication and Authorization \u2022 ADR-007","permalink":"/prism-data-layer/adr/adr-007"}}');var i=a(74848),r=a(28453);const t={date:new Date("2025-10-05T00:00:00.000Z"),deciders:"Core Team",doc_uuid:"1a520aa8-c32e-4e5b-bcc7-f27ef454d1d4",id:"adr-006",project_id:"prism-data-layer",status:"Accepted",tags:["architecture","backend","operations"],title:"Namespace and Multi-Tenancy"},c=void 0,d={},l=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Namespace Design",id:"namespace-design",level:3},{value:"Namespace to Backend Mapping",id:"namespace-to-backend-mapping",level:3}];function o(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",shardinfo:"shardinfo",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,i.jsx)(n.p,{children:"Multiple applications will use Prism, each with their own data. We need to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Isolate data"})," between applications (security, compliance)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Prevent noisy neighbors"})," (one app's traffic shouldn't affect others)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Enable self-service"})," (teams create their own datasets without platform team)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Simplify operations"})," (consistent naming, easy to find data)"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Netflix's Data Gateway uses ",(0,i.jsx)(n.strong,{children:"namespaces"})," as the abstraction layer between logical data models and physical storage."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Problem"}),": How do we achieve multi-tenancy with isolation, performance, and operational simplicity?"]}),"\n",(0,i.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.strong,{children:"namespaces"})," as the primary isolation boundary, with ",(0,i.jsx)(n.strong,{children:"sharded deployments"})," for fault isolation."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Namespace"}),": Logical name for a dataset (e.g., ",(0,i.jsx)(n.code,{children:"user-profiles"}),", ",(0,i.jsx)(n.code,{children:"video-events"}),")"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Shard"}),": Physical deployment serving one or more namespaces"]}),"\n",(0,i.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,i.jsx)(n.h3,{id:"namespace-design",children:"Namespace Design"}),"\n",(0,i.jsx)(n.p,{children:"Namespace = Logical Dataset Name"}),"\n",(0,i.jsx)(n.p,{children:"Examples:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"user-profiles         (KeyValue, user data)"}),"\n",(0,i.jsx)(n.li,{children:"video-view-events     (TimeSeries, analytics)"}),"\n",(0,i.jsx)(n.li,{children:"social-graph          (Graph, relationships)"}),"\n",(0,i.jsx)(n.li,{children:"payment-transactions  (KeyValue, financial data)"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n**Properties**:\n- Globally unique within Prism\n- Maps to backend-specific storage (table, topic, keyspace)\n- Carries configuration (backend type, capacity, policies)\n- Unit of access control\n\n### Namespace Configuration\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"namespace: user-profiles"}),"\n",(0,i.jsx)(n.h1,{id:"what-abstraction",children:"What abstraction?"}),"\n",(0,i.jsx)(n.p,{children:"abstraction: keyvalue"}),"\n",(0,i.jsx)(n.h1,{id:"which-backend",children:"Which backend?"}),"\n",(0,i.jsx)(n.p,{children:"backend: postgres"}),"\n",(0,i.jsx)(n.h1,{id:"capacity-estimates",children:"Capacity estimates"}),"\n",(0,i.jsx)(n.p,{children:"capacity:\nestimated_read_rps: 5000\nestimated_write_rps: 500\nestimated_data_size_gb: 100"}),"\n",(0,i.jsx)(n.h1,{id:"policies",children:"Policies"}),"\n",(0,i.jsx)(n.p,{children:"policies:\nretention_days: null  # Keep forever\nconsistency: strong\ncache_enabled: true\ncache_ttl_seconds: 300"}),"\n",(0,i.jsx)(n.h1,{id:"access-control",children:"Access control"}),"\n",(0,i.jsx)(n.p,{children:"access:\nowners:\n- team: user-service-team\nconsumers:\n- service: user-api (read-write)\n- service: analytics-pipeline (read-only)"}),"\n",(0,i.jsx)(n.h1,{id:"backend-specific-config",children:"Backend-specific config"}),"\n",(0,i.jsx)(n.p,{children:"backend_config:\npostgres:\nconnection_string: postgres://prod-postgres-1/prism\npool_size: 20\ntable_name: user_profiles"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n### Multi-Tenancy Strategies\n\nNetflix uses **sharded deployments** (single-tenant architecture):\n\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  Prism Shard 1  \u2502      \u2502  Prism Shard 2  \u2502      \u2502  Prism Shard 3  \u2502\n\u2502                 \u2502      \u2502                 \u2502      \u2502                 \u2502\n\u2502  Namespaces:    \u2502      \u2502  Namespaces:    \u2502      \u2502  Namespaces:    \u2502\n\u2502  - user-profiles\u2502      \u2502  - video-events \u2502      \u2502  - social-graph \u2502\n\u2502  - user-sessions\u2502      \u2502  - play-events  \u2502      \u2502  - friend-graph \u2502\n\u2502                 \u2502      \u2502                 \u2502      \u2502                 \u2502\n\u2502    Backend:     \u2502      \u2502    Backend:     \u2502      \u2502    Backend:     \u2502\n\u2502    Postgres 1   \u2502      \u2502    Kafka 1      \u2502      \u2502    Neptune 1    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Why sharding?"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Fault isolation"}),": Shard 1 crash doesn't affect Shard 2"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance isolation"}),": Heavy load on Shard 2 doesn't slow Shard 1"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Blast radius"}),": Security breach limited to one shard"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Capacity"}),": Add shards independently"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Shard Assignment"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// Deterministic shard selection\nfn select_shard(namespace: &str, shards: &[Shard]) -> &Shard {\n    let hash = hash_namespace(namespace);\n    &shards[hash % shards.len()]\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"namespace-to-backend-mapping",children:"Namespace to Backend Mapping"}),"\n",(0,i.jsx)(n.p,{children:"Namespace: user-profiles\n\u2193\nBackend: postgres\n\u2193\nPhysical: prism_db.user_profiles table"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\nNamespace: video-events\n    \u2193\nBackend: kafka\n    \u2193\nPhysical: events-video topic (20 partitions)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Namespace: social-graph\n\u2193\nBackend: neptune\n\u2193\nPhysical: social-graph-prod instance"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n### Alternatives Considered\n\n1. **Shared Database, Schema-per-Tenant**\n   - Pros: Simple, fewer resources\n   - Cons: Noisy neighbors, blast radius issues\n   - Rejected: Doesn't scale, risky\n\n2. **Database-per-Namespace**\n   - Pros: Complete isolation\n   - Cons: Operational nightmare (1000s of databases)\n   - Rejected: Too many moving parts\n\n3. **Multi-Tenant Prism with Row-Level Security**\n   - Pros: Efficient resource usage\n   - Cons: One bug = all data leaked\n   - Rejected: Security risk too high\n\n4. **Kubernetes Namespaces**\n   - Pros: Leverages K8s multi-tenancy\n   - Cons: We're not using K8s (see ADR-001)\n   - Rejected: Doesn't apply\n\n## Consequences\n\n### Positive\n\n- **Strong Isolation**: Each shard is independent\n- **Predictable Performance**: No noisy neighbors\n- **Operational Clarity**: Easy to reason about deployments\n- **Security**: Blast radius limited to shard\n- **Scalability**: Add shards as needed\n\n### Negative\n\n- **Resource Usage**: More instances than multi-tenant approach\n  - *Mitigation*: Right-size instances; co-locate small namespaces\n- **Complexity**: More deployments to manage\n  - *Mitigation*: Automation, declarative config\n\n### Neutral\n\n- **Shard Rebalancing**: Moving namespaces between shards is hard\n  - Use shadow traffic (ADR-009) for migrations\n\n## Implementation Notes\n\n### Namespace Lifecycle\n\n1. **Creation**:\n"})}),"\n",(0,i.jsx)(n.h1,{id:"via-protobuf-definition",children:"Via protobuf definition"}),"\n",(0,i.jsx)(n.p,{children:'message UserProfile {\noption (prism.namespace) = "user-profiles";\noption (prism.backend) = "postgres";\n// ...\n}'}),"\n",(0,i.jsx)(n.h1,{id:"or-via-api",children:"Or via API"}),"\n",(0,i.jsxs)(n.p,{children:["prism-cli create-namespace ",(0,i.jsx)(n.br,{}),"\n--name user-profiles ",(0,i.jsx)(n.br,{}),"\n--abstraction keyvalue ",(0,i.jsx)(n.br,{}),"\n--backend postgres ",(0,i.jsx)(n.br,{}),"\n--capacity-estimate-rps 5000"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n2. **Provisioning**:\n- Capacity planner calculates requirements\n- Backend resources created (tables, topics, etc.)\n- Namespace registered in control plane\n- Monitoring and alerts configured\n\n3. **Access Control**:\n"})}),"\n",(0,i.jsx)(n.p,{children:"// Check if service can access namespace\nif !authz.can_access(service_id, namespace, AccessLevel::ReadWrite) {\nreturn Err(Error::Forbidden);\n}"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n4. **Deletion**:\n- Mark namespace as deleted\n- Stop accepting new requests\n- Drain existing requests\n- Delete backend resources\n- Archive audit logs\n\n### Namespace Metadata Store\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"pub struct NamespaceMetadata {\npub name: String,\npub abstraction: AbstractionType,\npub backend: String,\npub shard_id: String,\npub capacity: CapacitySpec,\npub policies: NamespacePolicies,\npub access_control: AccessControl,\npub backend_config: serde_json::Value,\npub created_at: Timestamp,\npub status: NamespaceStatus,\n}"}),"\n",(0,i.jsx)(n.p,{children:"pub enum NamespaceStatus {\nProvisioning,\nActive,\nDegraded,\nDeleting,\nDeleted,\n}"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\nStored in:\n- **Control plane database** (Postgres)\n- **In-memory cache** in each shard (fast lookups)\n- **Watch for updates** (long-polling or pub/sub)\n\n### Namespace Discovery\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"// Client discovers which shard serves a namespace\npub struct DiscoveryClient {\ncontrol_plane_url: String,\n}"}),"\n",(0,i.jsxs)(n.p,{children:["impl DiscoveryClient {\npub async fn resolve(&self, namespace: &str) -> Result",(0,i.jsx)(n.shardinfo,{children:' {\nlet response = self.http_client\n.get(&format!("{}/namespaces/{}", self.control_plane_url, namespace))\n.send()\n.await?;'})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    let metadata: NamespaceMetadata = response.json().await?;\n    Ok(ShardInfo {\n        endpoints: metadata.shard_endpoints(),\n        backend: metadata.backend,\n    })\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"}"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n### Co-Location Strategy\n\nSmall namespaces can share a shard:\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"shard: prod-shard-1\nnamespaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"user-profiles       (5000 RPS)"}),"\n",(0,i.jsx)(n.li,{children:"user-preferences    (500 RPS)   # Co-located"}),"\n",(0,i.jsx)(n.li,{children:"user-settings       (200 RPS)   # Co-located"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\nLarge namespaces get dedicated shards:\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"shard: prod-shard-video-events\nnamespaces:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"video-events        (200,000 RPS)  # Dedicated shard"}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"\n## References\n\n- Netflix Data Gateway: Namespace Abstraction\n- [AWS Multi-Tenancy Strategies](https://aws.amazon.com/blogs/architecture/multi-tenant-saas-architecture/)\n- ADR-002: Client-Originated Configuration\n- ADR-005: Backend Plugin Architecture\n- ADR-007: Authentication and Authorization\n\n## Revision History\n\n- 2025-10-05: Initial draft and acceptance\n\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}}}]);