"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[9271],{498:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"layered-interface-hierarchy","title":"ADR-024: Layered Interface Hierarchy","description":"Context","source":"@site/../docs-cms/adr/024-layered-interface-hierarchy.md","sourceDirName":".","slug":"/layered-interface-hierarchy","permalink":"/prism-data-layer/adr/layered-interface-hierarchy","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/024-layered-interface-hierarchy.md","tags":[{"inline":true,"label":"architecture","permalink":"/prism-data-layer/adr/tags/architecture"},{"inline":true,"label":"api-design","permalink":"/prism-data-layer/adr/tags/api-design"},{"inline":true,"label":"interfaces","permalink":"/prism-data-layer/adr/tags/interfaces"},{"inline":true,"label":"use-cases","permalink":"/prism-data-layer/adr/tags/use-cases"}],"version":"current","sidebarPosition":24,"frontMatter":{"title":"ADR-024: Layered Interface Hierarchy","status":"Accepted","date":"2025-10-07T00:00:00.000Z","deciders":"Core Team","tags":["architecture","api-design","interfaces","use-cases"]},"sidebar":"adrSidebar","previous":{"title":"ADR-023: gRPC-First Interface Design","permalink":"/prism-data-layer/adr/grpc-first-interface-design"},"next":{"title":"ADR-025: Container Plugin Model","permalink":"/prism-data-layer/adr/container-plugin-model"}}');var r=s(4848),t=s(8453);const a={title:"ADR-024: Layered Interface Hierarchy",status:"Accepted",date:new Date("2025-10-07T00:00:00.000Z"),deciders:"Core Team",tags:["architecture","api-design","interfaces","use-cases"]},o=void 0,l={},c=[{value:"Context",id:"context",level:2},{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Layer Hierarchy",id:"layer-hierarchy",level:3},{value:"Layer 1: Session Service",id:"layer-1-session-service",level:3},{value:"Layer 2: Queue Service",id:"layer-2-queue-service",level:3},{value:"Layer 3: PubSub Service",id:"layer-3-pubsub-service",level:3},{value:"Layer 4: Reader Service",id:"layer-4-reader-service",level:3},{value:"Layer 5: Transact Service",id:"layer-5-transact-service",level:3},{value:"Cross-Layer Concepts",id:"cross-layer-concepts",level:3},{value:"Alternatives Considered",id:"alternatives-considered",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Neutral",id:"neutral",level:3},{value:"References",id:"references",level:2},{value:"Revision History",id:"revision-history",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(n.p,{children:"Prism needs a coherent interface hierarchy that:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Starts with basic primitives (sessions, auth, auditing)"}),"\n",(0,r.jsx)(n.li,{children:"Builds up to use-case-specific operations"}),"\n",(0,r.jsx)(n.li,{children:"Maintains clean separation of concerns"}),"\n",(0,r.jsx)(n.li,{children:"Supports multiple backend implementations"}),"\n",(0,r.jsx)(n.li,{children:"Enables progressive disclosure of complexity"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Interface Layers:"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Session Layer"}),": Authorization, auditing, connection state"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Queue Layer"}),": Kafka-style message queues"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Pub/Sub Layer"}),": NATS-style publish-subscribe"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Paged Reader Layer"}),": Database pagination and queries"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Transact Write Layer"}),": Two-table transactional writes"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsxs)(n.p,{children:["Implement ",(0,r.jsx)(n.strong,{children:"layered interface hierarchy"})," with clear dependencies:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Session as foundation"}),": All operations require active session"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Layer independence"}),": Each use-case layer operates independently"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Composable operations"}),": Clients can use multiple layers simultaneously"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backend polymorphism"}),": Each layer supports multiple backend implementations"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Protobuf definitions"}),": All interfaces defined in protobuf"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"rationale",children:"Rationale"}),"\n",(0,r.jsx)(n.h3,{id:"layer-hierarchy",children:"Layer Hierarchy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502      Client Applications         \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u2502                        \u2502                        \u2502\n        \u2502                        \u2502                        \u2502\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Queue Layer    \u2502    \u2502 PubSub Layer    \u2502    \u2502 Reader Layer    \u2502\n\u2502 (Kafka-style)  \u2502    \u2502 (NATS-style)    \u2502    \u2502 (DB pagination) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                        \u2502                        \u2502\n        \u2502             \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2510                \u2502\n        \u2502             \u2502 Transact Layer  \u2502                \u2502\n        \u2502             \u2502 (2-table write) \u2502                \u2502\n        \u2502             \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2518                \u2502\n        \u2502                        \u2502                        \u2502\n        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502     Session Layer        \u2502\n                    \u2502  (auth, audit, state)    \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                                 \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502     Prism Proxy Core     \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,r.jsx)(n.h3,{id:"layer-1-session-service",children:"Layer 1: Session Service"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Foundation for all operations - authentication, authorization, auditing, connection state"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'// proto/prism/session/v1/session_service.proto\nsyntax = "proto3";\n\npackage prism.session.v1;\n\nimport "google/protobuf/timestamp.proto";\nimport "prism/config/v1/client_config.proto";\n\nservice SessionService {\n  // Create new session with client configuration\n  rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);\n\n  // Close session cleanly\n  rpc CloseSession(CloseSessionRequest) returns (CloseSessionResponse);\n\n  // Heartbeat to keep session alive\n  rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);\n\n  // Get session info\n  rpc GetSession(GetSessionRequest) returns (GetSessionResponse);\n}\n\nmessage CreateSessionRequest {\n  // Authentication credentials\n  oneof auth {\n    string api_key = 1;\n    string jwt_token = 2;\n    MutualTLSAuth mtls = 3;\n  }\n\n  // Client configuration (named or inline)\n  oneof config {\n    string config_name = 4;\n    prism.config.v1.ClientConfig inline_config = 5;\n  }\n\n  // Client metadata\n  string client_id = 6;\n  string client_version = 7;\n}\n\nmessage CreateSessionResponse {\n  // Session token for subsequent requests\n  string session_token = 1;\n\n  // Session metadata\n  string session_id = 2;\n  google.protobuf.Timestamp created_at = 3;\n  google.protobuf.Timestamp expires_at = 4;\n\n  // Resolved configuration\n  prism.config.v1.ClientConfig config = 5;\n}\n\nmessage CloseSessionRequest {\n  string session_token = 1;\n  bool force = 2;  // Force close even with pending operations\n}\n\nmessage CloseSessionResponse {\n  bool success = 1;\n  string message = 2;\n}\n\nmessage HeartbeatRequest {\n  string session_token = 1;\n}\n\nmessage HeartbeatResponse {\n  google.protobuf.Timestamp server_time = 1;\n  int32 ttl_seconds = 2;\n}\n\nmessage MutualTLSAuth {\n  bytes client_cert = 1;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Session State:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Active sessions tracked server-side"}),"\n",(0,r.jsx)(n.li,{children:"Idle timeout (default: 5 minutes)"}),"\n",(0,r.jsx)(n.li,{children:"Max session duration (default: 24 hours)"}),"\n",(0,r.jsx)(n.li,{children:"Heartbeat keeps session alive"}),"\n",(0,r.jsx)(n.li,{children:"Clean closure releases resources"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"layer-2-queue-service",children:"Layer 2: Queue Service"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Kafka-style message queue operations"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'// proto/prism/queue/v1/queue_service.proto\nsyntax = "proto3";\n\npackage prism.queue.v1;\n\nimport "google/protobuf/timestamp.proto";\n\nservice QueueService {\n  // Publish message to topic\n  rpc Publish(PublishRequest) returns (PublishResponse);\n\n  // Subscribe to topic (server streaming)\n  rpc Subscribe(SubscribeRequest) returns (stream Message);\n\n  // Acknowledge message processing\n  rpc Acknowledge(AcknowledgeRequest) returns (AcknowledgeResponse);\n\n  // Commit offset\n  rpc Commit(CommitRequest) returns (CommitResponse);\n\n  // Seek to offset\n  rpc Seek(SeekRequest) returns (SeekResponse);\n}\n\nmessage PublishRequest {\n  string session_token = 1;\n  string topic = 2;\n  bytes payload = 3;\n  map<string, string> headers = 4;\n  optional string partition_key = 5;\n}\n\nmessage PublishResponse {\n  string message_id = 1;\n  int64 offset = 2;\n  int32 partition = 3;\n}\n\nmessage SubscribeRequest {\n  string session_token = 1;\n  string topic = 2;\n  string consumer_group = 3;\n  optional int64 start_offset = 4;\n}\n\nmessage Message {\n  string message_id = 1;\n  bytes payload = 2;\n  map<string, string> headers = 3;\n  int64 offset = 4;\n  int32 partition = 5;\n  google.protobuf.Timestamp timestamp = 6;\n}\n\nmessage AcknowledgeRequest {\n  string session_token = 1;\n  string message_id = 2;\n}\n\nmessage AcknowledgeResponse {\n  bool success = 1;\n}\n\nmessage CommitRequest {\n  string session_token = 1;\n  string topic = 2;\n  int32 partition = 3;\n  int64 offset = 4;\n}\n\nmessage CommitResponse {\n  bool success = 1;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Backend Mapping:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Kafka"}),": Direct mapping to topics/partitions/offsets"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"NATS JetStream"}),": Stream/consumer/sequence"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Postgres"}),": Table-based queue with SKIP LOCKED"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"layer-3-pubsub-service",children:"Layer 3: PubSub Service"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": NATS-style publish-subscribe with topics and wildcards"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'// proto/prism/pubsub/v1/pubsub_service.proto\nsyntax = "proto3";\n\npackage prism.pubsub.v1;\n\nimport "google/protobuf/timestamp.proto";\n\nservice PubSubService {\n  // Publish event to topic\n  rpc Publish(PublishRequest) returns (PublishResponse);\n\n  // Subscribe to topic pattern (server streaming)\n  rpc Subscribe(SubscribeRequest) returns (stream Event);\n\n  // Unsubscribe from topic\n  rpc Unsubscribe(UnsubscribeRequest) returns (UnsubscribeResponse);\n}\n\nmessage PublishRequest {\n  string session_token = 1;\n  string topic = 2;  // e.g., "events.user.created"\n  bytes payload = 3;\n  map<string, string> metadata = 4;\n}\n\nmessage PublishResponse {\n  string event_id = 1;\n  google.protobuf.Timestamp published_at = 2;\n}\n\nmessage SubscribeRequest {\n  string session_token = 1;\n  string topic_pattern = 2;  // e.g., "events.user.*"\n  optional string queue_group = 3;  // For load balancing\n}\n\nmessage Event {\n  string event_id = 1;\n  string topic = 2;\n  bytes payload = 3;\n  map<string, string> metadata = 4;\n  google.protobuf.Timestamp timestamp = 5;\n}\n\nmessage UnsubscribeRequest {\n  string session_token = 1;\n  string topic_pattern = 2;\n}\n\nmessage UnsubscribeResponse {\n  bool success = 1;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Backend Mapping:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"NATS"}),": Native subject-based routing with wildcards"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Kafka"}),": Topic prefix matching"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Redis Pub/Sub"}),": Channel pattern subscription"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"layer-4-reader-service",children:"Layer 4: Reader Service"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Database-style paged reading and queries"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'// proto/prism/reader/v1/reader_service.proto\nsyntax = "proto3";\n\npackage prism.reader.v1;\n\nimport "google/protobuf/struct.proto";\n\nservice ReaderService {\n  // Read pages of data (server streaming)\n  rpc Read(ReadRequest) returns (stream Page);\n\n  // Query with filters (server streaming)\n  rpc Query(QueryRequest) returns (stream Row);\n\n  // Count matching records\n  rpc Count(CountRequest) returns (CountResponse);\n}\n\nmessage ReadRequest {\n  string session_token = 1;\n  string collection = 2;\n  int32 page_size = 3;\n  optional string cursor = 4;  // Continuation token\n  repeated string fields = 5;  // Projection\n}\n\nmessage Page {\n  repeated Row rows = 1;\n  optional string next_cursor = 2;\n  bool has_more = 3;\n}\n\nmessage QueryRequest {\n  string session_token = 1;\n  string collection = 2;\n  Filter filter = 3;\n  repeated Sort sort = 4;\n  int32 page_size = 5;\n  optional string cursor = 6;\n}\n\nmessage Filter {\n  oneof filter {\n    FieldFilter field = 1;\n    CompositeFilter composite = 2;\n  }\n}\n\nmessage FieldFilter {\n  string field = 1;\n  Operator op = 2;\n  google.protobuf.Value value = 3;\n\n  enum Operator {\n    OPERATOR_UNSPECIFIED = 0;\n    OPERATOR_EQUALS = 1;\n    OPERATOR_NOT_EQUALS = 2;\n    OPERATOR_GREATER_THAN = 3;\n    OPERATOR_LESS_THAN = 4;\n    OPERATOR_IN = 5;\n    OPERATOR_CONTAINS = 6;\n  }\n}\n\nmessage CompositeFilter {\n  LogicalOperator op = 1;\n  repeated Filter filters = 2;\n\n  enum LogicalOperator {\n    LOGICAL_OPERATOR_UNSPECIFIED = 0;\n    LOGICAL_OPERATOR_AND = 1;\n    LOGICAL_OPERATOR_OR = 2;\n  }\n}\n\nmessage Sort {\n  string field = 1;\n  Direction direction = 2;\n\n  enum Direction {\n    DIRECTION_UNSPECIFIED = 0;\n    DIRECTION_ASC = 1;\n    DIRECTION_DESC = 2;\n  }\n}\n\nmessage Row {\n  map<string, google.protobuf.Value> fields = 1;\n}\n\nmessage CountRequest {\n  string session_token = 1;\n  string collection = 2;\n  optional Filter filter = 3;\n}\n\nmessage CountResponse {\n  int64 count = 1;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Backend Mapping:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Postgres"}),": SQL queries with LIMIT/OFFSET"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SQLite"}),": Same as Postgres"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DynamoDB"}),": Query with pagination tokens"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Neptune"}),": Gremlin queries with pagination"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"layer-5-transact-service",children:"Layer 5: Transact Service"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Transactional writes across two tables (inbox/outbox pattern)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'// proto/prism/transact/v1/transact_service.proto\nsyntax = "proto3";\n\npackage prism.transact.v1;\n\nimport "google/protobuf/struct.proto";\n\nservice TransactService {\n  // Single transactional write\n  rpc Write(WriteRequest) returns (WriteResponse);\n\n  // Streaming transaction\n  rpc Transaction(stream TransactRequest) returns (stream TransactResponse);\n}\n\nmessage WriteRequest {\n  string session_token = 1;\n\n  // Data table write\n  DataWrite data = 2;\n\n  // Mailbox table write\n  MailboxWrite mailbox = 3;\n\n  // Transaction options\n  TransactionOptions options = 4;\n}\n\nmessage DataWrite {\n  string table = 1;\n  map<string, google.protobuf.Value> record = 2;\n  WriteMode mode = 3;\n\n  enum WriteMode {\n    WRITE_MODE_UNSPECIFIED = 0;\n    WRITE_MODE_INSERT = 1;\n    WRITE_MODE_UPDATE = 2;\n    WRITE_MODE_UPSERT = 3;\n  }\n}\n\nmessage MailboxWrite {\n  string mailbox_id = 1;\n  bytes message = 2;\n  map<string, string> metadata = 3;\n}\n\nmessage TransactionOptions {\n  IsolationLevel isolation = 1;\n  int32 timeout_ms = 2;\n\n  enum IsolationLevel {\n    ISOLATION_LEVEL_UNSPECIFIED = 0;\n    ISOLATION_LEVEL_READ_COMMITTED = 1;\n    ISOLATION_LEVEL_SERIALIZABLE = 2;\n  }\n}\n\nmessage WriteResponse {\n  string transaction_id = 1;\n  bool committed = 2;\n  DataWriteResult data_result = 3;\n  MailboxWriteResult mailbox_result = 4;\n}\n\nmessage DataWriteResult {\n  int64 rows_affected = 1;\n  map<string, google.protobuf.Value> generated_values = 2;\n}\n\nmessage MailboxWriteResult {\n  string message_id = 1;\n  int64 sequence = 2;\n}\n\n// For streaming transactions\nmessage TransactRequest {\n  oneof request {\n    BeginTransaction begin = 1;\n    WriteRequest write = 2;\n    CommitTransaction commit = 3;\n    RollbackTransaction rollback = 4;\n  }\n}\n\nmessage BeginTransaction {\n  string session_token = 1;\n  TransactionOptions options = 2;\n}\n\nmessage CommitTransaction {}\n\nmessage RollbackTransaction {}\n\nmessage TransactResponse {\n  oneof response {\n    TransactionStarted started = 1;\n    WriteResponse write_result = 2;\n    TransactionCommitted committed = 3;\n    TransactionRolledBack rolled_back = 4;\n  }\n}\n\nmessage TransactionStarted {\n  string transaction_id = 1;\n}\n\nmessage TransactionCommitted {\n  bool success = 1;\n}\n\nmessage TransactionRolledBack {\n  string reason = 1;\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Backend Mapping:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Postgres"}),": Native transactions with two-table writes"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SQLite"}),": Same as Postgres"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DynamoDB"}),": TransactWriteItems with two items"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"cross-layer-concepts",children:"Cross-Layer Concepts"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Session Token Propagation:"}),"\nAll layers require session token in metadata or request:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'// Server: extract session from request\nasync fn validate_session(&self, token: &str) -> Result<Session, Status> {\n    self.session_store\n        .get(token)\n        .await\n        .ok_or_else(|| Status::unauthenticated("invalid session token"))\n}\n\n// All service methods start with validation\nasync fn publish(&self, req: Request<PublishRequest>) -> Result<Response<PublishResponse>, Status> {\n    let req = req.into_inner();\n    let session = self.validate_session(&req.session_token).await?;\n\n    // Use session for authorization, auditing, routing\n    // ...\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Auditing:"}),"\nSession layer provides audit hooks:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-rust",children:'struct AuditLog {\n    session_id: String,\n    operation: String,\n    resource: String,\n    timestamp: Timestamp,\n    success: bool,\n}\n\n// Logged for all operations\nself.audit_logger.log(AuditLog {\n    session_id: session.id,\n    operation: "queue.publish",\n    resource: format!("topic:{}", req.topic),\n    timestamp: Utc::now(),\n    success: true,\n});\n'})}),"\n",(0,r.jsx)(n.h3,{id:"alternatives-considered",children:"Alternatives Considered"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Monolithic service with all operations"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pros: Simple, single service"}),"\n",(0,r.jsx)(n.li,{children:"Cons: Tight coupling, hard to evolve independently"}),"\n",(0,r.jsx)(n.li,{children:"Rejected: Violates separation of concerns"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Backend-specific services (KafkaService, PostgresService)"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pros: Clear backend mapping"}),"\n",(0,r.jsx)(n.li,{children:"Cons: Leaks implementation, prevents backend swapping"}),"\n",(0,r.jsx)(n.li,{children:"Rejected: Violates abstraction goal"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Single generic DataService"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Pros: Ultimate flexibility"}),"\n",(0,r.jsx)(n.li,{children:"Cons: No type safety, unclear semantics"}),"\n",(0,r.jsx)(n.li,{children:"Rejected: Too generic, loses use-case clarity"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"consequences",children:"Consequences"}),"\n",(0,r.jsx)(n.h3,{id:"positive",children:"Positive"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clear separation"}),": Each layer has distinct purpose"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Progressive disclosure"}),": Clients use only what they need"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Independent evolution"}),": Layers evolve independently"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backend polymorphism"}),": Multiple backends per layer"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Type safety"}),": Protobuf enforces correct usage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Session foundation"}),": All operations audited and authorized"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"negative",children:"Negative"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multiple services"}),": More gRPC services to manage"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Session overhead"}),": All requests must validate session"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Complexity"}),": More interfaces to learn"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"neutral",children:"Neutral"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Service discovery"}),": Clients must know which service to use"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Version management"}),": Each layer versions independently"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"ADR-022: Dynamic Client Configuration"}),"\n",(0,r.jsx)(n.li,{children:"ADR-023: gRPC-First Interface Design"}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://microservices.io/patterns/data/transactional-outbox.html",children:"Inbox/Outbox Pattern"})}),"\n",(0,r.jsx)(n.li,{children:"Netflix Data Gateway Architecture"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"revision-history",children:"Revision History"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"2025-10-07: Initial draft and acceptance"}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var i=s(6540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);