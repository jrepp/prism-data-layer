"use strict";(globalThis.webpackChunkdocusaurus=globalThis.webpackChunkdocusaurus||[]).push([[96819],{28453:(n,e,t)=>{t.d(e,{R:()=>o,x:()=>l});var i=t(96540);const r={},s=i.createContext(r);function o(n){const e=i.useContext(s);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(s.Provider,{value:e},n.children)}},98826:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"adr-058","title":"Proxy Drain-on-Shutdown","description":"Status","source":"@site/../docs-cms/adr/ADR-058-proxy-drain-on-shutdown.md","sourceDirName":".","slug":"/adr-058","permalink":"/prism-data-layer/adr/adr-058","draft":false,"unlisted":false,"editUrl":"https://github.com/jrepp/prism-data-layer/tree/main/docs-cms/../docs-cms/adr/ADR-058-proxy-drain-on-shutdown.md","tags":[{"inline":true,"label":"proxy","permalink":"/prism-data-layer/adr/tags/proxy"},{"inline":true,"label":"lifecycle","permalink":"/prism-data-layer/adr/tags/lifecycle"},{"inline":true,"label":"shutdown","permalink":"/prism-data-layer/adr/tags/shutdown"},{"inline":true,"label":"drain","permalink":"/prism-data-layer/adr/tags/drain"},{"inline":true,"label":"reliability","permalink":"/prism-data-layer/adr/tags/reliability"}],"version":"current","frontMatter":{"date":"2025-01-16T00:00:00.000Z","deciders":"Core Team","doc_uuid":"8c2e5f3d-9a1b-4c5e-b6d7-4f8e9a0b1c2d","id":"adr-058","project_id":"prism-data-layer","status":"Accepted","tags":["proxy","lifecycle","shutdown","drain","reliability"],"title":"Proxy Drain-on-Shutdown"},"sidebar":"adrSidebar","previous":{"title":"Refactor pattern-launcher to prism-launcher as General Control Plane Launcher \u2022 ADR-057","permalink":"/prism-data-layer/adr/adr-057"}}');var r=t(74848),s=t(28453);const o={date:new Date("2025-01-16T00:00:00.000Z"),deciders:"Core Team",doc_uuid:"8c2e5f3d-9a1b-4c5e-b6d7-4f8e9a0b1c2d",id:"adr-058",project_id:"prism-data-layer",status:"Accepted",tags:["proxy","lifecycle","shutdown","drain","reliability"],title:"Proxy Drain-on-Shutdown"},l="ADR-058: Proxy Drain-on-Shutdown",a={},d=[{value:"Status",id:"status",level:2},{value:"Context",id:"context",level:2},{value:"Requirements",id:"requirements",level:3},{value:"Current Architecture",id:"current-architecture",level:3},{value:"Decision",id:"decision",level:2},{value:"State Machine",id:"state-machine",level:3},{value:"Implementation Components",id:"implementation-components",level:3},{value:"1. Lifecycle.proto Extension",id:"1-lifecycleproto-extension",level:4},{value:"2. ProxyServer Drain State",id:"2-proxyserver-drain-state",level:4},{value:"3. Frontend Connection Interception",id:"3-frontend-connection-interception",level:4},{value:"4. Pattern Runner Drain Logic",id:"4-pattern-runner-drain-logic",level:4},{value:"5. Shutdown Orchestration",id:"5-shutdown-orchestration",level:4},{value:"Admin Control Plane Integration",id:"admin-control-plane-integration",level:3},{value:"Timeout Handling",id:"timeout-handling",level:3},{value:"Consequences",id:"consequences",level:2},{value:"Positive",id:"positive",level:3},{value:"Negative",id:"negative",level:3},{value:"Risks",id:"risks",level:3},{value:"Implementation Plan",id:"implementation-plan",level:2},{value:"Testing Strategy",id:"testing-strategy",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Load Testing",id:"load-testing",level:3},{value:"References",id:"references",level:2},{value:"Related Work",id:"related-work",level:2}];function c(n){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"adr-058-proxy-drain-on-shutdown",children:"ADR-058: Proxy Drain-on-Shutdown"})}),"\n",(0,r.jsx)(e.h2,{id:"status",children:"Status"}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.strong,{children:"Accepted"})," - 2025-01-16"]}),"\n",(0,r.jsx)(e.h2,{id:"context",children:"Context"}),"\n",(0,r.jsx)(e.p,{children:"The prism-proxy needs graceful shutdown behavior when signaled to stop by prism-admin or receiving a termination signal. Current implementation immediately stops accepting connections and kills pattern processes, which can result in:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Lost in-flight requests from clients"}),"\n",(0,r.jsx)(e.li,{children:"Aborted backend operations mid-transaction"}),"\n",(0,r.jsx)(e.li,{children:"Incomplete data writes"}),"\n",(0,r.jsx)(e.li,{children:"Poor user experience during rolling updates"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Frontend Drain Phase"}),": Stop accepting NEW frontend connections while completing existing requests"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Backend Work Completion"}),": Wait for all backend operations attached to frontend work to complete"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Pattern Runner Coordination"}),": Signal pattern runners to drain (finish current work, reject new work)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Clean Exit"}),": Only exit when all frontend connections closed AND all pattern processes exited"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Timeout Safety"}),": Force shutdown after timeout to prevent indefinite hangs"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"current-architecture",children:"Current Architecture"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  prism-admin    \u2502 (sends stop command)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502 gRPC\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   prism-proxy   \u2502\u25c4\u2500\u2500\u2500\u2500 Frontend gRPC connections (KeyValue, PubSub, etc.)\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502 Lifecycle gRPC\n         \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Pattern Runners \u2502 (keyvalue-runner, consumer-runner, etc.)\n\u2502  (Go processes) \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n         \u2502\n         \u25bc\n    Backends (Redis, NATS, Postgres, etc.)\n"})}),"\n",(0,r.jsx)(e.h2,{id:"decision",children:"Decision"}),"\n",(0,r.jsx)(e.h3,{id:"state-machine",children:"State Machine"}),"\n",(0,r.jsx)(e.p,{children:"Proxy states during shutdown:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-text",children:"Running \u2192 Draining \u2192 Stopping \u2192 Stopped\n"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Running"}),": Normal operation, accepting all connections"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Draining"}),":\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Reject NEW frontend connections (return UNAVAILABLE)"}),"\n",(0,r.jsx)(e.li,{children:"Complete existing frontend requests"}),"\n",(0,r.jsx)(e.li,{children:"Signal pattern runners to drain"}),"\n",(0,r.jsx)(e.li,{children:"Track active request count"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Stopping"}),":\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"All frontend connections closed"}),"\n",(0,r.jsx)(e.li,{children:"Send Stop to pattern runners"}),"\n",(0,r.jsx)(e.li,{children:"Wait for pattern processes to exit"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Stopped"}),": Clean exit"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"implementation-components",children:"Implementation Components"}),"\n",(0,r.jsx)(e.h4,{id:"1-lifecycleproto-extension",children:"1. Lifecycle.proto Extension"}),"\n",(0,r.jsxs)(e.p,{children:["Add ",(0,r.jsx)(e.code,{children:"DrainRequest"})," message to ",(0,r.jsx)(e.code,{children:"lifecycle.proto"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-protobuf",children:"// Drain request tells pattern to enter drain mode\nmessage DrainRequest {\n  // Graceful drain timeout in seconds\n  int32 timeout_seconds = 1;\n\n  // Reason for drain (for logging/debugging)\n  string reason = 2;\n}\n"})}),"\n",(0,r.jsxs)(e.p,{children:["Add to ",(0,r.jsx)(e.code,{children:"ProxyCommand"})," in ",(0,r.jsx)(e.code,{children:"proxy_control_plane.proto"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-protobuf",children:"message ProxyCommand {\n  string correlation_id = 1;\n\n  oneof command {\n    // ... existing commands ...\n    DrainRequest drain = 8;  // NEW\n  }\n}\n"})}),"\n",(0,r.jsx)(e.h4,{id:"2-proxyserver-drain-state",children:"2. ProxyServer Drain State"}),"\n",(0,r.jsxs)(e.p,{children:["Add connection tracking and drain state to ",(0,r.jsx)(e.code,{children:"ProxyServer"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:"pub struct ProxyServer {\n    router: Arc&lt;Router&gt;,\n    listen_address: String,\n    shutdown_tx: Option&lt;oneshot::Sender&lt;()&gt;&gt;,\n\n    // NEW: Drain state\n    drain_state: Arc&lt;RwLock&lt;DrainState&gt;&gt;,\n    active_connections: Arc&lt;AtomicUsize&gt;,\n}\n\nenum DrainState {\n    Running,\n    Draining { started_at: Instant },\n    Stopping,\n}\n"})}),"\n",(0,r.jsx)(e.h4,{id:"3-frontend-connection-interception",children:"3. Frontend Connection Interception"}),"\n",(0,r.jsx)(e.p,{children:"Use tonic interceptor to reject new connections during drain:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:'fn connection_interceptor(\n    mut req: Request&lt;()&gt;,\n    drain_state: Arc&lt;RwLock&lt;DrainState&gt;&gt;,\n) -&gt; Result&lt;Request&lt;()&gt;, Status&gt; {\n    let state = drain_state.read().await;\n    match *state {\n        DrainState::Draining { .. } | DrainState::Stopping =&gt; {\n            Err(Status::unavailable("Server is draining, not accepting new connections"))\n        }\n        DrainState::Running =&gt; Ok(req),\n    }\n}\n'})}),"\n",(0,r.jsx)(e.h4,{id:"4-pattern-runner-drain-logic",children:"4. Pattern Runner Drain Logic"}),"\n",(0,r.jsxs)(e.p,{children:["Pattern runners receive ",(0,r.jsx)(e.code,{children:"DrainRequest"})," via control plane and:"]}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsx)(e.li,{children:"Stop accepting new work (return UNAVAILABLE on new RPCs)"}),"\n",(0,r.jsx)(e.li,{children:"Complete pending backend operations"}),"\n",(0,r.jsx)(e.li,{children:"Send completion signal back to proxy"}),"\n",(0,r.jsx)(e.li,{children:"Wait for Stop command"}),"\n"]}),"\n",(0,r.jsxs)(e.p,{children:["Example in ",(0,r.jsx)(e.code,{children:"keyvalue-runner"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-go",children:'func (a *KeyValuePluginAdapter) Drain(ctx context.Context, timeoutSeconds int32) error {\n    log.Printf("[DRAIN] Entering drain mode (timeout: %ds)", timeoutSeconds)\n\n    // Set drain flag\n    a.draining.Store(true)\n\n    // Wait for pending operations (with timeout)\n    deadline := time.Now().Add(time.Duration(timeoutSeconds) * time.Second)\n    for a.pendingOps.Load() &gt; 0 {\n        if time.Now().After(deadline) {\n            log.Printf("[DRAIN] Timeout waiting for %d pending ops", a.pendingOps.Load())\n            break\n        }\n        time.Sleep(50 * time.Millisecond)\n    }\n\n    log.Printf("[DRAIN] Drain complete, ready for stop")\n    return nil\n}\n'})}),"\n",(0,r.jsx)(e.h4,{id:"5-shutdown-orchestration",children:"5. Shutdown Orchestration"}),"\n",(0,r.jsxs)(e.p,{children:["New ",(0,r.jsx)(e.code,{children:"ProxyServer::drain_and_shutdown()"})," method:"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-rust",children:'pub async fn drain_and_shutdown(&amp;mut self, timeout: Duration) -&gt; Result&lt;()&gt; {\n    // Phase 1: Enter drain mode\n    {\n        let mut state = self.drain_state.write().await;\n        *state = DrainState::Draining { started_at: Instant::now() };\n    }\n    info!("\ud83d\udd38 Entering DRAIN mode");\n\n    // Phase 2: Signal pattern runners to drain\n    self.router.pattern_manager.drain_all_patterns(timeout).await?;\n\n    // Phase 3: Wait for frontend connections to complete\n    let poll_interval = Duration::from_millis(100);\n    let deadline = Instant::now() + timeout;\n\n    while self.active_connections.load(Ordering::Relaxed) &gt; 0 {\n        if Instant::now() &gt; deadline {\n            warn!("\u23f1\ufe0f  Drain timeout, {} connections still active",\n                  self.active_connections.load(Ordering::Relaxed));\n            break;\n        }\n        sleep(poll_interval).await;\n    }\n\n    info!("\u2705 All frontend connections drained");\n\n    // Phase 4: Stop pattern runners\n    {\n        let mut state = self.drain_state.write().await;\n        *state = DrainState::Stopping;\n    }\n    info!("\ud83d\udd39 Entering STOPPING mode");\n\n    self.router.pattern_manager.stop_all_patterns().await?;\n\n    // Phase 5: Shutdown gRPC server\n    if let Some(tx) = self.shutdown_tx.take() {\n        let _ = tx.send(());\n    }\n\n    info!("\u2705 Proxy shutdown complete");\n    Ok(())\n}\n'})}),"\n",(0,r.jsx)(e.h3,{id:"admin-control-plane-integration",children:"Admin Control Plane Integration"}),"\n",(0,r.jsx)(e.p,{children:"Admin sends drain command via new RPC:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-protobuf",children:"service AdminControlPlane {\n  // ... existing RPCs ...\n\n  // Initiate graceful drain and shutdown\n  rpc DrainProxy(DrainProxyRequest) returns (DrainProxyResponse);\n}\n\nmessage DrainProxyRequest {\n  int32 timeout_seconds = 1;\n  string reason = 2;\n}\n\nmessage DrainProxyResponse {\n  bool success = 1;\n  string message = 2;\n}\n"})}),"\n",(0,r.jsx)(e.h3,{id:"timeout-handling",children:"Timeout Handling"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Default drain timeout"}),": 30 seconds"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Configurable via"}),": Admin request or environment variable ",(0,r.jsx)(e.code,{children:"PRISM_DRAIN_TIMEOUT_SECONDS"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Behavior on timeout"}),": Force shutdown with warning logs"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Per-component timeouts"}),":\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Frontend connections: 30s"}),"\n",(0,r.jsx)(e.li,{children:"Pattern runners: 30s"}),"\n",(0,r.jsx)(e.li,{children:"Backend operations: Determined by pattern runner logic"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"consequences",children:"Consequences"}),"\n",(0,r.jsx)(e.h3,{id:"positive",children:"Positive"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Zero data loss"}),": All in-flight operations complete before shutdown"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Graceful rolling updates"}),": Kubernetes can drain pods safely"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Better observability"}),": Clear state transitions logged"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Configurable timeouts"}),": Operators control drain duration"]}),"\n",(0,r.jsxs)(e.li,{children:["\u2705 ",(0,r.jsx)(e.strong,{children:"Backwards compatible"}),": Existing Stop behavior preserved as fallback"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"negative",children:"Negative"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["\u26a0\ufe0f ",(0,r.jsx)(e.strong,{children:"Increased shutdown time"}),": From instant to 30+ seconds"]}),"\n",(0,r.jsxs)(e.li,{children:["\u26a0\ufe0f ",(0,r.jsx)(e.strong,{children:"Complexity"}),": More state tracking and coordination logic"]}),"\n",(0,r.jsxs)(e.li,{children:["\u26a0\ufe0f ",(0,r.jsx)(e.strong,{children:"Potential timeout issues"}),": Slow backends can cause forced shutdowns"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"risks",children:"Risks"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Stuck drains"}),": If backend operations hang, timeout must force shutdown\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.em,{children:"Mitigation"}),": Configurable timeouts, forced kill after 2x timeout"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Connection leaks"}),": If connections aren't tracked properly\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.em,{children:"Mitigation"}),": Comprehensive integration tests with connection counting"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"implementation-plan",children:"Implementation Plan"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Phase 1"}),": Protobuf changes (lifecycle.proto, proxy_control_plane.proto)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Phase 2"}),": ProxyServer drain state and connection tracking"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Phase 3"}),": Pattern runner drain logic (plugin SDK changes)"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Phase 4"}),": Admin control plane drain RPC"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Phase 5"}),": Integration tests with real backend operations"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Phase 6"}),": Documentation and runbooks"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"testing-strategy",children:"Testing Strategy"}),"\n",(0,r.jsx)(e.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"State transitions (Running \u2192 Draining \u2192 Stopping \u2192 Stopped)"}),"\n",(0,r.jsx)(e.li,{children:"Connection counting accuracy"}),"\n",(0,r.jsx)(e.li,{children:"Timeout enforcement"}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Happy path"}),": Start proxy, send requests, drain, verify completion"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Timeout path"}),": Long-running operations, verify forced shutdown"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Connection rejection"}),": New connections during drain return UNAVAILABLE"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Pattern coordination"}),": Multiple pattern runners drain in parallel"]}),"\n"]}),"\n",(0,r.jsx)(e.h3,{id:"load-testing",children:"Load Testing"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"1000 concurrent connections"}),"\n",(0,r.jsx)(e.li,{children:"Trigger drain mid-load"}),"\n",(0,r.jsx)(e.li,{children:"Measure: completion rate, drain duration, error rate"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"RFC-016: Local Development Infrastructure (shutdown patterns)"}),"\n",(0,r.jsx)(e.li,{children:"ADR-048: Local Signoz Observability (shutdown tracing)"}),"\n",(0,r.jsx)(e.li,{children:"ADR-055: Control Plane Connectivity (admin \u2192 proxy communication)"}),"\n",(0,r.jsxs)(e.li,{children:["Kubernetes Pod Lifecycle: ",(0,r.jsx)(e.a,{href:"https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination",children:"https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-termination"})]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"related-work",children:"Related Work"}),"\n",(0,r.jsx)(e.p,{children:"Similar patterns in industry:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Envoy"}),": ",(0,r.jsx)(e.code,{children:"drain_listeners"})," + ",(0,r.jsx)(e.code,{children:"drain_connections_on_host_removal"})]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"gRPC Go"}),": ",(0,r.jsx)(e.code,{children:"GracefulStop()"})," drains connections before shutdown"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Kubernetes"}),": ",(0,r.jsx)(e.code,{children:"preStop"})," hooks + ",(0,r.jsx)(e.code,{children:"terminationGracePeriodSeconds"})]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}}}]);