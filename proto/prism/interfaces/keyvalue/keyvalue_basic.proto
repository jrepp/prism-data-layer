syntax = "proto3";

package prism.interfaces.keyvalue;

option go_package = "github.com/jrepp/prism-data-layer/proto/gen/prism/interfaces/keyvalue";

import "prism/common/types.proto";

// KeyValueBasicInterface defines core key-value operations.
// ALL backends implementing key-value storage MUST support this interface.
//
// This is Layer 1 (Backend Interface) in the three-layer architecture:
// - Layer 1: Thin backend interfaces (this file)
// - Layer 2: Pattern schemas with slots
// - Layer 3: Application APIs
//
// See MEMO-006 for interface decomposition rationale.
service KeyValueBasicInterface {
  // Set a key-value pair
  rpc Set(SetRequest) returns (SetResponse);

  // Get a value by key
  rpc Get(GetRequest) returns (GetResponse);

  // Delete a key
  rpc Delete(DeleteRequest) returns (DeleteResponse);

  // Check if a key exists
  rpc Exists(ExistsRequest) returns (ExistsResponse);
}

// Set request
message SetRequest {
  // Key to set
  string key = 1;

  // Value to store
  bytes value = 2;

  // Optional tags for filtering/metadata
  prism.common.Tags tags = 3;
}

// Set response
message SetResponse {
  // Success indicator
  bool success = 1;

  // Error message (if success = false)
  string error = 2;
}

// Get request
message GetRequest {
  // Key to retrieve
  string key = 1;
}

// Get response
message GetResponse {
  // Whether the key was found
  bool found = 1;

  // Value (only present if found = true)
  bytes value = 2;

  // Error message (if error occurred)
  string error = 3;
}

// Delete request
message DeleteRequest {
  // Key to delete
  string key = 1;
}

// Delete response
message DeleteResponse {
  // Success indicator
  bool success = 1;

  // Error message (if success = false)
  string error = 2;
}

// Exists request
message ExistsRequest {
  // Key to check
  string key = 1;
}

// Exists response
message ExistsResponse {
  // Whether the key exists
  bool exists = 1;

  // Error message (if error occurred)
  string error = 2;
}
