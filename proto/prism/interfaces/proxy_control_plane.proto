syntax = "proto3";

package prism.interfaces;

import "prism/interfaces/lifecycle.proto";

option go_package = "github.com/jrepp/prism-data-layer/proto/gen/prism/interfaces";

// ProxyControlPlane is the service that patterns connect to.
// The proxy runs this service, and patterns connect as clients.
//
// Architecture:
//   Proxy (Server) <──── Pattern (Client connects back)
//
// Flow:
//   1. Proxy launches pattern with: consumer-runner -proxy-addr localhost:9090
//   2. Pattern connects to ProxyControlPlane.ManagePattern()
//   3. Pattern sends RegisterRequest with its capabilities
//   4. Proxy sends commands (Initialize, Start, Stop) via stream
//   5. Pattern executes commands and sends responses back
service ProxyControlPlane {
  // ManagePattern establishes a bidirectional stream for pattern lifecycle management.
  // Pattern initiates connection and keeps it open for receiving commands.
  rpc ManagePattern(stream PatternMessage) returns (stream ProxyCommand);
}

// PatternMessage is sent from pattern to proxy
message PatternMessage {
  // Unique ID for correlating requests/responses
  string correlation_id = 1;

  oneof message {
    // Initial registration when pattern connects
    RegisterRequest register = 2;

    // Responses to proxy commands
    InitializeResponse initialize_response = 3;
    StartResponse start_response = 4;
    DrainResponse drain_response = 5;
    StopResponse stop_response = 6;
    HealthCheckResponse health_response = 7;

    // Periodic heartbeat to maintain connection
    HeartbeatMessage heartbeat = 8;
  }
}

// ProxyCommand is sent from proxy to pattern
message ProxyCommand {
  // Unique ID for correlating requests/responses
  string correlation_id = 1;

  oneof command {
    // Acknowledge successful registration
    RegisterResponse register_ack = 2;

    // Lifecycle commands
    InitializeRequest initialize = 3;
    StartRequest start = 4;
    DrainRequest drain = 5;
    StopRequest stop = 6;
    HealthCheckRequest health_check = 7;

    // Graceful shutdown initiated by proxy (equivalent to drain + stop)
    ShutdownRequest shutdown = 8;
  }
}

// RegisterRequest is sent by pattern when it first connects
message RegisterRequest {
  // Pattern name (e.g., "consumer", "multicast_registry")
  string pattern_name = 1;

  // Pattern version
  string pattern_version = 2;

  // Process ID for lifecycle tracking
  int32 process_id = 3;

  // Capabilities and interfaces implemented
  PatternMetadata metadata = 4;
}

// RegisterResponse acknowledges successful registration
message RegisterResponse {
  // Success indicator
  bool success = 1;

  // Error message if registration failed
  string error = 2;

  // Assigned pattern instance ID
  string instance_id = 3;
}

// HeartbeatMessage keeps connection alive and reports status
message HeartbeatMessage {
  // Current timestamp
  int64 timestamp = 1;

  // Quick health indicator (avoid full health check overhead)
  HealthStatus status = 2;
}

// ShutdownRequest tells pattern to gracefully terminate
message ShutdownRequest {
  // Graceful shutdown timeout in seconds
  int32 timeout_seconds = 1;

  // Reason for shutdown (for logging/debugging)
  string reason = 2;
}
