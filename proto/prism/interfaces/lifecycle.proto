syntax = "proto3";

package prism.interfaces;

option go_package = "github.com/jrepp/prism-data-layer/proto/gen/prism/interfaces";

import "google/protobuf/struct.proto";

// LifecycleInterface defines pattern lifecycle management operations.
// ALL pattern executors MUST implement this interface for initialization,
// health checks, and graceful shutdown.
//
// This is a cross-cutting interface used by all patterns regardless of their
// specific data model or backend interfaces.
//
// See MEMO-006 for interface decomposition rationale.
service LifecycleInterface {
  // Initialize the pattern with configuration
  rpc Initialize(InitializeRequest) returns (InitializeResponse);

  // Start the pattern (begin serving requests)
  rpc Start(StartRequest) returns (StartResponse);

  // Drain the pattern (prepare for shutdown, finish current work, reject new work)
  rpc Drain(DrainRequest) returns (DrainResponse);

  // Stop the pattern (graceful shutdown)
  rpc Stop(StopRequest) returns (StopResponse);

  // Check pattern health
  rpc HealthCheck(HealthCheckRequest) returns (HealthCheckResponse);
}

// Initialize request
message InitializeRequest {
  // Pattern name
  string name = 1;

  // Pattern version
  string version = 2;

  // Configuration as JSON
  google.protobuf.Struct config = 3;
}

// Initialize response
message InitializeResponse {
  // Success indicator
  bool success = 1;

  // Error message (if success = false)
  string error = 2;

  // Pattern metadata
  PatternMetadata metadata = 3;
}

// Pattern metadata
message PatternMetadata {
  // Pattern name
  string name = 1;

  // Pattern version
  string version = 2;

  // Interfaces implemented by this pattern (with proto metadata)
  repeated InterfaceDeclaration interfaces = 3;

  // Additional metadata
  map<string, string> extra = 4;
}

// InterfaceDeclaration describes an interface implementation with its proto source
// This replaces runtime introspection with compile-time declaration
message InterfaceDeclaration {
  // Interface name (e.g., "PubSubInterface", "KeyValueBasicInterface")
  string name = 1;

  // Proto file path relative to proto root (e.g., "prism/interfaces/pubsub/pubsub_basic.proto")
  string proto_file = 2;

  // Optional interface version (e.g., "v1", "v2", "1.0.0")
  string version = 3;

  // Optional SHA-256 hash of the proto file content for verification
  // Format: hex string (64 characters)
  string proto_hash = 4;

  // Additional interface-specific metadata
  map<string, string> metadata = 5;
}

// Start request
message StartRequest {
  // Empty for now, may include runtime options later
}

// Start response
message StartResponse {
  // Success indicator
  bool success = 1;

  // Error message (if success = false)
  string error = 2;

  // gRPC endpoint for data operations (if different from lifecycle endpoint)
  string data_endpoint = 3;
}

// Drain request tells pattern to enter drain mode:
// - Complete pending backend operations attached to current requests
// - Reject new requests (return UNAVAILABLE status)
// - Prepare for imminent shutdown
message DrainRequest {
  // Graceful drain timeout in seconds
  int32 timeout_seconds = 1;

  // Reason for drain (for logging/debugging)
  string reason = 2;
}

// Drain response
message DrainResponse {
  // Success indicator
  bool success = 1;

  // Error message (if success = false)
  string error = 2;

  // Number of pending operations that completed during drain
  int64 drained_operations = 3;

  // Number of pending operations that were aborted due to timeout
  int64 aborted_operations = 4;
}

// Stop request
message StopRequest {
  // Graceful shutdown timeout in seconds
  int32 timeout_seconds = 1;
}

// Stop response
message StopResponse {
  // Success indicator
  bool success = 1;

  // Error message (if success = false)
  string error = 2;
}

// Health check request
message HealthCheckRequest {
  // Empty for now
}

// Health check response
message HealthCheckResponse {
  // Health status
  HealthStatus status = 1;

  // Human-readable message
  string message = 2;

  // Detailed health metrics
  map<string, string> details = 3;
}

// Health status enumeration
enum HealthStatus {
  HEALTH_STATUS_UNSPECIFIED = 0;
  HEALTH_STATUS_HEALTHY = 1;      // Pattern is healthy
  HEALTH_STATUS_DEGRADED = 2;     // Pattern is running but unhealthy
  HEALTH_STATUS_UNHEALTHY = 3;    // Pattern is not functioning
}
