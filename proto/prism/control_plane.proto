syntax = "proto3";

package prism;

option go_package = "github.com/jrepp/prism-data-layer/proto/gen/prism";

import "prism/options.proto";

// ControlPlane service provides bidirectional gRPC protocol between
// prism-admin and managed components (prism-proxy, prism-launcher).
//
// References:
// - ADR-055: Proxy-Admin Control Plane Protocol
// - ADR-056: Launcher-Admin Control Plane Protocol
// - ADR-057: Prism-Launcher Refactoring
service ControlPlane {
  option (require_auth) = true;
  option (version) = "1.0.0";

  // ====================================================================
  // Proxy RPCs (ADR-055)
  // ====================================================================

  // RegisterProxy registers a proxy instance with admin on startup.
  rpc RegisterProxy(ProxyRegistration) returns (ProxyRegistrationAck) {
    option (idempotent) = true;
    option (timeout_ms) = 10000;
  }

  // AssignNamespace pushes namespace configuration from admin to proxy.
  rpc AssignNamespace(NamespaceAssignment) returns (NamespaceAssignmentAck) {
    option (idempotent) = true;
    option (timeout_ms) = 5000;
  }

  // CreateNamespace handles client-initiated namespace creation requests
  // that flow through proxy to admin.
  rpc CreateNamespace(CreateNamespaceRequest) returns (CreateNamespaceResponse) {
    option (idempotent) = false;
    option (timeout_ms) = 10000;
    option (required_permissions) = "admin";
  }

  // Heartbeat receives periodic health updates from proxies (every 30s).
  rpc Heartbeat(ProxyHeartbeat) returns (HeartbeatAck) {
    option (idempotent) = true;
    option (timeout_ms) = 5000;
  }

  // RevokeNamespace removes namespace assignment from proxy.
  rpc RevokeNamespace(NamespaceRevocation) returns (NamespaceRevocationAck) {
    option (idempotent) = true;
    option (timeout_ms) = 5000;
  }

  // ====================================================================
  // Launcher RPCs (ADR-056, ADR-057)
  // ====================================================================

  // RegisterLauncher registers a launcher instance with admin on startup.
  rpc RegisterLauncher(LauncherRegistration) returns (LauncherRegistrationAck) {
    option (idempotent) = true;
    option (timeout_ms) = 10000;
  }

  // AssignProcess pushes process assignment from admin to launcher.
  // Supports all process types: pattern, proxy, backend, utility.
  rpc AssignProcess(ProcessAssignment) returns (ProcessAssignmentAck) {
    option (idempotent) = true;
    option (timeout_ms) = 5000;
  }

  // LauncherHeartbeat receives periodic health updates from launchers (every 30s).
  rpc LauncherHeartbeat(LauncherHeartbeatRequest) returns (HeartbeatAck) {
    option (idempotent) = true;
    option (timeout_ms) = 5000;
  }

  // RevokeProcess removes process assignment from launcher with graceful timeout.
  rpc RevokeProcess(ProcessRevocation) returns (ProcessRevocationAck) {
    option (idempotent) = true;
    option (timeout_ms) = 35000;  // 30s graceful + 5s overhead
  }

  // ReportLifecycleEvent reports lifecycle events from launcher/proxy to admin.
  // Events include: starting, stopping, crashed, restarting, healthy, unhealthy
  rpc ReportLifecycleEvent(LifecycleEventRequest) returns (LifecycleEventAck) {
    option (idempotent) = true;
    option (timeout_ms) = 3000;
  }
}

// ====================================================================
// Proxy Registration Messages (ADR-055)
// ====================================================================

message ProxyRegistration {
  string proxy_id = 1;              // Unique proxy identifier (proxy-01)
  string address = 2;               // Proxy gRPC address (proxy-01.prism.local:8980)
  string region = 3;                // Deployment region (us-west-2)
  string version = 4;               // Proxy version (0.1.0)
  repeated string capabilities = 5; // Supported patterns (keyvalue, pubsub)
  map<string, string> metadata = 6; // Custom labels
}

message ProxyRegistrationAck {
  bool success = 1;
  string message = 2;
  repeated NamespaceAssignment initial_namespaces = 3; // Pre-assigned namespaces
  repeated PartitionRange partition_ranges = 4;        // Assigned partition ranges
}

message NamespaceAssignment {
  string namespace = 1;
  int32 partition_id = 2;       // Partition ID (0-255)
  NamespaceConfig config = 3;   // Full namespace configuration
  int64 version = 4;            // Config version for idempotency
}

message NamespaceConfig {
  map<string, BackendConfig> backends = 1;
  map<string, PatternConfig> patterns = 2;
  AuthConfig auth = 3;
  map<string, string> metadata = 4;
}

message BackendConfig {
  string backend_type = 1;      // redis, kafka, nats, postgres, memstore
  string connection_string = 2;
  map<string, string> credentials = 3;
  map<string, string> options = 4;
}

message PatternConfig {
  string pattern_name = 1;      // keyvalue, pubsub, multicast_registry
  map<string, string> settings = 2;
  repeated string required_interfaces = 3; // Interfaces this pattern requires
}

message AuthConfig {
  bool enabled = 1;
  string provider = 2;          // oidc, jwt, mtls
  map<string, string> options = 3;
}

message CreateNamespaceRequest {
  string namespace = 1;
  string requesting_proxy = 2;  // Proxy ID handling client request
  NamespaceConfig config = 3;
  string principal = 4;         // Authenticated user creating namespace
}

message CreateNamespaceResponse {
  bool success = 1;
  string message = 2;
  int32 assigned_partition = 3;
  string assigned_proxy = 4;    // Proxy that will handle this namespace
}

message ProxyHeartbeat {
  string proxy_id = 1;
  map<string, NamespaceHealth> namespace_health = 2;
  ResourceUsage resources = 3;
  int64 timestamp = 4;
}

message NamespaceHealth {
  int32 active_sessions = 1;
  int64 requests_per_second = 2;
  string status = 3;            // healthy, degraded, unhealthy
}

message ResourceUsage {
  float cpu_percent = 1;
  int64 memory_mb = 2;
  int32 goroutine_count = 3;
  int64 uptime_seconds = 4;
}

message NamespaceAssignmentAck {
  bool success = 1;
  string message = 2;
}

message NamespaceRevocation {
  string proxy_id = 1;
  string namespace = 2;
  int32 graceful_timeout_seconds = 3; // Timeout before force removal (default 30s)
}

message NamespaceRevocationAck {
  bool success = 1;
  string message = 2;
  int64 revoked_at = 3;         // Unix timestamp when namespace removed
}

message PartitionRange {
  int32 start = 1;              // Inclusive
  int32 end = 2;                // Inclusive
}

// ====================================================================
// Launcher Registration Messages (ADR-056, ADR-057)
// ====================================================================

message LauncherRegistration {
  string launcher_id = 1;           // Unique launcher identifier (launcher-01)
  string address = 2;               // Launcher gRPC address (launcher-01.prism.local:7070)
  string region = 3;                // Deployment region (us-west-2)
  string version = 4;               // Launcher version (0.1.0)
  repeated string capabilities = 5; // Supported process types (pattern, proxy, backend, utility)
  int32 max_processes = 6;          // Maximum concurrent processes
  repeated string process_types = 7; // Process types this launcher supports
  map<string, string> metadata = 8; // Custom labels
}

message LauncherRegistrationAck {
  bool success = 1;
  string message = 2;
  repeated ProcessAssignment initial_processes = 3; // Pre-assigned processes
  int32 assigned_capacity = 4;                      // Number of process slots assigned
}

message ProcessAssignment {
  string process_id = 1;            // Unique process identifier
  string process_type = 2;          // pattern, proxy, backend, utility
  string namespace = 3;             // Target namespace (if applicable)
  ProcessConfig config = 4;         // Process-specific configuration
  int64 version = 5;                // Config version for idempotency
}

message ProcessAssignmentAck {
  bool success = 1;
  string message = 2;
}

message ProcessConfig {
  // Common fields (all process types)
  string binary = 1;
  repeated string args = 2;
  map<string, string> env = 3;
  int32 port = 4;
  int32 health_port = 5;
  string log_level = 6;

  // Type-specific configs (only one should be set based on process_type)
  PatternProcessConfig pattern = 10;
  ProxyProcessConfig proxy = 11;
  BackendProcessConfig backend = 12;
  UtilityProcessConfig utility = 13;
}

message PatternProcessConfig {
  string pattern_type = 1;           // keyvalue, pubsub, multicast_registry
  string isolation_level = 2;        // none, namespace, session
  map<string, BackendConfig> slots = 3; // Backend configurations for pattern slots
  map<string, string> settings = 4;  // Pattern-specific settings
}

message ProxyProcessConfig {
  string admin_endpoint = 1;
  int32 control_port = 2;
  int32 data_port = 3;
  string proxy_id = 4;
  repeated int32 partition_ranges = 5; // Partition IDs this proxy handles
}

message BackendProcessConfig {
  string backend_type = 1;           // redis, kafka, nats, postgres
  string connection_string = 2;
  map<string, string> credentials = 3;
  map<string, string> driver_options = 4;
}

message UtilityProcessConfig {
  string utility_type = 1;           // log-collector, metrics-exporter, health-monitor
  map<string, string> settings = 2;
  repeated string target_processes = 3; // Process IDs this utility monitors/manages
}

message LauncherHeartbeatRequest {
  string launcher_id = 1;
  map<string, ProcessHealth> process_health = 2;
  LauncherResourceUsage resources = 3;
  int64 timestamp = 4;
}

message ProcessHealth {
  string status = 1;                // running, starting, stopping, failed, stopped
  int32 pid = 2;                    // Process ID
  int32 restart_count = 3;          // Number of restarts
  int32 error_count = 4;            // Cumulative error count
  int64 memory_mb = 5;              // Memory usage in MB
  int64 uptime_seconds = 6;         // Seconds since process started
  string last_error = 7;            // Last error message (if any)
  float cpu_percent = 8;            // CPU utilization percentage
}

message LauncherResourceUsage {
  int32 process_count = 1;          // Current process count
  int32 max_processes = 2;          // Maximum capacity
  int64 total_memory_mb = 3;        // Total memory used by all processes
  float cpu_percent = 4;            // CPU utilization percentage
  int32 available_slots = 5;        // Remaining process slots
}

message ProcessRevocation {
  string launcher_id = 1;
  string process_id = 2;
  int32 graceful_timeout_seconds = 3; // Timeout before force kill (default 30s)
}

message ProcessRevocationAck {
  bool success = 1;
  string message = 2;
  int64 stopped_at = 3;             // Unix timestamp when process stopped
  int32 exit_code = 4;              // Process exit code
}

// ====================================================================
// Common Messages
// ====================================================================

message HeartbeatAck {
  bool success = 1;
  string message = 2;
  int64 server_timestamp = 3;   // Server's current timestamp for clock sync
}

// ====================================================================
// Lifecycle Event Messages
// ====================================================================

message LifecycleEventRequest {
  string component_id = 1;       // launcher-01, proxy-01, etc.
  string component_type = 2;     // launcher, proxy
  string event_type = 3;         // starting, stopping, stopped, crashed, restarting, healthy, unhealthy
  string message = 4;            // Optional human-readable message
  int64 timestamp = 5;           // Unix timestamp
  map<string, string> metadata = 6; // Additional context (signal_name, exit_code, etc.)
}

message LifecycleEventAck {
  bool success = 1;
  string message = 2;
}
