# Example: IoT Device Management
# Use case: Manage IoT devices with selective firmware updates and command broadcasting

pattern: multicast-registry
name: iot-devices

# Backend slot configuration
slots:
  # Registry slot: Track device metadata (online status, firmware version, location)
  registry:
    backend: redis
    config:
      addr: "localhost:6379"
      password: ""
      db: 0
      prefix: "iot:device:"
      ttl_default: 300  # 5 minutes (heartbeat-based)

  # Messaging slot: Broadcast commands to devices (firmware updates, config changes)
  messaging:
    backend: nats
    config:
      servers: ["nats://localhost:4222"]
      topic_prefix: "devices."
      delivery: at-most-once  # Fire-and-forget commands
      retry_attempts: 2
      retry_delay: 100ms

# Pattern-specific configuration
config:
  pattern_name: iot-device-management
  default_ttl: 300s
  max_identities: 10000  # Support up to 10k concurrent devices
  max_filter_depth: 5
  max_clauses: 20

# Usage examples:

# 1. Register a device (called by device on startup/heartbeat)
#    POST /api/patterns/iot-devices/register
#    {
#      "identity": "device-sensor-42",
#      "metadata": {
#        "status": "online",
#        "firmware_version": "1.2.3",
#        "location": "warehouse-a",
#        "device_type": "temperature_sensor",
#        "last_heartbeat": "2025-10-11T10:30:00Z"
#      },
#      "ttl": 300
#    }

# 2. Enumerate devices by firmware version (find devices needing update)
#    POST /api/patterns/iot-devices/enumerate
#    {
#      "filter": {
#        "firmware_version": "1.2.3",
#        "status": "online"
#      }
#    }
#    Response: ["device-sensor-42", "device-sensor-43", ...]

# 3. Multicast firmware update command to outdated devices
#    POST /api/patterns/iot-devices/multicast
#    {
#      "filter": {
#        "firmware_version": "1.2.3",
#        "status": "online"
#      },
#      "payload": {
#        "command": "firmware_update",
#        "version": "1.3.0",
#        "url": "https://updates.example.com/firmware-1.3.0.bin"
#      }
#    }

# 4. Enumerate devices by location
#    POST /api/patterns/iot-devices/enumerate
#    {
#      "filter": {
#        "location": "warehouse-a",
#        "device_type": "temperature_sensor"
#      }
#    }

# 5. Broadcast restart command to all devices in specific location
#    POST /api/patterns/iot-devices/multicast
#    {
#      "filter": {
#        "location": "warehouse-a"
#      },
#      "payload": {
#        "command": "restart",
#        "delay_seconds": 10
#      }
#    }

# Monitoring:
# - Track registered_devices gauge (current count)
# - Track multicast_delivered_count histogram
# - Track enumerate_latency_ms histogram
# - Alert on device_heartbeat_missing (TTL expiration rate)
