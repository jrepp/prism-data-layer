name: Pattern Acceptance Tests

on:
  push:
    branches: [main]
    paths:
      - 'patterns/**'
      - 'pkg/drivers/**'
      - 'pkg/plugin/**'
      - 'tests/acceptance/patterns/**'
      - 'tests/acceptance/framework/**'
      - 'tests/acceptance/suites/**'
      - '.github/workflows/pattern-acceptance-tests.yml'
      - '.github/workflows/acceptance-test-pattern.yml'
  pull_request:
    branches: [main]
    paths:
      - 'patterns/**'
      - 'pkg/drivers/**'
      - 'pkg/plugin/**'
      - 'tests/acceptance/patterns/**'
      - 'tests/acceptance/framework/**'
      - 'tests/acceptance/suites/**'
      - '.github/workflows/pattern-acceptance-tests.yml'
      - '.github/workflows/acceptance-test-pattern.yml'
  merge_group:
    types: [checks_requested]
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress runs for the same PR/branch/merge group
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.merge_group.head_sha || github.ref }}
  cancel-in-progress: true

jobs:
  # Generate protobuf code (required for all patterns)
  generate-proto:
    name: Generate Protobuf Code
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protoc-gen-go
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Install buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate protobuf code
        run: make proto-go

      - name: Upload generated proto code
        uses: actions/upload-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/
          retention-days: 1

  # Test patterns in parallel using matrix strategy
  test-patterns:
    name: ${{ matrix.pattern }} Pattern
    needs: generate-proto
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        pattern:
          - keyvalue
          - consumer
          - producer
          - claimcheck
          - unified  # Producer/Consumer integration tests
          # Add new patterns here as they are implemented:
          # - multicast-registry
          # - timeseries
          # - graph

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: |
          if [ -d "patterns/${{ matrix.pattern }}" ]; then
            cd patterns/${{ matrix.pattern }}
            go mod download
          fi

      - name: Build pattern module
        run: |
          if [ -d "patterns/${{ matrix.pattern }}" ]; then
            cd patterns/${{ matrix.pattern }}
            go build ./...
          fi

      - name: Run ${{ matrix.pattern }} pattern tests with coverage
        run: |
          cd tests/acceptance/patterns/${{ matrix.pattern }}
          go test -v -race -coverprofile=coverage.out -covermode=atomic -timeout 15m ./...
          go tool cover -func=coverage.out | tee coverage.txt
          COVERAGE=$(grep total coverage.txt | awk '{print $3}')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        env:
          PRISM_TEST_QUIET: "1"

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-pattern-${{ matrix.pattern }}
          path: tests/acceptance/patterns/${{ matrix.pattern }}/coverage.out
          retention-days: 7

      - name: Add test summary
        if: always()
        run: |
          STATUS="${{ job.status == 'success' && '‚úÖ Pass' || '‚ùå Fail' }}"
          {
            echo "## ${{ matrix.pattern }} Pattern Tests"
            echo "| Pattern | Status | Coverage |"
            echo "|---------|--------|----------|"
            echo "| ${{ matrix.pattern }} | $STATUS | ${{ env.COVERAGE }} |"
          } >> $GITHUB_STEP_SUMMARY

  # Generate comprehensive compliance report
  generate-compliance-report:
    name: Generate Compliance Report
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test-patterns
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-pattern-*
          path: build/coverage-reports

      - name: Run tests with compliance reporting
        run: |
          cd tests/acceptance
          go test -v -json ./patterns/... > test-results.json 2>&1 || true
        env:
          PRISM_TEST_COLLECT_RESULTS: "1"
          PRISM_TEST_QUIET: "1"

      - name: Build compliance report tool
        run: |
          cd tests/acceptance/cmd/compliance-report
          go build -o compliance-report .

      - name: Generate compliance reports
        run: |
          # Check if test results exist
          if [ -f tests/acceptance/test-logs/compliance-report.json ]; then
            tests/acceptance/cmd/compliance-report/compliance-report \
              --input tests/acceptance/test-logs/compliance-report.json \
              --output test-logs \
              --format all \
              --details
          else
            echo "‚ö†Ô∏è No compliance report JSON found, generating from test results"
            # Fallback to generating basic summary
          fi

      - name: Upload compliance artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pattern-compliance-report
          path: |
            test-logs/pattern-compliance.md
            test-logs/pattern-compliance.json
          retention-days: 30

      - name: Generate summary report using compliance tool
        run: |
          # Build summary table from coverage artifacts
          {
            echo "# üìä Pattern Acceptance Test Summary"
            echo ""
            echo "Generated from individual pattern test runs and coverage reports."
            echo ""
            echo "| Pattern | Status | Coverage | Backends Tested |"
            echo "|---------|--------|----------|-----------------|"
          } > summary.md

          # Function to get coverage percentage
          get_coverage() {
            local file=$1
            if [ -f "$file" ]; then
              go tool cover -func="$file" 2>/dev/null | grep total | awk '{print $3}' || echo "N/A"
            else
              echo "N/A"
            fi
          }

          # Function to get status from existence of coverage file
          get_status() {
            local file=$1
            if [ -f "$file" ]; then
              echo "‚úÖ Pass"
            else
              echo "‚ùå Fail"
            fi
          }

          # Check each pattern
          PATTERNS=(
            "keyvalue:KeyValue:MemStore, Redis, PostgreSQL"
            "producer:Producer:NATS (stateless/stateful)"
            "consumer:Consumer:NATS (stateless/stateful/DLQ)"
            "claimcheck:ClaimCheck:NATS + MinIO"
            "unified:Unified:NATS (producer+consumer)"
          )

          ALL_SUCCESS=true
          for pattern_info in "${PATTERNS[@]}"; do
            IFS=':' read -r pattern display backends <<< "$pattern_info"
            coverage_file="build/coverage-reports/coverage-pattern-${pattern}/coverage.out"

            coverage=$(get_coverage "$coverage_file")
            status=$(get_status "$coverage_file")

            if [[ "$status" == "‚ùå Fail" ]]; then
              ALL_SUCCESS=false
            fi

            echo "| $display | $status | $coverage | $backends |" >> summary.md
          done

          # Add overall status and architecture info
          {
            echo ""
            if [ "$ALL_SUCCESS" = true ]; then
              echo "## ‚úÖ All Pattern Tests Passed"
            else
              echo "## ‚ùå Some Pattern Tests Failed"
            fi
            echo ""
            echo "## Pattern Compliance"
            echo ""
            echo "Each pattern is tested against ALL compatible backends automatically:"
            echo ""
            echo "- **Consumer Pattern**: Tested with NATS (3 variants: stateless, stateful, with DLQ)"
            echo "- **Producer Pattern**: Tested with NATS (2 variants: stateless, stateful with deduplication)"
            echo "- **ClaimCheck Pattern**: Tested with NATS (messaging) + MinIO (object storage)"
            echo "- **Unified Tests**: Integration tests coordinating producer and consumer patterns"
            echo ""
            echo "## How It Works"
            echo ""
            echo "1. **Backend Registration**: Each pattern test directory registers compatible backends"
            echo "2. **Automatic Discovery**: Test framework discovers all backends supporting required pattern"
            echo "3. **Parallel Execution**: Tests run in parallel across all backend combinations"
            echo "4. **Result Aggregation**: Coverage and results collected from each test run"
            echo ""
            echo "See individual test job outputs for detailed per-backend results."
          } >> summary.md

          cat summary.md >> $GITHUB_STEP_SUMMARY

      - name: Display summary
        run: |
          echo "üìä Pattern Acceptance Test Summary:"
          cat $GITHUB_STEP_SUMMARY

  # Upload pattern coverage to Codecov
  codecov-upload:
    name: Upload Pattern Coverage to Codecov
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: test-patterns
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all pattern coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-pattern-*
          path: build/coverage-reports

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: >-
            build/coverage-reports/coverage-pattern-keyvalue/coverage.out,
            build/coverage-reports/coverage-pattern-consumer/coverage.out,
            build/coverage-reports/coverage-pattern-producer/coverage.out,
            build/coverage-reports/coverage-pattern-claimcheck/coverage.out,
            build/coverage-reports/coverage-pattern-unified/coverage.out
          flags: acceptance,patterns
          name: pattern-acceptance-coverage
          fail_ci_if_error: false
          verbose: true

  # Status check for pattern acceptance tests (required for merge)
  pattern-acceptance-status:
    name: Pattern Acceptance Status
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: test-patterns
    if: always()

    steps:
      - name: Check pattern test status
        run: |
          # GitHub Actions sets needs.<job-id>.result for each matrix job
          # We need to check if ANY job failed
          RESULTS='${{ toJSON(needs.test-patterns.result) }}'

          echo "Pattern Test Results: $RESULTS"

          if [[ "$RESULTS" != "success" ]]; then
            echo "‚ùå Pattern acceptance tests failed"
            exit 1
          else
            echo "‚úÖ All pattern acceptance tests passed"
          fi
