name: Pattern Acceptance Tests

on:
  push:
    branches: [main]
    paths:
      - 'patterns/**'
      - 'pkg/drivers/**'
      - 'pkg/plugin/**'
      - 'tests/acceptance/patterns/**'
      - 'tests/acceptance/framework/**'
      - 'tests/acceptance/suites/**'
      - '.github/workflows/pattern-acceptance-tests.yml'
      - '.github/workflows/acceptance-test-pattern.yml'
  pull_request:
    branches: [main]
    paths:
      - 'patterns/**'
      - 'pkg/drivers/**'
      - 'pkg/plugin/**'
      - 'tests/acceptance/patterns/**'
      - 'tests/acceptance/framework/**'
      - 'tests/acceptance/suites/**'
      - '.github/workflows/pattern-acceptance-tests.yml'
      - '.github/workflows/acceptance-test-pattern.yml'
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Generate protobuf code (required for all patterns)
  generate-proto:
    name: Generate Protobuf Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protoc-gen-go
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Install buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate protobuf code
        run: make proto-go

      - name: Upload generated proto code
        uses: actions/upload-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/
          retention-days: 1

  # Test patterns in parallel using matrix strategy
  test-patterns:
    name: ${{ matrix.pattern }} Pattern
    needs: generate-proto
    runs-on: ubuntu-latest
    timeout-minutes: 15

    strategy:
      fail-fast: false
      matrix:
        pattern:
          - keyvalue
          - consumer
          # Add new patterns here as they are implemented:
          # - multicast-registry
          # - timeseries
          # - graph

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run ${{ matrix.pattern }} pattern tests
        run: |
          cd tests/acceptance/patterns/${{ matrix.pattern }}
          go test -v -timeout 15m ./...
        env:
          PRISM_TEST_QUIET: "1"

      - name: Generate coverage
        run: |
          cd tests/acceptance/patterns/${{ matrix.pattern }}
          go test -coverprofile=coverage.out -timeout 15m ./...
          go tool cover -func=coverage.out | tee coverage.txt
          COVERAGE=$(grep total coverage.txt | awk '{print $3}')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-pattern-${{ matrix.pattern }}
          path: tests/acceptance/patterns/${{ matrix.pattern }}/coverage.out
          retention-days: 7

      - name: Add test summary
        if: always()
        run: |
          STATUS="${{ job.status == 'success' && '‚úÖ Pass' || '‚ùå Fail' }}"
          {
            echo "## ${{ matrix.pattern }} Pattern Tests"
            echo "| Pattern | Status | Coverage |"
            echo "|---------|--------|----------|"
            echo "| ${{ matrix.pattern }} | $STATUS | ${{ env.COVERAGE }} |"
          } >> $GITHUB_STEP_SUMMARY

  # Generate comprehensive summary for all pattern tests
  pattern-acceptance-summary:
    name: Pattern Acceptance Summary
    runs-on: ubuntu-latest
    needs: test-patterns
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-pattern-*
          path: build/coverage-reports

      - name: Generate summary report
        run: |
          {
            echo "# üìä Pattern Acceptance Test Summary"
            echo ""
            echo "| Pattern | Status | Coverage | Backends Tested |"
            echo "|---------|--------|----------|-----------------|"
          } > summary.md

          # Check each pattern's results
          ALL_SUCCESS=true

          # KeyValue pattern
          if [ -f build/coverage-reports/coverage-pattern-keyvalue/coverage.out ]; then
            KEYVALUE_COVERAGE=$(go tool cover -func=build/coverage-reports/coverage-pattern-keyvalue/coverage.out | grep total | awk '{print $3}')
            KEYVALUE_STATUS="‚úÖ Pass"
          else
            KEYVALUE_COVERAGE="N/A"
            KEYVALUE_STATUS="‚ùå Fail"
            ALL_SUCCESS=false
          fi
          echo "| KeyValue | $KEYVALUE_STATUS | $KEYVALUE_COVERAGE | MemStore, Redis |" >> summary.md

          # Consumer pattern
          if [ -f build/coverage-reports/coverage-pattern-consumer/coverage.out ]; then
            CONSUMER_COVERAGE=$(go tool cover -func=build/coverage-reports/coverage-pattern-consumer/coverage.out | grep total | awk '{print $3}')
            CONSUMER_STATUS="‚úÖ Pass"
          else
            CONSUMER_COVERAGE="N/A"
            CONSUMER_STATUS="‚ùå Fail"
            ALL_SUCCESS=false
          fi
          echo "| Consumer | $CONSUMER_STATUS | $CONSUMER_COVERAGE | NATS+MemStore, NATS+Redis, Kafka+PostgreSQL |" >> summary.md

          # Add overall status
          {
            echo ""
            if [ "$ALL_SUCCESS" = true ]; then
              echo "## ‚úÖ All Pattern Tests Passed"
            else
              echo "## ‚ùå Some Pattern Tests Failed"
            fi
            echo ""
            echo "## Architecture"
            echo ""
            echo "Pattern acceptance tests use the **unified testing framework**:"
            echo "- Each pattern implements standard interfaces (KeyValueBasicInterface, PubSubBasicInterface, etc.)"
            echo "- Pattern tests run against ALL registered backends that support the required interfaces"
            echo "- Tests are written once and run automatically against multiple backend combinations"
            echo "- This ensures pattern behavior is consistent across all supported backends"
            echo ""
            echo "### Test Execution Model"
            echo ""
            echo "Tests use table-driven approach with automatic backend discovery:"
            echo "1. Framework discovers all backends implementing required interfaces"
            echo "2. For each backend combination, framework:"
            echo "   - Starts containers (testcontainers)"
            echo "   - Initializes backend plugins"
            echo "   - Runs test suite"
            echo "   - Collects results"
            echo "   - Tears down containers"
            echo "3. Results aggregated across all backend combinations"
            echo ""
            echo "View detailed results in the artifacts for each job."
          } >> summary.md

          cat summary.md >> $GITHUB_STEP_SUMMARY

      - name: Display summary
        run: |
          echo "üìä Pattern Acceptance Test Summary:"
          cat $GITHUB_STEP_SUMMARY

  # Status check for pattern acceptance tests (required for merge)
  pattern-acceptance-status:
    name: Pattern Acceptance Status
    runs-on: ubuntu-latest
    needs: test-patterns
    if: always()

    steps:
      - name: Check pattern test status
        run: |
          # GitHub Actions sets needs.<job-id>.result for each matrix job
          # We need to check if ANY job failed
          RESULTS='${{ toJSON(needs.test-patterns.result) }}'

          echo "Pattern Test Results: $RESULTS"

          if [[ "$RESULTS" != "success" ]]; then
            echo "‚ùå Pattern acceptance tests failed"
            exit 1
          else
            echo "‚úÖ All pattern acceptance tests passed"
          fi
