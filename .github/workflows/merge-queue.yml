name: Merge Queue

on:
  merge_group:
    types: [checks_requested]

# Cancel in-progress runs for the same merge group
concurrency:
  group: ${{ github.workflow }}-${{ github.event.merge_group.head_sha }}
  cancel-in-progress: true

jobs:
  # Job 0: Generate protobuf code once (new)
  generate-proto:
    name: Generate Protobuf Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protoc-gen-go
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Install buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate protobuf code
        run: make proto-go

      - name: Upload generated proto code
        uses: actions/upload-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/
          retention-days: 1

  # Job 1: Lint Rust code
  lint-rust:
    name: Lint Rust
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            prism-proxy/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('prism-proxy/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Format Rust code
        run: cd prism-proxy && cargo fmt --all -- --check

      - name: Lint Rust with Clippy
        run: cd prism-proxy && cargo clippy -- -D warnings

  # Job 2: Lint Python code
  lint-python:
    name: Lint Python
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Lint Python with ruff
        run: |
          uv run ruff check tooling/
          uv run ruff format --check tooling/

  # Job 3: Lint Go code (parallel by category)
  lint-go:
    name: Lint Go (${{ matrix.category }})
    runs-on: ubuntu-latest
    needs: generate-proto

    strategy:
      fail-fast: false
      matrix:
        category: [critical, security, style, quality]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \
            | sh -s -- -b $(go env GOPATH)/bin v2.5.0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ matrix.category }}-${{ hashFiles('.golangci.yml') }}
          restore-keys: |
            ${{ runner.os }}-golangci-lint-${{ matrix.category }}-

      - name: Lint Go - ${{ matrix.category }}
        run: |
          uv run tooling/parallel_lint.py \
            --categories ${{ matrix.category }} \
            --fail-fast

  # Job 4: Test Rust proxy
  test-proxy:
    name: Test Rust Proxy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            prism-proxy/target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('prism-proxy/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-

      - name: Run Rust tests
        run: cd prism-proxy && cargo test --lib --verbose

  # Job 5: Test Go drivers and patterns
  test-patterns:
    name: Test ${{ matrix.name }}
    runs-on: ubuntu-latest
    needs: generate-proto

    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "MemStore Driver"
            path: "pkg/drivers/memstore"
          - name: "Redis Driver"
            path: "pkg/drivers/redis"
          - name: "NATS Driver"
            path: "pkg/drivers/nats"
          - name: "Consumer Pattern"
            path: "patterns/consumer"
          - name: "Producer Pattern"
            path: "patterns/producer"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/

      - name: Run tests for ${{ matrix.name }}
        run: cd ${{ matrix.path }} && go test -v -cover -race ./...

  # Job 6: Integration tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: generate-proto

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/

      - name: Run integration tests
        run: cd tests/integration && go test -v -timeout 5m -race ./...

  # Job 7: Validate documentation
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: docusaurus/package-lock.json

      - name: Install Node dependencies
        run: cd docusaurus && npm ci

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Validate documentation
        run: uv run tooling/validate_docs.py

  # Job 8: Build all components
  build:
    name: Build All Components
    runs-on: ubuntu-latest
    needs: [generate-proto, lint-rust, lint-python, lint-go, test-proxy, test-patterns, test-integration]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            prism-proxy/target/
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('prism-proxy/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-
            ${{ runner.os }}-cargo-

      - name: Build all components
        run: make build

  # Job 9: Merge queue status check (required for merge)
  merge-queue-status:
    name: Merge Queue Status
    runs-on: ubuntu-latest
    needs: [lint-rust, lint-python, lint-go, test-proxy, test-patterns, test-integration, validate-docs, build]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint-rust.result }}" != "success" ]] || \
             [[ "${{ needs.lint-python.result }}" != "success" ]] || \
             [[ "${{ needs.lint-go.result }}" != "success" ]] || \
             [[ "${{ needs.test-proxy.result }}" != "success" ]] || \
             [[ "${{ needs.test-patterns.result }}" != "success" ]] || \
             [[ "${{ needs.test-integration.result }}" != "success" ]] || \
             [[ "${{ needs.validate-docs.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Merge queue pipeline failed"
            exit 1
          else
            echo "✅ Merge queue pipeline passed - ready to merge"
          fi
