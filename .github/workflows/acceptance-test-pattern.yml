name: Pattern Acceptance Test

# Reusable workflow for testing pattern executables
# Each pattern gets tested with multiple backend configurations

on:
  workflow_call:
    inputs:
      pattern:
        description: 'Pattern name (e.g., keyvalue, consumer, multicast-registry)'
        required: true
        type: string
      test-suite:
        description: 'Test suite to run (e.g., basic, ttl, concurrent)'
        required: false
        type: string
        default: 'all'
      timeout-minutes:
        description: 'Timeout in minutes'
        required: false
        type: number
        default: 15

jobs:
  test-pattern:
    name: Test ${{ inputs.pattern }}
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}

    strategy:
      fail-fast: false
      matrix:
        # Define different backend configurations for each pattern
        # Each pattern can be tested with multiple backend combinations
        include:
          # KeyValue pattern configurations
          - pattern: keyvalue
            backend: memstore
            config-file: examples/keyvalue-memstore.yaml
          - pattern: keyvalue
            backend: redis
            config-file: examples/keyvalue-redis.yaml

          # Consumer pattern configurations
          - pattern: consumer
            backend: nats-memstore
            config-file: examples/consumer-nats-memstore.yaml
          - pattern: consumer
            backend: nats-redis
            config-file: examples/consumer-nats-redis.yaml

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Build the pattern executable
      - name: Build ${{ inputs.pattern }} pattern executable
        run: |
          cd patterns/${{ inputs.pattern }}/cmd/${{ inputs.pattern }}-runner
          go build -o ${{ inputs.pattern }}-runner .
          chmod +x ${{ inputs.pattern }}-runner
          mv ${{ inputs.pattern }}-runner $GITHUB_WORKSPACE/build/binaries/

      # Start required backend services via testcontainers in the test itself
      # The test framework will handle container lifecycle

      # Run pattern acceptance tests
      - name: Run ${{ inputs.pattern }} acceptance tests with ${{ matrix.backend }}
        run: |
          cd tests/acceptance/patterns/${{ inputs.pattern }}
          go test -v -timeout ${{ inputs.timeout-minutes }}m \
            -run Test.*Pattern$ \
            ./...
        env:
          PRISM_TEST_QUIET: "1"
          PATTERN_NAME: ${{ inputs.pattern }}
          PATTERN_BACKEND: ${{ matrix.backend }}

      # Generate coverage report
      - name: Generate coverage for ${{ inputs.pattern }}-${{ matrix.backend }}
        run: |
          cd tests/acceptance/patterns/${{ inputs.pattern }}
          go test -coverprofile=coverage.out -timeout ${{ inputs.timeout-minutes }}m ./...
          go tool cover -func=coverage.out | tee coverage.txt
          COVERAGE=$(grep total coverage.txt | awk '{print $3}')
          echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV

      # Upload coverage artifact
      - name: Upload coverage for ${{ inputs.pattern }}-${{ matrix.backend }}
        uses: actions/upload-artifact@v4
        with:
          name: coverage-pattern-${{ inputs.pattern }}-${{ matrix.backend }}
          path: tests/acceptance/patterns/${{ inputs.pattern }}/coverage.out
          retention-days: 7

      # Upload test results (JSON format)
      - name: Upload test results for ${{ inputs.pattern }}-${{ matrix.backend }}
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: results-pattern-${{ inputs.pattern }}-${{ matrix.backend }}
          path: tests/acceptance/patterns/${{ inputs.pattern }}/test-results.json
          if-no-files-found: ignore
          retention-days: 7

      # Add to summary
      - name: Add test summary
        if: always()
        run: |
          STATUS="${{ job.status == 'success' && '✅ Pass' || '❌ Fail' }}"
          {
            echo "| ${{ inputs.pattern }} | ${{ matrix.backend }} | $STATUS | ${{ env.COVERAGE }} |"
          } >> $GITHUB_STEP_SUMMARY
