name: Acceptance Tests

on:
  push:
    branches: [main]
    paths:
      - 'patterns/**'
      - 'tests/acceptance/**'
      - 'tooling/parallel_acceptance_test.py'
      - '.github/workflows/acceptance-tests.yml'
  pull_request:
    branches: [main]
    paths:
      - 'patterns/**'
      - 'tests/acceptance/**'
      - 'tooling/parallel_acceptance_test.py'
      - '.github/workflows/acceptance-tests.yml'
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Generate protobuf code (required for acceptance tests)
  generate-proto:
    name: Generate Protobuf Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protoc-gen-go
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Install buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate protobuf code
        run: make proto-go

      - name: Upload generated proto code
        uses: actions/upload-artifact@v4
        with:
          name: proto-generated
          path: patterns/core/gen/
          retention-days: 1

  # Parallel acceptance tests with matrix report
  acceptance-tests-parallel:
    name: Acceptance Tests (Parallel)
    runs-on: ubuntu-latest
    needs: generate-proto

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: patterns/core/gen/

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run parallel acceptance tests
        id: acceptance_tests
        run: |
          mkdir -p build/reports

          # Run tests and capture output
          uv run tooling/parallel_acceptance_test.py --format terminal > build/reports/terminal-output.txt || true

          # Generate Markdown report
          uv run tooling/parallel_acceptance_test.py --format markdown --output build/reports/acceptance-matrix.md

          # Generate JSON report for programmatic access
          uv run tooling/parallel_acceptance_test.py --format json --output build/reports/acceptance-results.json

          # Check if tests passed (exit code)
          if uv run tooling/parallel_acceptance_test.py; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=‚úÖ" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=‚ùå" >> $GITHUB_OUTPUT
          fi
        env:
          PRISM_TEST_QUIET: "1"

      - name: Display matrix in job summary
        if: always()
        run: |
          echo "# ${{ steps.acceptance_tests.outputs.emoji }} Acceptance Test Matrix Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat build/reports/acceptance-matrix.md >> $GITHUB_STEP_SUMMARY

      - name: Upload terminal output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-terminal-output
          path: build/reports/terminal-output.txt
          retention-days: 7

      - name: Upload Markdown report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-matrix-report
          path: build/reports/acceptance-matrix.md
          retention-days: 30

      - name: Upload JSON report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: acceptance-json-results
          path: build/reports/acceptance-results.json
          retention-days: 30

      - name: Comment PR with matrix report
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const reportPath = 'build/reports/acceptance-matrix.md';

            if (!fs.existsSync(reportPath)) {
              console.log('Report file not found, skipping comment');
              return;
            }

            const report = fs.readFileSync(reportPath, 'utf8');
            const emoji = '${{ steps.acceptance_tests.outputs.emoji }}';
            const status = '${{ steps.acceptance_tests.outputs.status }}';

            // Build the PR comment body
            const body = [
              `## ${emoji} Acceptance Test Matrix Report`,
              '',
              report,
              '',
              '---',
              '<details>',
              '<summary>üìä View detailed test logs</summary>',
              '',
              '[Download terminal output](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})',
              '',
              '</details>',
              '',
              `**Status:** ${status === 'success' ? '‚úÖ All tests passed' : '‚ùå Some tests failed'}`,
              '**Commit:** ${{ github.sha }}',
              '**Workflow:** [View workflow run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})'
            ].join('\n');

            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Acceptance Test Matrix Report')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Fail job if tests failed
        if: steps.acceptance_tests.outputs.status == 'failure'
        run: |
          echo "‚ùå Acceptance tests failed"
          exit 1

  # Status check for acceptance tests (required for merge)
  acceptance-status:
    name: Acceptance Status Check
    runs-on: ubuntu-latest
    needs: [acceptance-tests-parallel]
    if: always()

    steps:
      - name: Check acceptance test status
        run: |
          if [[ "${{ needs.acceptance-tests-parallel.result }}" != "success" ]]; then
            echo "‚ùå Acceptance tests failed"
            exit 1
          else
            echo "‚úÖ Acceptance tests passed"
          fi
