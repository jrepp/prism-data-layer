name: Acceptance Tests

on:
  push:
    branches: [main]
    paths:
      - 'patterns/**'
      - 'tests/acceptance/**'
      - 'tooling/parallel_acceptance_test.py'
      - '.github/workflows/acceptance-tests.yml'
  pull_request:
    branches: [main]
    paths:
      - 'patterns/**'
      - 'tests/acceptance/**'
      - 'tooling/parallel_acceptance_test.py'
      - '.github/workflows/acceptance-tests.yml'
  workflow_dispatch:  # Allow manual trigger

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Generate protobuf code (required for acceptance tests)
  generate-proto:
    name: Generate Protobuf Code
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protoc-gen-go
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Install buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate protobuf code
        run: make proto-go

      - name: Upload generated proto code
        uses: actions/upload-artifact@v4
        with:
          name: proto-generated
          path: patterns/core/gen/
          retention-days: 1

  # Interfaces acceptance tests (tests all backends via framework)
  test-interfaces:
    uses: ./.github/workflows/acceptance-test-backend.yml
    needs: generate-proto
    with:
      backend: interfaces
      timeout-minutes: 15

  # Redis acceptance tests
  test-redis:
    uses: ./.github/workflows/acceptance-test-backend.yml
    needs: generate-proto
    with:
      backend: redis
      timeout-minutes: 15

  # NATS acceptance tests
  test-nats:
    uses: ./.github/workflows/acceptance-test-backend.yml
    needs: generate-proto
    with:
      backend: nats
      timeout-minutes: 15

  # Generate comprehensive summary report
  acceptance-summary:
    name: Acceptance Summary
    runs-on: ubuntu-latest
    needs: [test-interfaces, test-redis, test-nats]
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: results-*
          path: build/test-results

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: build/coverage-reports

      - name: Generate summary report
        run: |
          # Overall status
          INTERFACES_STATUS="${{ needs.test-interfaces.result }}"
          REDIS_STATUS="${{ needs.test-redis.result }}"
          NATS_STATUS="${{ needs.test-nats.result }}"

          # Interfaces
          if [[ "$INTERFACES_STATUS" == "success" ]]; then
            INTERFACES_STATUS_TEXT="‚úÖ Pass"
          else
            INTERFACES_STATUS_TEXT="‚ùå Fail"
          fi
          if [ -f build/coverage-reports/coverage-interfaces/coverage.out ]; then
            INTERFACES_COVERAGE=$(go tool cover -func=build/coverage-reports/coverage-interfaces/coverage.out | grep total | awk '{print $3}')
          else
            INTERFACES_COVERAGE="N/A"
          fi

          # Redis
          if [[ "$REDIS_STATUS" == "success" ]]; then
            REDIS_STATUS_TEXT="‚úÖ Pass"
          else
            REDIS_STATUS_TEXT="‚ùå Fail"
          fi
          if [ -f build/coverage-reports/coverage-redis/coverage.out ]; then
            REDIS_COVERAGE=$(go tool cover -func=build/coverage-reports/coverage-redis/coverage.out | grep total | awk '{print $3}')
          else
            REDIS_COVERAGE="N/A"
          fi

          # NATS
          if [[ "$NATS_STATUS" == "success" ]]; then
            NATS_STATUS_TEXT="‚úÖ Pass"
          else
            NATS_STATUS_TEXT="‚ùå Fail"
          fi
          if [ -f build/coverage-reports/coverage-nats/coverage.out ]; then
            NATS_COVERAGE=$(go tool cover -func=build/coverage-reports/coverage-nats/coverage.out | grep total | awk '{print $3}')
          else
            NATS_COVERAGE="N/A"
          fi

          # Write summary
          {
            echo "# üìä Acceptance Test Summary"
            echo ""
            if [[ "$INTERFACES_STATUS" == "success" && "$REDIS_STATUS" == "success" && "$NATS_STATUS" == "success" ]]; then
              echo "## ‚úÖ All Tests Passed"
            else
              echo "## ‚ùå Some Tests Failed"
            fi
            echo ""
            echo "| Backend | Status | Coverage |"
            echo "|---------|--------|----------|"
            echo "| Interfaces | $INTERFACES_STATUS_TEXT | $INTERFACES_COVERAGE |"
            echo "| Redis | $REDIS_STATUS_TEXT | $REDIS_COVERAGE |"
            echo "| NATS | $NATS_STATUS_TEXT | $NATS_COVERAGE |"
            echo ""
            echo "View detailed results in the artifacts for each job."
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Display summary
        run: |
          echo "üìä Acceptance Test Summary:"
          cat "$GITHUB_STEP_SUMMARY"

  # Status check for acceptance tests (required for merge)
  acceptance-status:
    name: Acceptance Status Check
    runs-on: ubuntu-latest
    needs: [test-interfaces, test-redis, test-nats]
    if: always()

    steps:
      - name: Check acceptance test status
        run: |
          INTERFACES="${{ needs.test-interfaces.result }}"
          REDIS="${{ needs.test-redis.result }}"
          NATS="${{ needs.test-nats.result }}"

          echo "Test Results:"
          echo "  Interfaces: $INTERFACES"
          echo "  Redis: $REDIS"
          echo "  NATS: $NATS"

          if [[ "$INTERFACES" != "success" || "$REDIS" != "success" || "$NATS" != "success" ]]; then
            echo "‚ùå Acceptance tests failed"
            exit 1
          else
            echo "‚úÖ All acceptance tests passed"
          fi
