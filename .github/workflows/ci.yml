name: CI

on:
  push:
    branches: [main]
    paths-ignore:
      - 'docs-cms/**'
      - 'docusaurus/**'
      - 'tooling/build_docs.py'
      - 'tooling/validate_docs.py'
      - '**/*.md'
      - '.github/workflows/docs.yml'
  pull_request:
    branches: [main]
    paths-ignore:
      - 'docs-cms/**'
      - 'docusaurus/**'
      - 'tooling/build_docs.py'
      - 'tooling/validate_docs.py'
      - '**/*.md'
      - '.github/workflows/docs.yml'
  merge_group:
    types: [checks_requested]

# Cancel in-progress runs for the same PR/branch/merge group
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.event.merge_group.head_sha || github.ref }}
  cancel-in-progress: true

jobs:
  # Job 0: Generate protobuf code once (new)
  generate-proto:
    name: Generate Protobuf Code
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install protoc-gen-go
        run: |
          go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
          go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest

      - name: Install buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate protobuf code
        run: make proto-go

      - name: Upload generated proto code
        uses: actions/upload-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/
          retention-days: 1

  # Job 1: Lint Rust code
  lint-rust:
    name: Lint Rust
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            prism-proxy/target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('prism-proxy/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Format Rust code
        run: cd prism-proxy && cargo fmt --all -- --check

      - name: Lint Rust with Clippy
        run: cd prism-proxy && cargo clippy -- -D warnings

  # Job 2: Lint Python code
  lint-python:
    name: Lint Python
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Lint Python with ruff
        run: |
          uv run ruff check tooling/
          uv run ruff format --check tooling/

  # Job 2b: Lint Protobuf files
  lint-proto:
    name: Lint Protobuf
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for breaking change detection

      - name: Install buf
        uses: bufbuild/buf-setup-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Lint protobuf files
        run: cd proto && buf lint

      - name: Check protobuf formatting
        run: cd proto && buf format --diff --exit-code

      - name: Check for breaking changes
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          cd proto
          buf breaking --against "../.git#branch=origin/main,subdir=proto" || echo "⚠️ Breaking changes detected (non-blocking)"

  # Job 2c: Lint GitHub Actions workflows
  lint-github-actions:
    name: Lint GitHub Actions
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run actionlint
        uses: reviewdog/action-actionlint@v1
        with:
          reporter: github-check
          level: error
          fail_on_error: true

  # Job 3: Lint Go code (parallel by category)
  lint-go:
    name: Lint Go (${{ matrix.category }})
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: generate-proto

    strategy:
      fail-fast: false
      matrix:
        category: [critical, security, style, quality]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh \
            | sh -s -- -b $(go env GOPATH)/bin v2.5.0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache golangci-lint
        uses: actions/cache@v4
        with:
          path: ~/.cache/golangci-lint
          key: ${{ runner.os }}-golangci-lint-${{ matrix.category }}-${{ hashFiles('.golangci.yml') }}
          restore-keys: |
            ${{ runner.os }}-golangci-lint-${{ matrix.category }}-

      - name: Lint Go - ${{ matrix.category }}
        run: |
          uv run tooling/parallel_lint.py \
            --categories ${{ matrix.category }} \
            --fail-fast

  # Job 2: Test Rust proxy
  test-proxy:
    name: Test Rust Proxy
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            prism-proxy/target/
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('prism-proxy/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin --force

      - name: Run Rust tests with coverage
        run: cd prism-proxy && cargo tarpaulin --lib --verbose --out Xml --output-dir ../

      - name: Upload Rust coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-rust
          path: cobertura.xml
          retention-days: 7
          if-no-files-found: warn

  # Job 3: Test Go drivers and patterns (including acceptance tests)
  test-patterns:
    name: Test ${{ matrix.name }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: generate-proto

    strategy:
      fail-fast: false
      matrix:
        include:
          # Unit tests for drivers
          - name: "MemStore Driver"
            path: "pkg/drivers/memstore"
            artifact: "memstore"
            type: "unit"
          - name: "Redis Driver"
            path: "pkg/drivers/redis"
            artifact: "redis"
            type: "unit"
          - name: "NATS Driver"
            path: "pkg/drivers/nats"
            artifact: "nats"
            type: "unit"
          # Unit tests for patterns
          - name: "Consumer Pattern"
            path: "patterns/consumer"
            artifact: "consumer"
            type: "unit"
          - name: "Producer Pattern"
            path: "patterns/producer"
            artifact: "producer"
            type: "unit"
          - name: "Multicast Registry Pattern"
            path: "patterns/multicast_registry"
            artifact: "multicast-registry"
            type: "unit"
          # Acceptance tests for patterns
          - name: "KeyValue Acceptance"
            path: "tests/acceptance/patterns/keyvalue"
            artifact: "acceptance-keyvalue"
            type: "acceptance"
            pattern_dir: "patterns/keyvalue"
          - name: "Consumer Acceptance"
            path: "tests/acceptance/patterns/consumer"
            artifact: "acceptance-consumer"
            type: "acceptance"
            pattern_dir: "patterns/consumer"
          - name: "Producer Acceptance"
            path: "tests/acceptance/patterns/producer"
            artifact: "acceptance-producer"
            type: "acceptance"
            pattern_dir: "patterns/producer"
          - name: "ClaimCheck Acceptance"
            path: "tests/acceptance/patterns/claimcheck"
            artifact: "acceptance-claimcheck"
            type: "acceptance"
            pattern_dir: "patterns/claimcheck"
          - name: "Unified Acceptance"
            path: "tests/acceptance/patterns/unified"
            artifact: "acceptance-unified"
            type: "acceptance"
            pattern_dir: "patterns/unified"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies for acceptance tests
        if: matrix.type == 'acceptance' && matrix.pattern_dir != ''
        run: |
          if [ -d "${{ matrix.pattern_dir }}" ]; then
            cd ${{ matrix.pattern_dir }}
            go mod download
          fi

      - name: Build pattern module for acceptance tests
        if: matrix.type == 'acceptance' && matrix.pattern_dir != ''
        run: |
          if [ -d "${{ matrix.pattern_dir }}" ]; then
            cd ${{ matrix.pattern_dir }}
            go build ./...
          fi

      - name: Run tests with coverage for ${{ matrix.name }}
        run: |
          cd ${{ matrix.path }}
          go test -v -race -coverprofile=coverage.out -covermode=atomic -timeout 15m ./...
          go tool cover -func=coverage.out | grep total | awk '{print "Coverage: " $3}'
        env:
          PRISM_TEST_QUIET: "1"

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.artifact }}
          path: ${{ matrix.path }}/coverage.out
          retention-days: 7

  # Job 4: Integration tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: generate-proto

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/

      - name: Run integration tests with coverage
        run: |
          cd tests/integration
          go test -v -race -coverprofile=coverage.out -covermode=atomic -timeout 5m ./...
          go tool cover -func=coverage.out | grep total | awk '{print "Integration Coverage: " $3}'

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-integration
          path: tests/integration/coverage.out
          retention-days: 7

  # Job 6: Validate documentation
  validate-docs:
    name: Validate Documentation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: docusaurus/package-lock.json

      - name: Install Node dependencies
        run: cd docusaurus && npm ci

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Validate documentation
        run: uv run tooling/validate_docs.py

  # Job 7: Build all components
  build:
    name: Build All Components
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [generate-proto, lint-rust, lint-python, lint-proto, lint-github-actions, lint-go, test-proxy, test-patterns, test-integration]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.21'

      - name: Setup protoc
        uses: arduino/setup-protoc@v3
        with:
          version: '25.x'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download generated proto code
        uses: actions/download-artifact@v4
        with:
          name: proto-generated
          path: pkg/plugin/gen/

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            prism-proxy/target/
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('prism-proxy/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-
            ${{ runner.os }}-cargo-

      - name: Build all components
        run: make build

      - name: Upload all binaries
        uses: actions/upload-artifact@v4
        with:
          name: prism-binaries
          path: build/binaries/
          retention-days: 7

  # Job 8: Coverage summary
  coverage-summary:
    name: Coverage Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [test-proxy, test-patterns, test-integration]
    if: always()

    steps:
      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: build/coverage-reports

      - name: Display coverage summary
        run: |
          {
            echo "## Coverage Summary"
            echo ""
            echo "| Component | Coverage Files |"
            echo "|-----------|----------------|"
            for dir in build/coverage-reports/*/; do
              component=$(basename "$dir")
              if [ -f "$dir/coverage.out" ]; then
                echo "| $component | ✅ Present |"
              else
                echo "| $component | ❌ Missing |"
              fi
            done
          } >> "$GITHUB_STEP_SUMMARY"

  # Job 9: Upload to Codecov
  codecov-upload:
    name: Upload Coverage to Codecov
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test-proxy, test-patterns, test-integration]
    if: always()

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all coverage reports
        uses: actions/download-artifact@v4
        with:
          pattern: coverage-*
          path: build/coverage-reports

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: >-
            build/coverage-reports/coverage-rust/cobertura.xml,
            build/coverage-reports/coverage-memstore/coverage.out,
            build/coverage-reports/coverage-redis/coverage.out,
            build/coverage-reports/coverage-nats/coverage.out,
            build/coverage-reports/coverage-consumer/coverage.out,
            build/coverage-reports/coverage-producer/coverage.out,
            build/coverage-reports/coverage-multicast-registry/coverage.out,
            build/coverage-reports/coverage-integration/coverage.out,
            build/coverage-reports/coverage-acceptance-keyvalue/coverage.out,
            build/coverage-reports/coverage-acceptance-consumer/coverage.out,
            build/coverage-reports/coverage-acceptance-producer/coverage.out,
            build/coverage-reports/coverage-acceptance-claimcheck/coverage.out,
            build/coverage-reports/coverage-acceptance-unified/coverage.out
          flags: unittests,integration,acceptance
          name: prism-coverage
          fail_ci_if_error: false
          verbose: true

  # Job 10: CI status check (required for merge)
  ci-status:
    name: CI Status Check
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [lint-rust, lint-python, lint-proto, lint-github-actions, lint-go, test-proxy, test-patterns, test-integration, validate-docs, build]
    if: always()

    steps:
      - name: Check all jobs status
        id: ci_check
        run: |
          if [[ "${{ needs.lint-rust.result }}" != "success" ]] || \
             [[ "${{ needs.lint-python.result }}" != "success" ]] || \
             [[ "${{ needs.lint-proto.result }}" != "success" ]] || \
             [[ "${{ needs.lint-github-actions.result }}" != "success" ]] || \
             [[ "${{ needs.lint-go.result }}" != "success" ]] || \
             [[ "${{ needs.test-proxy.result }}" != "success" ]] || \
             [[ "${{ needs.test-patterns.result }}" != "success" ]] || \
             [[ "${{ needs.test-integration.result }}" != "success" ]] || \
             [[ "${{ needs.validate-docs.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ CI pipeline failed"
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ CI pipeline passed"
            echo "status=success" >> $GITHUB_OUTPUT
          fi

      - name: send-ntfy-notification
        if: always() && vars.NTFY_TOPIC != ''
        run: |
          STATUS_EMOJI="${{ steps.ci_check.outputs.status == 'success' && '✅' || '❌' }}"
          STATUS_TEXT="${{ steps.ci_check.outputs.status == 'success' && 'Passed' || 'Failed' }}"
          PRIORITY="${{ steps.ci_check.outputs.status == 'success' && 'default' || 'high' }}"
          TAG="${{ steps.ci_check.outputs.status == 'success' && 'white_check_mark' || 'x' }}"

          # Build job results summary
          JOBS="Lint Rust: ${{ needs.lint-rust.result == 'success' && '✅' || '❌' }}
          Lint Python: ${{ needs.lint-python.result == 'success' && '✅' || '❌' }}
          Lint Protobuf: ${{ needs.lint-proto.result == 'success' && '✅' || '❌' }}
          Lint GitHub Actions: ${{ needs.lint-github-actions.result == 'success' && '✅' || '❌' }}
          Lint Go: ${{ needs.lint-go.result == 'success' && '✅' || '❌' }}
          Test Proxy: ${{ needs.test-proxy.result == 'success' && '✅' || '❌' }}
          Test Patterns: ${{ needs.test-patterns.result == 'success' && '✅' || '❌' }}
          Test Integration: ${{ needs.test-integration.result == 'success' && '✅' || '❌' }}
          Validate Docs: ${{ needs.validate-docs.result == 'success' && '✅' || '❌' }}
          Build: ${{ needs.build.result == 'success' && '✅' || '❌' }}"

          curl -H "Title: ${STATUS_EMOJI} CI Pipeline ${STATUS_TEXT}" \
               -H "Priority: ${PRIORITY}" \
               -H "Tags: ${TAG},ci" \
               -H "Click: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
               -d "Repository: ${{ github.repository }}
          Branch: ${{ github.ref_name }}
          Commit: ${GITHUB_SHA:0:7}
          Author: ${{ github.actor }}

          Job Results:
          ${JOBS}" \
               https://ntfy.sh/${{ vars.NTFY_TOPIC }}
