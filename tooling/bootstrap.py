#!/usr/bin/env python3
"""Bootstrap Prism development environment.

Creates ~/.prism directory with:
- Default configuration
- Plugin manifests
- Token cache placeholder

Usage:
    uv run tooling/bootstrap.py
"""

from pathlib import Path


def bootstrap():
    """Bootstrap the Prism environment."""
    prism_dir = Path.home() / ".prism"
    plugins_dir = prism_dir / "plugins"

    print("ðŸš€ Bootstrapping Prism environment...")

    # Create directories
    prism_dir.mkdir(parents=True, exist_ok=True)
    plugins_dir.mkdir(parents=True, exist_ok=True)

    # Create default config
    config_path = prism_dir / "config.yaml"
    if not config_path.exists():
        config_path.write_text("""# Prism CLI Configuration
# Auto-generated by bootstrap.py

admin:
  # Admin API endpoint
  endpoint: localhost:8981

  # OIDC authentication (for device code flow)
  oidc:
    issuer: https://idp.example.com
    client_id: prism-cli
    device_auth_endpoint: /oauth/device/code
    token_endpoint: /oauth/token

plugins:
  # Standard plugin images (ADR-040)
  postgres:
    image: prism/postgres-plugin:latest
    port: 9090
    backends: [postgres]

  kafka:
    image: prism/kafka-plugin:latest
    port: 9091
    backends: [kafka]

  redis:
    image: prism/redis-plugin:latest
    port: 9092
    backends: [redis]

logging:
  # Log level: debug, info, warn, error
  level: info
""")
        print(f"  âœ“ Created config: {config_path}")
    else:
        print(f"  â€¢ Config exists: {config_path}")

    # Create token placeholder (will be populated by OIDC flow)
    token_path = prism_dir / "token"
    if not token_path.exists():
        token_path.write_text("# OIDC token will be cached here after authentication\n")
        print(f"  âœ“ Created token cache: {token_path}")
    else:
        print(f"  â€¢ Token cache exists: {token_path}")

    # Create plugin manifests
    postgres_manifest = plugins_dir / "postgres.yaml"
    if not postgres_manifest.exists():
        postgres_manifest.write_text("""# PostgreSQL Plugin Manifest
# Based on RFC-011 and ADR-025

name: postgres
image: prism/postgres-plugin:latest
port: 9090

backends:
  - postgres

capabilities:
  - keyvalue
  - transactions
  - sql_queries

health_check:
  port: 9090
  path: /health

environment:
  DATABASE_URL: postgres://prism:password@localhost:5432/prism
  PRISM_LOG_LEVEL: info
""")
        print(f"  âœ“ Created postgres manifest: {postgres_manifest}")
    else:
        print(f"  â€¢ Postgres manifest exists: {postgres_manifest}")

    kafka_manifest = plugins_dir / "kafka.yaml"
    if not kafka_manifest.exists():
        kafka_manifest.write_text("""# Kafka Plugin Manifest
# Based on RFC-011 and ADR-025

name: kafka
image: prism/kafka-plugin:latest
port: 9091

backends:
  - kafka

capabilities:
  - timeseries
  - event_streaming
  - pub_sub

health_check:
  port: 9091
  path: /health

environment:
  KAFKA_BROKERS: localhost:9092
  KAFKA_TOPIC: events
  KAFKA_CONSUMER_GROUP: prism-consumers
  PRISM_LOG_LEVEL: info
""")
        print(f"  âœ“ Created kafka manifest: {kafka_manifest}")
    else:
        print(f"  â€¢ Kafka manifest exists: {kafka_manifest}")

    redis_manifest = plugins_dir / "redis.yaml"
    if not redis_manifest.exists():
        redis_manifest.write_text("""# Redis Plugin Manifest
# Based on RFC-011 and ADR-010

name: redis
image: prism/redis-plugin:latest
port: 9092

backends:
  - redis

capabilities:
  - cache
  - keyvalue
  - ttl

health_check:
  port: 9092
  path: /health

environment:
  REDIS_ADDRESS: localhost:6379
  REDIS_DATABASE: 0
  PRISM_LOG_LEVEL: info
""")
        print(f"  âœ“ Created redis manifest: {redis_manifest}")
    else:
        print(f"  â€¢ Redis manifest exists: {redis_manifest}")

    print()
    print("âœ… Prism environment bootstrapped successfully!")
    print()
    print("Next steps:")
    print("  1. Edit ~/.prism/config.yaml to configure admin endpoint")
    print("  2. Run: uv run --with prismctl prism --help")
    print("  3. Build plugins: cd plugins && make build")
    print()
    print(f"Configuration directory: {prism_dir}")


if __name__ == "__main__":
    bootstrap()
